
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005abc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800620c  0800620c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800620c  0800620c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800620c  0800620c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  2000007c  08006290  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c7c  08006290  00020c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dadf  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241b  00000000  00000000  0002db84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00030d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018510  00000000  00000000  000319f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8e8  00000000  00000000  00049f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba28  00000000  00000000  000587e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  000e4264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005bb0 	.word	0x08005bb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005bb0 	.word	0x08005bb0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b41      	ldr	r3, [pc, #260]	; (800028c <MX_GPIO_Init+0x11c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a40      	ldr	r2, [pc, #256]	; (800028c <MX_GPIO_Init+0x11c>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b3e      	ldr	r3, [pc, #248]	; (800028c <MX_GPIO_Init+0x11c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b3b      	ldr	r3, [pc, #236]	; (800028c <MX_GPIO_Init+0x11c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a3a      	ldr	r2, [pc, #232]	; (800028c <MX_GPIO_Init+0x11c>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b38      	ldr	r3, [pc, #224]	; (800028c <MX_GPIO_Init+0x11c>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b35      	ldr	r3, [pc, #212]	; (800028c <MX_GPIO_Init+0x11c>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a34      	ldr	r2, [pc, #208]	; (800028c <MX_GPIO_Init+0x11c>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b32      	ldr	r3, [pc, #200]	; (800028c <MX_GPIO_Init+0x11c>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b2f      	ldr	r3, [pc, #188]	; (800028c <MX_GPIO_Init+0x11c>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a2e      	ldr	r2, [pc, #184]	; (800028c <MX_GPIO_Init+0x11c>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b2c      	ldr	r3, [pc, #176]	; (800028c <MX_GPIO_Init+0x11c>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 80001e4:	2200      	movs	r2, #0
 80001e6:	219e      	movs	r1, #158	; 0x9e
 80001e8:	4829      	ldr	r0, [pc, #164]	; (8000290 <MX_GPIO_Init+0x120>)
 80001ea:	f001 fe03 	bl	8001df4 <HAL_GPIO_WritePin>
                          |DIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2120      	movs	r1, #32
 80001f2:	4828      	ldr	r0, [pc, #160]	; (8000294 <MX_GPIO_Init+0x124>)
 80001f4:	f001 fdfe 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fe:	4826      	ldr	r0, [pc, #152]	; (8000298 <MX_GPIO_Init+0x128>)
 8000200:	f001 fdf8 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800020a:	4b24      	ldr	r3, [pc, #144]	; (800029c <MX_GPIO_Init+0x12c>)
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <MX_GPIO_Init+0x120>)
 800021a:	f001 fc67 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 800021e:	239e      	movs	r3, #158	; 0x9e
 8000220:	613b      	str	r3, [r7, #16]
                          |DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000222:	2301      	movs	r3, #1
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022a:	2302      	movs	r3, #2
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	4816      	ldr	r0, [pc, #88]	; (8000290 <MX_GPIO_Init+0x120>)
 8000236:	f001 fc59 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800023a:	2320      	movs	r3, #32
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2302      	movs	r3, #2
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	4810      	ldr	r0, [pc, #64]	; (8000294 <MX_GPIO_Init+0x124>)
 8000252:	f001 fc4b 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025c:	2301      	movs	r3, #1
 800025e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	2300      	movs	r3, #0
 8000262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	2302      	movs	r3, #2
 8000266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000268:	f107 0310 	add.w	r3, r7, #16
 800026c:	4619      	mov	r1, r3
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <MX_GPIO_Init+0x128>)
 8000270:	f001 fc3c 	bl	8001aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2100      	movs	r1, #0
 8000278:	2028      	movs	r0, #40	; 0x28
 800027a:	f001 fb50 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800027e:	2028      	movs	r0, #40	; 0x28
 8000280:	f001 fb69 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8000284:	bf00      	nop
 8000286:	3720      	adds	r7, #32
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	40011000 	.word	0x40011000
 8000294:	40010800 	.word	0x40010800
 8000298:	40010c00 	.word	0x40010c00
 800029c:	10110000 	.word	0x10110000

080002a0 <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <get_char+0x48>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <get_char+0x4c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d013      	beq.n	80002da <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <get_char+0x4c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <get_char+0x50>)
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
 80002ba:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <get_char+0x4c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3301      	adds	r3, #1
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <get_char+0x4c>)
 80002c4:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <get_char+0x4c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002ce:	db02      	blt.n	80002d6 <get_char+0x36>
			busyRX=0;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <get_char+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	e000      	b.n	80002dc <get_char+0x3c>
	}
	else{
		return 0;
 80002da:	2300      	movs	r3, #0
	}
}
 80002dc:	4618      	mov	r0, r3
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200000a0 	.word	0x200000a0
 80002ec:	200000a4 	.word	0x200000a4
 80002f0:	200004d4 	.word	0x200004d4

080002f4 <fsend>:
void fsend(char* format, ...){
 80002f4:	b40f      	push	{r0, r1, r2, r3}
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b0a4      	sub	sp, #144	; 0x90
 80002fa:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 80002fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000300:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs, format, arglist);
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800030c:	4618      	mov	r0, r3
 800030e:	f004 fb95 	bl	8004a3c <vsiprintf>
	va_end(arglist);
	pid = emptyTX;
 8000312:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <fsend+0xdc>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800031e:	e016      	b.n	800034e <fsend+0x5a>
		Buf_TX[pid] = tmp_rs[i];
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	f107 010c 	add.w	r1, r7, #12
 8000326:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800032a:	440a      	add	r2, r1
 800032c:	7811      	ldrb	r1, [r2, #0]
 800032e:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <fsend+0xe0>)
 8000330:	54d1      	strb	r1, [r2, r3]
		pid++;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	3301      	adds	r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
		if(pid >= BUF_TX_LEN){
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800033e:	db01      	blt.n	8000344 <fsend+0x50>
			pid = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000348:	3301      	adds	r3, #1
 800034a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff04 	bl	8000160 <strlen>
 8000358:	4602      	mov	r2, r0
 800035a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800035e:	429a      	cmp	r2, r3
 8000360:	d8de      	bhi.n	8000320 <fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <fsend+0xdc>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <fsend+0xe4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	429a      	cmp	r2, r3
 8000370:	d122      	bne.n	80003b8 <fsend+0xc4>
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <fsend+0xe8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037c:	2b80      	cmp	r3, #128	; 0x80
 800037e:	d11b      	bne.n	80003b8 <fsend+0xc4>
		emptyTX = pid;
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	4a13      	ldr	r2, [pc, #76]	; (80003d0 <fsend+0xdc>)
 8000384:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <fsend+0xe4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <fsend+0xe0>)
 800038c:	5cd3      	ldrb	r3, [r2, r3]
 800038e:	70fb      	strb	r3, [r7, #3]
		busyTX++;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <fsend+0xe4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <fsend+0xe4>)
 8000398:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <fsend+0xe4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003a2:	db02      	blt.n	80003aa <fsend+0xb6>
			busyTX = 0;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <fsend+0xe4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80003aa:	1cfb      	adds	r3, r7, #3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	480a      	ldr	r0, [pc, #40]	; (80003dc <fsend+0xe8>)
 80003b2:	f003 fe85 	bl	80040c0 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80003b6:	e002      	b.n	80003be <fsend+0xca>
	}
	else{
		emptyTX = pid;
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <fsend+0xdc>)
 80003bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003be:	b662      	cpsie	i
}
 80003c0:	bf00      	nop
	}
	__enable_irq();
}
 80003c2:	bf00      	nop
 80003c4:	3790      	adds	r7, #144	; 0x90
 80003c6:	46bd      	mov	sp, r7
 80003c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr
 80003d0:	20000098 	.word	0x20000098
 80003d4:	200000d4 	.word	0x200000d4
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	20000c24 	.word	0x20000c24

080003e0 <doner>:

void doner(char *ord){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 80003e8:	6879      	ldr	r1, [r7, #4]
 80003ea:	4858      	ldr	r0, [pc, #352]	; (800054c <doner+0x16c>)
 80003ec:	f7ff feae 	bl	800014c <strcmp>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <doner+0x24>

		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi %d.\r\n",Difference);
 80003f6:	4b56      	ldr	r3, [pc, #344]	; (8000550 <doner+0x170>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4619      	mov	r1, r3
 80003fc:	4855      	ldr	r0, [pc, #340]	; (8000554 <doner+0x174>)
 80003fe:	f7ff ff79 	bl	80002f4 <fsend>
	}
	else{
		fsend("WRCMD\r\n");
	}

}
 8000402:	e09e      	b.n	8000542 <doner+0x162>
	else if(strcmp("FCHKH;", ord) == 0){
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	4854      	ldr	r0, [pc, #336]	; (8000558 <doner+0x178>)
 8000408:	f7ff fea0 	bl	800014c <strcmp>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d106      	bne.n	8000420 <doner+0x40>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi %d.\r\n",PWM_pulses_count);
 8000412:	4b52      	ldr	r3, [pc, #328]	; (800055c <doner+0x17c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4619      	mov	r1, r3
 8000418:	4851      	ldr	r0, [pc, #324]	; (8000560 <doner+0x180>)
 800041a:	f7ff ff6b 	bl	80002f4 <fsend>
}
 800041e:	e090      	b.n	8000542 <doner+0x162>
	else if(strcmp("FSTART;", ord) == 0){
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	4850      	ldr	r0, [pc, #320]	; (8000564 <doner+0x184>)
 8000424:	f7ff fe92 	bl	800014c <strcmp>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d111      	bne.n	8000452 <doner+0x72>
		fsend("Rozpoczeto wysylanie impulsow \r\n");
 800042e:	484e      	ldr	r0, [pc, #312]	; (8000568 <doner+0x188>)
 8000430:	f7ff ff60 	bl	80002f4 <fsend>
		seconds_passed=0;
 8000434:	4b4d      	ldr	r3, [pc, #308]	; (800056c <doner+0x18c>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 800043a:	484d      	ldr	r0, [pc, #308]	; (8000570 <doner+0x190>)
 800043c:	f002 f97e 	bl	800273c <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000440:	2100      	movs	r1, #0
 8000442:	484c      	ldr	r0, [pc, #304]	; (8000574 <doner+0x194>)
 8000444:	f002 faa2 	bl	800298c <HAL_TIM_PWM_Start>
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000448:	2100      	movs	r1, #0
 800044a:	484b      	ldr	r0, [pc, #300]	; (8000578 <doner+0x198>)
 800044c:	f002 fbf4 	bl	8002c38 <HAL_TIM_IC_Start_IT>
}
 8000450:	e077      	b.n	8000542 <doner+0x162>
	else if(strcmp("FSTAT;", ord) == 0){
 8000452:	6879      	ldr	r1, [r7, #4]
 8000454:	4849      	ldr	r0, [pc, #292]	; (800057c <doner+0x19c>)
 8000456:	f7ff fe79 	bl	800014c <strcmp>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d109      	bne.n	8000474 <doner+0x94>
		fsend("Wypelnienie %d Czas %d Czestotliwosc %d\r\n",wart,czas,czest);
 8000460:	4b47      	ldr	r3, [pc, #284]	; (8000580 <doner+0x1a0>)
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	4b47      	ldr	r3, [pc, #284]	; (8000584 <doner+0x1a4>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b47      	ldr	r3, [pc, #284]	; (8000588 <doner+0x1a8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4847      	ldr	r0, [pc, #284]	; (800058c <doner+0x1ac>)
 800046e:	f7ff ff41 	bl	80002f4 <fsend>
}
 8000472:	e066      	b.n	8000542 <doner+0x162>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 8000474:	4a43      	ldr	r2, [pc, #268]	; (8000584 <doner+0x1a4>)
 8000476:	4946      	ldr	r1, [pc, #280]	; (8000590 <doner+0x1b0>)
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f004 fa9d 	bl	80049b8 <siscanf>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d006      	beq.n	8000492 <doner+0xb2>
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	4843      	ldr	r0, [pc, #268]	; (8000594 <doner+0x1b4>)
 8000488:	f7ff fe60 	bl	800014c <strcmp>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d112      	bne.n	80004b8 <doner+0xd8>
		if(czas>=0 && czas<=20){
 8000492:	4b3c      	ldr	r3, [pc, #240]	; (8000584 <doner+0x1a4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	db0a      	blt.n	80004b0 <doner+0xd0>
 800049a:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <doner+0x1a4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b14      	cmp	r3, #20
 80004a0:	dc06      	bgt.n	80004b0 <doner+0xd0>
			fsend("„Ustawiono czas na %d sekund.\r\n",czas);
 80004a2:	4b38      	ldr	r3, [pc, #224]	; (8000584 <doner+0x1a4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	483b      	ldr	r0, [pc, #236]	; (8000598 <doner+0x1b8>)
 80004aa:	f7ff ff23 	bl	80002f4 <fsend>
		if(czas>=0 && czas<=20){
 80004ae:	e048      	b.n	8000542 <doner+0x162>
			fsend("WRNUM\r\n");
 80004b0:	483a      	ldr	r0, [pc, #232]	; (800059c <doner+0x1bc>)
 80004b2:	f7ff ff1f 	bl	80002f4 <fsend>
		if(czas>=0 && czas<=20){
 80004b6:	e044      	b.n	8000542 <doner+0x162>
	else if(sscanf(ord, "FFILL%d;", &wart) == 1 || strcmp("FFIL;", ord) == 0){
 80004b8:	4a31      	ldr	r2, [pc, #196]	; (8000580 <doner+0x1a0>)
 80004ba:	4939      	ldr	r1, [pc, #228]	; (80005a0 <doner+0x1c0>)
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f004 fa7b 	bl	80049b8 <siscanf>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d006      	beq.n	80004d6 <doner+0xf6>
 80004c8:	6879      	ldr	r1, [r7, #4]
 80004ca:	4836      	ldr	r0, [pc, #216]	; (80005a4 <doner+0x1c4>)
 80004cc:	f7ff fe3e 	bl	800014c <strcmp>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d10e      	bne.n	80004f4 <doner+0x114>
		if(wart>=0 && wart<= 4294967295){
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <doner+0x1a0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	db06      	blt.n	80004ec <doner+0x10c>
			fsend("„Ustawiono wypelnienie na %d .\r\n",wart);
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <doner+0x1a0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	4830      	ldr	r0, [pc, #192]	; (80005a8 <doner+0x1c8>)
 80004e6:	f7ff ff05 	bl	80002f4 <fsend>
		if(wart>=0 && wart<= 4294967295){
 80004ea:	e02a      	b.n	8000542 <doner+0x162>
			fsend("WRNUM\r\n");
 80004ec:	482b      	ldr	r0, [pc, #172]	; (800059c <doner+0x1bc>)
 80004ee:	f7ff ff01 	bl	80002f4 <fsend>
		if(wart>=0 && wart<= 4294967295){
 80004f2:	e026      	b.n	8000542 <doner+0x162>
	else if(sscanf(ord, "FSET%d;", &czest) == 1 || strcmp("FSET;", ord) == 0){
 80004f4:	4a24      	ldr	r2, [pc, #144]	; (8000588 <doner+0x1a8>)
 80004f6:	492d      	ldr	r1, [pc, #180]	; (80005ac <doner+0x1cc>)
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f004 fa5d 	bl	80049b8 <siscanf>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	d006      	beq.n	8000512 <doner+0x132>
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	482a      	ldr	r0, [pc, #168]	; (80005b0 <doner+0x1d0>)
 8000508:	f7ff fe20 	bl	800014c <strcmp>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d113      	bne.n	800053a <doner+0x15a>
		if(czest>=10 && czest<=1000){
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <doner+0x1a8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b09      	cmp	r3, #9
 8000518:	dd0b      	ble.n	8000532 <doner+0x152>
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <doner+0x1a8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000522:	dc06      	bgt.n	8000532 <doner+0x152>
					fsend("„Ustawiono czestotliwosc na %d kH.\r\n",czest);
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <doner+0x1a8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	4822      	ldr	r0, [pc, #136]	; (80005b4 <doner+0x1d4>)
 800052c:	f7ff fee2 	bl	80002f4 <fsend>
		if(czest>=10 && czest<=1000){
 8000530:	e007      	b.n	8000542 <doner+0x162>
					fsend("WRNUM\r\n");
 8000532:	481a      	ldr	r0, [pc, #104]	; (800059c <doner+0x1bc>)
 8000534:	f7ff fede 	bl	80002f4 <fsend>
		if(czest>=10 && czest<=1000){
 8000538:	e003      	b.n	8000542 <doner+0x162>
		fsend("WRCMD\r\n");
 800053a:	481f      	ldr	r0, [pc, #124]	; (80005b8 <doner+0x1d8>)
 800053c:	f7ff feda 	bl	80002f4 <fsend>
}
 8000540:	e7ff      	b.n	8000542 <doner+0x162>
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	08005bc8 	.word	0x08005bc8
 8000550:	200000bc 	.word	0x200000bc
 8000554:	08005bd0 	.word	0x08005bd0
 8000558:	08005c14 	.word	0x08005c14
 800055c:	200000c0 	.word	0x200000c0
 8000560:	08005c1c 	.word	0x08005c1c
 8000564:	08005c54 	.word	0x08005c54
 8000568:	08005c5c 	.word	0x08005c5c
 800056c:	200000c4 	.word	0x200000c4
 8000570:	20000b4c 	.word	0x20000b4c
 8000574:	20000b94 	.word	0x20000b94
 8000578:	20000bdc 	.word	0x20000bdc
 800057c:	08005c80 	.word	0x08005c80
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	08005c88 	.word	0x08005c88
 8000590:	08005cb4 	.word	0x08005cb4
 8000594:	08005cc0 	.word	0x08005cc0
 8000598:	08005cc8 	.word	0x08005cc8
 800059c:	08005cec 	.word	0x08005cec
 80005a0:	08005cf4 	.word	0x08005cf4
 80005a4:	08005d00 	.word	0x08005d00
 80005a8:	08005d08 	.word	0x08005d08
 80005ac:	08005d2c 	.word	0x08005d2c
 80005b0:	08005d34 	.word	0x08005d34
 80005b4:	08005d3c 	.word	0x08005d3c
 80005b8:	08005d64 	.word	0x08005d64

080005bc <checksum>:

int checksum(char *buffer){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	int suma = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
	int i;
	char userSum[2];
	userSum[0]=buffer[strlen(buffer)-3];
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fdc9 	bl	8000160 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	3b03      	subs	r3, #3
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	723b      	strb	r3, [r7, #8]
	userSum[1]=buffer[strlen(buffer)-2];
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff fdc0 	bl	8000160 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	3b02      	subs	r3, #2
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	727b      	strb	r3, [r7, #9]

	for(i = 0;i<strlen(buffer)-4;i++){
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	e00a      	b.n	8000608 <checksum+0x4c>
		suma=suma+buffer[i];
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	4413      	add	r3, r2
 8000600:	61fb      	str	r3, [r7, #28]
	for(i = 0;i<strlen(buffer)-4;i++){
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	3301      	adds	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fda9 	bl	8000160 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	1f1a      	subs	r2, r3, #4
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8ec      	bhi.n	80005f2 <checksum+0x36>
	}
	int mod=suma%256;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	425a      	negs	r2, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	bf58      	it	pl
 8000622:	4253      	negpl	r3, r2
 8000624:	617b      	str	r3, [r7, #20]
	long temp;
	int j=0;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
	while (mod != 0){
 800062a:	e024      	b.n	8000676 <checksum+0xba>
		temp = mod % 16;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	425a      	negs	r2, r3
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	f002 020f 	and.w	r2, r2, #15
 8000638:	bf58      	it	pl
 800063a:	4253      	negpl	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
		if (temp < 10)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b09      	cmp	r3, #9
 8000642:	dc09      	bgt.n	8000658 <checksum+0x9c>
			hex[j++] = 48 + temp;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	1c59      	adds	r1, r3, #1
 800064c:	6139      	str	r1, [r7, #16]
 800064e:	3230      	adds	r2, #48	; 0x30
 8000650:	b2d1      	uxtb	r1, r2
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <checksum+0xe4>)
 8000654:	54d1      	strb	r1, [r2, r3]
 8000656:	e008      	b.n	800066a <checksum+0xae>
		else
		    hex[j++] = 55 + temp;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	1c59      	adds	r1, r3, #1
 8000660:	6139      	str	r1, [r7, #16]
 8000662:	3237      	adds	r2, #55	; 0x37
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <checksum+0xe4>)
 8000668:	54d1      	strb	r1, [r2, r3]
		mod = mod / 16;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	2b00      	cmp	r3, #0
 800066e:	da00      	bge.n	8000672 <checksum+0xb6>
 8000670:	330f      	adds	r3, #15
 8000672:	111b      	asrs	r3, r3, #4
 8000674:	617b      	str	r3, [r7, #20]
	while (mod != 0){
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1d7      	bne.n	800062c <checksum+0x70>
	}

	if(hex[1]==userSum[0] && hex[0]==userSum[1])
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <checksum+0xe4>)
 800067e:	785a      	ldrb	r2, [r3, #1]
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	429a      	cmp	r2, r3
 8000684:	d106      	bne.n	8000694 <checksum+0xd8>
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <checksum+0xe4>)
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	7a7b      	ldrb	r3, [r7, #9]
 800068c:	429a      	cmp	r2, r3
 800068e:	d101      	bne.n	8000694 <checksum+0xd8>
	{
		return 1;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <checksum+0xda>
	}
	else
	{
		return 0;
 8000694:	2300      	movs	r3, #0
	}

}
 8000696:	4618      	mov	r0, r3
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200008dc 	.word	0x200008dc

080006a4 <get_line>:
void get_line(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
	char temp = get_char();
 80006aa:	f7ff fdf9 	bl	80002a0 <get_char>
 80006ae:	4603      	mov	r3, r0
 80006b0:	70fb      	strb	r3, [r7, #3]
	bfr[pidx]=temp;
 80006b2:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <get_line+0x13c>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	4a4a      	ldr	r2, [pc, #296]	; (80007e4 <get_line+0x140>)
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	5453      	strb	r3, [r2, r1]
	pidx++;
 80006c0:	4b47      	ldr	r3, [pc, #284]	; (80007e0 <get_line+0x13c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	3301      	adds	r3, #1
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <get_line+0x13c>)
 80006cc:	801a      	strh	r2, [r3, #0]
	if(temp == 0x05){
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b05      	cmp	r3, #5
 80006d2:	d10c      	bne.n	80006ee <get_line+0x4a>
		pidx=0;
 80006d4:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <get_line+0x13c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	801a      	strh	r2, [r3, #0]
		memset(&bfr[0],0,sizeof(bfr));
 80006da:	f240 1205 	movw	r2, #261	; 0x105
 80006de:	2100      	movs	r1, #0
 80006e0:	4840      	ldr	r0, [pc, #256]	; (80007e4 <get_line+0x140>)
 80006e2:	f004 f961 	bl	80049a8 <memset>
		fstate = listen;
 80006e6:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <get_line+0x144>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
			fsend("\r\n");
		}
		pidx=0;
	}

}
 80006ec:	e073      	b.n	80007d6 <get_line+0x132>
	else if(pidx > 261){
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <get_line+0x13c>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80006f8:	d303      	bcc.n	8000702 <get_line+0x5e>
		pidx=0;
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <get_line+0x13c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	801a      	strh	r2, [r3, #0]
}
 8000700:	e069      	b.n	80007d6 <get_line+0x132>
	else if(temp == 0x04 && fstate == listen){
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d166      	bne.n	80007d6 <get_line+0x132>
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <get_line+0x144>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d162      	bne.n	80007d6 <get_line+0x132>
		fstate = notlisten;
 8000710:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <get_line+0x144>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
		if(strlen(bfr)>4){
 8000716:	4833      	ldr	r0, [pc, #204]	; (80007e4 <get_line+0x140>)
 8000718:	f7ff fd22 	bl	8000160 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	2b04      	cmp	r3, #4
 8000720:	d950      	bls.n	80007c4 <get_line+0x120>
			fsend(bfr);
 8000722:	4830      	ldr	r0, [pc, #192]	; (80007e4 <get_line+0x140>)
 8000724:	f7ff fde6 	bl	80002f4 <fsend>
			fsend("\r\n");
 8000728:	4830      	ldr	r0, [pc, #192]	; (80007ec <get_line+0x148>)
 800072a:	f7ff fde3 	bl	80002f4 <fsend>
			int poi=0;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
			if(checksum(bfr)==1){
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <get_line+0x140>)
 8000734:	f7ff ff42 	bl	80005bc <checksum>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d135      	bne.n	80007aa <get_line+0x106>
				for(int i=1;i<=pidx;i++){
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e02a      	b.n	800079a <get_line+0xf6>
					if(bfr[i] == ';'){
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <get_line+0x140>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b3b      	cmp	r3, #59	; 0x3b
 800074e:	d121      	bne.n	8000794 <get_line+0xf0>
						memset(&order[0],0,sizeof(order));
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	2100      	movs	r1, #0
 8000756:	4826      	ldr	r0, [pc, #152]	; (80007f0 <get_line+0x14c>)
 8000758:	f004 f926 	bl	80049a8 <memset>
						ordpidx=0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
						while(poi<=i){
 8000760:	e00e      	b.n	8000780 <get_line+0xdc>
							order[ordpidx]=bfr[poi];
 8000762:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <get_line+0x140>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4413      	add	r3, r2
 8000768:	7819      	ldrb	r1, [r3, #0]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <get_line+0x14c>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	460a      	mov	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
							ordpidx++;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
							poi++;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
						while(poi<=i){
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	ddec      	ble.n	8000762 <get_line+0xbe>
						ordpidx=i+1;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
						doner(order);
 800078e:	4818      	ldr	r0, [pc, #96]	; (80007f0 <get_line+0x14c>)
 8000790:	f7ff fe26 	bl	80003e0 <doner>
				for(int i=1;i<=pidx;i++){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3301      	adds	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <get_line+0x13c>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	ddcd      	ble.n	8000744 <get_line+0xa0>
 80007a8:	e012      	b.n	80007d0 <get_line+0x12c>
				fsend("WRCHS%c%c",hex[1],hex[0]);
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <get_line+0x150>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <get_line+0x150>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <get_line+0x154>)
 80007b8:	f7ff fd9c 	bl	80002f4 <fsend>
				fsend("\r\n");
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <get_line+0x148>)
 80007be:	f7ff fd99 	bl	80002f4 <fsend>
 80007c2:	e005      	b.n	80007d0 <get_line+0x12c>
			fsend("WRFRM");
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <get_line+0x158>)
 80007c6:	f7ff fd95 	bl	80002f4 <fsend>
			fsend("\r\n");
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <get_line+0x148>)
 80007cc:	f7ff fd92 	bl	80002f4 <fsend>
		pidx=0;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <get_line+0x13c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	801a      	strh	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000a8 	.word	0x200000a8
 80007e4:	200007d4 	.word	0x200007d4
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	08005d6c 	.word	0x08005d6c
 80007f0:	200006d4 	.word	0x200006d4
 80007f4:	200008dc 	.word	0x200008dc
 80007f8:	08005d70 	.word	0x08005d70
 80007fc:	08005d7c 	.word	0x08005d7c

08000800 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <HAL_UART_TxCpltCallback+0x58>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d11e      	bne.n	800084e <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_UART_TxCpltCallback+0x5c>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_UART_TxCpltCallback+0x60>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d018      	beq.n	800084e <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_UART_TxCpltCallback+0x60>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_UART_TxCpltCallback+0x64>)
 8000822:	5cd3      	ldrb	r3, [r2, r3]
 8000824:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_UART_TxCpltCallback+0x60>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <HAL_UART_TxCpltCallback+0x60>)
 800082e:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_UART_TxCpltCallback+0x60>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000838:	db02      	blt.n	8000840 <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_UART_TxCpltCallback+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000840:	f107 030f 	add.w	r3, r7, #15
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <HAL_UART_TxCpltCallback+0x58>)
 800084a:	f003 fc39 	bl	80040c0 <HAL_UART_Transmit_IT>
		}
	}
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000c24 	.word	0x20000c24
 800085c:	20000098 	.word	0x20000098
 8000860:	2000009c 	.word	0x2000009c
 8000864:	200000d4 	.word	0x200000d4

08000868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_UART_RxCpltCallback+0x44>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d115      	bne.n	80008a4 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_UART_RxCpltCallback+0x48>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <HAL_UART_RxCpltCallback+0x48>)
 8000880:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_UART_RxCpltCallback+0x48>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800088a:	db02      	blt.n	8000892 <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_UART_RxCpltCallback+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_UART_RxCpltCallback+0x48>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_UART_RxCpltCallback+0x4c>)
 8000898:	4413      	add	r3, r2
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <HAL_UART_RxCpltCallback+0x44>)
 80008a0:	f003 fc52 	bl	8004148 <HAL_UART_Receive_IT>
	}
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000c24 	.word	0x20000c24
 80008b0:	200000a0 	.word	0x200000a0
 80008b4:	200004d4 	.word	0x200004d4

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f000 fef6 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c0:	f000 f874 	bl	80009ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 80008c4:	2108      	movs	r1, #8
 80008c6:	482c      	ldr	r0, [pc, #176]	; (8000978 <main+0xc0>)
 80008c8:	f000 f934 	bl	8000b34 <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 80008cc:	2104      	movs	r1, #4
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <main+0xc0>)
 80008d0:	f000 f944 	bl	8000b5c <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 80008d4:	2102      	movs	r1, #2
 80008d6:	4828      	ldr	r0, [pc, #160]	; (8000978 <main+0xc0>)
 80008d8:	f000 f954 	bl	8000b84 <LCD_setDC>
      LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <main+0xc0>)
 80008e0:	f000 f964 	bl	8000bac <LCD_setDIN>
      LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 80008e4:	2110      	movs	r1, #16
 80008e6:	4824      	ldr	r0, [pc, #144]	; (8000978 <main+0xc0>)
 80008e8:	f000 f974 	bl	8000bd4 <LCD_setCLK>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff fc40 	bl	8000170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f0:	f000 fe46 	bl	8001580 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80008f4:	f000 fb94 	bl	8001020 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008f8:	f000 fc32 	bl	8001160 <MX_TIM2_Init>
  MX_TIM4_Init();
 80008fc:	f000 fcf6 	bl	80012ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8000900:	f000 fc80 	bl	8001204 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000904:	f000 f9fe 	bl	8000d04 <LCD_init>
  fsend("Hello user\r\n");
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <main+0xc4>)
 800090a:	f7ff fcf3 	bl	80002f4 <fsend>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //PWM dla ekranu
 800090e:	2100      	movs	r1, #0
 8000910:	481b      	ldr	r0, [pc, #108]	; (8000980 <main+0xc8>)
 8000912:	f002 f83b 	bl	800298c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 100);
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <main+0xc8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2264      	movs	r2, #100	; 0x64
 800091c:	635a      	str	r2, [r3, #52]	; 0x34

  	  LCD_print("Miernik", 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <main+0xcc>)
 8000924:	f000 fa66 	bl	8000df4 <LCD_print>
  	  LCD_print("Czestotliwosci", 0, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	2100      	movs	r1, #0
 800092c:	4816      	ldr	r0, [pc, #88]	; (8000988 <main+0xd0>)
 800092e:	f000 fa61 	bl	8000df4 <LCD_print>
  	  LCD_print("Autor", 0, 2);
 8000932:	2202      	movs	r2, #2
 8000934:	2100      	movs	r1, #0
 8000936:	4815      	ldr	r0, [pc, #84]	; (800098c <main+0xd4>)
 8000938:	f000 fa5c 	bl	8000df4 <LCD_print>
  	  LCD_print("Krzysztof", 0, 3);
 800093c:	2203      	movs	r2, #3
 800093e:	2100      	movs	r1, #0
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <main+0xd8>)
 8000942:	f000 fa57 	bl	8000df4 <LCD_print>
  	  LCD_print("Olejniczak", 0, 4);
 8000946:	2204      	movs	r2, #4
 8000948:	2100      	movs	r1, #0
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <main+0xdc>)
 800094c:	f000 fa52 	bl	8000df4 <LCD_print>
  	  LCD_print("", 0, 5);
 8000950:	2205      	movs	r2, #5
 8000952:	2100      	movs	r1, #0
 8000954:	4810      	ldr	r0, [pc, #64]	; (8000998 <main+0xe0>)
 8000956:	f000 fa4d 	bl	8000df4 <LCD_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 800095a:	2201      	movs	r2, #1
 800095c:	490f      	ldr	r1, [pc, #60]	; (800099c <main+0xe4>)
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <main+0xe8>)
 8000960:	f003 fbf2 	bl	8004148 <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <main+0xec>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <main+0xf0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d0f9      	beq.n	8000964 <main+0xac>
		  get_line();
 8000970:	f7ff fe98 	bl	80006a4 <get_line>
	  if(busyRX!=emptyRX){
 8000974:	e7f6      	b.n	8000964 <main+0xac>
 8000976:	bf00      	nop
 8000978:	40011000 	.word	0x40011000
 800097c:	08005d84 	.word	0x08005d84
 8000980:	20000b04 	.word	0x20000b04
 8000984:	08005d94 	.word	0x08005d94
 8000988:	08005d9c 	.word	0x08005d9c
 800098c:	08005dac 	.word	0x08005dac
 8000990:	08005db4 	.word	0x08005db4
 8000994:	08005dc0 	.word	0x08005dc0
 8000998:	08005dcc 	.word	0x08005dcc
 800099c:	200004d4 	.word	0x200004d4
 80009a0:	20000c24 	.word	0x20000c24
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	200000a0 	.word	0x200000a0

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	; 0x40
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2228      	movs	r2, #40	; 0x28
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fff4 	bl	80049a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fa37 	bl	8001e68 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a00:	f000 f894 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fca2 	bl	8002368 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a2a:	f000 f87f 	bl	8000b2c <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3740      	adds	r7, #64	; 0x40
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d116      	bne.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x40>
		seconds_passed += 1;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a52:	6013      	str	r3, [r2, #0]
		if(seconds_passed>=10)
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d90d      	bls.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480a      	ldr	r0, [pc, #40]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a60:	f002 f836 	bl	8002ad0 <HAL_TIM_PWM_Stop>
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000a64:	2100      	movs	r1, #0
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a68:	f002 f9ec 	bl	8002e44 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a6e:	f001 feb7 	bl	80027e0 <HAL_TIM_Base_Stop_IT>
			fsend("Przesylanie zakonczone");
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a74:	f7ff fc3e 	bl	80002f4 <fsend>
		}
	}


}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40000400 	.word	0x40000400
 8000a84:	200000c4 	.word	0x200000c4
 8000a88:	20000b94 	.word	0x20000b94
 8000a8c:	20000bdc 	.word	0x20000bdc
 8000a90:	20000b4c 	.word	0x20000b4c
 8000a94:	08005dd0 	.word	0x08005dd0

08000a98 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d132      	bne.n	8000b10 <HAL_TIM_IC_CaptureCallback+0x78>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7f1b      	ldrb	r3, [r3, #28]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d12e      	bne.n	8000b10 <HAL_TIM_IC_CaptureCallback+0x78>
		PWM_pulses_count += 1; //count number of consecutive impulses increased with every detected rising edge of PWM signal
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000aba:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured == 0){
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10a      	bne.n	8000ada <HAL_TIM_IC_CaptureCallback+0x42>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f002 fdda 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ad0:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0;
		}


	}
}
 8000ad8:	e01a      	b.n	8000b10 <HAL_TIM_IC_CaptureCallback+0x78>
		}else if(Is_First_Captured){
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d016      	beq.n	8000b10 <HAL_TIM_IC_CaptureCallback+0x78>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f002 fdcb 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aee:	6013      	str	r3, [r2, #0]
			if(IC_Value2 > IC_Value1){
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d906      	bls.n	8000b0a <HAL_TIM_IC_CaptureCallback+0x72>
				Difference = IC_Value2 - IC_Value1;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b08:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000c0 	.word	0x200000c0
 8000b1c:	200000b0 	.word	0x200000b0
 8000b20:	200000b4 	.word	0x200000b4
 8000b24:	200000b8 	.word	0x200000b8
 8000b28:	200000bc 	.word	0x200000bc

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x4>
	...

08000b34 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <LCD_setRST+0x24>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <LCD_setRST+0x24>)
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	8093      	strh	r3, [r2, #4]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200008e0 	.word	0x200008e0

08000b5c <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <LCD_setCE+0x24>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <LCD_setCE+0x24>)
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	8193      	strh	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	200008e0 	.word	0x200008e0

08000b84 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <LCD_setDC+0x24>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <LCD_setDC+0x24>)
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	8293      	strh	r3, [r2, #20]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200008e0 	.word	0x200008e0

08000bac <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <LCD_setDIN+0x24>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <LCD_setDIN+0x24>)
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	8393      	strh	r3, [r2, #28]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200008e0 	.word	0x200008e0

08000bd4 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000be0:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <LCD_setCLK+0x24>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <LCD_setCLK+0x24>)
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200008e0 	.word	0x200008e0

08000bfc <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	e026      	b.n	8000c5a <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <LCD_send+0x70>)
 8000c0e:	6998      	ldr	r0, [r3, #24]
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <LCD_send+0x70>)
 8000c12:	8b99      	ldrh	r1, [r3, #28]
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	f1c3 0307 	rsb	r3, r3, #7
 8000c1c:	fa42 f303 	asr.w	r3, r2, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf14      	ite	ne
 8000c28:	2301      	movne	r3, #1
 8000c2a:	2300      	moveq	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f001 f8e0 	bl	8001df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <LCD_send+0x70>)
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <LCD_send+0x70>)
 8000c3a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f8d8 	bl	8001df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <LCD_send+0x70>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <LCD_send+0x70>)
 8000c4a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f8d0 	bl	8001df4 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	3301      	adds	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d9d5      	bls.n	8000c0c <LCD_send+0x10>
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200008e0 	.word	0x200008e0

08000c70 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d11c      	bne.n	8000cc0 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <LCD_write+0x90>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <LCD_write+0x90>)
 8000c8c:	8a91      	ldrh	r1, [r2, #20]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 f8af 	bl	8001df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <LCD_write+0x90>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <LCD_write+0x90>)
 8000c9c:	8991      	ldrh	r1, [r2, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 f8a7 	bl	8001df4 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffa7 	bl	8000bfc <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <LCD_write+0x90>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <LCD_write+0x90>)
 8000cb4:	8991      	ldrh	r1, [r2, #12]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f89b 	bl	8001df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000cbe:	e01b      	b.n	8000cf8 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <LCD_write+0x90>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LCD_write+0x90>)
 8000cc6:	8a91      	ldrh	r1, [r2, #20]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f892 	bl	8001df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LCD_write+0x90>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LCD_write+0x90>)
 8000cd6:	8991      	ldrh	r1, [r2, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f88a 	bl	8001df4 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff8a 	bl	8000bfc <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LCD_write+0x90>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <LCD_write+0x90>)
 8000cee:	8991      	ldrh	r1, [r2, #12]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f87e 	bl	8001df4 <HAL_GPIO_WritePin>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200008e0 	.word	0x200008e0

08000d04 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <LCD_init+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <LCD_init+0x64>)
 8000d0e:	8891      	ldrh	r1, [r2, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f86e 	bl	8001df4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <LCD_init+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <LCD_init+0x64>)
 8000d1e:	8891      	ldrh	r1, [r2, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 f866 	bl	8001df4 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2021      	movs	r0, #33	; 0x21
 8000d2c:	f7ff ffa0 	bl	8000c70 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000d30:	2100      	movs	r1, #0
 8000d32:	20b8      	movs	r0, #184	; 0xb8
 8000d34:	f7ff ff9c 	bl	8000c70 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2004      	movs	r0, #4
 8000d3c:	f7ff ff98 	bl	8000c70 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000d40:	2100      	movs	r1, #0
 8000d42:	2014      	movs	r0, #20
 8000d44:	f7ff ff94 	bl	8000c70 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2020      	movs	r0, #32
 8000d4c:	f7ff ff90 	bl	8000c70 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000d50:	2100      	movs	r1, #0
 8000d52:	200c      	movs	r0, #12
 8000d54:	f7ff ff8c 	bl	8000c70 <LCD_write>
  LCD_clrScr();
 8000d58:	f000 f86c 	bl	8000e34 <LCD_clrScr>
  lcd.inverttext = false;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <LCD_init+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200008e0 	.word	0x200008e0
 8000d6c:	20000908 	.word	0x20000908

08000d70 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	e02d      	b.n	8000ddc <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <LCD_putChar+0x7c>)
 8000d82:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d010      	beq.n	8000db2 <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f1a3 0220 	sub.w	r2, r3, #32
 8000d96:	4916      	ldr	r1, [pc, #88]	; (8000df0 <LCD_putChar+0x80>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	18ca      	adds	r2, r1, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff60 	bl	8000c70 <LCD_write>
 8000db0:	e011      	b.n	8000dd6 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f1a3 0220 	sub.w	r2, r3, #32
 8000db8:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LCD_putChar+0x80>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	18ca      	adds	r2, r1, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff4d 	bl	8000c70 <LCD_write>
  for(int i = 0; i < 6; i++){
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	ddce      	ble.n	8000d80 <LCD_putChar+0x10>
  }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000908 	.word	0x20000908
 8000df0:	08005e04 	.word	0x08005e04

08000df4 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
 8000e00:	4613      	mov	r3, r2
 8000e02:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8000e04:	78ba      	ldrb	r2, [r7, #2]
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f830 	bl	8000e70 <LCD_goXY>
  while(*str){
 8000e10:	e006      	b.n	8000e20 <LCD_print+0x2c>
    LCD_putChar(*str++);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ffa8 	bl	8000d70 <LCD_putChar>
  while(*str){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f4      	bne.n	8000e12 <LCD_print+0x1e>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	e00b      	b.n	8000e58 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000e40:	2101      	movs	r1, #1
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff ff14 	bl	8000c70 <LCD_write>
    lcd.buffer[i] = 0;
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <LCD_clrScr+0x38>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000e5e:	dbef      	blt.n	8000e40 <LCD_clrScr+0xc>
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000908 	.word	0x20000908

08000e70 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fef0 	bl	8000c70 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fee8 	bl	8000c70 <LCD_write>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_MspInit+0x60>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_MspInit+0x60>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 fbf1 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM2_IRQHandler+0x10>)
 8000f62:	f002 f817 	bl	8002f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000bdc 	.word	0x20000bdc

08000f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM3_IRQHandler+0x10>)
 8000f76:	f002 f80d 	bl	8002f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000b4c 	.word	0x20000b4c

08000f84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <USART2_IRQHandler+0x10>)
 8000f8a:	f003 f90d 	bl	80041a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000c24 	.word	0x20000c24

08000f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fa0:	f000 ff40 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f003 fcbc 	bl	8004954 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20005000 	.word	0x20005000
 8001008:	00000400 	.word	0x00000400
 800100c:	200000c8 	.word	0x200000c8
 8001010:	20000c80 	.word	0x20000c80

08001014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b096      	sub	sp, #88	; 0x58
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f003 fca5 	bl	80049a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105e:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <MX_TIM1_Init+0x138>)
 8001060:	4a3e      	ldr	r2, [pc, #248]	; (800115c <MX_TIM1_Init+0x13c>)
 8001062:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_TIM1_Init+0x138>)
 8001066:	223f      	movs	r2, #63	; 0x3f
 8001068:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <MX_TIM1_Init+0x138>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6399;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_TIM1_Init+0x138>)
 8001072:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001076:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <MX_TIM1_Init+0x138>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_TIM1_Init+0x138>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <MX_TIM1_Init+0x138>)
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800108a:	4833      	ldr	r0, [pc, #204]	; (8001158 <MX_TIM1_Init+0x138>)
 800108c:	f001 fb06 	bl	800269c <HAL_TIM_Base_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001096:	f7ff fd49 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a4:	4619      	mov	r1, r3
 80010a6:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_TIM1_Init+0x138>)
 80010a8:	f002 fa26 	bl	80034f8 <HAL_TIM_ConfigClockSource>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010b2:	f7ff fd3b 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b6:	4828      	ldr	r0, [pc, #160]	; (8001158 <MX_TIM1_Init+0x138>)
 80010b8:	f001 fc18 	bl	80028ec <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010c2:	f7ff fd33 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d2:	4619      	mov	r1, r3
 80010d4:	4820      	ldr	r0, [pc, #128]	; (8001158 <MX_TIM1_Init+0x138>)
 80010d6:	f002 fee5 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010e0:	f7ff fd24 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e4:	2360      	movs	r3, #96	; 0x60
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 49;
 80010e8:	2331      	movs	r3, #49	; 0x31
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_TIM1_Init+0x138>)
 800110a:	f002 f937 	bl	800337c <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001114:	f7ff fd0a 	bl	8000b2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x138>)
 800113c:	f002 ff10 	bl	8003f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001146:	f7ff fcf1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x138>)
 800114c:	f000 f9c2 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000b94 	.word	0x20000b94
 800115c:	40012c00 	.word	0x40012c00

08001160 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_TIM2_Init+0xa0>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_TIM2_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM2_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_TIM2_Init+0xa0>)
 8001192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_TIM2_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM2_Init+0xa0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <MX_TIM2_Init+0xa0>)
 80011a6:	f001 fcf7 	bl	8002b98 <HAL_TIM_IC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b0:	f7ff fcbc 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	480f      	ldr	r0, [pc, #60]	; (8001200 <MX_TIM2_Init+0xa0>)
 80011c4:	f002 fe6e 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ce:	f7ff fcad 	bl	8000b2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011d6:	2301      	movs	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM2_Init+0xa0>)
 80011ea:	f002 f833 	bl	8003254 <HAL_TIM_IC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80011f4:	f7ff fc9a 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000bdc 	.word	0x20000bdc

08001204 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <MX_TIM3_Init+0xe0>)
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <MX_TIM3_Init+0xe4>)
 8001238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_TIM3_Init+0xe0>)
 800123c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001240:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_TIM3_Init+0xe0>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_TIM3_Init+0xe0>)
 800124a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800124e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_TIM3_Init+0xe0>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_TIM3_Init+0xe0>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800125c:	4821      	ldr	r0, [pc, #132]	; (80012e4 <MX_TIM3_Init+0xe0>)
 800125e:	f001 fa1d 	bl	800269c <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001268:	f7ff fc60 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	4619      	mov	r1, r3
 8001278:	481a      	ldr	r0, [pc, #104]	; (80012e4 <MX_TIM3_Init+0xe0>)
 800127a:	f002 f93d 	bl	80034f8 <HAL_TIM_ConfigClockSource>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001284:	f7ff fc52 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001288:	4816      	ldr	r0, [pc, #88]	; (80012e4 <MX_TIM3_Init+0xe0>)
 800128a:	f001 fad7 	bl	800283c <HAL_TIM_OC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001294:	f7ff fc4a 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4619      	mov	r1, r3
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_TIM3_Init+0xe0>)
 80012a8:	f002 fdfc 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012b2:	f7ff fc3b 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_TIM3_Init+0xe0>)
 80012ce:	f001 ff69 	bl	80031a4 <HAL_TIM_OC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012d8:	f7ff fc28 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3738      	adds	r7, #56	; 0x38
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000b4c 	.word	0x20000b4c
 80012e8:	40000400 	.word	0x40000400

080012ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <MX_TIM4_Init+0xac>)
 8001312:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001316:	2247      	movs	r2, #71	; 0x47
 8001318:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_TIM4_Init+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001322:	2263      	movs	r2, #99	; 0x63
 8001324:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_TIM4_Init+0xa8>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001332:	4818      	ldr	r0, [pc, #96]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001334:	f001 fada 	bl	80028ec <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800133e:	f7ff fbf5 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	4810      	ldr	r0, [pc, #64]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001352:	f002 fda7 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800135c:	f7ff fbe6 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	2360      	movs	r3, #96	; 0x60
 8001362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001378:	f002 f800 	bl	800337c <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001382:	f7ff fbd3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM4_Init+0xa8>)
 8001388:	f000 f8a4 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000b04 	.word	0x20000b04
 8001398:	40000800 	.word	0x40000800

0800139c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a16      	ldr	r2, [pc, #88]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10c      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013c6:	e018      	b.n	80013fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_TIM_Base_MspInit+0x70>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201d      	movs	r0, #29
 80013f0:	f000 fa95 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f4:	201d      	movs	r0, #29
 80013f6:	f000 faae 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012c00 	.word	0x40012c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40000400 	.word	0x40000400

08001410 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142e:	d12b      	bne.n	8001488 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_TIM_IC_MspInit+0x80>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4a16      	ldr	r2, [pc, #88]	; (8001490 <HAL_TIM_IC_MspInit+0x80>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	61d3      	str	r3, [r2, #28]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_TIM_IC_MspInit+0x80>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_TIM_IC_MspInit+0x80>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_TIM_IC_MspInit+0x80>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_IC_MspInit+0x80>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001460:	2301      	movs	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <HAL_TIM_IC_MspInit+0x84>)
 8001474:	f000 fb3a 	bl	8001aec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	201c      	movs	r0, #28
 800147e:	f000 fa4e 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001482:	201c      	movs	r0, #28
 8001484:	f000 fa67 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	40010800 	.word	0x40010800

08001498 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_TIM_PWM_MspInit+0x34>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10b      	bne.n	80014c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_TIM_PWM_MspInit+0x38>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_TIM_PWM_MspInit+0x38>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_TIM_PWM_MspInit+0x38>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40000800 	.word	0x40000800
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_TIM_MspPostInit+0x98>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d119      	bne.n	8001528 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_TIM_MspPostInit+0x9c>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_TIM_MspPostInit+0x9c>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_TIM_MspPostInit+0x9c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	4814      	ldr	r0, [pc, #80]	; (8001574 <HAL_TIM_MspPostInit+0xa0>)
 8001522:	f000 fae3 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001526:	e01c      	b.n	8001562 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_TIM_MspPostInit+0xa4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d117      	bne.n	8001562 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_TIM_MspPostInit+0x9c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_TIM_MspPostInit+0x9c>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_TIM_MspPostInit+0x9c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2302      	movs	r3, #2
 8001554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4619      	mov	r1, r3
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <HAL_TIM_MspPostInit+0xa8>)
 800155e:	f000 fac5 	bl	8001aec <HAL_GPIO_Init>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012c00 	.word	0x40012c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40010800 	.word	0x40010800
 8001578:	40000800 	.word	0x40000800
 800157c:	40010c00 	.word	0x40010c00

08001580 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MX_USART2_UART_Init+0x50>)
 8001588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART2_UART_Init+0x4c>)
 80015b8:	f002 fd35 	bl	8004026 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015c2:	f7ff fab3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000c24 	.word	0x20000c24
 80015d0:	40004400 	.word	0x40004400

080015d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_UART_MspInit+0x80>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d12b      	bne.n	800164c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_UART_MspInit+0x84>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_UART_MspInit+0x84>)
 80015fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fe:	61d3      	str	r3, [r2, #28]
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_UART_MspInit+0x84>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_UART_MspInit+0x84>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_UART_MspInit+0x84>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_UART_MspInit+0x84>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001624:	230c      	movs	r3, #12
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_UART_MspInit+0x88>)
 8001638:	f000 fa58 	bl	8001aec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2026      	movs	r0, #38	; 0x26
 8001642:	f000 f96c 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001646:	2026      	movs	r0, #38	; 0x26
 8001648:	f000 f985 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004400 	.word	0x40004400
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800

08001660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001686:	f7ff fcc5 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f003 f969 	bl	8004960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff f913 	bl	80008b8 <main>
  bx lr
 8001692:	4770      	bx	lr
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800169c:	08006214 	.word	0x08006214
  ldr r2, =_sbss
 80016a0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016a4:	20000c7c 	.word	0x20000c7c

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f923 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fbee 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f93b 	bl	8001972 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f903 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000014 	.word	0x20000014
 8001734:	20000010 	.word	0x20000010

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000014 	.word	0x20000014
 8001758:	20000c68 	.word	0x20000c68

0800175c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000c68 	.word	0x20000c68

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4906      	ldr	r1, [pc, #24]	; (8001808 <__NVIC_EnableIRQ+0x34>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff90 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff2d 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff42 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff35 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800199c:	2b02      	cmp	r3, #2
 800199e:	d008      	beq.n	80019b2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2204      	movs	r2, #4
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e020      	b.n	80019f4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 020e 	bic.w	r2, r2, #14
 80019c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d005      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e051      	b.n	8001ac6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 020e 	bic.w	r2, r2, #14
 8001a30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_DMA_Abort_IT+0xd0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d029      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xa0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a20      	ldr	r2, [pc, #128]	; (8001ad4 <HAL_DMA_Abort_IT+0xd4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d022      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x9c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_DMA_Abort_IT+0xd8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01a      	beq.n	8001a96 <HAL_DMA_Abort_IT+0x96>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <HAL_DMA_Abort_IT+0xdc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d012      	beq.n	8001a90 <HAL_DMA_Abort_IT+0x90>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <HAL_DMA_Abort_IT+0xe0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00a      	beq.n	8001a8a <HAL_DMA_Abort_IT+0x8a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_DMA_Abort_IT+0xe4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d102      	bne.n	8001a84 <HAL_DMA_Abort_IT+0x84>
 8001a7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a82:	e00e      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xa2>
 8001a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a88:	e00b      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xa2>
 8001a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a8e:	e008      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xa2>
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	e005      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xa2>
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	e002      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xa2>
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	e000      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xa2>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_DMA_Abort_IT+0xe8>)
 8001aa4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
    } 
  }
  return status;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40020008 	.word	0x40020008
 8001ad4:	4002001c 	.word	0x4002001c
 8001ad8:	40020030 	.word	0x40020030
 8001adc:	40020044 	.word	0x40020044
 8001ae0:	40020058 	.word	0x40020058
 8001ae4:	4002006c 	.word	0x4002006c
 8001ae8:	40020000 	.word	0x40020000

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e169      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8158 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a9a      	ldr	r2, [pc, #616]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80b1 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a40      	ldr	r2, [pc, #256]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3e      	ldr	r2, [pc, #248]	; (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	492f      	ldr	r1, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	492c      	ldr	r1, [pc, #176]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4928      	ldr	r1, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	491e      	ldr	r1, [pc, #120]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4918      	ldr	r1, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x2e2>
 8001d8a:	bf00      	nop
 8001d8c:	10320000 	.word	0x10320000
 8001d90:	10310000 	.word	0x10310000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	10210000 	.word	0x10210000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4909      	ldr	r1, [pc, #36]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae8e 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	372c      	adds	r7, #44	; 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f806 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e26c      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8087 	beq.w	8001f96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d00c      	beq.n	8001eae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e94:	4b8f      	ldr	r3, [pc, #572]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d112      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x5e>
 8001ea0:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d10b      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eae:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x12c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d168      	bne.n	8001f94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e246      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x76>
 8001ed0:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a7f      	ldr	r2, [pc, #508]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e02e      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b7b      	ldr	r3, [pc, #492]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7a      	ldr	r2, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a77      	ldr	r2, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0xbc>
 8001f0a:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a71      	ldr	r2, [pc, #452]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6a      	ldr	r2, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a67      	ldr	r2, [pc, #412]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fc0a 	bl	800175c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fc06 	bl	800175c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1fa      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xe4>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fbf6 	bl	800175c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fbf2 	bl	800175c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1e6      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x10c>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d063      	beq.n	800206a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa2:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x18c>
 8001fba:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x176>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1ba      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4939      	ldr	r1, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fbab 	bl	800175c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fba7 	bl	800175c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e19b      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4927      	ldr	r1, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fb8a 	bl	800175c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff fb86 	bl	800175c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e17a      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03a      	beq.n	80020ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_RCC_OscConfig+0x274>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7ff fb6a 	bl	800175c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7ff fb66 	bl	800175c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e15a      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 fad8 	bl	8002660 <RCC_Delay>
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCC_OscConfig+0x274>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fb50 	bl	800175c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020be:	e00f      	b.n	80020e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fb4c 	bl	800175c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d908      	bls.n	80020e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e140      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	42420000 	.word	0x42420000
 80020dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	4b9e      	ldr	r3, [pc, #632]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e9      	bne.n	80020c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a6 	beq.w	8002246 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fe:	4b97      	ldr	r3, [pc, #604]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b94      	ldr	r3, [pc, #592]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a93      	ldr	r2, [pc, #588]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b91      	ldr	r3, [pc, #580]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_RCC_OscConfig+0x4f8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x4f8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a8a      	ldr	r2, [pc, #552]	; (8002360 <HAL_RCC_OscConfig+0x4f8>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7ff fb0d 	bl	800175c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7ff fb09 	bl	800175c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0fd      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x312>
 800216c:	4b7b      	ldr	r3, [pc, #492]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a7a      	ldr	r2, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	e02d      	b.n	80021d6 <HAL_RCC_OscConfig+0x36e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x334>
 8002182:	4b76      	ldr	r3, [pc, #472]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a75      	ldr	r2, [pc, #468]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b73      	ldr	r3, [pc, #460]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a72      	ldr	r2, [pc, #456]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	e01c      	b.n	80021d6 <HAL_RCC_OscConfig+0x36e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x356>
 80021a4:	4b6d      	ldr	r3, [pc, #436]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a6c      	ldr	r2, [pc, #432]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x36e>
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a66      	ldr	r2, [pc, #408]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	4b64      	ldr	r3, [pc, #400]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff fabd 	bl	800175c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff fab9 	bl	800175c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ab      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b57      	ldr	r3, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x37e>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff faa7 	bl	800175c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff faa3 	bl	800175c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e095      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	4b4c      	ldr	r3, [pc, #304]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a47      	ldr	r2, [pc, #284]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002244:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8081 	beq.w	8002352 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d061      	beq.n	8002320 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d146      	bne.n	80022f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCC_OscConfig+0x4fc>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fa77 	bl	800175c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7ff fa73 	bl	800175c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e067      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d108      	bne.n	80022ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	492d      	ldr	r1, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a19      	ldr	r1, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	430b      	orrs	r3, r1
 80022be:	4927      	ldr	r1, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x4fc>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff fa47 	bl	800175c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7ff fa43 	bl	800175c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e037      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46a>
 80022f0:	e02f      	b.n	8002352 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_RCC_OscConfig+0x4fc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fa30 	bl	800175c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7ff fa2c 	bl	800175c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e020      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x498>
 800231e:	e018      	b.n	8002352 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e013      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x4f4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	42420060 	.word	0x42420060

08002368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d0      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	4965      	ldr	r1, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d040      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d115      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e073      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06b      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4936      	ldr	r1, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7ff f980 	bl	800175c <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff f97c 	bl	800175c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e053      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d210      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4922      	ldr	r1, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1cc>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f8de 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	08006044 	.word	0x08006044
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20000010 	.word	0x20000010

0800253c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b490      	push	{r4, r7}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002544:	1d3c      	adds	r4, r7, #4
 8002546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800254c:	f240 2301 	movw	r3, #513	; 0x201
 8002550:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x46>
 800257a:	e02d      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257e:	623b      	str	r3, [r7, #32]
      break;
 8002580:	e02d      	b.n	80025de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	0c9b      	lsrs	r3, r3, #18
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800258e:	4413      	add	r3, r2
 8002590:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002594:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c5b      	lsrs	r3, r3, #17
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ae:	4413      	add	r3, r2
 80025b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ba:	fb02 f203 	mul.w	r2, r2, r3
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e004      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	623b      	str	r3, [r7, #32]
      break;
 80025d6:	e002      	b.n	80025de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025da:	623b      	str	r3, [r7, #32]
      break;
 80025dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025de:	6a3b      	ldr	r3, [r7, #32]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc90      	pop	{r4, r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	08005de8 	.word	0x08005de8
 80025f0:	40021000 	.word	0x40021000
 80025f4:	007a1200 	.word	0x007a1200
 80025f8:	003d0900 	.word	0x003d0900

080025fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <HAL_RCC_GetHCLKFreq+0x10>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	2000000c 	.word	0x2000000c

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002614:	f7ff fff2 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	08006054 	.word	0x08006054

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800263c:	f7ff ffde 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0adb      	lsrs	r3, r3, #11
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	08006054 	.word	0x08006054

08002660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <RCC_Delay+0x34>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <RCC_Delay+0x38>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800267c:	bf00      	nop
  }
  while (Delay --);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f9      	bne.n	800267c <RCC_Delay+0x1c>
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	2000000c 	.word	0x2000000c
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e041      	b.n	8002732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fe6a 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f001 f830 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d001      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e03a      	b.n	80027ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00e      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x58>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d009      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x58>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x58>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a13      	ldr	r2, [pc, #76]	; (80027dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d111      	bne.n	80027b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d010      	beq.n	80027c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	e007      	b.n	80027c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800

080027e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <HAL_TIM_Base_Stop_IT+0x48>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	f240 4344 	movw	r3, #1092	; 0x444
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_TIM_Base_Stop_IT+0x48>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e041      	b.n	80028d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f839 	bl	80028da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 ff60 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fdc0 	bl	8001498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 ff08 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e022      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d109      	bne.n	80029ca <HAL_TIM_PWM_Start+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e015      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d109      	bne.n	80029e4 <HAL_TIM_PWM_Start+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e008      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e05e      	b.n	8002abc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x82>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x92>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fa0b 	bl	8003e5a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_TIM_PWM_Start+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_TIM_PWM_Start+0x138>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_TIM_PWM_Start+0x13c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_TIM_PWM_Start+0x140>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d010      	beq.n	8002aba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	e007      	b.n	8002aba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	6839      	ldr	r1, [r7, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f9b9 	bl	8003e5a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <HAL_TIM_PWM_Stop+0xc4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d117      	bne.n	8002b22 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_TIM_PWM_Stop+0x52>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	f240 4344 	movw	r3, #1092	; 0x444
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <HAL_TIM_PWM_Stop+0x52>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_TIM_PWM_Stop+0x82>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	f240 4344 	movw	r3, #1092	; 0x444
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_PWM_Stop+0x82>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Stop+0x92>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	e013      	b.n	8002b8a <HAL_TIM_PWM_Stop+0xba>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Stop+0xa2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b70:	e00b      	b.n	8002b8a <HAL_TIM_PWM_Stop+0xba>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_PWM_Stop+0xb2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	e003      	b.n	8002b8a <HAL_TIM_PWM_Stop+0xba>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40012c00 	.word	0x40012c00

08002b98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e041      	b.n	8002c2e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fc26 	bl	8001410 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f000 fdb2 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_IC_Start_IT+0x1a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e013      	b.n	8002c7a <HAL_TIM_IC_Start_IT+0x42>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_IC_Start_IT+0x2a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	e00b      	b.n	8002c7a <HAL_TIM_IC_Start_IT+0x42>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_IC_Start_IT+0x3a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	e003      	b.n	8002c7a <HAL_TIM_IC_Start_IT+0x42>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <HAL_TIM_IC_Start_IT+0x54>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e013      	b.n	8002cb4 <HAL_TIM_IC_Start_IT+0x7c>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d104      	bne.n	8002c9c <HAL_TIM_IC_Start_IT+0x64>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e00b      	b.n	8002cb4 <HAL_TIM_IC_Start_IT+0x7c>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d104      	bne.n	8002cac <HAL_TIM_IC_Start_IT+0x74>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e003      	b.n	8002cb4 <HAL_TIM_IC_Start_IT+0x7c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d102      	bne.n	8002cc2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0b3      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0x9e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd4:	e013      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0xc6>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0xae>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce4:	e00b      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0xc6>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_IC_Start_IT+0xbe>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf4:	e003      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0xc6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_IC_Start_IT+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_IC_Start_IT+0xfe>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_IC_Start_IT+0xe6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_IC_Start_IT+0xfe>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_IC_Start_IT+0xf6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2c:	e003      	b.n	8002d36 <HAL_TIM_IC_Start_IT+0xfe>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d841      	bhi.n	8002dc0 <HAL_TIM_IC_Start_IT+0x188>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <HAL_TIM_IC_Start_IT+0x10c>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002dc1 	.word	0x08002dc1
 8002d4c:	08002dc1 	.word	0x08002dc1
 8002d50:	08002dc1 	.word	0x08002dc1
 8002d54:	08002d8b 	.word	0x08002d8b
 8002d58:	08002dc1 	.word	0x08002dc1
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002dc1 	.word	0x08002dc1
 8002d64:	08002d9d 	.word	0x08002d9d
 8002d68:	08002dc1 	.word	0x08002dc1
 8002d6c:	08002dc1 	.word	0x08002dc1
 8002d70:	08002dc1 	.word	0x08002dc1
 8002d74:	08002daf 	.word	0x08002daf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0202 	orr.w	r2, r2, #2
 8002d86:	60da      	str	r2, [r3, #12]
      break;
 8002d88:	e01b      	b.n	8002dc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0204 	orr.w	r2, r2, #4
 8002d98:	60da      	str	r2, [r3, #12]
      break;
 8002d9a:	e012      	b.n	8002dc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0208 	orr.w	r2, r2, #8
 8002daa:	60da      	str	r2, [r3, #12]
      break;
 8002dac:	e009      	b.n	8002dc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0210 	orr.w	r2, r2, #16
 8002dbc:	60da      	str	r2, [r3, #12]
      break;
 8002dbe:	e000      	b.n	8002dc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002dc0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 f845 	bl	8003e5a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <HAL_TIM_IC_Start_IT+0x200>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <HAL_TIM_IC_Start_IT+0x1c0>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de2:	d009      	beq.n	8002df8 <HAL_TIM_IC_Start_IT+0x1c0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIM_IC_Start_IT+0x204>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_TIM_IC_Start_IT+0x1c0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <HAL_TIM_IC_Start_IT+0x208>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d111      	bne.n	8002e1c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d010      	beq.n	8002e2c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1a:	e007      	b.n	8002e2c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800

08002e44 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d841      	bhi.n	8002ed8 <HAL_TIM_IC_Stop_IT+0x94>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <HAL_TIM_IC_Stop_IT+0x18>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002ed9 	.word	0x08002ed9
 8002e64:	08002ed9 	.word	0x08002ed9
 8002e68:	08002ed9 	.word	0x08002ed9
 8002e6c:	08002ea3 	.word	0x08002ea3
 8002e70:	08002ed9 	.word	0x08002ed9
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08002ed9 	.word	0x08002ed9
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002ed9 	.word	0x08002ed9
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	08002ed9 	.word	0x08002ed9
 8002e8c:	08002ec7 	.word	0x08002ec7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0202 	bic.w	r2, r2, #2
 8002e9e:	60da      	str	r2, [r3, #12]
      break;
 8002ea0:	e01b      	b.n	8002eda <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0204 	bic.w	r2, r2, #4
 8002eb0:	60da      	str	r2, [r3, #12]
      break;
 8002eb2:	e012      	b.n	8002eda <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0208 	bic.w	r2, r2, #8
 8002ec2:	60da      	str	r2, [r3, #12]
      break;
 8002ec4:	e009      	b.n	8002eda <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0210 	bic.w	r2, r2, #16
 8002ed4:	60da      	str	r2, [r3, #12]
      break;
 8002ed6:	e000      	b.n	8002eda <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8002ed8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ffb9 	bl	8003e5a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10f      	bne.n	8002f18 <HAL_TIM_IC_Stop_IT+0xd4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	f240 4344 	movw	r3, #1092	; 0x444
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_TIM_IC_Stop_IT+0xd4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <HAL_TIM_IC_Stop_IT+0xe4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f26:	e013      	b.n	8002f50 <HAL_TIM_IC_Stop_IT+0x10c>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d104      	bne.n	8002f38 <HAL_TIM_IC_Stop_IT+0xf4>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f36:	e00b      	b.n	8002f50 <HAL_TIM_IC_Stop_IT+0x10c>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d104      	bne.n	8002f48 <HAL_TIM_IC_Stop_IT+0x104>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f46:	e003      	b.n	8002f50 <HAL_TIM_IC_Stop_IT+0x10c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <HAL_TIM_IC_Stop_IT+0x11c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5e:	e013      	b.n	8002f88 <HAL_TIM_IC_Stop_IT+0x144>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d104      	bne.n	8002f70 <HAL_TIM_IC_Stop_IT+0x12c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f6e:	e00b      	b.n	8002f88 <HAL_TIM_IC_Stop_IT+0x144>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d104      	bne.n	8002f80 <HAL_TIM_IC_Stop_IT+0x13c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f7e:	e003      	b.n	8002f88 <HAL_TIM_IC_Stop_IT+0x144>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop

08002f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0202 	mvn.w	r2, #2
 8002fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fd5e 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fb92 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fb98 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0204 	mvn.w	r2, #4
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fd34 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fb68 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fb6e 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0208 	mvn.w	r2, #8
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fd0a 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb3e 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb44 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0210 	mvn.w	r2, #16
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2208      	movs	r2, #8
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fce0 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fb14 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb1a 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0201 	mvn.w	r2, #1
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fc90 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 ff68 	bl	8004014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fade 	bl	800372c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b20      	cmp	r3, #32
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0220 	mvn.w	r2, #32
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 ff33 	bl	8004002 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_TIM_OC_ConfigChannel+0x1a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e046      	b.n	800324c <HAL_TIM_OC_ConfigChannel+0xa8>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d839      	bhi.n	8003240 <HAL_TIM_OC_ConfigChannel+0x9c>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003241 	.word	0x08003241
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003241 	.word	0x08003241
 80031e4:	08003217 	.word	0x08003217
 80031e8:	08003241 	.word	0x08003241
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003225 	.word	0x08003225
 80031f8:	08003241 	.word	0x08003241
 80031fc:	08003241 	.word	0x08003241
 8003200:	08003241 	.word	0x08003241
 8003204:	08003233 	.word	0x08003233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 faf8 	bl	8003804 <TIM_OC1_SetConfig>
      break;
 8003214:	e015      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fb57 	bl	80038d0 <TIM_OC2_SetConfig>
      break;
 8003222:	e00e      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fbba 	bl	80039a4 <TIM_OC3_SetConfig>
      break;
 8003230:	e007      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fc1d 	bl	8003a78 <TIM_OC4_SetConfig>
      break;
 800323e:	e000      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003240:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_TIM_IC_ConfigChannel+0x1a>
 800326a:	2302      	movs	r3, #2
 800326c:	e082      	b.n	8003374 <HAL_TIM_IC_ConfigChannel+0x120>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f000 fc42 	bl	8003b14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020c 	bic.w	r2, r2, #12
 800329e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	619a      	str	r2, [r3, #24]
 80032b2:	e05a      	b.n	800336a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d11c      	bne.n	80032f4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f000 fcab 	bl	8003c24 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6999      	ldr	r1, [r3, #24]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	021a      	lsls	r2, r3, #8
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	e03a      	b.n	800336a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11b      	bne.n	8003332 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f000 fcf6 	bl	8003cfa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 020c 	bic.w	r2, r2, #12
 800331c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
 8003330:	e01b      	b.n	800336a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f000 fd15 	bl	8003d70 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003354:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003392:	2302      	movs	r3, #2
 8003394:	e0ac      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	f200 809f 	bhi.w	80034e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080034e5 	.word	0x080034e5
 80033b4:	080034e5 	.word	0x080034e5
 80033b8:	080034e5 	.word	0x080034e5
 80033bc:	08003421 	.word	0x08003421
 80033c0:	080034e5 	.word	0x080034e5
 80033c4:	080034e5 	.word	0x080034e5
 80033c8:	080034e5 	.word	0x080034e5
 80033cc:	08003463 	.word	0x08003463
 80033d0:	080034e5 	.word	0x080034e5
 80033d4:	080034e5 	.word	0x080034e5
 80033d8:	080034e5 	.word	0x080034e5
 80033dc:	080034a3 	.word	0x080034a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa0c 	bl	8003804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	619a      	str	r2, [r3, #24]
      break;
 800341e:	e062      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fa52 	bl	80038d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6999      	ldr	r1, [r3, #24]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	021a      	lsls	r2, r3, #8
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	619a      	str	r2, [r3, #24]
      break;
 8003460:	e041      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa9b 	bl	80039a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0208 	orr.w	r2, r2, #8
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0204 	bic.w	r2, r2, #4
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	61da      	str	r2, [r3, #28]
      break;
 80034a0:	e021      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fae5 	bl	8003a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69d9      	ldr	r1, [r3, #28]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	61da      	str	r2, [r3, #28]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80034e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIM_ConfigClockSource+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e0b3      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x180>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800352e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003536:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003548:	d03e      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0xd0>
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	f200 8087 	bhi.w	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003556:	f000 8085 	beq.w	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355e:	d87f      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003560:	2b70      	cmp	r3, #112	; 0x70
 8003562:	d01a      	beq.n	800359a <HAL_TIM_ConfigClockSource+0xa2>
 8003564:	2b70      	cmp	r3, #112	; 0x70
 8003566:	d87b      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003568:	2b60      	cmp	r3, #96	; 0x60
 800356a:	d050      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x116>
 800356c:	2b60      	cmp	r3, #96	; 0x60
 800356e:	d877      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003570:	2b50      	cmp	r3, #80	; 0x50
 8003572:	d03c      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0xf6>
 8003574:	2b50      	cmp	r3, #80	; 0x50
 8003576:	d873      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d058      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x136>
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d86f      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003580:	2b30      	cmp	r3, #48	; 0x30
 8003582:	d064      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x156>
 8003584:	2b30      	cmp	r3, #48	; 0x30
 8003586:	d86b      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003588:	2b20      	cmp	r3, #32
 800358a:	d060      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x156>
 800358c:	2b20      	cmp	r3, #32
 800358e:	d867      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05c      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x156>
 8003594:	2b10      	cmp	r3, #16
 8003596:	d05a      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003598:	e062      	b.n	8003660 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6899      	ldr	r1, [r3, #8]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f000 fc37 	bl	8003e1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
      break;
 80035c6:	e04e      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f000 fc20 	bl	8003e1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ea:	609a      	str	r2, [r3, #8]
      break;
 80035ec:	e03b      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fae4 	bl	8003bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2150      	movs	r1, #80	; 0x50
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fbee 	bl	8003de8 <TIM_ITRx_SetConfig>
      break;
 800360c:	e02b      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	f000 fb3e 	bl	8003c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2160      	movs	r1, #96	; 0x60
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fbde 	bl	8003de8 <TIM_ITRx_SetConfig>
      break;
 800362c:	e01b      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	461a      	mov	r2, r3
 800363c:	f000 fac4 	bl	8003bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2140      	movs	r1, #64	; 0x40
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fbce 	bl	8003de8 <TIM_ITRx_SetConfig>
      break;
 800364c:	e00b      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f000 fbc5 	bl	8003de8 <TIM_ITRx_SetConfig>
        break;
 800365e:	e002      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003660:	bf00      	nop
 8003662:	e000      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d831      	bhi.n	80036f8 <HAL_TIM_ReadCapturedValue+0x78>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036d1 	.word	0x080036d1
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	080036f9 	.word	0x080036f9
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036f9 	.word	0x080036f9
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036ef 	.word	0x080036ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	60fb      	str	r3, [r7, #12]

      break;
 80036d8:	e00f      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	60fb      	str	r3, [r7, #12]

      break;
 80036e2:	e00a      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	60fb      	str	r3, [r7, #12]

      break;
 80036ec:	e005      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	60fb      	str	r3, [r7, #12]

      break;
 80036f6:	e000      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80036f8:	bf00      	nop
  }

  return tmpreg;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <TIM_Base_SetConfig+0xb8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x30>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x30>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a26      	ldr	r2, [pc, #152]	; (80037fc <TIM_Base_SetConfig+0xbc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x30>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a25      	ldr	r2, [pc, #148]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <TIM_Base_SetConfig+0xb8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d007      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <TIM_Base_SetConfig+0xbc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d108      	bne.n	80037b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <TIM_Base_SetConfig+0xb8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f023 0302 	bic.w	r3, r3, #2
 800384c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <TIM_OC1_SetConfig+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10c      	bne.n	800387a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0308 	bic.w	r3, r3, #8
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <TIM_OC1_SetConfig+0xc8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_OC2_SetConfig+0xd0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10d      	bne.n	800394c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <TIM_OC2_SetConfig+0xd0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <TIM_OC3_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10d      	bne.n	8003a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <TIM_OC3_SetConfig+0xd0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d113      	bne.n	8003a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	031b      	lsls	r3, r3, #12
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <TIM_OC4_SetConfig+0x98>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d109      	bne.n	8003aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00

08003b14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <TIM_TI1_SetConfig+0xa8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_TI1_SetConfig+0x46>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d007      	beq.n	8003b5a <TIM_TI1_SetConfig+0x46>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <TIM_TI1_SetConfig+0xac>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_TI1_SetConfig+0x46>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <TIM_TI1_SetConfig+0xb0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <TIM_TI1_SetConfig+0x4a>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <TIM_TI1_SetConfig+0x4c>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e003      	b.n	8003b7e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f023 030a 	bic.w	r3, r3, #10
 8003b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f003 030a 	and.w	r3, r3, #10
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800

08003bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0201 	bic.w	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 030a 	bic.w	r3, r3, #10
 8003c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0210 	bic.w	r2, r3, #16
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	031b      	lsls	r3, r3, #12
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 0210 	bic.w	r2, r3, #16
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	031b      	lsls	r3, r3, #12
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b087      	sub	sp, #28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	031b      	lsls	r3, r3, #12
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	031b      	lsls	r3, r3, #12
 8003dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f043 0307 	orr.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b087      	sub	sp, #28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	621a      	str	r2, [r3, #32]
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e046      	b.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f08:	d009      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10c      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800

08003f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e03d      	b.n	8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e03f      	b.n	80040b8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fd fac1 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2224      	movs	r2, #36	; 0x24
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004068:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fbe4 	bl	8004838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d130      	bne.n	800413c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Transmit_IT+0x26>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e029      	b.n	800413e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Transmit_IT+0x38>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e022      	b.n	800413e <HAL_UART_Transmit_IT+0x7e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2221      	movs	r2, #33	; 0x21
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004136:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d11d      	bne.n	800419e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_UART_Receive_IT+0x26>
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e016      	b.n	80041a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_UART_Receive_IT+0x38>
 800417c:	2302      	movs	r3, #2
 800417e:	e00f      	b.n	80041a0 <HAL_UART_Receive_IT+0x58>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	461a      	mov	r2, r3
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f9c5 	bl	8004524 <UART_Start_Receive_IT>
 800419a:	4603      	mov	r3, r0
 800419c:	e000      	b.n	80041a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_UART_IRQHandler+0x52>
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa76 	bl	80046e4 <UART_Receive_IT>
      return;
 80041f8:	e17b      	b.n	80044f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80b1 	beq.w	8004364 <HAL_UART_IRQHandler+0x1bc>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <HAL_UART_IRQHandler+0x70>
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80a6 	beq.w	8004364 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_UART_IRQHandler+0x90>
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_UART_IRQHandler+0xb0>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f043 0202 	orr.w	r2, r3, #2
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_UART_IRQHandler+0xd0>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <HAL_UART_IRQHandler+0xfa>
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <HAL_UART_IRQHandler+0xee>
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 811e 	beq.w	80044e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_UART_IRQHandler+0x11e>
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa0f 	bl	80046e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <HAL_UART_IRQHandler+0x146>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d031      	beq.n	8004352 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f951 	bl	8004596 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d023      	beq.n	800434a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004310:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	2b00      	cmp	r3, #0
 8004318:	d013      	beq.n	8004342 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	4a76      	ldr	r2, [pc, #472]	; (80044f8 <HAL_UART_IRQHandler+0x350>)
 8004320:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fb6a 	bl	8001a00 <HAL_DMA_Abort_IT>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800433c:	4610      	mov	r0, r2
 800433e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e00e      	b.n	8004360 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8da 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	e00a      	b.n	8004360 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8d6 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	e006      	b.n	8004360 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8d2 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800435e:	e0c3      	b.n	80044e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	bf00      	nop
    return;
 8004362:	e0c1      	b.n	80044e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 80a1 	bne.w	80044b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 809b 	beq.w	80044b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8095 	beq.w	80044b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04e      	beq.n	8004448 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043b4:	8a3b      	ldrh	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8098 	beq.w	80044ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c0:	8a3a      	ldrh	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	f080 8092 	bcs.w	80044ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8a3a      	ldrh	r2, [r7, #16]
 80043cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d02b      	beq.n	8004430 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004406:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0210 	bic.w	r2, r2, #16
 8004424:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd faad 	bl	800198a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004438:	b29b      	uxth	r3, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	b29b      	uxth	r3, r3
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f864 	bl	800450e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004446:	e051      	b.n	80044ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d047      	beq.n	80044f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004460:	8a7b      	ldrh	r3, [r7, #18]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d044      	beq.n	80044f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004474:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0210 	bic.w	r2, r2, #16
 80044a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a4:	8a7b      	ldrh	r3, [r7, #18]
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f830 	bl	800450e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044ae:	e01f      	b.n	80044f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_UART_IRQHandler+0x324>
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8a6 	bl	8004616 <UART_Transmit_IT>
    return;
 80044ca:	e012      	b.n	80044f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <HAL_UART_IRQHandler+0x34a>
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8e7 	bl	80046b4 <UART_EndTransmit_IT>
    return;
 80044e6:	e004      	b.n	80044f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80044f0:	bf00      	nop
  }
}
 80044f2:	3728      	adds	r7, #40	; 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	080045ef 	.word	0x080045ef

080044fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2222      	movs	r2, #34	; 0x22
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004568:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0220 	orr.w	r2, r2, #32
 8004588:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045ac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0210 	bic.w	r2, r2, #16
 80045d4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff ff77 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	; 0x21
 8004628:	d13e      	bne.n	80046a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	d114      	bne.n	800465e <UART_Transmit_IT+0x48>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004650:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]
 800465c:	e008      	b.n	8004670 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6211      	str	r1, [r2, #32]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4619      	mov	r1, r3
 800467e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc f893 	bl	8000800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b22      	cmp	r3, #34	; 0x22
 80046f6:	f040 8099 	bne.w	800482c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d117      	bne.n	8004734 <UART_Receive_IT+0x50>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	b29a      	uxth	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
 8004732:	e026      	b.n	8004782 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	d007      	beq.n	8004758 <UART_Receive_IT+0x74>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <UART_Receive_IT+0x82>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e008      	b.n	8004778 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004772:	b2da      	uxtb	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29b      	uxth	r3, r3
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4619      	mov	r1, r3
 8004790:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004792:	2b00      	cmp	r3, #0
 8004794:	d148      	bne.n	8004828 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0220 	bic.w	r2, r2, #32
 80047a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d123      	bne.n	800481e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0210 	bic.w	r2, r2, #16
 80047ea:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d10a      	bne.n	8004810 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fe79 	bl	800450e <HAL_UARTEx_RxEventCallback>
 800481c:	e002      	b.n	8004824 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fc f822 	bl	8000868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e002      	b.n	800482e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004872:	f023 030c 	bic.w	r3, r3, #12
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	430b      	orrs	r3, r1
 800487e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2c      	ldr	r2, [pc, #176]	; (800494c <UART_SetConfig+0x114>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d103      	bne.n	80048a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fd feca 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	e002      	b.n	80048ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fd feb2 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80048ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009a      	lsls	r2, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <UART_SetConfig+0x118>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	0119      	lsls	r1, r3, #4
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <UART_SetConfig+0x118>)
 80048e6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2064      	movs	r0, #100	; 0x64
 80048ee:	fb00 f303 	mul.w	r3, r0, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	3332      	adds	r3, #50	; 0x32
 80048f8:	4a15      	ldr	r2, [pc, #84]	; (8004950 <UART_SetConfig+0x118>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004904:	4419      	add	r1, r3
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009a      	lsls	r2, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	fbb2 f2f3 	udiv	r2, r2, r3
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <UART_SetConfig+0x118>)
 800491e:	fba3 0302 	umull	r0, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2064      	movs	r0, #100	; 0x64
 8004926:	fb00 f303 	mul.w	r3, r0, r3
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	3332      	adds	r3, #50	; 0x32
 8004930:	4a07      	ldr	r2, [pc, #28]	; (8004950 <UART_SetConfig+0x118>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	440a      	add	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40013800 	.word	0x40013800
 8004950:	51eb851f 	.word	0x51eb851f

08004954 <__errno>:
 8004954:	4b01      	ldr	r3, [pc, #4]	; (800495c <__errno+0x8>)
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000018 	.word	0x20000018

08004960 <__libc_init_array>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	2600      	movs	r6, #0
 8004964:	4d0c      	ldr	r5, [pc, #48]	; (8004998 <__libc_init_array+0x38>)
 8004966:	4c0d      	ldr	r4, [pc, #52]	; (800499c <__libc_init_array+0x3c>)
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	42a6      	cmp	r6, r4
 800496e:	d109      	bne.n	8004984 <__libc_init_array+0x24>
 8004970:	f001 f91e 	bl	8005bb0 <_init>
 8004974:	2600      	movs	r6, #0
 8004976:	4d0a      	ldr	r5, [pc, #40]	; (80049a0 <__libc_init_array+0x40>)
 8004978:	4c0a      	ldr	r4, [pc, #40]	; (80049a4 <__libc_init_array+0x44>)
 800497a:	1b64      	subs	r4, r4, r5
 800497c:	10a4      	asrs	r4, r4, #2
 800497e:	42a6      	cmp	r6, r4
 8004980:	d105      	bne.n	800498e <__libc_init_array+0x2e>
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	f855 3b04 	ldr.w	r3, [r5], #4
 8004988:	4798      	blx	r3
 800498a:	3601      	adds	r6, #1
 800498c:	e7ee      	b.n	800496c <__libc_init_array+0xc>
 800498e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004992:	4798      	blx	r3
 8004994:	3601      	adds	r6, #1
 8004996:	e7f2      	b.n	800497e <__libc_init_array+0x1e>
 8004998:	0800620c 	.word	0x0800620c
 800499c:	0800620c 	.word	0x0800620c
 80049a0:	0800620c 	.word	0x0800620c
 80049a4:	08006210 	.word	0x08006210

080049a8 <memset>:
 80049a8:	4603      	mov	r3, r0
 80049aa:	4402      	add	r2, r0
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d100      	bne.n	80049b2 <memset+0xa>
 80049b0:	4770      	bx	lr
 80049b2:	f803 1b01 	strb.w	r1, [r3], #1
 80049b6:	e7f9      	b.n	80049ac <memset+0x4>

080049b8 <siscanf>:
 80049b8:	b40e      	push	{r1, r2, r3}
 80049ba:	f44f 7201 	mov.w	r2, #516	; 0x204
 80049be:	b530      	push	{r4, r5, lr}
 80049c0:	b09c      	sub	sp, #112	; 0x70
 80049c2:	ac1f      	add	r4, sp, #124	; 0x7c
 80049c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80049c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80049cc:	9002      	str	r0, [sp, #8]
 80049ce:	9006      	str	r0, [sp, #24]
 80049d0:	f7fb fbc6 	bl	8000160 <strlen>
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <siscanf+0x4c>)
 80049d6:	9003      	str	r0, [sp, #12]
 80049d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80049da:	2300      	movs	r3, #0
 80049dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80049de:	9314      	str	r3, [sp, #80]	; 0x50
 80049e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e4:	9007      	str	r0, [sp, #28]
 80049e6:	4808      	ldr	r0, [pc, #32]	; (8004a08 <siscanf+0x50>)
 80049e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049ec:	462a      	mov	r2, r5
 80049ee:	4623      	mov	r3, r4
 80049f0:	a902      	add	r1, sp, #8
 80049f2:	6800      	ldr	r0, [r0, #0]
 80049f4:	9401      	str	r4, [sp, #4]
 80049f6:	f000 f9e1 	bl	8004dbc <__ssvfiscanf_r>
 80049fa:	b01c      	add	sp, #112	; 0x70
 80049fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a00:	b003      	add	sp, #12
 8004a02:	4770      	bx	lr
 8004a04:	08004a0d 	.word	0x08004a0d
 8004a08:	20000018 	.word	0x20000018

08004a0c <__seofread>:
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	4770      	bx	lr

08004a10 <_vsiprintf_r>:
 8004a10:	b500      	push	{lr}
 8004a12:	b09b      	sub	sp, #108	; 0x6c
 8004a14:	9100      	str	r1, [sp, #0]
 8004a16:	9104      	str	r1, [sp, #16]
 8004a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	9102      	str	r1, [sp, #8]
 8004a20:	4905      	ldr	r1, [pc, #20]	; (8004a38 <_vsiprintf_r+0x28>)
 8004a22:	9103      	str	r1, [sp, #12]
 8004a24:	4669      	mov	r1, sp
 8004a26:	f000 f86f 	bl	8004b08 <_svfiprintf_r>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	9b00      	ldr	r3, [sp, #0]
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	b01b      	add	sp, #108	; 0x6c
 8004a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a36:	bf00      	nop
 8004a38:	ffff0208 	.word	0xffff0208

08004a3c <vsiprintf>:
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	460a      	mov	r2, r1
 8004a40:	4601      	mov	r1, r0
 8004a42:	4802      	ldr	r0, [pc, #8]	; (8004a4c <vsiprintf+0x10>)
 8004a44:	6800      	ldr	r0, [r0, #0]
 8004a46:	f7ff bfe3 	b.w	8004a10 <_vsiprintf_r>
 8004a4a:	bf00      	nop
 8004a4c:	20000018 	.word	0x20000018

08004a50 <__ssputs_r>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	688e      	ldr	r6, [r1, #8]
 8004a56:	4682      	mov	sl, r0
 8004a58:	429e      	cmp	r6, r3
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	4690      	mov	r8, r2
 8004a5e:	461f      	mov	r7, r3
 8004a60:	d838      	bhi.n	8004ad4 <__ssputs_r+0x84>
 8004a62:	898a      	ldrh	r2, [r1, #12]
 8004a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a68:	d032      	beq.n	8004ad0 <__ssputs_r+0x80>
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	6909      	ldr	r1, [r1, #16]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	eba5 0901 	sub.w	r9, r5, r1
 8004a74:	6965      	ldr	r5, [r4, #20]
 8004a76:	444b      	add	r3, r9
 8004a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a80:	106d      	asrs	r5, r5, #1
 8004a82:	429d      	cmp	r5, r3
 8004a84:	bf38      	it	cc
 8004a86:	461d      	movcc	r5, r3
 8004a88:	0553      	lsls	r3, r2, #21
 8004a8a:	d531      	bpl.n	8004af0 <__ssputs_r+0xa0>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f000 ffeb 	bl	8005a68 <_malloc_r>
 8004a92:	4606      	mov	r6, r0
 8004a94:	b950      	cbnz	r0, 8004aac <__ssputs_r+0x5c>
 8004a96:	230c      	movs	r3, #12
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	f8ca 3000 	str.w	r3, [sl]
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aac:	464a      	mov	r2, r9
 8004aae:	6921      	ldr	r1, [r4, #16]
 8004ab0:	f000 ff66 	bl	8005980 <memcpy>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	6126      	str	r6, [r4, #16]
 8004ac2:	444e      	add	r6, r9
 8004ac4:	6026      	str	r6, [r4, #0]
 8004ac6:	463e      	mov	r6, r7
 8004ac8:	6165      	str	r5, [r4, #20]
 8004aca:	eba5 0509 	sub.w	r5, r5, r9
 8004ace:	60a5      	str	r5, [r4, #8]
 8004ad0:	42be      	cmp	r6, r7
 8004ad2:	d900      	bls.n	8004ad6 <__ssputs_r+0x86>
 8004ad4:	463e      	mov	r6, r7
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	4641      	mov	r1, r8
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	f000 ff5e 	bl	800599c <memmove>
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	1b9b      	subs	r3, r3, r6
 8004ae6:	4432      	add	r2, r6
 8004ae8:	2000      	movs	r0, #0
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	e7db      	b.n	8004aa8 <__ssputs_r+0x58>
 8004af0:	462a      	mov	r2, r5
 8004af2:	f001 f813 	bl	8005b1c <_realloc_r>
 8004af6:	4606      	mov	r6, r0
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d1e1      	bne.n	8004ac0 <__ssputs_r+0x70>
 8004afc:	4650      	mov	r0, sl
 8004afe:	6921      	ldr	r1, [r4, #16]
 8004b00:	f000 ff66 	bl	80059d0 <_free_r>
 8004b04:	e7c7      	b.n	8004a96 <__ssputs_r+0x46>
	...

08004b08 <_svfiprintf_r>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	4698      	mov	r8, r3
 8004b0e:	898b      	ldrh	r3, [r1, #12]
 8004b10:	4607      	mov	r7, r0
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	460d      	mov	r5, r1
 8004b16:	4614      	mov	r4, r2
 8004b18:	b09d      	sub	sp, #116	; 0x74
 8004b1a:	d50e      	bpl.n	8004b3a <_svfiprintf_r+0x32>
 8004b1c:	690b      	ldr	r3, [r1, #16]
 8004b1e:	b963      	cbnz	r3, 8004b3a <_svfiprintf_r+0x32>
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	f000 ffa1 	bl	8005a68 <_malloc_r>
 8004b26:	6028      	str	r0, [r5, #0]
 8004b28:	6128      	str	r0, [r5, #16]
 8004b2a:	b920      	cbnz	r0, 8004b36 <_svfiprintf_r+0x2e>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e0d1      	b.n	8004cda <_svfiprintf_r+0x1d2>
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	616b      	str	r3, [r5, #20]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3e:	2320      	movs	r3, #32
 8004b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b44:	2330      	movs	r3, #48	; 0x30
 8004b46:	f04f 0901 	mov.w	r9, #1
 8004b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004cf4 <_svfiprintf_r+0x1ec>
 8004b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b56:	4623      	mov	r3, r4
 8004b58:	469a      	mov	sl, r3
 8004b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b5e:	b10a      	cbz	r2, 8004b64 <_svfiprintf_r+0x5c>
 8004b60:	2a25      	cmp	r2, #37	; 0x25
 8004b62:	d1f9      	bne.n	8004b58 <_svfiprintf_r+0x50>
 8004b64:	ebba 0b04 	subs.w	fp, sl, r4
 8004b68:	d00b      	beq.n	8004b82 <_svfiprintf_r+0x7a>
 8004b6a:	465b      	mov	r3, fp
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4638      	mov	r0, r7
 8004b72:	f7ff ff6d 	bl	8004a50 <__ssputs_r>
 8004b76:	3001      	adds	r0, #1
 8004b78:	f000 80aa 	beq.w	8004cd0 <_svfiprintf_r+0x1c8>
 8004b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b7e:	445a      	add	r2, fp
 8004b80:	9209      	str	r2, [sp, #36]	; 0x24
 8004b82:	f89a 3000 	ldrb.w	r3, [sl]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80a2 	beq.w	8004cd0 <_svfiprintf_r+0x1c8>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b96:	f10a 0a01 	add.w	sl, sl, #1
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	9307      	str	r3, [sp, #28]
 8004b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba4:	4654      	mov	r4, sl
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bac:	4851      	ldr	r0, [pc, #324]	; (8004cf4 <_svfiprintf_r+0x1ec>)
 8004bae:	f000 fed9 	bl	8005964 <memchr>
 8004bb2:	9a04      	ldr	r2, [sp, #16]
 8004bb4:	b9d8      	cbnz	r0, 8004bee <_svfiprintf_r+0xe6>
 8004bb6:	06d0      	lsls	r0, r2, #27
 8004bb8:	bf44      	itt	mi
 8004bba:	2320      	movmi	r3, #32
 8004bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc0:	0711      	lsls	r1, r2, #28
 8004bc2:	bf44      	itt	mi
 8004bc4:	232b      	movmi	r3, #43	; 0x2b
 8004bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bca:	f89a 3000 	ldrb.w	r3, [sl]
 8004bce:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd0:	d015      	beq.n	8004bfe <_svfiprintf_r+0xf6>
 8004bd2:	4654      	mov	r4, sl
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f04f 0c0a 	mov.w	ip, #10
 8004bda:	9a07      	ldr	r2, [sp, #28]
 8004bdc:	4621      	mov	r1, r4
 8004bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be2:	3b30      	subs	r3, #48	; 0x30
 8004be4:	2b09      	cmp	r3, #9
 8004be6:	d94e      	bls.n	8004c86 <_svfiprintf_r+0x17e>
 8004be8:	b1b0      	cbz	r0, 8004c18 <_svfiprintf_r+0x110>
 8004bea:	9207      	str	r2, [sp, #28]
 8004bec:	e014      	b.n	8004c18 <_svfiprintf_r+0x110>
 8004bee:	eba0 0308 	sub.w	r3, r0, r8
 8004bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	46a2      	mov	sl, r4
 8004bfa:	9304      	str	r3, [sp, #16]
 8004bfc:	e7d2      	b.n	8004ba4 <_svfiprintf_r+0x9c>
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	1d19      	adds	r1, r3, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	9103      	str	r1, [sp, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bfbb      	ittet	lt
 8004c0a:	425b      	neglt	r3, r3
 8004c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c10:	9307      	strge	r3, [sp, #28]
 8004c12:	9307      	strlt	r3, [sp, #28]
 8004c14:	bfb8      	it	lt
 8004c16:	9204      	strlt	r2, [sp, #16]
 8004c18:	7823      	ldrb	r3, [r4, #0]
 8004c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c1c:	d10c      	bne.n	8004c38 <_svfiprintf_r+0x130>
 8004c1e:	7863      	ldrb	r3, [r4, #1]
 8004c20:	2b2a      	cmp	r3, #42	; 0x2a
 8004c22:	d135      	bne.n	8004c90 <_svfiprintf_r+0x188>
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	3402      	adds	r4, #2
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	9203      	str	r2, [sp, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb8      	it	lt
 8004c32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c36:	9305      	str	r3, [sp, #20]
 8004c38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d04 <_svfiprintf_r+0x1fc>
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	4650      	mov	r0, sl
 8004c40:	7821      	ldrb	r1, [r4, #0]
 8004c42:	f000 fe8f 	bl	8005964 <memchr>
 8004c46:	b140      	cbz	r0, 8004c5a <_svfiprintf_r+0x152>
 8004c48:	2340      	movs	r3, #64	; 0x40
 8004c4a:	eba0 000a 	sub.w	r0, r0, sl
 8004c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c52:	9b04      	ldr	r3, [sp, #16]
 8004c54:	3401      	adds	r4, #1
 8004c56:	4303      	orrs	r3, r0
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5e:	2206      	movs	r2, #6
 8004c60:	4825      	ldr	r0, [pc, #148]	; (8004cf8 <_svfiprintf_r+0x1f0>)
 8004c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c66:	f000 fe7d 	bl	8005964 <memchr>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d038      	beq.n	8004ce0 <_svfiprintf_r+0x1d8>
 8004c6e:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <_svfiprintf_r+0x1f4>)
 8004c70:	bb1b      	cbnz	r3, 8004cba <_svfiprintf_r+0x1b2>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	3307      	adds	r3, #7
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	9303      	str	r3, [sp, #12]
 8004c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c80:	4433      	add	r3, r6
 8004c82:	9309      	str	r3, [sp, #36]	; 0x24
 8004c84:	e767      	b.n	8004b56 <_svfiprintf_r+0x4e>
 8004c86:	460c      	mov	r4, r1
 8004c88:	2001      	movs	r0, #1
 8004c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8e:	e7a5      	b.n	8004bdc <_svfiprintf_r+0xd4>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f04f 0c0a 	mov.w	ip, #10
 8004c96:	4619      	mov	r1, r3
 8004c98:	3401      	adds	r4, #1
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca2:	3a30      	subs	r2, #48	; 0x30
 8004ca4:	2a09      	cmp	r2, #9
 8004ca6:	d903      	bls.n	8004cb0 <_svfiprintf_r+0x1a8>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0c5      	beq.n	8004c38 <_svfiprintf_r+0x130>
 8004cac:	9105      	str	r1, [sp, #20]
 8004cae:	e7c3      	b.n	8004c38 <_svfiprintf_r+0x130>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb8:	e7f0      	b.n	8004c9c <_svfiprintf_r+0x194>
 8004cba:	ab03      	add	r3, sp, #12
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <_svfiprintf_r+0x1f8>)
 8004cc4:	a904      	add	r1, sp, #16
 8004cc6:	f3af 8000 	nop.w
 8004cca:	1c42      	adds	r2, r0, #1
 8004ccc:	4606      	mov	r6, r0
 8004cce:	d1d6      	bne.n	8004c7e <_svfiprintf_r+0x176>
 8004cd0:	89ab      	ldrh	r3, [r5, #12]
 8004cd2:	065b      	lsls	r3, r3, #25
 8004cd4:	f53f af2c 	bmi.w	8004b30 <_svfiprintf_r+0x28>
 8004cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cda:	b01d      	add	sp, #116	; 0x74
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	ab03      	add	r3, sp, #12
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <_svfiprintf_r+0x1f8>)
 8004cea:	a904      	add	r1, sp, #16
 8004cec:	f000 fa50 	bl	8005190 <_printf_i>
 8004cf0:	e7eb      	b.n	8004cca <_svfiprintf_r+0x1c2>
 8004cf2:	bf00      	nop
 8004cf4:	0800605c 	.word	0x0800605c
 8004cf8:	08006066 	.word	0x08006066
 8004cfc:	00000000 	.word	0x00000000
 8004d00:	08004a51 	.word	0x08004a51
 8004d04:	08006062 	.word	0x08006062

08004d08 <_sungetc_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	1c4b      	adds	r3, r1, #1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	d103      	bne.n	8004d18 <_sungetc_r+0x10>
 8004d10:	f04f 35ff 	mov.w	r5, #4294967295
 8004d14:	4628      	mov	r0, r5
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	8993      	ldrh	r3, [r2, #12]
 8004d1a:	b2cd      	uxtb	r5, r1
 8004d1c:	f023 0320 	bic.w	r3, r3, #32
 8004d20:	8193      	strh	r3, [r2, #12]
 8004d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d24:	6852      	ldr	r2, [r2, #4]
 8004d26:	b18b      	cbz	r3, 8004d4c <_sungetc_r+0x44>
 8004d28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	dd08      	ble.n	8004d40 <_sungetc_r+0x38>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	1e5a      	subs	r2, r3, #1
 8004d32:	6022      	str	r2, [r4, #0]
 8004d34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	e7e9      	b.n	8004d14 <_sungetc_r+0xc>
 8004d40:	4621      	mov	r1, r4
 8004d42:	f000 fdd5 	bl	80058f0 <__submore>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d0f1      	beq.n	8004d2e <_sungetc_r+0x26>
 8004d4a:	e7e1      	b.n	8004d10 <_sungetc_r+0x8>
 8004d4c:	6921      	ldr	r1, [r4, #16]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	b151      	cbz	r1, 8004d68 <_sungetc_r+0x60>
 8004d52:	4299      	cmp	r1, r3
 8004d54:	d208      	bcs.n	8004d68 <_sungetc_r+0x60>
 8004d56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004d5a:	42a9      	cmp	r1, r5
 8004d5c:	d104      	bne.n	8004d68 <_sungetc_r+0x60>
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	3201      	adds	r2, #1
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	6062      	str	r2, [r4, #4]
 8004d66:	e7d5      	b.n	8004d14 <_sungetc_r+0xc>
 8004d68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d70:	6363      	str	r3, [r4, #52]	; 0x34
 8004d72:	2303      	movs	r3, #3
 8004d74:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d76:	4623      	mov	r3, r4
 8004d78:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7dc      	b.n	8004d3c <_sungetc_r+0x34>

08004d82 <__ssrefill_r>:
 8004d82:	b510      	push	{r4, lr}
 8004d84:	460c      	mov	r4, r1
 8004d86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004d88:	b169      	cbz	r1, 8004da6 <__ssrefill_r+0x24>
 8004d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	d001      	beq.n	8004d96 <__ssrefill_r+0x14>
 8004d92:	f000 fe1d 	bl	80059d0 <_free_r>
 8004d96:	2000      	movs	r0, #0
 8004d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	b113      	cbz	r3, 8004da6 <__ssrefill_r+0x24>
 8004da0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	6063      	str	r3, [r4, #4]
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	f043 0320 	orr.w	r3, r3, #32
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	e7f3      	b.n	8004da4 <__ssrefill_r+0x22>

08004dbc <__ssvfiscanf_r>:
 8004dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004dca:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004dce:	49b3      	ldr	r1, [pc, #716]	; (800509c <__ssvfiscanf_r+0x2e0>)
 8004dd0:	f10d 0804 	add.w	r8, sp, #4
 8004dd4:	91a0      	str	r1, [sp, #640]	; 0x280
 8004dd6:	49b2      	ldr	r1, [pc, #712]	; (80050a0 <__ssvfiscanf_r+0x2e4>)
 8004dd8:	4fb2      	ldr	r7, [pc, #712]	; (80050a4 <__ssvfiscanf_r+0x2e8>)
 8004dda:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80050a8 <__ssvfiscanf_r+0x2ec>
 8004dde:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004de2:	91a1      	str	r1, [sp, #644]	; 0x284
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	f892 a000 	ldrb.w	sl, [r2]
 8004dea:	f1ba 0f00 	cmp.w	sl, #0
 8004dee:	f000 8153 	beq.w	8005098 <__ssvfiscanf_r+0x2dc>
 8004df2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004df6:	1c55      	adds	r5, r2, #1
 8004df8:	f013 0308 	ands.w	r3, r3, #8
 8004dfc:	d019      	beq.n	8004e32 <__ssvfiscanf_r+0x76>
 8004dfe:	6863      	ldr	r3, [r4, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dd0f      	ble.n	8004e24 <__ssvfiscanf_r+0x68>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	781a      	ldrb	r2, [r3, #0]
 8004e08:	5cba      	ldrb	r2, [r7, r2]
 8004e0a:	0712      	lsls	r2, r2, #28
 8004e0c:	d401      	bmi.n	8004e12 <__ssvfiscanf_r+0x56>
 8004e0e:	462a      	mov	r2, r5
 8004e10:	e7e9      	b.n	8004de6 <__ssvfiscanf_r+0x2a>
 8004e12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e14:	3301      	adds	r3, #1
 8004e16:	3201      	adds	r2, #1
 8004e18:	9245      	str	r2, [sp, #276]	; 0x114
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	6062      	str	r2, [r4, #4]
 8004e22:	e7ec      	b.n	8004dfe <__ssvfiscanf_r+0x42>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4630      	mov	r0, r6
 8004e28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e2a:	4798      	blx	r3
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d0e9      	beq.n	8004e04 <__ssvfiscanf_r+0x48>
 8004e30:	e7ed      	b.n	8004e0e <__ssvfiscanf_r+0x52>
 8004e32:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004e36:	f040 8086 	bne.w	8004f46 <__ssvfiscanf_r+0x18a>
 8004e3a:	9341      	str	r3, [sp, #260]	; 0x104
 8004e3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8004e3e:	7853      	ldrb	r3, [r2, #1]
 8004e40:	2b2a      	cmp	r3, #42	; 0x2a
 8004e42:	bf04      	itt	eq
 8004e44:	2310      	moveq	r3, #16
 8004e46:	1c95      	addeq	r5, r2, #2
 8004e48:	f04f 020a 	mov.w	r2, #10
 8004e4c:	bf08      	it	eq
 8004e4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004e50:	46ab      	mov	fp, r5
 8004e52:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004e56:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	d91d      	bls.n	8004e9a <__ssvfiscanf_r+0xde>
 8004e5e:	2203      	movs	r2, #3
 8004e60:	4891      	ldr	r0, [pc, #580]	; (80050a8 <__ssvfiscanf_r+0x2ec>)
 8004e62:	f000 fd7f 	bl	8005964 <memchr>
 8004e66:	b140      	cbz	r0, 8004e7a <__ssvfiscanf_r+0xbe>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	465d      	mov	r5, fp
 8004e6c:	eba0 0009 	sub.w	r0, r0, r9
 8004e70:	fa03 f000 	lsl.w	r0, r3, r0
 8004e74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e76:	4318      	orrs	r0, r3
 8004e78:	9041      	str	r0, [sp, #260]	; 0x104
 8004e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e7e:	2b78      	cmp	r3, #120	; 0x78
 8004e80:	d806      	bhi.n	8004e90 <__ssvfiscanf_r+0xd4>
 8004e82:	2b57      	cmp	r3, #87	; 0x57
 8004e84:	d810      	bhi.n	8004ea8 <__ssvfiscanf_r+0xec>
 8004e86:	2b25      	cmp	r3, #37	; 0x25
 8004e88:	d05d      	beq.n	8004f46 <__ssvfiscanf_r+0x18a>
 8004e8a:	d857      	bhi.n	8004f3c <__ssvfiscanf_r+0x180>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d075      	beq.n	8004f7c <__ssvfiscanf_r+0x1c0>
 8004e90:	2303      	movs	r3, #3
 8004e92:	9347      	str	r3, [sp, #284]	; 0x11c
 8004e94:	230a      	movs	r3, #10
 8004e96:	9342      	str	r3, [sp, #264]	; 0x108
 8004e98:	e082      	b.n	8004fa0 <__ssvfiscanf_r+0x1e4>
 8004e9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004e9c:	465d      	mov	r5, fp
 8004e9e:	fb02 1303 	mla	r3, r2, r3, r1
 8004ea2:	3b30      	subs	r3, #48	; 0x30
 8004ea4:	9343      	str	r3, [sp, #268]	; 0x10c
 8004ea6:	e7d3      	b.n	8004e50 <__ssvfiscanf_r+0x94>
 8004ea8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004eac:	2a20      	cmp	r2, #32
 8004eae:	d8ef      	bhi.n	8004e90 <__ssvfiscanf_r+0xd4>
 8004eb0:	a101      	add	r1, pc, #4	; (adr r1, 8004eb8 <__ssvfiscanf_r+0xfc>)
 8004eb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004f8b 	.word	0x08004f8b
 8004ebc:	08004e91 	.word	0x08004e91
 8004ec0:	08004e91 	.word	0x08004e91
 8004ec4:	08004fe9 	.word	0x08004fe9
 8004ec8:	08004e91 	.word	0x08004e91
 8004ecc:	08004e91 	.word	0x08004e91
 8004ed0:	08004e91 	.word	0x08004e91
 8004ed4:	08004e91 	.word	0x08004e91
 8004ed8:	08004e91 	.word	0x08004e91
 8004edc:	08004e91 	.word	0x08004e91
 8004ee0:	08004e91 	.word	0x08004e91
 8004ee4:	08004fff 	.word	0x08004fff
 8004ee8:	08004fd5 	.word	0x08004fd5
 8004eec:	08004f43 	.word	0x08004f43
 8004ef0:	08004f43 	.word	0x08004f43
 8004ef4:	08004f43 	.word	0x08004f43
 8004ef8:	08004e91 	.word	0x08004e91
 8004efc:	08004fd9 	.word	0x08004fd9
 8004f00:	08004e91 	.word	0x08004e91
 8004f04:	08004e91 	.word	0x08004e91
 8004f08:	08004e91 	.word	0x08004e91
 8004f0c:	08004e91 	.word	0x08004e91
 8004f10:	0800500f 	.word	0x0800500f
 8004f14:	08004fe1 	.word	0x08004fe1
 8004f18:	08004f83 	.word	0x08004f83
 8004f1c:	08004e91 	.word	0x08004e91
 8004f20:	08004e91 	.word	0x08004e91
 8004f24:	0800500b 	.word	0x0800500b
 8004f28:	08004e91 	.word	0x08004e91
 8004f2c:	08004fd5 	.word	0x08004fd5
 8004f30:	08004e91 	.word	0x08004e91
 8004f34:	08004e91 	.word	0x08004e91
 8004f38:	08004f8b 	.word	0x08004f8b
 8004f3c:	3b45      	subs	r3, #69	; 0x45
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d8a6      	bhi.n	8004e90 <__ssvfiscanf_r+0xd4>
 8004f42:	2305      	movs	r3, #5
 8004f44:	e02b      	b.n	8004f9e <__ssvfiscanf_r+0x1e2>
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dd0d      	ble.n	8004f68 <__ssvfiscanf_r+0x1ac>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	4552      	cmp	r2, sl
 8004f52:	f040 80a1 	bne.w	8005098 <__ssvfiscanf_r+0x2dc>
 8004f56:	3301      	adds	r3, #1
 8004f58:	6862      	ldr	r2, [r4, #4]
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	3301      	adds	r3, #1
 8004f62:	6062      	str	r2, [r4, #4]
 8004f64:	9345      	str	r3, [sp, #276]	; 0x114
 8004f66:	e752      	b.n	8004e0e <__ssvfiscanf_r+0x52>
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004f6e:	4798      	blx	r3
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0eb      	beq.n	8004f4c <__ssvfiscanf_r+0x190>
 8004f74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004f76:	2800      	cmp	r0, #0
 8004f78:	f040 8084 	bne.w	8005084 <__ssvfiscanf_r+0x2c8>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	e086      	b.n	8005090 <__ssvfiscanf_r+0x2d4>
 8004f82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004f84:	f042 0220 	orr.w	r2, r2, #32
 8004f88:	9241      	str	r2, [sp, #260]	; 0x104
 8004f8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f90:	9241      	str	r2, [sp, #260]	; 0x104
 8004f92:	2210      	movs	r2, #16
 8004f94:	2b6f      	cmp	r3, #111	; 0x6f
 8004f96:	bf34      	ite	cc
 8004f98:	2303      	movcc	r3, #3
 8004f9a:	2304      	movcs	r3, #4
 8004f9c:	9242      	str	r2, [sp, #264]	; 0x108
 8004f9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dd41      	ble.n	800502a <__ssvfiscanf_r+0x26e>
 8004fa6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004fa8:	0659      	lsls	r1, r3, #25
 8004faa:	d404      	bmi.n	8004fb6 <__ssvfiscanf_r+0x1fa>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	5cba      	ldrb	r2, [r7, r2]
 8004fb2:	0712      	lsls	r2, r2, #28
 8004fb4:	d440      	bmi.n	8005038 <__ssvfiscanf_r+0x27c>
 8004fb6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	dc4f      	bgt.n	800505c <__ssvfiscanf_r+0x2a0>
 8004fbc:	466b      	mov	r3, sp
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	a941      	add	r1, sp, #260	; 0x104
 8004fc4:	f000 fa0a 	bl	80053dc <_scanf_chars>
 8004fc8:	2801      	cmp	r0, #1
 8004fca:	d065      	beq.n	8005098 <__ssvfiscanf_r+0x2dc>
 8004fcc:	2802      	cmp	r0, #2
 8004fce:	f47f af1e 	bne.w	8004e0e <__ssvfiscanf_r+0x52>
 8004fd2:	e7cf      	b.n	8004f74 <__ssvfiscanf_r+0x1b8>
 8004fd4:	220a      	movs	r2, #10
 8004fd6:	e7dd      	b.n	8004f94 <__ssvfiscanf_r+0x1d8>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9342      	str	r3, [sp, #264]	; 0x108
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e7de      	b.n	8004f9e <__ssvfiscanf_r+0x1e2>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	9342      	str	r3, [sp, #264]	; 0x108
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	e7da      	b.n	8004f9e <__ssvfiscanf_r+0x1e2>
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4640      	mov	r0, r8
 8004fec:	f000 fb40 	bl	8005670 <__sccl>
 8004ff0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff8:	9341      	str	r3, [sp, #260]	; 0x104
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e7cf      	b.n	8004f9e <__ssvfiscanf_r+0x1e2>
 8004ffe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005004:	9341      	str	r3, [sp, #260]	; 0x104
 8005006:	2300      	movs	r3, #0
 8005008:	e7c9      	b.n	8004f9e <__ssvfiscanf_r+0x1e2>
 800500a:	2302      	movs	r3, #2
 800500c:	e7c7      	b.n	8004f9e <__ssvfiscanf_r+0x1e2>
 800500e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005010:	06c3      	lsls	r3, r0, #27
 8005012:	f53f aefc 	bmi.w	8004e0e <__ssvfiscanf_r+0x52>
 8005016:	9b00      	ldr	r3, [sp, #0]
 8005018:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800501a:	1d19      	adds	r1, r3, #4
 800501c:	9100      	str	r1, [sp, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	07c0      	lsls	r0, r0, #31
 8005022:	bf4c      	ite	mi
 8005024:	801a      	strhmi	r2, [r3, #0]
 8005026:	601a      	strpl	r2, [r3, #0]
 8005028:	e6f1      	b.n	8004e0e <__ssvfiscanf_r+0x52>
 800502a:	4621      	mov	r1, r4
 800502c:	4630      	mov	r0, r6
 800502e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005030:	4798      	blx	r3
 8005032:	2800      	cmp	r0, #0
 8005034:	d0b7      	beq.n	8004fa6 <__ssvfiscanf_r+0x1ea>
 8005036:	e79d      	b.n	8004f74 <__ssvfiscanf_r+0x1b8>
 8005038:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800503a:	3201      	adds	r2, #1
 800503c:	9245      	str	r2, [sp, #276]	; 0x114
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	3a01      	subs	r2, #1
 8005042:	2a00      	cmp	r2, #0
 8005044:	6062      	str	r2, [r4, #4]
 8005046:	dd02      	ble.n	800504e <__ssvfiscanf_r+0x292>
 8005048:	3301      	adds	r3, #1
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	e7ae      	b.n	8004fac <__ssvfiscanf_r+0x1f0>
 800504e:	4621      	mov	r1, r4
 8005050:	4630      	mov	r0, r6
 8005052:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005054:	4798      	blx	r3
 8005056:	2800      	cmp	r0, #0
 8005058:	d0a8      	beq.n	8004fac <__ssvfiscanf_r+0x1f0>
 800505a:	e78b      	b.n	8004f74 <__ssvfiscanf_r+0x1b8>
 800505c:	2b04      	cmp	r3, #4
 800505e:	dc06      	bgt.n	800506e <__ssvfiscanf_r+0x2b2>
 8005060:	466b      	mov	r3, sp
 8005062:	4622      	mov	r2, r4
 8005064:	4630      	mov	r0, r6
 8005066:	a941      	add	r1, sp, #260	; 0x104
 8005068:	f000 fa10 	bl	800548c <_scanf_i>
 800506c:	e7ac      	b.n	8004fc8 <__ssvfiscanf_r+0x20c>
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <__ssvfiscanf_r+0x2f0>)
 8005070:	2b00      	cmp	r3, #0
 8005072:	f43f aecc 	beq.w	8004e0e <__ssvfiscanf_r+0x52>
 8005076:	466b      	mov	r3, sp
 8005078:	4622      	mov	r2, r4
 800507a:	4630      	mov	r0, r6
 800507c:	a941      	add	r1, sp, #260	; 0x104
 800507e:	f3af 8000 	nop.w
 8005082:	e7a1      	b.n	8004fc8 <__ssvfiscanf_r+0x20c>
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	f013 0f40 	tst.w	r3, #64	; 0x40
 800508a:	bf18      	it	ne
 800508c:	f04f 30ff 	movne.w	r0, #4294967295
 8005090:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005098:	9844      	ldr	r0, [sp, #272]	; 0x110
 800509a:	e7f9      	b.n	8005090 <__ssvfiscanf_r+0x2d4>
 800509c:	08004d09 	.word	0x08004d09
 80050a0:	08004d83 	.word	0x08004d83
 80050a4:	080060ab 	.word	0x080060ab
 80050a8:	08006062 	.word	0x08006062
 80050ac:	00000000 	.word	0x00000000

080050b0 <_printf_common>:
 80050b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b4:	4616      	mov	r6, r2
 80050b6:	4699      	mov	r9, r3
 80050b8:	688a      	ldr	r2, [r1, #8]
 80050ba:	690b      	ldr	r3, [r1, #16]
 80050bc:	4607      	mov	r7, r0
 80050be:	4293      	cmp	r3, r2
 80050c0:	bfb8      	it	lt
 80050c2:	4613      	movlt	r3, r2
 80050c4:	6033      	str	r3, [r6, #0]
 80050c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ca:	460c      	mov	r4, r1
 80050cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050d0:	b10a      	cbz	r2, 80050d6 <_printf_common+0x26>
 80050d2:	3301      	adds	r3, #1
 80050d4:	6033      	str	r3, [r6, #0]
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	0699      	lsls	r1, r3, #26
 80050da:	bf42      	ittt	mi
 80050dc:	6833      	ldrmi	r3, [r6, #0]
 80050de:	3302      	addmi	r3, #2
 80050e0:	6033      	strmi	r3, [r6, #0]
 80050e2:	6825      	ldr	r5, [r4, #0]
 80050e4:	f015 0506 	ands.w	r5, r5, #6
 80050e8:	d106      	bne.n	80050f8 <_printf_common+0x48>
 80050ea:	f104 0a19 	add.w	sl, r4, #25
 80050ee:	68e3      	ldr	r3, [r4, #12]
 80050f0:	6832      	ldr	r2, [r6, #0]
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	42ab      	cmp	r3, r5
 80050f6:	dc28      	bgt.n	800514a <_printf_common+0x9a>
 80050f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050fc:	1e13      	subs	r3, r2, #0
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	bf18      	it	ne
 8005102:	2301      	movne	r3, #1
 8005104:	0692      	lsls	r2, r2, #26
 8005106:	d42d      	bmi.n	8005164 <_printf_common+0xb4>
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005110:	47c0      	blx	r8
 8005112:	3001      	adds	r0, #1
 8005114:	d020      	beq.n	8005158 <_printf_common+0xa8>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	68e5      	ldr	r5, [r4, #12]
 800511a:	f003 0306 	and.w	r3, r3, #6
 800511e:	2b04      	cmp	r3, #4
 8005120:	bf18      	it	ne
 8005122:	2500      	movne	r5, #0
 8005124:	6832      	ldr	r2, [r6, #0]
 8005126:	f04f 0600 	mov.w	r6, #0
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	bf08      	it	eq
 800512e:	1aad      	subeq	r5, r5, r2
 8005130:	6922      	ldr	r2, [r4, #16]
 8005132:	bf08      	it	eq
 8005134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005138:	4293      	cmp	r3, r2
 800513a:	bfc4      	itt	gt
 800513c:	1a9b      	subgt	r3, r3, r2
 800513e:	18ed      	addgt	r5, r5, r3
 8005140:	341a      	adds	r4, #26
 8005142:	42b5      	cmp	r5, r6
 8005144:	d11a      	bne.n	800517c <_printf_common+0xcc>
 8005146:	2000      	movs	r0, #0
 8005148:	e008      	b.n	800515c <_printf_common+0xac>
 800514a:	2301      	movs	r3, #1
 800514c:	4652      	mov	r2, sl
 800514e:	4649      	mov	r1, r9
 8005150:	4638      	mov	r0, r7
 8005152:	47c0      	blx	r8
 8005154:	3001      	adds	r0, #1
 8005156:	d103      	bne.n	8005160 <_printf_common+0xb0>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005160:	3501      	adds	r5, #1
 8005162:	e7c4      	b.n	80050ee <_printf_common+0x3e>
 8005164:	2030      	movs	r0, #48	; 0x30
 8005166:	18e1      	adds	r1, r4, r3
 8005168:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005172:	4422      	add	r2, r4
 8005174:	3302      	adds	r3, #2
 8005176:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800517a:	e7c5      	b.n	8005108 <_printf_common+0x58>
 800517c:	2301      	movs	r3, #1
 800517e:	4622      	mov	r2, r4
 8005180:	4649      	mov	r1, r9
 8005182:	4638      	mov	r0, r7
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d0e6      	beq.n	8005158 <_printf_common+0xa8>
 800518a:	3601      	adds	r6, #1
 800518c:	e7d9      	b.n	8005142 <_printf_common+0x92>
	...

08005190 <_printf_i>:
 8005190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	460c      	mov	r4, r1
 8005196:	7e27      	ldrb	r7, [r4, #24]
 8005198:	4691      	mov	r9, r2
 800519a:	2f78      	cmp	r7, #120	; 0x78
 800519c:	4680      	mov	r8, r0
 800519e:	469a      	mov	sl, r3
 80051a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051a6:	d807      	bhi.n	80051b8 <_printf_i+0x28>
 80051a8:	2f62      	cmp	r7, #98	; 0x62
 80051aa:	d80a      	bhi.n	80051c2 <_printf_i+0x32>
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	f000 80d9 	beq.w	8005364 <_printf_i+0x1d4>
 80051b2:	2f58      	cmp	r7, #88	; 0x58
 80051b4:	f000 80a4 	beq.w	8005300 <_printf_i+0x170>
 80051b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c0:	e03a      	b.n	8005238 <_printf_i+0xa8>
 80051c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051c6:	2b15      	cmp	r3, #21
 80051c8:	d8f6      	bhi.n	80051b8 <_printf_i+0x28>
 80051ca:	a001      	add	r0, pc, #4	; (adr r0, 80051d0 <_printf_i+0x40>)
 80051cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051d0:	08005229 	.word	0x08005229
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	080051b9 	.word	0x080051b9
 80051dc:	080051b9 	.word	0x080051b9
 80051e0:	080051b9 	.word	0x080051b9
 80051e4:	080051b9 	.word	0x080051b9
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	080051b9 	.word	0x080051b9
 80051f0:	080051b9 	.word	0x080051b9
 80051f4:	080051b9 	.word	0x080051b9
 80051f8:	080051b9 	.word	0x080051b9
 80051fc:	0800534b 	.word	0x0800534b
 8005200:	0800526d 	.word	0x0800526d
 8005204:	0800532d 	.word	0x0800532d
 8005208:	080051b9 	.word	0x080051b9
 800520c:	080051b9 	.word	0x080051b9
 8005210:	0800536d 	.word	0x0800536d
 8005214:	080051b9 	.word	0x080051b9
 8005218:	0800526d 	.word	0x0800526d
 800521c:	080051b9 	.word	0x080051b9
 8005220:	080051b9 	.word	0x080051b9
 8005224:	08005335 	.word	0x08005335
 8005228:	680b      	ldr	r3, [r1, #0]
 800522a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	600a      	str	r2, [r1, #0]
 8005234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005238:	2301      	movs	r3, #1
 800523a:	e0a4      	b.n	8005386 <_printf_i+0x1f6>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	6808      	ldr	r0, [r1, #0]
 8005240:	062e      	lsls	r6, r5, #24
 8005242:	f100 0304 	add.w	r3, r0, #4
 8005246:	d50a      	bpl.n	800525e <_printf_i+0xce>
 8005248:	6805      	ldr	r5, [r0, #0]
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	2d00      	cmp	r5, #0
 800524e:	da03      	bge.n	8005258 <_printf_i+0xc8>
 8005250:	232d      	movs	r3, #45	; 0x2d
 8005252:	426d      	negs	r5, r5
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	230a      	movs	r3, #10
 800525a:	485e      	ldr	r0, [pc, #376]	; (80053d4 <_printf_i+0x244>)
 800525c:	e019      	b.n	8005292 <_printf_i+0x102>
 800525e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005262:	6805      	ldr	r5, [r0, #0]
 8005264:	600b      	str	r3, [r1, #0]
 8005266:	bf18      	it	ne
 8005268:	b22d      	sxthne	r5, r5
 800526a:	e7ef      	b.n	800524c <_printf_i+0xbc>
 800526c:	680b      	ldr	r3, [r1, #0]
 800526e:	6825      	ldr	r5, [r4, #0]
 8005270:	1d18      	adds	r0, r3, #4
 8005272:	6008      	str	r0, [r1, #0]
 8005274:	0628      	lsls	r0, r5, #24
 8005276:	d501      	bpl.n	800527c <_printf_i+0xec>
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	e002      	b.n	8005282 <_printf_i+0xf2>
 800527c:	0669      	lsls	r1, r5, #25
 800527e:	d5fb      	bpl.n	8005278 <_printf_i+0xe8>
 8005280:	881d      	ldrh	r5, [r3, #0]
 8005282:	2f6f      	cmp	r7, #111	; 0x6f
 8005284:	bf0c      	ite	eq
 8005286:	2308      	moveq	r3, #8
 8005288:	230a      	movne	r3, #10
 800528a:	4852      	ldr	r0, [pc, #328]	; (80053d4 <_printf_i+0x244>)
 800528c:	2100      	movs	r1, #0
 800528e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005292:	6866      	ldr	r6, [r4, #4]
 8005294:	2e00      	cmp	r6, #0
 8005296:	bfa8      	it	ge
 8005298:	6821      	ldrge	r1, [r4, #0]
 800529a:	60a6      	str	r6, [r4, #8]
 800529c:	bfa4      	itt	ge
 800529e:	f021 0104 	bicge.w	r1, r1, #4
 80052a2:	6021      	strge	r1, [r4, #0]
 80052a4:	b90d      	cbnz	r5, 80052aa <_printf_i+0x11a>
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	d04d      	beq.n	8005346 <_printf_i+0x1b6>
 80052aa:	4616      	mov	r6, r2
 80052ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80052b0:	fb03 5711 	mls	r7, r3, r1, r5
 80052b4:	5dc7      	ldrb	r7, [r0, r7]
 80052b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052ba:	462f      	mov	r7, r5
 80052bc:	42bb      	cmp	r3, r7
 80052be:	460d      	mov	r5, r1
 80052c0:	d9f4      	bls.n	80052ac <_printf_i+0x11c>
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d10b      	bne.n	80052de <_printf_i+0x14e>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	07df      	lsls	r7, r3, #31
 80052ca:	d508      	bpl.n	80052de <_printf_i+0x14e>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	6861      	ldr	r1, [r4, #4]
 80052d0:	4299      	cmp	r1, r3
 80052d2:	bfde      	ittt	le
 80052d4:	2330      	movle	r3, #48	; 0x30
 80052d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052de:	1b92      	subs	r2, r2, r6
 80052e0:	6122      	str	r2, [r4, #16]
 80052e2:	464b      	mov	r3, r9
 80052e4:	4621      	mov	r1, r4
 80052e6:	4640      	mov	r0, r8
 80052e8:	f8cd a000 	str.w	sl, [sp]
 80052ec:	aa03      	add	r2, sp, #12
 80052ee:	f7ff fedf 	bl	80050b0 <_printf_common>
 80052f2:	3001      	adds	r0, #1
 80052f4:	d14c      	bne.n	8005390 <_printf_i+0x200>
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	b004      	add	sp, #16
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	4834      	ldr	r0, [pc, #208]	; (80053d4 <_printf_i+0x244>)
 8005302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005306:	680e      	ldr	r6, [r1, #0]
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	f856 5b04 	ldr.w	r5, [r6], #4
 800530e:	061f      	lsls	r7, r3, #24
 8005310:	600e      	str	r6, [r1, #0]
 8005312:	d514      	bpl.n	800533e <_printf_i+0x1ae>
 8005314:	07d9      	lsls	r1, r3, #31
 8005316:	bf44      	itt	mi
 8005318:	f043 0320 	orrmi.w	r3, r3, #32
 800531c:	6023      	strmi	r3, [r4, #0]
 800531e:	b91d      	cbnz	r5, 8005328 <_printf_i+0x198>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f023 0320 	bic.w	r3, r3, #32
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	2310      	movs	r3, #16
 800532a:	e7af      	b.n	800528c <_printf_i+0xfc>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	f043 0320 	orr.w	r3, r3, #32
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	2378      	movs	r3, #120	; 0x78
 8005336:	4828      	ldr	r0, [pc, #160]	; (80053d8 <_printf_i+0x248>)
 8005338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800533c:	e7e3      	b.n	8005306 <_printf_i+0x176>
 800533e:	065e      	lsls	r6, r3, #25
 8005340:	bf48      	it	mi
 8005342:	b2ad      	uxthmi	r5, r5
 8005344:	e7e6      	b.n	8005314 <_printf_i+0x184>
 8005346:	4616      	mov	r6, r2
 8005348:	e7bb      	b.n	80052c2 <_printf_i+0x132>
 800534a:	680b      	ldr	r3, [r1, #0]
 800534c:	6826      	ldr	r6, [r4, #0]
 800534e:	1d1d      	adds	r5, r3, #4
 8005350:	6960      	ldr	r0, [r4, #20]
 8005352:	600d      	str	r5, [r1, #0]
 8005354:	0635      	lsls	r5, r6, #24
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	d501      	bpl.n	800535e <_printf_i+0x1ce>
 800535a:	6018      	str	r0, [r3, #0]
 800535c:	e002      	b.n	8005364 <_printf_i+0x1d4>
 800535e:	0671      	lsls	r1, r6, #25
 8005360:	d5fb      	bpl.n	800535a <_printf_i+0x1ca>
 8005362:	8018      	strh	r0, [r3, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	4616      	mov	r6, r2
 8005368:	6123      	str	r3, [r4, #16]
 800536a:	e7ba      	b.n	80052e2 <_printf_i+0x152>
 800536c:	680b      	ldr	r3, [r1, #0]
 800536e:	1d1a      	adds	r2, r3, #4
 8005370:	600a      	str	r2, [r1, #0]
 8005372:	681e      	ldr	r6, [r3, #0]
 8005374:	2100      	movs	r1, #0
 8005376:	4630      	mov	r0, r6
 8005378:	6862      	ldr	r2, [r4, #4]
 800537a:	f000 faf3 	bl	8005964 <memchr>
 800537e:	b108      	cbz	r0, 8005384 <_printf_i+0x1f4>
 8005380:	1b80      	subs	r0, r0, r6
 8005382:	6060      	str	r0, [r4, #4]
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	6123      	str	r3, [r4, #16]
 8005388:	2300      	movs	r3, #0
 800538a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538e:	e7a8      	b.n	80052e2 <_printf_i+0x152>
 8005390:	4632      	mov	r2, r6
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	47d0      	blx	sl
 800539a:	3001      	adds	r0, #1
 800539c:	d0ab      	beq.n	80052f6 <_printf_i+0x166>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	079b      	lsls	r3, r3, #30
 80053a2:	d413      	bmi.n	80053cc <_printf_i+0x23c>
 80053a4:	68e0      	ldr	r0, [r4, #12]
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	4298      	cmp	r0, r3
 80053aa:	bfb8      	it	lt
 80053ac:	4618      	movlt	r0, r3
 80053ae:	e7a4      	b.n	80052fa <_printf_i+0x16a>
 80053b0:	2301      	movs	r3, #1
 80053b2:	4632      	mov	r2, r6
 80053b4:	4649      	mov	r1, r9
 80053b6:	4640      	mov	r0, r8
 80053b8:	47d0      	blx	sl
 80053ba:	3001      	adds	r0, #1
 80053bc:	d09b      	beq.n	80052f6 <_printf_i+0x166>
 80053be:	3501      	adds	r5, #1
 80053c0:	68e3      	ldr	r3, [r4, #12]
 80053c2:	9903      	ldr	r1, [sp, #12]
 80053c4:	1a5b      	subs	r3, r3, r1
 80053c6:	42ab      	cmp	r3, r5
 80053c8:	dcf2      	bgt.n	80053b0 <_printf_i+0x220>
 80053ca:	e7eb      	b.n	80053a4 <_printf_i+0x214>
 80053cc:	2500      	movs	r5, #0
 80053ce:	f104 0619 	add.w	r6, r4, #25
 80053d2:	e7f5      	b.n	80053c0 <_printf_i+0x230>
 80053d4:	0800606d 	.word	0x0800606d
 80053d8:	0800607e 	.word	0x0800607e

080053dc <_scanf_chars>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4615      	mov	r5, r2
 80053e2:	688a      	ldr	r2, [r1, #8]
 80053e4:	4680      	mov	r8, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	b932      	cbnz	r2, 80053f8 <_scanf_chars+0x1c>
 80053ea:	698a      	ldr	r2, [r1, #24]
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2201      	moveq	r2, #1
 80053f2:	f04f 32ff 	movne.w	r2, #4294967295
 80053f6:	608a      	str	r2, [r1, #8]
 80053f8:	2700      	movs	r7, #0
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005488 <_scanf_chars+0xac>
 8005400:	06d1      	lsls	r1, r2, #27
 8005402:	bf5f      	itttt	pl
 8005404:	681a      	ldrpl	r2, [r3, #0]
 8005406:	1d11      	addpl	r1, r2, #4
 8005408:	6019      	strpl	r1, [r3, #0]
 800540a:	6816      	ldrpl	r6, [r2, #0]
 800540c:	69a0      	ldr	r0, [r4, #24]
 800540e:	b188      	cbz	r0, 8005434 <_scanf_chars+0x58>
 8005410:	2801      	cmp	r0, #1
 8005412:	d107      	bne.n	8005424 <_scanf_chars+0x48>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	6963      	ldr	r3, [r4, #20]
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	b953      	cbnz	r3, 8005434 <_scanf_chars+0x58>
 800541e:	bb27      	cbnz	r7, 800546a <_scanf_chars+0x8e>
 8005420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005424:	2802      	cmp	r0, #2
 8005426:	d120      	bne.n	800546a <_scanf_chars+0x8e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005430:	071b      	lsls	r3, r3, #28
 8005432:	d41a      	bmi.n	800546a <_scanf_chars+0x8e>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	3701      	adds	r7, #1
 8005438:	06da      	lsls	r2, r3, #27
 800543a:	bf5e      	ittt	pl
 800543c:	682b      	ldrpl	r3, [r5, #0]
 800543e:	781b      	ldrbpl	r3, [r3, #0]
 8005440:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005444:	682a      	ldr	r2, [r5, #0]
 8005446:	686b      	ldr	r3, [r5, #4]
 8005448:	3201      	adds	r2, #1
 800544a:	602a      	str	r2, [r5, #0]
 800544c:	68a2      	ldr	r2, [r4, #8]
 800544e:	3b01      	subs	r3, #1
 8005450:	3a01      	subs	r2, #1
 8005452:	606b      	str	r3, [r5, #4]
 8005454:	60a2      	str	r2, [r4, #8]
 8005456:	b142      	cbz	r2, 800546a <_scanf_chars+0x8e>
 8005458:	2b00      	cmp	r3, #0
 800545a:	dcd7      	bgt.n	800540c <_scanf_chars+0x30>
 800545c:	4629      	mov	r1, r5
 800545e:	4640      	mov	r0, r8
 8005460:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005464:	4798      	blx	r3
 8005466:	2800      	cmp	r0, #0
 8005468:	d0d0      	beq.n	800540c <_scanf_chars+0x30>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f013 0310 	ands.w	r3, r3, #16
 8005470:	d105      	bne.n	800547e <_scanf_chars+0xa2>
 8005472:	68e2      	ldr	r2, [r4, #12]
 8005474:	3201      	adds	r2, #1
 8005476:	60e2      	str	r2, [r4, #12]
 8005478:	69a2      	ldr	r2, [r4, #24]
 800547a:	b102      	cbz	r2, 800547e <_scanf_chars+0xa2>
 800547c:	7033      	strb	r3, [r6, #0]
 800547e:	6923      	ldr	r3, [r4, #16]
 8005480:	2000      	movs	r0, #0
 8005482:	441f      	add	r7, r3
 8005484:	6127      	str	r7, [r4, #16]
 8005486:	e7cb      	b.n	8005420 <_scanf_chars+0x44>
 8005488:	080060ab 	.word	0x080060ab

0800548c <_scanf_i>:
 800548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	460c      	mov	r4, r1
 8005492:	4698      	mov	r8, r3
 8005494:	4b72      	ldr	r3, [pc, #456]	; (8005660 <_scanf_i+0x1d4>)
 8005496:	b087      	sub	sp, #28
 8005498:	4682      	mov	sl, r0
 800549a:	4616      	mov	r6, r2
 800549c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054a0:	ab03      	add	r3, sp, #12
 80054a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054a6:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <_scanf_i+0x1d8>)
 80054a8:	69a1      	ldr	r1, [r4, #24]
 80054aa:	4a6f      	ldr	r2, [pc, #444]	; (8005668 <_scanf_i+0x1dc>)
 80054ac:	4627      	mov	r7, r4
 80054ae:	2903      	cmp	r1, #3
 80054b0:	bf18      	it	ne
 80054b2:	461a      	movne	r2, r3
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80054be:	bf81      	itttt	hi
 80054c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80054c4:	eb03 0905 	addhi.w	r9, r3, r5
 80054c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80054cc:	60a3      	strhi	r3, [r4, #8]
 80054ce:	f857 3b1c 	ldr.w	r3, [r7], #28
 80054d2:	bf98      	it	ls
 80054d4:	f04f 0900 	movls.w	r9, #0
 80054d8:	463d      	mov	r5, r7
 80054da:	f04f 0b00 	mov.w	fp, #0
 80054de:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	6831      	ldr	r1, [r6, #0]
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	2202      	movs	r2, #2
 80054ea:	7809      	ldrb	r1, [r1, #0]
 80054ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80054f0:	f000 fa38 	bl	8005964 <memchr>
 80054f4:	b328      	cbz	r0, 8005542 <_scanf_i+0xb6>
 80054f6:	f1bb 0f01 	cmp.w	fp, #1
 80054fa:	d159      	bne.n	80055b0 <_scanf_i+0x124>
 80054fc:	6862      	ldr	r2, [r4, #4]
 80054fe:	b92a      	cbnz	r2, 800550c <_scanf_i+0x80>
 8005500:	2308      	movs	r3, #8
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	6022      	str	r2, [r4, #0]
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005512:	6022      	str	r2, [r4, #0]
 8005514:	68a2      	ldr	r2, [r4, #8]
 8005516:	1e51      	subs	r1, r2, #1
 8005518:	60a1      	str	r1, [r4, #8]
 800551a:	b192      	cbz	r2, 8005542 <_scanf_i+0xb6>
 800551c:	6832      	ldr	r2, [r6, #0]
 800551e:	1c51      	adds	r1, r2, #1
 8005520:	6031      	str	r1, [r6, #0]
 8005522:	7812      	ldrb	r2, [r2, #0]
 8005524:	f805 2b01 	strb.w	r2, [r5], #1
 8005528:	6872      	ldr	r2, [r6, #4]
 800552a:	3a01      	subs	r2, #1
 800552c:	2a00      	cmp	r2, #0
 800552e:	6072      	str	r2, [r6, #4]
 8005530:	dc07      	bgt.n	8005542 <_scanf_i+0xb6>
 8005532:	4631      	mov	r1, r6
 8005534:	4650      	mov	r0, sl
 8005536:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800553a:	4790      	blx	r2
 800553c:	2800      	cmp	r0, #0
 800553e:	f040 8085 	bne.w	800564c <_scanf_i+0x1c0>
 8005542:	f10b 0b01 	add.w	fp, fp, #1
 8005546:	f1bb 0f03 	cmp.w	fp, #3
 800554a:	d1cb      	bne.n	80054e4 <_scanf_i+0x58>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	b90b      	cbnz	r3, 8005554 <_scanf_i+0xc8>
 8005550:	230a      	movs	r3, #10
 8005552:	6063      	str	r3, [r4, #4]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	4945      	ldr	r1, [pc, #276]	; (800566c <_scanf_i+0x1e0>)
 8005558:	6960      	ldr	r0, [r4, #20]
 800555a:	1ac9      	subs	r1, r1, r3
 800555c:	f000 f888 	bl	8005670 <__sccl>
 8005560:	f04f 0b00 	mov.w	fp, #0
 8005564:	68a3      	ldr	r3, [r4, #8]
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d03d      	beq.n	80055e8 <_scanf_i+0x15c>
 800556c:	6831      	ldr	r1, [r6, #0]
 800556e:	6960      	ldr	r0, [r4, #20]
 8005570:	f891 c000 	ldrb.w	ip, [r1]
 8005574:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005578:	2800      	cmp	r0, #0
 800557a:	d035      	beq.n	80055e8 <_scanf_i+0x15c>
 800557c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005580:	d124      	bne.n	80055cc <_scanf_i+0x140>
 8005582:	0510      	lsls	r0, r2, #20
 8005584:	d522      	bpl.n	80055cc <_scanf_i+0x140>
 8005586:	f10b 0b01 	add.w	fp, fp, #1
 800558a:	f1b9 0f00 	cmp.w	r9, #0
 800558e:	d003      	beq.n	8005598 <_scanf_i+0x10c>
 8005590:	3301      	adds	r3, #1
 8005592:	f109 39ff 	add.w	r9, r9, #4294967295
 8005596:	60a3      	str	r3, [r4, #8]
 8005598:	6873      	ldr	r3, [r6, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	6073      	str	r3, [r6, #4]
 80055a0:	dd1b      	ble.n	80055da <_scanf_i+0x14e>
 80055a2:	6833      	ldr	r3, [r6, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	6033      	str	r3, [r6, #0]
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60a3      	str	r3, [r4, #8]
 80055ae:	e7d9      	b.n	8005564 <_scanf_i+0xd8>
 80055b0:	f1bb 0f02 	cmp.w	fp, #2
 80055b4:	d1ae      	bne.n	8005514 <_scanf_i+0x88>
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80055bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80055c0:	d1bf      	bne.n	8005542 <_scanf_i+0xb6>
 80055c2:	2310      	movs	r3, #16
 80055c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	e7a2      	b.n	8005512 <_scanf_i+0x86>
 80055cc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80055d0:	6022      	str	r2, [r4, #0]
 80055d2:	780b      	ldrb	r3, [r1, #0]
 80055d4:	f805 3b01 	strb.w	r3, [r5], #1
 80055d8:	e7de      	b.n	8005598 <_scanf_i+0x10c>
 80055da:	4631      	mov	r1, r6
 80055dc:	4650      	mov	r0, sl
 80055de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80055e2:	4798      	blx	r3
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d0df      	beq.n	80055a8 <_scanf_i+0x11c>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	05d9      	lsls	r1, r3, #23
 80055ec:	d50d      	bpl.n	800560a <_scanf_i+0x17e>
 80055ee:	42bd      	cmp	r5, r7
 80055f0:	d909      	bls.n	8005606 <_scanf_i+0x17a>
 80055f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80055f6:	4632      	mov	r2, r6
 80055f8:	4650      	mov	r0, sl
 80055fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8005602:	4798      	blx	r3
 8005604:	464d      	mov	r5, r9
 8005606:	42bd      	cmp	r5, r7
 8005608:	d028      	beq.n	800565c <_scanf_i+0x1d0>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	f012 0210 	ands.w	r2, r2, #16
 8005610:	d113      	bne.n	800563a <_scanf_i+0x1ae>
 8005612:	702a      	strb	r2, [r5, #0]
 8005614:	4639      	mov	r1, r7
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	4650      	mov	r0, sl
 800561a:	9e01      	ldr	r6, [sp, #4]
 800561c:	47b0      	blx	r6
 800561e:	f8d8 3000 	ldr.w	r3, [r8]
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	1d1a      	adds	r2, r3, #4
 8005626:	f8c8 2000 	str.w	r2, [r8]
 800562a:	f011 0f20 	tst.w	r1, #32
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	d00f      	beq.n	8005652 <_scanf_i+0x1c6>
 8005632:	6018      	str	r0, [r3, #0]
 8005634:	68e3      	ldr	r3, [r4, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60e3      	str	r3, [r4, #12]
 800563a:	2000      	movs	r0, #0
 800563c:	1bed      	subs	r5, r5, r7
 800563e:	44ab      	add	fp, r5
 8005640:	6925      	ldr	r5, [r4, #16]
 8005642:	445d      	add	r5, fp
 8005644:	6125      	str	r5, [r4, #16]
 8005646:	b007      	add	sp, #28
 8005648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	f04f 0b00 	mov.w	fp, #0
 8005650:	e7ca      	b.n	80055e8 <_scanf_i+0x15c>
 8005652:	07ca      	lsls	r2, r1, #31
 8005654:	bf4c      	ite	mi
 8005656:	8018      	strhmi	r0, [r3, #0]
 8005658:	6018      	strpl	r0, [r3, #0]
 800565a:	e7eb      	b.n	8005634 <_scanf_i+0x1a8>
 800565c:	2001      	movs	r0, #1
 800565e:	e7f2      	b.n	8005646 <_scanf_i+0x1ba>
 8005660:	08005df8 	.word	0x08005df8
 8005664:	080058ed 	.word	0x080058ed
 8005668:	080057f1 	.word	0x080057f1
 800566c:	080060a8 	.word	0x080060a8

08005670 <__sccl>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	780b      	ldrb	r3, [r1, #0]
 8005674:	4604      	mov	r4, r0
 8005676:	2b5e      	cmp	r3, #94	; 0x5e
 8005678:	bf13      	iteet	ne
 800567a:	2200      	movne	r2, #0
 800567c:	2201      	moveq	r2, #1
 800567e:	784b      	ldrbeq	r3, [r1, #1]
 8005680:	1c48      	addne	r0, r1, #1
 8005682:	bf08      	it	eq
 8005684:	1c88      	addeq	r0, r1, #2
 8005686:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800568a:	1e61      	subs	r1, r4, #1
 800568c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005690:	42a9      	cmp	r1, r5
 8005692:	d1fb      	bne.n	800568c <__sccl+0x1c>
 8005694:	b90b      	cbnz	r3, 800569a <__sccl+0x2a>
 8005696:	3801      	subs	r0, #1
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	f082 0101 	eor.w	r1, r2, #1
 800569e:	54e1      	strb	r1, [r4, r3]
 80056a0:	1c42      	adds	r2, r0, #1
 80056a2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80056a6:	4610      	mov	r0, r2
 80056a8:	2d2d      	cmp	r5, #45	; 0x2d
 80056aa:	f102 36ff 	add.w	r6, r2, #4294967295
 80056ae:	d006      	beq.n	80056be <__sccl+0x4e>
 80056b0:	2d5d      	cmp	r5, #93	; 0x5d
 80056b2:	d0f1      	beq.n	8005698 <__sccl+0x28>
 80056b4:	b90d      	cbnz	r5, 80056ba <__sccl+0x4a>
 80056b6:	4630      	mov	r0, r6
 80056b8:	e7ee      	b.n	8005698 <__sccl+0x28>
 80056ba:	462b      	mov	r3, r5
 80056bc:	e7ef      	b.n	800569e <__sccl+0x2e>
 80056be:	7816      	ldrb	r6, [r2, #0]
 80056c0:	2e5d      	cmp	r6, #93	; 0x5d
 80056c2:	d0fa      	beq.n	80056ba <__sccl+0x4a>
 80056c4:	42b3      	cmp	r3, r6
 80056c6:	dcf8      	bgt.n	80056ba <__sccl+0x4a>
 80056c8:	4618      	mov	r0, r3
 80056ca:	3001      	adds	r0, #1
 80056cc:	4286      	cmp	r6, r0
 80056ce:	5421      	strb	r1, [r4, r0]
 80056d0:	dcfb      	bgt.n	80056ca <__sccl+0x5a>
 80056d2:	43d8      	mvns	r0, r3
 80056d4:	4430      	add	r0, r6
 80056d6:	42b3      	cmp	r3, r6
 80056d8:	bfa8      	it	ge
 80056da:	2000      	movge	r0, #0
 80056dc:	1c5d      	adds	r5, r3, #1
 80056de:	182b      	adds	r3, r5, r0
 80056e0:	3202      	adds	r2, #2
 80056e2:	e7de      	b.n	80056a2 <__sccl+0x32>

080056e4 <_strtol_l.isra.0>:
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ea:	4686      	mov	lr, r0
 80056ec:	d001      	beq.n	80056f2 <_strtol_l.isra.0+0xe>
 80056ee:	2b24      	cmp	r3, #36	; 0x24
 80056f0:	d906      	bls.n	8005700 <_strtol_l.isra.0+0x1c>
 80056f2:	f7ff f92f 	bl	8004954 <__errno>
 80056f6:	2316      	movs	r3, #22
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	2000      	movs	r0, #0
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	468c      	mov	ip, r1
 8005702:	4e3a      	ldr	r6, [pc, #232]	; (80057ec <_strtol_l.isra.0+0x108>)
 8005704:	4660      	mov	r0, ip
 8005706:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800570a:	5da5      	ldrb	r5, [r4, r6]
 800570c:	f015 0508 	ands.w	r5, r5, #8
 8005710:	d1f8      	bne.n	8005704 <_strtol_l.isra.0+0x20>
 8005712:	2c2d      	cmp	r4, #45	; 0x2d
 8005714:	d133      	bne.n	800577e <_strtol_l.isra.0+0x9a>
 8005716:	f04f 0801 	mov.w	r8, #1
 800571a:	f89c 4000 	ldrb.w	r4, [ip]
 800571e:	f100 0c02 	add.w	ip, r0, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d05d      	beq.n	80057e2 <_strtol_l.isra.0+0xfe>
 8005726:	2b10      	cmp	r3, #16
 8005728:	d10c      	bne.n	8005744 <_strtol_l.isra.0+0x60>
 800572a:	2c30      	cmp	r4, #48	; 0x30
 800572c:	d10a      	bne.n	8005744 <_strtol_l.isra.0+0x60>
 800572e:	f89c 0000 	ldrb.w	r0, [ip]
 8005732:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005736:	2858      	cmp	r0, #88	; 0x58
 8005738:	d14e      	bne.n	80057d8 <_strtol_l.isra.0+0xf4>
 800573a:	2310      	movs	r3, #16
 800573c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005740:	f10c 0c02 	add.w	ip, ip, #2
 8005744:	2500      	movs	r5, #0
 8005746:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800574a:	3f01      	subs	r7, #1
 800574c:	fbb7 f9f3 	udiv	r9, r7, r3
 8005750:	4628      	mov	r0, r5
 8005752:	fb03 7a19 	mls	sl, r3, r9, r7
 8005756:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800575a:	2e09      	cmp	r6, #9
 800575c:	d818      	bhi.n	8005790 <_strtol_l.isra.0+0xac>
 800575e:	4634      	mov	r4, r6
 8005760:	42a3      	cmp	r3, r4
 8005762:	dd24      	ble.n	80057ae <_strtol_l.isra.0+0xca>
 8005764:	2d00      	cmp	r5, #0
 8005766:	db1f      	blt.n	80057a8 <_strtol_l.isra.0+0xc4>
 8005768:	4581      	cmp	r9, r0
 800576a:	d31d      	bcc.n	80057a8 <_strtol_l.isra.0+0xc4>
 800576c:	d101      	bne.n	8005772 <_strtol_l.isra.0+0x8e>
 800576e:	45a2      	cmp	sl, r4
 8005770:	db1a      	blt.n	80057a8 <_strtol_l.isra.0+0xc4>
 8005772:	2501      	movs	r5, #1
 8005774:	fb00 4003 	mla	r0, r0, r3, r4
 8005778:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800577c:	e7eb      	b.n	8005756 <_strtol_l.isra.0+0x72>
 800577e:	2c2b      	cmp	r4, #43	; 0x2b
 8005780:	bf08      	it	eq
 8005782:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005786:	46a8      	mov	r8, r5
 8005788:	bf08      	it	eq
 800578a:	f100 0c02 	addeq.w	ip, r0, #2
 800578e:	e7c8      	b.n	8005722 <_strtol_l.isra.0+0x3e>
 8005790:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005794:	2e19      	cmp	r6, #25
 8005796:	d801      	bhi.n	800579c <_strtol_l.isra.0+0xb8>
 8005798:	3c37      	subs	r4, #55	; 0x37
 800579a:	e7e1      	b.n	8005760 <_strtol_l.isra.0+0x7c>
 800579c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80057a0:	2e19      	cmp	r6, #25
 80057a2:	d804      	bhi.n	80057ae <_strtol_l.isra.0+0xca>
 80057a4:	3c57      	subs	r4, #87	; 0x57
 80057a6:	e7db      	b.n	8005760 <_strtol_l.isra.0+0x7c>
 80057a8:	f04f 35ff 	mov.w	r5, #4294967295
 80057ac:	e7e4      	b.n	8005778 <_strtol_l.isra.0+0x94>
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	da08      	bge.n	80057c4 <_strtol_l.isra.0+0xe0>
 80057b2:	2322      	movs	r3, #34	; 0x22
 80057b4:	4638      	mov	r0, r7
 80057b6:	f8ce 3000 	str.w	r3, [lr]
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d09e      	beq.n	80056fc <_strtol_l.isra.0+0x18>
 80057be:	f10c 31ff 	add.w	r1, ip, #4294967295
 80057c2:	e007      	b.n	80057d4 <_strtol_l.isra.0+0xf0>
 80057c4:	f1b8 0f00 	cmp.w	r8, #0
 80057c8:	d000      	beq.n	80057cc <_strtol_l.isra.0+0xe8>
 80057ca:	4240      	negs	r0, r0
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d095      	beq.n	80056fc <_strtol_l.isra.0+0x18>
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	d1f4      	bne.n	80057be <_strtol_l.isra.0+0xda>
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	e791      	b.n	80056fc <_strtol_l.isra.0+0x18>
 80057d8:	2430      	movs	r4, #48	; 0x30
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1b2      	bne.n	8005744 <_strtol_l.isra.0+0x60>
 80057de:	2308      	movs	r3, #8
 80057e0:	e7b0      	b.n	8005744 <_strtol_l.isra.0+0x60>
 80057e2:	2c30      	cmp	r4, #48	; 0x30
 80057e4:	d0a3      	beq.n	800572e <_strtol_l.isra.0+0x4a>
 80057e6:	230a      	movs	r3, #10
 80057e8:	e7ac      	b.n	8005744 <_strtol_l.isra.0+0x60>
 80057ea:	bf00      	nop
 80057ec:	080060ab 	.word	0x080060ab

080057f0 <_strtol_r>:
 80057f0:	f7ff bf78 	b.w	80056e4 <_strtol_l.isra.0>

080057f4 <_strtoul_l.isra.0>:
 80057f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057f8:	468c      	mov	ip, r1
 80057fa:	4686      	mov	lr, r0
 80057fc:	4e3a      	ldr	r6, [pc, #232]	; (80058e8 <_strtoul_l.isra.0+0xf4>)
 80057fe:	4660      	mov	r0, ip
 8005800:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005804:	5da5      	ldrb	r5, [r4, r6]
 8005806:	f015 0508 	ands.w	r5, r5, #8
 800580a:	d1f8      	bne.n	80057fe <_strtoul_l.isra.0+0xa>
 800580c:	2c2d      	cmp	r4, #45	; 0x2d
 800580e:	d134      	bne.n	800587a <_strtoul_l.isra.0+0x86>
 8005810:	f04f 0801 	mov.w	r8, #1
 8005814:	f89c 4000 	ldrb.w	r4, [ip]
 8005818:	f100 0c02 	add.w	ip, r0, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d05e      	beq.n	80058de <_strtoul_l.isra.0+0xea>
 8005820:	2b10      	cmp	r3, #16
 8005822:	d10c      	bne.n	800583e <_strtoul_l.isra.0+0x4a>
 8005824:	2c30      	cmp	r4, #48	; 0x30
 8005826:	d10a      	bne.n	800583e <_strtoul_l.isra.0+0x4a>
 8005828:	f89c 0000 	ldrb.w	r0, [ip]
 800582c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005830:	2858      	cmp	r0, #88	; 0x58
 8005832:	d14f      	bne.n	80058d4 <_strtoul_l.isra.0+0xe0>
 8005834:	2310      	movs	r3, #16
 8005836:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800583a:	f10c 0c02 	add.w	ip, ip, #2
 800583e:	f04f 37ff 	mov.w	r7, #4294967295
 8005842:	fbb7 f7f3 	udiv	r7, r7, r3
 8005846:	2500      	movs	r5, #0
 8005848:	fb03 f907 	mul.w	r9, r3, r7
 800584c:	4628      	mov	r0, r5
 800584e:	ea6f 0909 	mvn.w	r9, r9
 8005852:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005856:	2e09      	cmp	r6, #9
 8005858:	d818      	bhi.n	800588c <_strtoul_l.isra.0+0x98>
 800585a:	4634      	mov	r4, r6
 800585c:	42a3      	cmp	r3, r4
 800585e:	dd24      	ble.n	80058aa <_strtoul_l.isra.0+0xb6>
 8005860:	2d00      	cmp	r5, #0
 8005862:	db1f      	blt.n	80058a4 <_strtoul_l.isra.0+0xb0>
 8005864:	4287      	cmp	r7, r0
 8005866:	d31d      	bcc.n	80058a4 <_strtoul_l.isra.0+0xb0>
 8005868:	d101      	bne.n	800586e <_strtoul_l.isra.0+0x7a>
 800586a:	45a1      	cmp	r9, r4
 800586c:	db1a      	blt.n	80058a4 <_strtoul_l.isra.0+0xb0>
 800586e:	2501      	movs	r5, #1
 8005870:	fb00 4003 	mla	r0, r0, r3, r4
 8005874:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005878:	e7eb      	b.n	8005852 <_strtoul_l.isra.0+0x5e>
 800587a:	2c2b      	cmp	r4, #43	; 0x2b
 800587c:	bf08      	it	eq
 800587e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005882:	46a8      	mov	r8, r5
 8005884:	bf08      	it	eq
 8005886:	f100 0c02 	addeq.w	ip, r0, #2
 800588a:	e7c7      	b.n	800581c <_strtoul_l.isra.0+0x28>
 800588c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005890:	2e19      	cmp	r6, #25
 8005892:	d801      	bhi.n	8005898 <_strtoul_l.isra.0+0xa4>
 8005894:	3c37      	subs	r4, #55	; 0x37
 8005896:	e7e1      	b.n	800585c <_strtoul_l.isra.0+0x68>
 8005898:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800589c:	2e19      	cmp	r6, #25
 800589e:	d804      	bhi.n	80058aa <_strtoul_l.isra.0+0xb6>
 80058a0:	3c57      	subs	r4, #87	; 0x57
 80058a2:	e7db      	b.n	800585c <_strtoul_l.isra.0+0x68>
 80058a4:	f04f 35ff 	mov.w	r5, #4294967295
 80058a8:	e7e4      	b.n	8005874 <_strtoul_l.isra.0+0x80>
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	da07      	bge.n	80058be <_strtoul_l.isra.0+0xca>
 80058ae:	2322      	movs	r3, #34	; 0x22
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	f8ce 3000 	str.w	r3, [lr]
 80058b8:	b942      	cbnz	r2, 80058cc <_strtoul_l.isra.0+0xd8>
 80058ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058be:	f1b8 0f00 	cmp.w	r8, #0
 80058c2:	d000      	beq.n	80058c6 <_strtoul_l.isra.0+0xd2>
 80058c4:	4240      	negs	r0, r0
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d0f7      	beq.n	80058ba <_strtoul_l.isra.0+0xc6>
 80058ca:	b10d      	cbz	r5, 80058d0 <_strtoul_l.isra.0+0xdc>
 80058cc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	e7f2      	b.n	80058ba <_strtoul_l.isra.0+0xc6>
 80058d4:	2430      	movs	r4, #48	; 0x30
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1b1      	bne.n	800583e <_strtoul_l.isra.0+0x4a>
 80058da:	2308      	movs	r3, #8
 80058dc:	e7af      	b.n	800583e <_strtoul_l.isra.0+0x4a>
 80058de:	2c30      	cmp	r4, #48	; 0x30
 80058e0:	d0a2      	beq.n	8005828 <_strtoul_l.isra.0+0x34>
 80058e2:	230a      	movs	r3, #10
 80058e4:	e7ab      	b.n	800583e <_strtoul_l.isra.0+0x4a>
 80058e6:	bf00      	nop
 80058e8:	080060ab 	.word	0x080060ab

080058ec <_strtoul_r>:
 80058ec:	f7ff bf82 	b.w	80057f4 <_strtoul_l.isra.0>

080058f0 <__submore>:
 80058f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	460c      	mov	r4, r1
 80058f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058fc:	4299      	cmp	r1, r3
 80058fe:	d11b      	bne.n	8005938 <__submore+0x48>
 8005900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005904:	f000 f8b0 	bl	8005a68 <_malloc_r>
 8005908:	b918      	cbnz	r0, 8005912 <__submore+0x22>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005916:	63a3      	str	r3, [r4, #56]	; 0x38
 8005918:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800591c:	6360      	str	r0, [r4, #52]	; 0x34
 800591e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005922:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005926:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800592a:	7043      	strb	r3, [r0, #1]
 800592c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005930:	7003      	strb	r3, [r0, #0]
 8005932:	6020      	str	r0, [r4, #0]
 8005934:	2000      	movs	r0, #0
 8005936:	e7ea      	b.n	800590e <__submore+0x1e>
 8005938:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800593a:	0077      	lsls	r7, r6, #1
 800593c:	463a      	mov	r2, r7
 800593e:	f000 f8ed 	bl	8005b1c <_realloc_r>
 8005942:	4605      	mov	r5, r0
 8005944:	2800      	cmp	r0, #0
 8005946:	d0e0      	beq.n	800590a <__submore+0x1a>
 8005948:	eb00 0806 	add.w	r8, r0, r6
 800594c:	4601      	mov	r1, r0
 800594e:	4632      	mov	r2, r6
 8005950:	4640      	mov	r0, r8
 8005952:	f000 f815 	bl	8005980 <memcpy>
 8005956:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800595a:	f8c4 8000 	str.w	r8, [r4]
 800595e:	e7e9      	b.n	8005934 <__submore+0x44>

08005960 <__retarget_lock_acquire_recursive>:
 8005960:	4770      	bx	lr

08005962 <__retarget_lock_release_recursive>:
 8005962:	4770      	bx	lr

08005964 <memchr>:
 8005964:	4603      	mov	r3, r0
 8005966:	b510      	push	{r4, lr}
 8005968:	b2c9      	uxtb	r1, r1
 800596a:	4402      	add	r2, r0
 800596c:	4293      	cmp	r3, r2
 800596e:	4618      	mov	r0, r3
 8005970:	d101      	bne.n	8005976 <memchr+0x12>
 8005972:	2000      	movs	r0, #0
 8005974:	e003      	b.n	800597e <memchr+0x1a>
 8005976:	7804      	ldrb	r4, [r0, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	428c      	cmp	r4, r1
 800597c:	d1f6      	bne.n	800596c <memchr+0x8>
 800597e:	bd10      	pop	{r4, pc}

08005980 <memcpy>:
 8005980:	440a      	add	r2, r1
 8005982:	4291      	cmp	r1, r2
 8005984:	f100 33ff 	add.w	r3, r0, #4294967295
 8005988:	d100      	bne.n	800598c <memcpy+0xc>
 800598a:	4770      	bx	lr
 800598c:	b510      	push	{r4, lr}
 800598e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005992:	4291      	cmp	r1, r2
 8005994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005998:	d1f9      	bne.n	800598e <memcpy+0xe>
 800599a:	bd10      	pop	{r4, pc}

0800599c <memmove>:
 800599c:	4288      	cmp	r0, r1
 800599e:	b510      	push	{r4, lr}
 80059a0:	eb01 0402 	add.w	r4, r1, r2
 80059a4:	d902      	bls.n	80059ac <memmove+0x10>
 80059a6:	4284      	cmp	r4, r0
 80059a8:	4623      	mov	r3, r4
 80059aa:	d807      	bhi.n	80059bc <memmove+0x20>
 80059ac:	1e43      	subs	r3, r0, #1
 80059ae:	42a1      	cmp	r1, r4
 80059b0:	d008      	beq.n	80059c4 <memmove+0x28>
 80059b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ba:	e7f8      	b.n	80059ae <memmove+0x12>
 80059bc:	4601      	mov	r1, r0
 80059be:	4402      	add	r2, r0
 80059c0:	428a      	cmp	r2, r1
 80059c2:	d100      	bne.n	80059c6 <memmove+0x2a>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ce:	e7f7      	b.n	80059c0 <memmove+0x24>

080059d0 <_free_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4605      	mov	r5, r0
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d043      	beq.n	8005a60 <_free_r+0x90>
 80059d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059dc:	1f0c      	subs	r4, r1, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfb8      	it	lt
 80059e2:	18e4      	addlt	r4, r4, r3
 80059e4:	f000 f8d0 	bl	8005b88 <__malloc_lock>
 80059e8:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <_free_r+0x94>)
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	4610      	mov	r0, r2
 80059ee:	b933      	cbnz	r3, 80059fe <_free_r+0x2e>
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	6014      	str	r4, [r2, #0]
 80059f4:	4628      	mov	r0, r5
 80059f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fa:	f000 b8cb 	b.w	8005b94 <__malloc_unlock>
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d90a      	bls.n	8005a18 <_free_r+0x48>
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	1862      	adds	r2, r4, r1
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bf01      	itttt	eq
 8005a0a:	681a      	ldreq	r2, [r3, #0]
 8005a0c:	685b      	ldreq	r3, [r3, #4]
 8005a0e:	1852      	addeq	r2, r2, r1
 8005a10:	6022      	streq	r2, [r4, #0]
 8005a12:	6063      	str	r3, [r4, #4]
 8005a14:	6004      	str	r4, [r0, #0]
 8005a16:	e7ed      	b.n	80059f4 <_free_r+0x24>
 8005a18:	461a      	mov	r2, r3
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	b10b      	cbz	r3, 8005a22 <_free_r+0x52>
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	d9fa      	bls.n	8005a18 <_free_r+0x48>
 8005a22:	6811      	ldr	r1, [r2, #0]
 8005a24:	1850      	adds	r0, r2, r1
 8005a26:	42a0      	cmp	r0, r4
 8005a28:	d10b      	bne.n	8005a42 <_free_r+0x72>
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	4401      	add	r1, r0
 8005a2e:	1850      	adds	r0, r2, r1
 8005a30:	4283      	cmp	r3, r0
 8005a32:	6011      	str	r1, [r2, #0]
 8005a34:	d1de      	bne.n	80059f4 <_free_r+0x24>
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	6053      	str	r3, [r2, #4]
 8005a40:	e7d8      	b.n	80059f4 <_free_r+0x24>
 8005a42:	d902      	bls.n	8005a4a <_free_r+0x7a>
 8005a44:	230c      	movs	r3, #12
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	e7d4      	b.n	80059f4 <_free_r+0x24>
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1821      	adds	r1, r4, r0
 8005a4e:	428b      	cmp	r3, r1
 8005a50:	bf01      	itttt	eq
 8005a52:	6819      	ldreq	r1, [r3, #0]
 8005a54:	685b      	ldreq	r3, [r3, #4]
 8005a56:	1809      	addeq	r1, r1, r0
 8005a58:	6021      	streq	r1, [r4, #0]
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	6054      	str	r4, [r2, #4]
 8005a5e:	e7c9      	b.n	80059f4 <_free_r+0x24>
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
 8005a62:	bf00      	nop
 8005a64:	200000cc 	.word	0x200000cc

08005a68 <_malloc_r>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	1ccd      	adds	r5, r1, #3
 8005a6c:	f025 0503 	bic.w	r5, r5, #3
 8005a70:	3508      	adds	r5, #8
 8005a72:	2d0c      	cmp	r5, #12
 8005a74:	bf38      	it	cc
 8005a76:	250c      	movcc	r5, #12
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	db01      	blt.n	8005a82 <_malloc_r+0x1a>
 8005a7e:	42a9      	cmp	r1, r5
 8005a80:	d903      	bls.n	8005a8a <_malloc_r+0x22>
 8005a82:	230c      	movs	r3, #12
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	2000      	movs	r0, #0
 8005a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8a:	f000 f87d 	bl	8005b88 <__malloc_lock>
 8005a8e:	4921      	ldr	r1, [pc, #132]	; (8005b14 <_malloc_r+0xac>)
 8005a90:	680a      	ldr	r2, [r1, #0]
 8005a92:	4614      	mov	r4, r2
 8005a94:	b99c      	cbnz	r4, 8005abe <_malloc_r+0x56>
 8005a96:	4f20      	ldr	r7, [pc, #128]	; (8005b18 <_malloc_r+0xb0>)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	b923      	cbnz	r3, 8005aa6 <_malloc_r+0x3e>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f000 f862 	bl	8005b68 <_sbrk_r>
 8005aa4:	6038      	str	r0, [r7, #0]
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f000 f85d 	bl	8005b68 <_sbrk_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d123      	bne.n	8005afa <_malloc_r+0x92>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	6033      	str	r3, [r6, #0]
 8005ab8:	f000 f86c 	bl	8005b94 <__malloc_unlock>
 8005abc:	e7e3      	b.n	8005a86 <_malloc_r+0x1e>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	1b5b      	subs	r3, r3, r5
 8005ac2:	d417      	bmi.n	8005af4 <_malloc_r+0x8c>
 8005ac4:	2b0b      	cmp	r3, #11
 8005ac6:	d903      	bls.n	8005ad0 <_malloc_r+0x68>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	441c      	add	r4, r3
 8005acc:	6025      	str	r5, [r4, #0]
 8005ace:	e004      	b.n	8005ada <_malloc_r+0x72>
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	42a2      	cmp	r2, r4
 8005ad4:	bf0c      	ite	eq
 8005ad6:	600b      	streq	r3, [r1, #0]
 8005ad8:	6053      	strne	r3, [r2, #4]
 8005ada:	4630      	mov	r0, r6
 8005adc:	f000 f85a 	bl	8005b94 <__malloc_unlock>
 8005ae0:	f104 000b 	add.w	r0, r4, #11
 8005ae4:	1d23      	adds	r3, r4, #4
 8005ae6:	f020 0007 	bic.w	r0, r0, #7
 8005aea:	1ac2      	subs	r2, r0, r3
 8005aec:	d0cc      	beq.n	8005a88 <_malloc_r+0x20>
 8005aee:	1a1b      	subs	r3, r3, r0
 8005af0:	50a3      	str	r3, [r4, r2]
 8005af2:	e7c9      	b.n	8005a88 <_malloc_r+0x20>
 8005af4:	4622      	mov	r2, r4
 8005af6:	6864      	ldr	r4, [r4, #4]
 8005af8:	e7cc      	b.n	8005a94 <_malloc_r+0x2c>
 8005afa:	1cc4      	adds	r4, r0, #3
 8005afc:	f024 0403 	bic.w	r4, r4, #3
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d0e3      	beq.n	8005acc <_malloc_r+0x64>
 8005b04:	1a21      	subs	r1, r4, r0
 8005b06:	4630      	mov	r0, r6
 8005b08:	f000 f82e 	bl	8005b68 <_sbrk_r>
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d1dd      	bne.n	8005acc <_malloc_r+0x64>
 8005b10:	e7cf      	b.n	8005ab2 <_malloc_r+0x4a>
 8005b12:	bf00      	nop
 8005b14:	200000cc 	.word	0x200000cc
 8005b18:	200000d0 	.word	0x200000d0

08005b1c <_realloc_r>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	4607      	mov	r7, r0
 8005b20:	4614      	mov	r4, r2
 8005b22:	460e      	mov	r6, r1
 8005b24:	b921      	cbnz	r1, 8005b30 <_realloc_r+0x14>
 8005b26:	4611      	mov	r1, r2
 8005b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b2c:	f7ff bf9c 	b.w	8005a68 <_malloc_r>
 8005b30:	b922      	cbnz	r2, 8005b3c <_realloc_r+0x20>
 8005b32:	f7ff ff4d 	bl	80059d0 <_free_r>
 8005b36:	4625      	mov	r5, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b3c:	f000 f830 	bl	8005ba0 <_malloc_usable_size_r>
 8005b40:	42a0      	cmp	r0, r4
 8005b42:	d20f      	bcs.n	8005b64 <_realloc_r+0x48>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4638      	mov	r0, r7
 8005b48:	f7ff ff8e 	bl	8005a68 <_malloc_r>
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d0f2      	beq.n	8005b38 <_realloc_r+0x1c>
 8005b52:	4631      	mov	r1, r6
 8005b54:	4622      	mov	r2, r4
 8005b56:	f7ff ff13 	bl	8005980 <memcpy>
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f7ff ff37 	bl	80059d0 <_free_r>
 8005b62:	e7e9      	b.n	8005b38 <_realloc_r+0x1c>
 8005b64:	4635      	mov	r5, r6
 8005b66:	e7e7      	b.n	8005b38 <_realloc_r+0x1c>

08005b68 <_sbrk_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4d05      	ldr	r5, [pc, #20]	; (8005b84 <_sbrk_r+0x1c>)
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fb fa18 	bl	8000fa8 <_sbrk>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_sbrk_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_sbrk_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	20000c6c 	.word	0x20000c6c

08005b88 <__malloc_lock>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__malloc_lock+0x8>)
 8005b8a:	f7ff bee9 	b.w	8005960 <__retarget_lock_acquire_recursive>
 8005b8e:	bf00      	nop
 8005b90:	20000c74 	.word	0x20000c74

08005b94 <__malloc_unlock>:
 8005b94:	4801      	ldr	r0, [pc, #4]	; (8005b9c <__malloc_unlock+0x8>)
 8005b96:	f7ff bee4 	b.w	8005962 <__retarget_lock_release_recursive>
 8005b9a:	bf00      	nop
 8005b9c:	20000c74 	.word	0x20000c74

08005ba0 <_malloc_usable_size_r>:
 8005ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba4:	1f18      	subs	r0, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfbc      	itt	lt
 8005baa:	580b      	ldrlt	r3, [r1, r0]
 8005bac:	18c0      	addlt	r0, r0, r3
 8005bae:	4770      	bx	lr

08005bb0 <_init>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr

08005bbc <_fini>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	bf00      	nop
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr
