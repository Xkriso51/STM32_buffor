
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006c84  08006c84  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c84  08006c84  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08006c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  200000dc  08006d68  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d20  08006d68  00020d20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de8c  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002563  00000000  00000000  0002df91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000304f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000312a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186dc  00000000  00000000  00031f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efa9  00000000  00000000  0004a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba73  00000000  00000000  000595ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004054  00000000  00000000  000e50b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08006624 	.word	0x08006624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08006624 	.word	0x08006624

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <MX_DMA_Init+0x38>)
 8000178:	695b      	ldr	r3, [r3, #20]
 800017a:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <MX_DMA_Init+0x38>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6153      	str	r3, [r2, #20]
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <MX_DMA_Init+0x38>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2100      	movs	r1, #0
 8000192:	200c      	movs	r0, #12
 8000194:	f001 fc31 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000198:	200c      	movs	r0, #12
 800019a:	f001 fc4a 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000

080001ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b2:	f107 0310 	add.w	r3, r7, #16
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c0:	4b41      	ldr	r3, [pc, #260]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a40      	ldr	r2, [pc, #256]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001c6:	f043 0310 	orr.w	r3, r3, #16
 80001ca:	6193      	str	r3, [r2, #24]
 80001cc:	4b3e      	ldr	r3, [pc, #248]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	f003 0310 	and.w	r3, r3, #16
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d8:	4b3b      	ldr	r3, [pc, #236]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a3a      	ldr	r2, [pc, #232]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b38      	ldr	r3, [pc, #224]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b35      	ldr	r3, [pc, #212]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a34      	ldr	r2, [pc, #208]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b32      	ldr	r3, [pc, #200]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000208:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <MX_GPIO_Init+0x11c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a2e      	ldr	r2, [pc, #184]	; (80002c8 <MX_GPIO_Init+0x11c>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b2c      	ldr	r3, [pc, #176]	; (80002c8 <MX_GPIO_Init+0x11c>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	603b      	str	r3, [r7, #0]
 800021e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 8000220:	2200      	movs	r2, #0
 8000222:	219e      	movs	r1, #158	; 0x9e
 8000224:	4829      	ldr	r0, [pc, #164]	; (80002cc <MX_GPIO_Init+0x120>)
 8000226:	f002 f841 	bl	80022ac <HAL_GPIO_WritePin>
                          |DIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2120      	movs	r1, #32
 800022e:	4828      	ldr	r0, [pc, #160]	; (80002d0 <MX_GPIO_Init+0x124>)
 8000230:	f002 f83c 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023a:	4826      	ldr	r0, [pc, #152]	; (80002d4 <MX_GPIO_Init+0x128>)
 800023c:	f002 f836 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <MX_GPIO_Init+0x12c>)
 8000248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024a:	2300      	movs	r3, #0
 800024c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	4619      	mov	r1, r3
 8000254:	481d      	ldr	r0, [pc, #116]	; (80002cc <MX_GPIO_Init+0x120>)
 8000256:	f001 fea5 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 800025a:	239e      	movs	r3, #158	; 0x9e
 800025c:	613b      	str	r3, [r7, #16]
                          |DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	2301      	movs	r3, #1
 8000260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	2302      	movs	r3, #2
 8000268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	4619      	mov	r1, r3
 8000270:	4816      	ldr	r0, [pc, #88]	; (80002cc <MX_GPIO_Init+0x120>)
 8000272:	f001 fe97 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000276:	2320      	movs	r3, #32
 8000278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	2302      	movs	r3, #2
 8000284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	4619      	mov	r1, r3
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <MX_GPIO_Init+0x124>)
 800028e:	f001 fe89 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	2301      	movs	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a0:	2302      	movs	r3, #2
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a4:	f107 0310 	add.w	r3, r7, #16
 80002a8:	4619      	mov	r1, r3
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <MX_GPIO_Init+0x128>)
 80002ac:	f001 fe7a 	bl	8001fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2100      	movs	r1, #0
 80002b4:	2028      	movs	r0, #40	; 0x28
 80002b6:	f001 fba0 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002ba:	2028      	movs	r0, #40	; 0x28
 80002bc:	f001 fbb9 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010800 	.word	0x40010800
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	10110000 	.word	0x10110000

080002dc <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <get_char+0x48>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <get_char+0x4c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d013      	beq.n	8000316 <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <get_char+0x4c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <get_char+0x50>)
 80002f4:	5cd3      	ldrb	r3, [r2, r3]
 80002f6:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <get_char+0x4c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3301      	adds	r3, #1
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <get_char+0x4c>)
 8000300:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <get_char+0x4c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800030a:	db02      	blt.n	8000312 <get_char+0x36>
			busyRX=0;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <get_char+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	e000      	b.n	8000318 <get_char+0x3c>
	}
	else{
		return 0;
 8000316:	2300      	movs	r3, #0
	}
}
 8000318:	4618      	mov	r0, r3
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000100 	.word	0x20000100
 8000328:	20000104 	.word	0x20000104
 800032c:	20000534 	.word	0x20000534

08000330 <fsend>:
void fsend(char* format, ...){
 8000330:	b40f      	push	{r0, r1, r2, r3}
 8000332:	b580      	push	{r7, lr}
 8000334:	b0a4      	sub	sp, #144	; 0x90
 8000336:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 8000338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800033c:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs, format, arglist);
 800033e:	f107 030c 	add.w	r3, r7, #12
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000348:	4618      	mov	r0, r3
 800034a:	f005 f8b1 	bl	80054b0 <vsiprintf>
	va_end(arglist);
	pid = emptyTX;
 800034e:	4b2f      	ldr	r3, [pc, #188]	; (800040c <fsend+0xdc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800035a:	e016      	b.n	800038a <fsend+0x5a>
		Buf_TX[pid] = tmp_rs[i];
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	f107 010c 	add.w	r1, r7, #12
 8000362:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000366:	440a      	add	r2, r1
 8000368:	7811      	ldrb	r1, [r2, #0]
 800036a:	4a29      	ldr	r2, [pc, #164]	; (8000410 <fsend+0xe0>)
 800036c:	54d1      	strb	r1, [r2, r3]
		pid++;
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3301      	adds	r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
		if(pid >= BUF_TX_LEN){
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037a:	db01      	blt.n	8000380 <fsend+0x50>
			pid = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000384:	3301      	adds	r3, #1
 8000386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff fee6 	bl	8000160 <strlen>
 8000394:	4602      	mov	r2, r0
 8000396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800039a:	429a      	cmp	r2, r3
 800039c:	d8de      	bhi.n	800035c <fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
}
 80003a0:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <fsend+0xdc>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <fsend+0xe4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d122      	bne.n	80003f4 <fsend+0xc4>
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <fsend+0xe8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b8:	2b80      	cmp	r3, #128	; 0x80
 80003ba:	d11b      	bne.n	80003f4 <fsend+0xc4>
		emptyTX = pid;
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <fsend+0xdc>)
 80003c0:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <fsend+0xe4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <fsend+0xe0>)
 80003c8:	5cd3      	ldrb	r3, [r2, r3]
 80003ca:	70fb      	strb	r3, [r7, #3]
		busyTX++;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <fsend+0xe4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <fsend+0xe4>)
 80003d4:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <fsend+0xe4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	db02      	blt.n	80003e6 <fsend+0xb6>
			busyTX = 0;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <fsend+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80003e6:	1cfb      	adds	r3, r7, #3
 80003e8:	2201      	movs	r2, #1
 80003ea:	4619      	mov	r1, r3
 80003ec:	480a      	ldr	r0, [pc, #40]	; (8000418 <fsend+0xe8>)
 80003ee:	f004 fba1 	bl	8004b34 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80003f2:	e002      	b.n	80003fa <fsend+0xca>
	}
	else{
		emptyTX = pid;
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	4a05      	ldr	r2, [pc, #20]	; (800040c <fsend+0xdc>)
 80003f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003fa:	b662      	cpsie	i
}
 80003fc:	bf00      	nop
	}
	__enable_irq();
}
 80003fe:	bf00      	nop
 8000400:	3790      	adds	r7, #144	; 0x90
 8000402:	46bd      	mov	sp, r7
 8000404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000408:	b004      	add	sp, #16
 800040a:	4770      	bx	lr
 800040c:	200000f8 	.word	0x200000f8
 8000410:	20000134 	.word	0x20000134
 8000414:	200000fc 	.word	0x200000fc
 8000418:	20000cc8 	.word	0x20000cc8

0800041c <doner>:

void doner(char *ord){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 8000424:	6879      	ldr	r1, [r7, #4]
 8000426:	4859      	ldr	r0, [pc, #356]	; (800058c <doner+0x170>)
 8000428:	f7ff fe90 	bl	800014c <strcmp>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d106      	bne.n	8000440 <doner+0x24>

		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi %d.\r\n",Difference);
 8000432:	4b57      	ldr	r3, [pc, #348]	; (8000590 <doner+0x174>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4619      	mov	r1, r3
 8000438:	4856      	ldr	r0, [pc, #344]	; (8000594 <doner+0x178>)
 800043a:	f7ff ff79 	bl	8000330 <fsend>
	}
	else{
		fsend("WRCMD\r\n");
	}

}
 800043e:	e0a0      	b.n	8000582 <doner+0x166>
	else if(strcmp("FCHKH;", ord) == 0){
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	4855      	ldr	r0, [pc, #340]	; (8000598 <doner+0x17c>)
 8000444:	f7ff fe82 	bl	800014c <strcmp>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d106      	bne.n	800045c <doner+0x40>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi %d.\r\n",PWM_pulses_count);
 800044e:	4b53      	ldr	r3, [pc, #332]	; (800059c <doner+0x180>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4619      	mov	r1, r3
 8000454:	4852      	ldr	r0, [pc, #328]	; (80005a0 <doner+0x184>)
 8000456:	f7ff ff6b 	bl	8000330 <fsend>
}
 800045a:	e092      	b.n	8000582 <doner+0x166>
	else if(strcmp("FSTART;", ord) == 0){
 800045c:	6879      	ldr	r1, [r7, #4]
 800045e:	4851      	ldr	r0, [pc, #324]	; (80005a4 <doner+0x188>)
 8000460:	f7ff fe74 	bl	800014c <strcmp>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d113      	bne.n	8000492 <doner+0x76>
		fsend("Rozpoczeto wysylanie impulsow \r\n");
 800046a:	484f      	ldr	r0, [pc, #316]	; (80005a8 <doner+0x18c>)
 800046c:	f7ff ff60 	bl	8000330 <fsend>
		seconds_passed=0;
 8000470:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <doner+0x190>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000476:	484e      	ldr	r0, [pc, #312]	; (80005b0 <doner+0x194>)
 8000478:	f002 fbbc 	bl	8002bf4 <HAL_TIM_Base_Start_IT>
		 HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800047c:	2100      	movs	r1, #0
 800047e:	484d      	ldr	r0, [pc, #308]	; (80005b4 <doner+0x198>)
 8000480:	f003 f832 	bl	80034e8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
 8000484:	2318      	movs	r3, #24
 8000486:	4a4c      	ldr	r2, [pc, #304]	; (80005b8 <doner+0x19c>)
 8000488:	2100      	movs	r1, #0
 800048a:	484c      	ldr	r0, [pc, #304]	; (80005bc <doner+0x1a0>)
 800048c:	f002 fd7c 	bl	8002f88 <HAL_TIM_PWM_Start_DMA>
}
 8000490:	e077      	b.n	8000582 <doner+0x166>
	else if(strcmp("FSTAT;", ord) == 0){
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	484a      	ldr	r0, [pc, #296]	; (80005c0 <doner+0x1a4>)
 8000496:	f7ff fe59 	bl	800014c <strcmp>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d109      	bne.n	80004b4 <doner+0x98>
		fsend("Wypelnienie %d Czas %d Czestotliwosc %d\r\n",wart,czas,czest);
 80004a0:	4b48      	ldr	r3, [pc, #288]	; (80005c4 <doner+0x1a8>)
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	4b48      	ldr	r3, [pc, #288]	; (80005c8 <doner+0x1ac>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b48      	ldr	r3, [pc, #288]	; (80005cc <doner+0x1b0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4848      	ldr	r0, [pc, #288]	; (80005d0 <doner+0x1b4>)
 80004ae:	f7ff ff3f 	bl	8000330 <fsend>
}
 80004b2:	e066      	b.n	8000582 <doner+0x166>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 80004b4:	4a44      	ldr	r2, [pc, #272]	; (80005c8 <doner+0x1ac>)
 80004b6:	4947      	ldr	r1, [pc, #284]	; (80005d4 <doner+0x1b8>)
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f004 ffb7 	bl	800542c <siscanf>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d006      	beq.n	80004d2 <doner+0xb6>
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	4844      	ldr	r0, [pc, #272]	; (80005d8 <doner+0x1bc>)
 80004c8:	f7ff fe40 	bl	800014c <strcmp>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d112      	bne.n	80004f8 <doner+0xdc>
		if(czas>=0 && czas<=20){
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <doner+0x1ac>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db0a      	blt.n	80004f0 <doner+0xd4>
 80004da:	4b3b      	ldr	r3, [pc, #236]	; (80005c8 <doner+0x1ac>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b14      	cmp	r3, #20
 80004e0:	dc06      	bgt.n	80004f0 <doner+0xd4>
			fsend("„Ustawiono czas na %d sekund.\r\n",czas);
 80004e2:	4b39      	ldr	r3, [pc, #228]	; (80005c8 <doner+0x1ac>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4619      	mov	r1, r3
 80004e8:	483c      	ldr	r0, [pc, #240]	; (80005dc <doner+0x1c0>)
 80004ea:	f7ff ff21 	bl	8000330 <fsend>
		if(czas>=0 && czas<=20){
 80004ee:	e048      	b.n	8000582 <doner+0x166>
			fsend("WRNUM\r\n");
 80004f0:	483b      	ldr	r0, [pc, #236]	; (80005e0 <doner+0x1c4>)
 80004f2:	f7ff ff1d 	bl	8000330 <fsend>
		if(czas>=0 && czas<=20){
 80004f6:	e044      	b.n	8000582 <doner+0x166>
	else if(sscanf(ord, "FFILL%d;", &wart) == 1 || strcmp("FFIL;", ord) == 0){
 80004f8:	4a32      	ldr	r2, [pc, #200]	; (80005c4 <doner+0x1a8>)
 80004fa:	493a      	ldr	r1, [pc, #232]	; (80005e4 <doner+0x1c8>)
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f004 ff95 	bl	800542c <siscanf>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	d006      	beq.n	8000516 <doner+0xfa>
 8000508:	6879      	ldr	r1, [r7, #4]
 800050a:	4837      	ldr	r0, [pc, #220]	; (80005e8 <doner+0x1cc>)
 800050c:	f7ff fe1e 	bl	800014c <strcmp>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10e      	bne.n	8000534 <doner+0x118>
		if(wart>=0 && wart<= 4294967295){
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <doner+0x1a8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	db06      	blt.n	800052c <doner+0x110>
			fsend("„Ustawiono wypelnienie na %d .\r\n",wart);
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <doner+0x1a8>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	4831      	ldr	r0, [pc, #196]	; (80005ec <doner+0x1d0>)
 8000526:	f7ff ff03 	bl	8000330 <fsend>
		if(wart>=0 && wart<= 4294967295){
 800052a:	e02a      	b.n	8000582 <doner+0x166>
			fsend("WRNUM\r\n");
 800052c:	482c      	ldr	r0, [pc, #176]	; (80005e0 <doner+0x1c4>)
 800052e:	f7ff feff 	bl	8000330 <fsend>
		if(wart>=0 && wart<= 4294967295){
 8000532:	e026      	b.n	8000582 <doner+0x166>
	else if(sscanf(ord, "FSET%d;", &czest) == 1 || strcmp("FSET;", ord) == 0){
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <doner+0x1b0>)
 8000536:	492e      	ldr	r1, [pc, #184]	; (80005f0 <doner+0x1d4>)
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f004 ff77 	bl	800542c <siscanf>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d006      	beq.n	8000552 <doner+0x136>
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	482b      	ldr	r0, [pc, #172]	; (80005f4 <doner+0x1d8>)
 8000548:	f7ff fe00 	bl	800014c <strcmp>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d113      	bne.n	800057a <doner+0x15e>
		if(czest>=10 && czest<=1000){
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <doner+0x1b0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b09      	cmp	r3, #9
 8000558:	dd0b      	ble.n	8000572 <doner+0x156>
 800055a:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <doner+0x1b0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000562:	dc06      	bgt.n	8000572 <doner+0x156>
					fsend("„Ustawiono czestotliwosc na %d kH.\r\n",czest);
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <doner+0x1b0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	4823      	ldr	r0, [pc, #140]	; (80005f8 <doner+0x1dc>)
 800056c:	f7ff fee0 	bl	8000330 <fsend>
		if(czest>=10 && czest<=1000){
 8000570:	e007      	b.n	8000582 <doner+0x166>
					fsend("WRNUM\r\n");
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <doner+0x1c4>)
 8000574:	f7ff fedc 	bl	8000330 <fsend>
		if(czest>=10 && czest<=1000){
 8000578:	e003      	b.n	8000582 <doner+0x166>
		fsend("WRCMD\r\n");
 800057a:	4820      	ldr	r0, [pc, #128]	; (80005fc <doner+0x1e0>)
 800057c:	f7ff fed8 	bl	8000330 <fsend>
}
 8000580:	e7ff      	b.n	8000582 <doner+0x166>
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	0800663c 	.word	0x0800663c
 8000590:	2000011c 	.word	0x2000011c
 8000594:	08006644 	.word	0x08006644
 8000598:	08006688 	.word	0x08006688
 800059c:	20000120 	.word	0x20000120
 80005a0:	08006690 	.word	0x08006690
 80005a4:	080066c8 	.word	0x080066c8
 80005a8:	080066d0 	.word	0x080066d0
 80005ac:	20000124 	.word	0x20000124
 80005b0:	20000bf0 	.word	0x20000bf0
 80005b4:	20000c80 	.word	0x20000c80
 80005b8:	2000000c 	.word	0x2000000c
 80005bc:	20000c38 	.word	0x20000c38
 80005c0:	080066f4 	.word	0x080066f4
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000008 	.word	0x20000008
 80005d0:	080066fc 	.word	0x080066fc
 80005d4:	08006728 	.word	0x08006728
 80005d8:	08006734 	.word	0x08006734
 80005dc:	0800673c 	.word	0x0800673c
 80005e0:	08006760 	.word	0x08006760
 80005e4:	08006768 	.word	0x08006768
 80005e8:	08006774 	.word	0x08006774
 80005ec:	0800677c 	.word	0x0800677c
 80005f0:	080067a0 	.word	0x080067a0
 80005f4:	080067a8 	.word	0x080067a8
 80005f8:	080067b0 	.word	0x080067b0
 80005fc:	080067d8 	.word	0x080067d8

08000600 <checksum>:

int checksum(char *buffer){
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	int suma = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
	int i;
	char userSum[2];
	userSum[0]=buffer[strlen(buffer)-3];
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fda7 	bl	8000160 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	3b03      	subs	r3, #3
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	723b      	strb	r3, [r7, #8]
	userSum[1]=buffer[strlen(buffer)-2];
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff fd9e 	bl	8000160 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	3b02      	subs	r3, #2
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	727b      	strb	r3, [r7, #9]

	for(i = 0;i<strlen(buffer)-4;i++){
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
 8000634:	e00a      	b.n	800064c <checksum+0x4c>
		suma=suma+buffer[i];
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	4413      	add	r3, r2
 8000644:	61fb      	str	r3, [r7, #28]
	for(i = 0;i<strlen(buffer)-4;i++){
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3301      	adds	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fd87 	bl	8000160 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	1f1a      	subs	r2, r3, #4
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8ec      	bhi.n	8000636 <checksum+0x36>
	}
	int mod=suma%256;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	425a      	negs	r2, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	bf58      	it	pl
 8000666:	4253      	negpl	r3, r2
 8000668:	617b      	str	r3, [r7, #20]
	long temp;
	int j=0;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
	while (mod != 0){
 800066e:	e024      	b.n	80006ba <checksum+0xba>
		temp = mod % 16;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	425a      	negs	r2, r3
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	f002 020f 	and.w	r2, r2, #15
 800067c:	bf58      	it	pl
 800067e:	4253      	negpl	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
		if (temp < 10)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b09      	cmp	r3, #9
 8000686:	dc09      	bgt.n	800069c <checksum+0x9c>
			hex[j++] = 48 + temp;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	1c59      	adds	r1, r3, #1
 8000690:	6139      	str	r1, [r7, #16]
 8000692:	3230      	adds	r2, #48	; 0x30
 8000694:	b2d1      	uxtb	r1, r2
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <checksum+0xe4>)
 8000698:	54d1      	strb	r1, [r2, r3]
 800069a:	e008      	b.n	80006ae <checksum+0xae>
		else
		    hex[j++] = 55 + temp;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	1c59      	adds	r1, r3, #1
 80006a4:	6139      	str	r1, [r7, #16]
 80006a6:	3237      	adds	r2, #55	; 0x37
 80006a8:	b2d1      	uxtb	r1, r2
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <checksum+0xe4>)
 80006ac:	54d1      	strb	r1, [r2, r3]
		mod = mod / 16;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da00      	bge.n	80006b6 <checksum+0xb6>
 80006b4:	330f      	adds	r3, #15
 80006b6:	111b      	asrs	r3, r3, #4
 80006b8:	617b      	str	r3, [r7, #20]
	while (mod != 0){
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1d7      	bne.n	8000670 <checksum+0x70>
	}

	if(hex[1]==userSum[0] && hex[0]==userSum[1])
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <checksum+0xe4>)
 80006c2:	785a      	ldrb	r2, [r3, #1]
 80006c4:	7a3b      	ldrb	r3, [r7, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d106      	bne.n	80006d8 <checksum+0xd8>
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <checksum+0xe4>)
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	7a7b      	ldrb	r3, [r7, #9]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d101      	bne.n	80006d8 <checksum+0xd8>
	{
		return 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <checksum+0xda>
	}
	else
	{
		return 0;
 80006d8:	2300      	movs	r3, #0
	}

}
 80006da:	4618      	mov	r0, r3
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000093c 	.word	0x2000093c

080006e8 <get_line>:
void get_line(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
	char temp = get_char();
 80006ee:	f7ff fdf5 	bl	80002dc <get_char>
 80006f2:	4603      	mov	r3, r0
 80006f4:	70fb      	strb	r3, [r7, #3]
	bfr[pidx]=temp;
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <get_line+0x13c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <get_line+0x140>)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	5453      	strb	r3, [r2, r1]
	pidx++;
 8000704:	4b47      	ldr	r3, [pc, #284]	; (8000824 <get_line+0x13c>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	3301      	adds	r3, #1
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <get_line+0x13c>)
 8000710:	801a      	strh	r2, [r3, #0]
	if(temp == 0x05){
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	2b05      	cmp	r3, #5
 8000716:	d10c      	bne.n	8000732 <get_line+0x4a>
		pidx=0;
 8000718:	4b42      	ldr	r3, [pc, #264]	; (8000824 <get_line+0x13c>)
 800071a:	2200      	movs	r2, #0
 800071c:	801a      	strh	r2, [r3, #0]
		memset(&bfr[0],0,sizeof(bfr));
 800071e:	f240 1205 	movw	r2, #261	; 0x105
 8000722:	2100      	movs	r1, #0
 8000724:	4840      	ldr	r0, [pc, #256]	; (8000828 <get_line+0x140>)
 8000726:	f004 fe79 	bl	800541c <memset>
		fstate = listen;
 800072a:	4b40      	ldr	r3, [pc, #256]	; (800082c <get_line+0x144>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
			fsend("\r\n");
		}
		pidx=0;
	}

}
 8000730:	e073      	b.n	800081a <get_line+0x132>
	else if(pidx > 261){
 8000732:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <get_line+0x13c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800073c:	d303      	bcc.n	8000746 <get_line+0x5e>
		pidx=0;
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <get_line+0x13c>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]
}
 8000744:	e069      	b.n	800081a <get_line+0x132>
	else if(temp == 0x04 && fstate == listen){
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d166      	bne.n	800081a <get_line+0x132>
 800074c:	4b37      	ldr	r3, [pc, #220]	; (800082c <get_line+0x144>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d162      	bne.n	800081a <get_line+0x132>
		fstate = notlisten;
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <get_line+0x144>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
		if(strlen(bfr)>4){
 800075a:	4833      	ldr	r0, [pc, #204]	; (8000828 <get_line+0x140>)
 800075c:	f7ff fd00 	bl	8000160 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	2b04      	cmp	r3, #4
 8000764:	d950      	bls.n	8000808 <get_line+0x120>
			fsend(bfr);
 8000766:	4830      	ldr	r0, [pc, #192]	; (8000828 <get_line+0x140>)
 8000768:	f7ff fde2 	bl	8000330 <fsend>
			fsend("\r\n");
 800076c:	4830      	ldr	r0, [pc, #192]	; (8000830 <get_line+0x148>)
 800076e:	f7ff fddf 	bl	8000330 <fsend>
			int poi=0;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
			if(checksum(bfr)==1){
 8000776:	482c      	ldr	r0, [pc, #176]	; (8000828 <get_line+0x140>)
 8000778:	f7ff ff42 	bl	8000600 <checksum>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d135      	bne.n	80007ee <get_line+0x106>
				for(int i=1;i<=pidx;i++){
 8000782:	2301      	movs	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	e02a      	b.n	80007de <get_line+0xf6>
					if(bfr[i] == ';'){
 8000788:	4a27      	ldr	r2, [pc, #156]	; (8000828 <get_line+0x140>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b3b      	cmp	r3, #59	; 0x3b
 8000792:	d121      	bne.n	80007d8 <get_line+0xf0>
						memset(&order[0],0,sizeof(order));
 8000794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000798:	2100      	movs	r1, #0
 800079a:	4826      	ldr	r0, [pc, #152]	; (8000834 <get_line+0x14c>)
 800079c:	f004 fe3e 	bl	800541c <memset>
						ordpidx=0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
						while(poi<=i){
 80007a4:	e00e      	b.n	80007c4 <get_line+0xdc>
							order[ordpidx]=bfr[poi];
 80007a6:	4a20      	ldr	r2, [pc, #128]	; (8000828 <get_line+0x140>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	7819      	ldrb	r1, [r3, #0]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <get_line+0x14c>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4413      	add	r3, r2
 80007b4:	460a      	mov	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
							ordpidx++;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	3301      	adds	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
							poi++;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
						while(poi<=i){
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	ddec      	ble.n	80007a6 <get_line+0xbe>
						ordpidx=i+1;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
						doner(order);
 80007d2:	4818      	ldr	r0, [pc, #96]	; (8000834 <get_line+0x14c>)
 80007d4:	f7ff fe22 	bl	800041c <doner>
				for(int i=1;i<=pidx;i++){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3301      	adds	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <get_line+0x13c>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4293      	cmp	r3, r2
 80007ea:	ddcd      	ble.n	8000788 <get_line+0xa0>
 80007ec:	e012      	b.n	8000814 <get_line+0x12c>
				fsend("WRCHS%c%c",hex[1],hex[0]);
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <get_line+0x150>)
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <get_line+0x150>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4810      	ldr	r0, [pc, #64]	; (800083c <get_line+0x154>)
 80007fc:	f7ff fd98 	bl	8000330 <fsend>
				fsend("\r\n");
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <get_line+0x148>)
 8000802:	f7ff fd95 	bl	8000330 <fsend>
 8000806:	e005      	b.n	8000814 <get_line+0x12c>
			fsend("WRFRM");
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <get_line+0x158>)
 800080a:	f7ff fd91 	bl	8000330 <fsend>
			fsend("\r\n");
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <get_line+0x148>)
 8000810:	f7ff fd8e 	bl	8000330 <fsend>
		pidx=0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <get_line+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	801a      	strh	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000108 	.word	0x20000108
 8000828:	20000834 	.word	0x20000834
 800082c:	2000010c 	.word	0x2000010c
 8000830:	080067e0 	.word	0x080067e0
 8000834:	20000734 	.word	0x20000734
 8000838:	2000093c 	.word	0x2000093c
 800083c:	080067e4 	.word	0x080067e4
 8000840:	080067f0 	.word	0x080067f0

08000844 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_UART_TxCpltCallback+0x58>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d11e      	bne.n	8000892 <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_UART_TxCpltCallback+0x5c>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_UART_TxCpltCallback+0x60>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d018      	beq.n	8000892 <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_UART_TxCpltCallback+0x60>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <HAL_UART_TxCpltCallback+0x64>)
 8000866:	5cd3      	ldrb	r3, [r2, r3]
 8000868:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_UART_TxCpltCallback+0x60>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <HAL_UART_TxCpltCallback+0x60>)
 8000872:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_UART_TxCpltCallback+0x60>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800087c:	db02      	blt.n	8000884 <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_UART_TxCpltCallback+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000884:	f107 030f 	add.w	r3, r7, #15
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <HAL_UART_TxCpltCallback+0x58>)
 800088e:	f004 f951 	bl	8004b34 <HAL_UART_Transmit_IT>
		}
	}
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000cc8 	.word	0x20000cc8
 80008a0:	200000f8 	.word	0x200000f8
 80008a4:	200000fc 	.word	0x200000fc
 80008a8:	20000134 	.word	0x20000134

080008ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_UART_RxCpltCallback+0x44>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d115      	bne.n	80008e8 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_UART_RxCpltCallback+0x48>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <HAL_UART_RxCpltCallback+0x48>)
 80008c4:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_UART_RxCpltCallback+0x48>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ce:	db02      	blt.n	80008d6 <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_UART_RxCpltCallback+0x48>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_UART_RxCpltCallback+0x48>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_UART_RxCpltCallback+0x4c>)
 80008dc:	4413      	add	r3, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <HAL_UART_RxCpltCallback+0x44>)
 80008e4:	f004 f96a 	bl	8004bbc <HAL_UART_Receive_IT>
	}
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000cc8 	.word	0x20000cc8
 80008f4:	20000100 	.word	0x20000100
 80008f8:	20000534 	.word	0x20000534

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 ff42 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f876 	bl	80009f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 8000908:	2108      	movs	r1, #8
 800090a:	482d      	ldr	r0, [pc, #180]	; (80009c0 <main+0xc4>)
 800090c:	f000 f936 	bl	8000b7c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 8000910:	2104      	movs	r1, #4
 8000912:	482b      	ldr	r0, [pc, #172]	; (80009c0 <main+0xc4>)
 8000914:	f000 f946 	bl	8000ba4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 8000918:	2102      	movs	r1, #2
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <main+0xc4>)
 800091c:	f000 f956 	bl	8000bcc <LCD_setDC>
      LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	4827      	ldr	r0, [pc, #156]	; (80009c0 <main+0xc4>)
 8000924:	f000 f966 	bl	8000bf4 <LCD_setDIN>
      LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 8000928:	2110      	movs	r1, #16
 800092a:	4825      	ldr	r0, [pc, #148]	; (80009c0 <main+0xc4>)
 800092c:	f000 f976 	bl	8000c1c <LCD_setCLK>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff fc3c 	bl	80001ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000934:	f000 fe92 	bl	800165c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000938:	f000 fba0 	bl	800107c <MX_TIM1_Init>
  MX_TIM2_Init();
 800093c:	f000 fc3e 	bl	80011bc <MX_TIM2_Init>
  MX_TIM4_Init();
 8000940:	f000 fd20 	bl	8001384 <MX_TIM4_Init>
  MX_DMA_Init();
 8000944:	f7ff fc14 	bl	8000170 <MX_DMA_Init>
  MX_TIM3_Init();
 8000948:	f000 fca8 	bl	800129c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 800094c:	f000 f9fe 	bl	8000d4c <LCD_init>
  fsend("Hello user\r\n");
 8000950:	481c      	ldr	r0, [pc, #112]	; (80009c4 <main+0xc8>)
 8000952:	f7ff fced 	bl	8000330 <fsend>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //PWM dla ekranu
 8000956:	2100      	movs	r1, #0
 8000958:	481b      	ldr	r0, [pc, #108]	; (80009c8 <main+0xcc>)
 800095a:	f002 fa73 	bl	8002e44 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 100);
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <main+0xcc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2264      	movs	r2, #100	; 0x64
 8000964:	635a      	str	r2, [r3, #52]	; 0x34

  	  LCD_print("Miernik", 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <main+0xd0>)
 800096c:	f000 fa66 	bl	8000e3c <LCD_print>
  	  LCD_print("Czestotliwosci", 0, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	2100      	movs	r1, #0
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <main+0xd4>)
 8000976:	f000 fa61 	bl	8000e3c <LCD_print>
  	  LCD_print("Autor", 0, 2);
 800097a:	2202      	movs	r2, #2
 800097c:	2100      	movs	r1, #0
 800097e:	4815      	ldr	r0, [pc, #84]	; (80009d4 <main+0xd8>)
 8000980:	f000 fa5c 	bl	8000e3c <LCD_print>
  	  LCD_print("Krzysztof", 0, 3);
 8000984:	2203      	movs	r2, #3
 8000986:	2100      	movs	r1, #0
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <main+0xdc>)
 800098a:	f000 fa57 	bl	8000e3c <LCD_print>
  	  LCD_print("Olejniczak", 0, 4);
 800098e:	2204      	movs	r2, #4
 8000990:	2100      	movs	r1, #0
 8000992:	4812      	ldr	r0, [pc, #72]	; (80009dc <main+0xe0>)
 8000994:	f000 fa52 	bl	8000e3c <LCD_print>
  	  LCD_print("", 0, 5);
 8000998:	2205      	movs	r2, #5
 800099a:	2100      	movs	r1, #0
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <main+0xe4>)
 800099e:	f000 fa4d 	bl	8000e3c <LCD_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	490f      	ldr	r1, [pc, #60]	; (80009e4 <main+0xe8>)
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <main+0xec>)
 80009a8:	f004 f908 	bl	8004bbc <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0xf0>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <main+0xf4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d0f9      	beq.n	80009ac <main+0xb0>
		  get_line();
 80009b8:	f7ff fe96 	bl	80006e8 <get_line>
	  if(busyRX!=emptyRX){
 80009bc:	e7f6      	b.n	80009ac <main+0xb0>
 80009be:	bf00      	nop
 80009c0:	40011000 	.word	0x40011000
 80009c4:	080067f8 	.word	0x080067f8
 80009c8:	20000ba8 	.word	0x20000ba8
 80009cc:	08006808 	.word	0x08006808
 80009d0:	08006810 	.word	0x08006810
 80009d4:	08006820 	.word	0x08006820
 80009d8:	08006828 	.word	0x08006828
 80009dc:	08006834 	.word	0x08006834
 80009e0:	08006840 	.word	0x08006840
 80009e4:	20000534 	.word	0x20000534
 80009e8:	20000cc8 	.word	0x20000cc8
 80009ec:	20000104 	.word	0x20000104
 80009f0:	20000100 	.word	0x20000100

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b090      	sub	sp, #64	; 0x40
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	2228      	movs	r2, #40	; 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fd0a 	bl	800541c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a1a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fc6f 	bl	8002320 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a48:	f000 f894 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2102      	movs	r1, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 feda 	bl	8002820 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a72:	f000 f87f 	bl	8000b74 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3740      	adds	r7, #64	; 0x40
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d116      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x40>
		seconds_passed += 1;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a9a:	6013      	str	r3, [r2, #0]
		if(seconds_passed>=10)
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b09      	cmp	r3, #9
 8000aa2:	d90d      	bls.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000aa8:	f002 fc08 	bl	80032bc <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ab0:	f002 fe20 	bl	80036f4 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ab6:	f002 f8ef 	bl	8002c98 <HAL_TIM_Base_Stop_IT>
			fsend("Przesylanie zakonczone\r\n");
 8000aba:	4808      	ldr	r0, [pc, #32]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000abc:	f7ff fc38 	bl	8000330 <fsend>
		}
	}

}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	20000124 	.word	0x20000124
 8000ad0:	20000c38 	.word	0x20000c38
 8000ad4:	20000c80 	.word	0x20000c80
 8000ad8:	20000bf0 	.word	0x20000bf0
 8000adc:	08006844 	.word	0x08006844

08000ae0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af0:	d132      	bne.n	8000b58 <HAL_TIM_IC_CaptureCallback+0x78>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7f1b      	ldrb	r3, [r3, #28]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d12e      	bne.n	8000b58 <HAL_TIM_IC_CaptureCallback+0x78>
		PWM_pulses_count += 1; //count number of consecutive impulses increased with every detected rising edge of PWM signal
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000b02:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured == 0){
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10a      	bne.n	8000b22 <HAL_TIM_IC_CaptureCallback+0x42>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f003 fa0e 	bl	8003f30 <HAL_TIM_ReadCapturedValue>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000b18:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0;
		}


	}
}
 8000b20:	e01a      	b.n	8000b58 <HAL_TIM_IC_CaptureCallback+0x78>
		}else if(Is_First_Captured){
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d016      	beq.n	8000b58 <HAL_TIM_IC_CaptureCallback+0x78>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f003 f9ff 	bl	8003f30 <HAL_TIM_ReadCapturedValue>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000b36:	6013      	str	r3, [r2, #0]
			if(IC_Value2 > IC_Value1){
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d906      	bls.n	8000b52 <HAL_TIM_IC_CaptureCallback+0x72>
				Difference = IC_Value2 - IC_Value1;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b50:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000120 	.word	0x20000120
 8000b64:	20000110 	.word	0x20000110
 8000b68:	20000114 	.word	0x20000114
 8000b6c:	20000118 	.word	0x20000118
 8000b70:	2000011c 	.word	0x2000011c

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x4>
	...

08000b7c <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <LCD_setRST+0x24>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <LCD_setRST+0x24>)
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	8093      	strh	r3, [r2, #4]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000940 	.word	0x20000940

08000ba4 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <LCD_setCE+0x24>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <LCD_setCE+0x24>)
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	8193      	strh	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000940 	.word	0x20000940

08000bcc <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000bd8:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <LCD_setDC+0x24>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <LCD_setDC+0x24>)
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	8293      	strh	r3, [r2, #20]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000940 	.word	0x20000940

08000bf4 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <LCD_setDIN+0x24>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <LCD_setDIN+0x24>)
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	8393      	strh	r3, [r2, #28]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000940 	.word	0x20000940

08000c1c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <LCD_setCLK+0x24>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <LCD_setCLK+0x24>)
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000940 	.word	0x20000940

08000c44 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e026      	b.n	8000ca2 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <LCD_send+0x70>)
 8000c56:	6998      	ldr	r0, [r3, #24]
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <LCD_send+0x70>)
 8000c5a:	8b99      	ldrh	r1, [r3, #28]
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	f1c3 0307 	rsb	r3, r3, #7
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	f001 fb18 	bl	80022ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <LCD_send+0x70>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <LCD_send+0x70>)
 8000c82:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000c84:	2201      	movs	r2, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fb10 	bl	80022ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <LCD_send+0x70>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <LCD_send+0x70>)
 8000c92:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000c94:	2200      	movs	r2, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fb08 	bl	80022ac <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	d9d5      	bls.n	8000c54 <LCD_send+0x10>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000940 	.word	0x20000940

08000cb8 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11c      	bne.n	8000d08 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <LCD_write+0x90>)
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <LCD_write+0x90>)
 8000cd4:	8a91      	ldrh	r1, [r2, #20]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fae7 	bl	80022ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <LCD_write+0x90>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <LCD_write+0x90>)
 8000ce4:	8991      	ldrh	r1, [r2, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fadf 	bl	80022ac <HAL_GPIO_WritePin>
    LCD_send(data);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ffa7 	bl	8000c44 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <LCD_write+0x90>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <LCD_write+0x90>)
 8000cfc:	8991      	ldrh	r1, [r2, #12]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fad3 	bl	80022ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000d06:	e01b      	b.n	8000d40 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <LCD_write+0x90>)
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LCD_write+0x90>)
 8000d0e:	8a91      	ldrh	r1, [r2, #20]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 faca 	bl	80022ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <LCD_write+0x90>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LCD_write+0x90>)
 8000d1e:	8991      	ldrh	r1, [r2, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fac2 	bl	80022ac <HAL_GPIO_WritePin>
    LCD_send(data);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff8a 	bl	8000c44 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <LCD_write+0x90>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <LCD_write+0x90>)
 8000d36:	8991      	ldrh	r1, [r2, #12]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fab6 	bl	80022ac <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000940 	.word	0x20000940

08000d4c <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <LCD_init+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <LCD_init+0x64>)
 8000d56:	8891      	ldrh	r1, [r2, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 faa6 	bl	80022ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <LCD_init+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <LCD_init+0x64>)
 8000d66:	8891      	ldrh	r1, [r2, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fa9e 	bl	80022ac <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000d70:	2100      	movs	r1, #0
 8000d72:	2021      	movs	r0, #33	; 0x21
 8000d74:	f7ff ffa0 	bl	8000cb8 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000d78:	2100      	movs	r1, #0
 8000d7a:	20b8      	movs	r0, #184	; 0xb8
 8000d7c:	f7ff ff9c 	bl	8000cb8 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000d80:	2100      	movs	r1, #0
 8000d82:	2004      	movs	r0, #4
 8000d84:	f7ff ff98 	bl	8000cb8 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2014      	movs	r0, #20
 8000d8c:	f7ff ff94 	bl	8000cb8 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000d90:	2100      	movs	r1, #0
 8000d92:	2020      	movs	r0, #32
 8000d94:	f7ff ff90 	bl	8000cb8 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200c      	movs	r0, #12
 8000d9c:	f7ff ff8c 	bl	8000cb8 <LCD_write>
  LCD_clrScr();
 8000da0:	f000 f86c 	bl	8000e7c <LCD_clrScr>
  lcd.inverttext = false;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <LCD_init+0x68>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000940 	.word	0x20000940
 8000db4:	20000968 	.word	0x20000968

08000db8 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	e02d      	b.n	8000e24 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <LCD_putChar+0x7c>)
 8000dca:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d010      	beq.n	8000dfa <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f1a3 0220 	sub.w	r2, r3, #32
 8000dde:	4916      	ldr	r1, [pc, #88]	; (8000e38 <LCD_putChar+0x80>)
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	18ca      	adds	r2, r1, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff60 	bl	8000cb8 <LCD_write>
 8000df8:	e011      	b.n	8000e1e <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f1a3 0220 	sub.w	r2, r3, #32
 8000e00:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LCD_putChar+0x80>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	18ca      	adds	r2, r1, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2101      	movs	r1, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff4d 	bl	8000cb8 <LCD_write>
  for(int i = 0; i < 6; i++){
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	ddce      	ble.n	8000dc8 <LCD_putChar+0x10>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000968 	.word	0x20000968
 8000e38:	0800687c 	.word	0x0800687c

08000e3c <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8000e4c:	78ba      	ldrb	r2, [r7, #2]
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f830 	bl	8000eb8 <LCD_goXY>
  while(*str){
 8000e58:	e006      	b.n	8000e68 <LCD_print+0x2c>
    LCD_putChar(*str++);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffa8 	bl	8000db8 <LCD_putChar>
  while(*str){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f4      	bne.n	8000e5a <LCD_print+0x1e>
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e00b      	b.n	8000ea0 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff14 	bl	8000cb8 <LCD_write>
    lcd.buffer[i] = 0;
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <LCD_clrScr+0x38>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000ea6:	dbef      	blt.n	8000e88 <LCD_clrScr+0xc>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000968 	.word	0x20000968

08000eb8 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fef0 	bl	8000cb8 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fee8 	bl	8000cb8 <LCD_write>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <HAL_MspInit+0x5c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_MspInit+0x60>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_MspInit+0x60>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 fc3b 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel2_IRQHandler+0x10>)
 8000faa:	f000 fec7 	bl	8001d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000b64 	.word	0x20000b64

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM2_IRQHandler+0x10>)
 8000fbe:	f002 fc41 	bl	8003844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000c80 	.word	0x20000c80

08000fcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM3_IRQHandler+0x10>)
 8000fd2:	f002 fc37 	bl	8003844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000bf0 	.word	0x20000bf0

08000fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART2_IRQHandler+0x10>)
 8000fe6:	f003 fe19 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000cc8 	.word	0x20000cc8

08000ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ffc:	f001 f96e 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f004 f9c8 	bl	80053c8 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20005000 	.word	0x20005000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000128 	.word	0x20000128
 800106c:	20000d20 	.word	0x20000d20

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	; 0x58
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 f9b1 	bl	800541c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010bc:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <MX_TIM1_Init+0x13c>)
 80010be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6399;
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010ce:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80010d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010e8:	f001 fd34 	bl	8002b54 <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010f2:	f7ff fd3f 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001100:	4619      	mov	r1, r3
 8001102:	482c      	ldr	r0, [pc, #176]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001104:	f002 fe50 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800110e:	f7ff fd31 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001112:	4828      	ldr	r0, [pc, #160]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001114:	f001 fe46 	bl	8002da4 <HAL_TIM_PWM_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800111e:	f7ff fd29 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800112e:	4619      	mov	r1, r3
 8001130:	4820      	ldr	r0, [pc, #128]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001132:	f003 fbf1 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800113c:	f7ff fd1a 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001140:	2360      	movs	r3, #96	; 0x60
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 31;
 8001144:	231f      	movs	r3, #31
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001166:	f002 fd61 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001170:	f7ff fd00 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001198:	f003 fc1c 	bl	80049d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80011a2:	f7ff fce7 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM1_Init+0x138>)
 80011a8:	f000 fa02 	bl	80015b0 <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3758      	adds	r7, #88	; 0x58
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000c38 	.word	0x20000c38
 80011b8:	40012c00 	.word	0x40012c00

080011bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <MX_TIM2_Init+0xdc>)
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <MX_TIM2_Init+0xdc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_TIM2_Init+0xdc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_TIM2_Init+0xdc>)
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_TIM2_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_TIM2_Init+0xdc>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800120e:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_TIM2_Init+0xdc>)
 8001210:	f001 fca0 	bl	8002b54 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800121a:	f7ff fcab 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4619      	mov	r1, r3
 800122a:	481b      	ldr	r0, [pc, #108]	; (8001298 <MX_TIM2_Init+0xdc>)
 800122c:	f002 fdbc 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001236:	f7ff fc9d 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800123a:	4817      	ldr	r0, [pc, #92]	; (8001298 <MX_TIM2_Init+0xdc>)
 800123c:	f002 f8fc 	bl	8003438 <HAL_TIM_IC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001246:	f7ff fc95 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <MX_TIM2_Init+0xdc>)
 800125a:	f003 fb5d 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001264:	f7ff fc86 	bl	8000b74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800126c:	2301      	movs	r3, #1
 800126e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_TIM2_Init+0xdc>)
 8001280:	f002 fc40 	bl	8003b04 <HAL_TIM_IC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800128a:	f7ff fc73 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000c80 	.word	0x20000c80

0800129c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <MX_TIM3_Init+0xe0>)
 80012ce:	4a2c      	ldr	r2, [pc, #176]	; (8001380 <MX_TIM3_Init+0xe4>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <MX_TIM3_Init+0xe0>)
 80012d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80012d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_TIM3_Init+0xe0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_TIM3_Init+0xe0>)
 80012e2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80012e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_TIM3_Init+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_TIM3_Init+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f4:	4821      	ldr	r0, [pc, #132]	; (800137c <MX_TIM3_Init+0xe0>)
 80012f6:	f001 fc2d 	bl	8002b54 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001300:	f7ff fc38 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	4619      	mov	r1, r3
 8001310:	481a      	ldr	r0, [pc, #104]	; (800137c <MX_TIM3_Init+0xe0>)
 8001312:	f002 fd49 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800131c:	f7ff fc2a 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001320:	4816      	ldr	r0, [pc, #88]	; (800137c <MX_TIM3_Init+0xe0>)
 8001322:	f001 fce7 	bl	8002cf4 <HAL_TIM_OC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800132c:	f7ff fc22 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4619      	mov	r1, r3
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <MX_TIM3_Init+0xe0>)
 8001340:	f003 faea 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800134a:	f7ff fc13 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_TIM3_Init+0xe0>)
 8001366:	f002 fb75 	bl	8003a54 <HAL_TIM_OC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001370:	f7ff fc00 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000bf0 	.word	0x20000bf0
 8001380:	40000400 	.word	0x40000400

08001384 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_TIM4_Init+0xa8>)
 80013a8:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_TIM4_Init+0xac>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM4_Init+0xa8>)
 80013ae:	2247      	movs	r2, #71	; 0x47
 80013b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM4_Init+0xa8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM4_Init+0xa8>)
 80013ba:	2263      	movs	r2, #99	; 0x63
 80013bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM4_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM4_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <MX_TIM4_Init+0xa8>)
 80013cc:	f001 fcea 	bl	8002da4 <HAL_TIM_PWM_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80013d6:	f7ff fbcd 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	4619      	mov	r1, r3
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <MX_TIM4_Init+0xa8>)
 80013ea:	f003 fa95 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80013f4:	f7ff fbbe 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f8:	2360      	movs	r3, #96	; 0x60
 80013fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM4_Init+0xa8>)
 8001410:	f002 fc0c 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800141a:	f7ff fbab 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM4_Init+0xa8>)
 8001420:	f000 f8c6 	bl	80015b0 <HAL_TIM_MspPostInit>

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000ba8 	.word	0x20000ba8
 8001430:	40000800 	.word	0x40000800

08001434 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a43      	ldr	r2, [pc, #268]	; (800155c <HAL_TIM_Base_MspInit+0x128>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d134      	bne.n	80014be <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a41      	ldr	r2, [pc, #260]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 800145a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 800146e:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <HAL_TIM_Base_MspInit+0x134>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 8001474:	2210      	movs	r2, #16
 8001476:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 8001486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 800148e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001492:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80014a0:	4830      	ldr	r0, [pc, #192]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 80014a2:	f000 fae1 	bl	8001a68 <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 80014ac:	f7ff fb62 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
 80014b6:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <HAL_TIM_Base_MspInit+0x130>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014bc:	e04a      	b.n	8001554 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c6:	d12c      	bne.n	8001522 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	61d3      	str	r3, [r2, #28]
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <HAL_TIM_Base_MspInit+0x138>)
 800150c:	f000 fd4a 	bl	8001fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	201c      	movs	r0, #28
 8001516:	f000 fa70 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800151a:	201c      	movs	r0, #28
 800151c:	f000 fa89 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8001520:	e018      	b.n	8001554 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <HAL_TIM_Base_MspInit+0x13c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d113      	bne.n	8001554 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	61d3      	str	r3, [r2, #28]
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_TIM_Base_MspInit+0x12c>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	201d      	movs	r0, #29
 800154a:	f000 fa56 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800154e:	201d      	movs	r0, #29
 8001550:	f000 fa6f 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40012c00 	.word	0x40012c00
 8001560:	40021000 	.word	0x40021000
 8001564:	20000b64 	.word	0x20000b64
 8001568:	4002001c 	.word	0x4002001c
 800156c:	40010800 	.word	0x40010800
 8001570:	40000400 	.word	0x40000400

08001574 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_TIM_PWM_MspInit+0x34>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10b      	bne.n	800159e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_TIM_PWM_MspInit+0x38>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_TIM_PWM_MspInit+0x38>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_TIM_PWM_MspInit+0x38>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40000800 	.word	0x40000800
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_TIM_MspPostInit+0x98>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d119      	bne.n	8001604 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_TIM_MspPostInit+0x9c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_TIM_MspPostInit+0x9c>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_TIM_MspPostInit+0x9c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	4814      	ldr	r0, [pc, #80]	; (8001650 <HAL_TIM_MspPostInit+0xa0>)
 80015fe:	f000 fcd1 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001602:	e01c      	b.n	800163e <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_TIM_MspPostInit+0xa4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d117      	bne.n	800163e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_TIM_MspPostInit+0x9c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_TIM_MspPostInit+0x9c>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_TIM_MspPostInit+0x9c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2302      	movs	r3, #2
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <HAL_TIM_MspPostInit+0xa8>)
 800163a:	f000 fcb3 	bl	8001fa4 <HAL_GPIO_Init>
}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800
 8001654:	40000800 	.word	0x40000800
 8001658:	40010c00 	.word	0x40010c00

0800165c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_USART2_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001694:	f003 fa01 	bl	8004a9a <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169e:	f7ff fa69 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000cc8 	.word	0x20000cc8
 80016ac:	40004400 	.word	0x40004400

080016b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x80>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d12b      	bne.n	8001728 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	61d3      	str	r3, [r2, #28]
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_UART_MspInit+0x84>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001700:	230c      	movs	r3, #12
 8001702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_UART_MspInit+0x88>)
 8001714:	f000 fc46 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2026      	movs	r0, #38	; 0x26
 800171e:	f000 f96c 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001722:	2026      	movs	r0, #38	; 0x26
 8001724:	f000 f985 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40004400 	.word	0x40004400
 8001734:	40021000 	.word	0x40021000
 8001738:	40010800 	.word	0x40010800

0800173c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001762:	f7ff fc85 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f003 fe35 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176a:	f7ff f8c7 	bl	80008fc <main>
  bx lr
 800176e:	4770      	bx	lr
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001778:	08006c8c 	.word	0x08006c8c
  ldr r2, =_sbss
 800177c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001780:	20000d20 	.word	0x20000d20

08001784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_2_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x28>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f923 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fba4 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f93b 	bl	8001a4e <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f903 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000006c 	.word	0x2000006c
 800180c:	20000074 	.word	0x20000074
 8001810:	20000070 	.word	0x20000070

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x1c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x20>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_IncTick+0x20>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000074 	.word	0x20000074
 8001834:	20000d0c 	.word	0x20000d0c

08001838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000d0c 	.word	0x20000d0c

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <__NVIC_EnableIRQ+0x34>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff90 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff2d 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff42 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff90 	bl	800193c <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5f 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff35 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e043      	b.n	8001b06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_DMA_Init+0xa8>)
 8001a86:	4413      	add	r3, r2
 8001a88:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_DMA_Init+0xac>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	009a      	lsls	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_DMA_Init+0xb0>)
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ab2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ab6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	bffdfff8 	.word	0xbffdfff8
 8001b14:	cccccccd 	.word	0xcccccccd
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Start_IT+0x20>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e04a      	b.n	8001bd2 <HAL_DMA_Start_IT+0xb6>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d13a      	bne.n	8001bc4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2202      	movs	r2, #2
 8001b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f9e8 	bl	8001f48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 020e 	orr.w	r2, r2, #14
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e00f      	b.n	8001bb2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0204 	bic.w	r2, r2, #4
 8001ba0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 020a 	orr.w	r2, r2, #10
 8001bb0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e005      	b.n	8001bd0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d008      	beq.n	8001c02 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e020      	b.n	8001c44 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020e 	bic.w	r2, r2, #14
 8001c10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d005      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e051      	b.n	8001d16 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 020e 	bic.w	r2, r2, #14
 8001c80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_DMA_Abort_IT+0xd0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d029      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0xa0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <HAL_DMA_Abort_IT+0xd4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_DMA_Abort_IT+0x9c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_DMA_Abort_IT+0xd8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d01a      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x96>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_DMA_Abort_IT+0xdc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d012      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x90>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_DMA_Abort_IT+0xe0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00a      	beq.n	8001cda <HAL_DMA_Abort_IT+0x8a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_DMA_Abort_IT+0xe4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d102      	bne.n	8001cd4 <HAL_DMA_Abort_IT+0x84>
 8001cce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd2:	e00e      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd8:	e00b      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cde:	e008      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	e005      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cea:	e002      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001cec:	2310      	movs	r3, #16
 8001cee:	e000      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_DMA_Abort_IT+0xe8>)
 8001cf4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
    } 
  }
  return status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020008 	.word	0x40020008
 8001d24:	4002001c 	.word	0x4002001c
 8001d28:	40020030 	.word	0x40020030
 8001d2c:	40020044 	.word	0x40020044
 8001d30:	40020058 	.word	0x40020058
 8001d34:	4002006c 	.word	0x4002006c
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2204      	movs	r2, #4
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d04f      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xc8>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0204 	bic.w	r2, r2, #4
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a66      	ldr	r2, [pc, #408]	; (8001f2c <HAL_DMA_IRQHandler+0x1f0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d029      	beq.n	8001dea <HAL_DMA_IRQHandler+0xae>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_DMA_IRQHandler+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xaa>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_DMA_IRQHandler+0x1f8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01a      	beq.n	8001de0 <HAL_DMA_IRQHandler+0xa4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a62      	ldr	r2, [pc, #392]	; (8001f38 <HAL_DMA_IRQHandler+0x1fc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d012      	beq.n	8001dda <HAL_DMA_IRQHandler+0x9e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a60      	ldr	r2, [pc, #384]	; (8001f3c <HAL_DMA_IRQHandler+0x200>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x98>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	; (8001f40 <HAL_DMA_IRQHandler+0x204>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_DMA_IRQHandler+0x92>
 8001dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dcc:	e00e      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dd2:	e00b      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dd8:	e008      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dde:	e005      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	e002      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	e000      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dea:	2304      	movs	r3, #4
 8001dec:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_DMA_IRQHandler+0x208>)
 8001dee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8094 	beq.w	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e02:	e08e      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2202      	movs	r2, #2
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d056      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x186>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d051      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 020a 	bic.w	r2, r2, #10
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_DMA_IRQHandler+0x1f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d029      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x166>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a37      	ldr	r2, [pc, #220]	; (8001f30 <HAL_DMA_IRQHandler+0x1f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x162>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a35      	ldr	r2, [pc, #212]	; (8001f34 <HAL_DMA_IRQHandler+0x1f8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x15c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <HAL_DMA_IRQHandler+0x1fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x156>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_DMA_IRQHandler+0x200>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x150>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <HAL_DMA_IRQHandler+0x204>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d102      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x14a>
 8001e80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e84:	e00e      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	e00b      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	e008      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e96:	e005      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9c:	e002      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_DMA_IRQHandler+0x208>)
 8001ea6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d034      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ec0:	e02f      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d028      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1e8>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d023      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020e 	bic.w	r2, r2, #14
 8001eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
    }
  }
  return;
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
}
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40020008 	.word	0x40020008
 8001f30:	4002001c 	.word	0x4002001c
 8001f34:	40020030 	.word	0x40020030
 8001f38:	40020044 	.word	0x40020044
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	4002006c 	.word	0x4002006c
 8001f44:	40020000 	.word	0x40020000

08001f48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d108      	bne.n	8001f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f86:	e007      	b.n	8001f98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b08b      	sub	sp, #44	; 0x2c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	e169      	b.n	800228c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8158 	bne.w	8002286 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a9a      	ldr	r2, [pc, #616]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d05e      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8001fe0:	4a98      	ldr	r2, [pc, #608]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d875      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8001fe6:	4a98      	ldr	r2, [pc, #608]	; (8002248 <HAL_GPIO_Init+0x2a4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d058      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8001fec:	4a96      	ldr	r2, [pc, #600]	; (8002248 <HAL_GPIO_Init+0x2a4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d86f      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8001ff2:	4a96      	ldr	r2, [pc, #600]	; (800224c <HAL_GPIO_Init+0x2a8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d052      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8001ff8:	4a94      	ldr	r2, [pc, #592]	; (800224c <HAL_GPIO_Init+0x2a8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d869      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8001ffe:	4a94      	ldr	r2, [pc, #592]	; (8002250 <HAL_GPIO_Init+0x2ac>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04c      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8002004:	4a92      	ldr	r2, [pc, #584]	; (8002250 <HAL_GPIO_Init+0x2ac>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d863      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 800200a:	4a92      	ldr	r2, [pc, #584]	; (8002254 <HAL_GPIO_Init+0x2b0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d046      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8002010:	4a90      	ldr	r2, [pc, #576]	; (8002254 <HAL_GPIO_Init+0x2b0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d85d      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8002016:	2b12      	cmp	r3, #18
 8002018:	d82a      	bhi.n	8002070 <HAL_GPIO_Init+0xcc>
 800201a:	2b12      	cmp	r3, #18
 800201c:	d859      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <HAL_GPIO_Init+0x80>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	0800209f 	.word	0x0800209f
 8002028:	08002079 	.word	0x08002079
 800202c:	0800208b 	.word	0x0800208b
 8002030:	080020cd 	.word	0x080020cd
 8002034:	080020d3 	.word	0x080020d3
 8002038:	080020d3 	.word	0x080020d3
 800203c:	080020d3 	.word	0x080020d3
 8002040:	080020d3 	.word	0x080020d3
 8002044:	080020d3 	.word	0x080020d3
 8002048:	080020d3 	.word	0x080020d3
 800204c:	080020d3 	.word	0x080020d3
 8002050:	080020d3 	.word	0x080020d3
 8002054:	080020d3 	.word	0x080020d3
 8002058:	080020d3 	.word	0x080020d3
 800205c:	080020d3 	.word	0x080020d3
 8002060:	080020d3 	.word	0x080020d3
 8002064:	080020d3 	.word	0x080020d3
 8002068:	08002081 	.word	0x08002081
 800206c:	08002095 	.word	0x08002095
 8002070:	4a79      	ldr	r2, [pc, #484]	; (8002258 <HAL_GPIO_Init+0x2b4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002076:	e02c      	b.n	80020d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	623b      	str	r3, [r7, #32]
          break;
 800207e:	e029      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	3304      	adds	r3, #4
 8002086:	623b      	str	r3, [r7, #32]
          break;
 8002088:	e024      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	3308      	adds	r3, #8
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e01f      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	330c      	adds	r3, #12
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e01a      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020a6:	2304      	movs	r3, #4
 80020a8:	623b      	str	r3, [r7, #32]
          break;
 80020aa:	e013      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b4:	2308      	movs	r3, #8
 80020b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	611a      	str	r2, [r3, #16]
          break;
 80020be:	e009      	b.n	80020d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c0:	2308      	movs	r3, #8
 80020c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	615a      	str	r2, [r3, #20]
          break;
 80020ca:	e003      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
          break;
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          break;
 80020d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2bff      	cmp	r3, #255	; 0xff
 80020d8:	d801      	bhi.n	80020de <HAL_GPIO_Init+0x13a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_Init+0x13e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d802      	bhi.n	80020f0 <HAL_GPIO_Init+0x14c>
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x152>
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	3b08      	subs	r3, #8
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	210f      	movs	r1, #15
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	401a      	ands	r2, r3
 8002108:	6a39      	ldr	r1, [r7, #32]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80b1 	beq.w	8002286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_GPIO_Init+0x2b8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a4c      	ldr	r2, [pc, #304]	; (800225c <HAL_GPIO_Init+0x2b8>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_GPIO_Init+0x2b8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800213c:	4a48      	ldr	r2, [pc, #288]	; (8002260 <HAL_GPIO_Init+0x2bc>)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <HAL_GPIO_Init+0x2c0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_GPIO_Init+0x1ec>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3f      	ldr	r2, [pc, #252]	; (8002268 <HAL_GPIO_Init+0x2c4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x1e8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3e      	ldr	r2, [pc, #248]	; (800226c <HAL_GPIO_Init+0x2c8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1e4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <HAL_GPIO_Init+0x2cc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x1e0>
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_GPIO_Init+0x1ee>
 8002184:	2304      	movs	r3, #4
 8002186:	e004      	b.n	8002192 <HAL_GPIO_Init+0x1ee>
 8002188:	2302      	movs	r3, #2
 800218a:	e002      	b.n	8002192 <HAL_GPIO_Init+0x1ee>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_GPIO_Init+0x1ee>
 8002190:	2300      	movs	r3, #0
 8002192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002194:	f002 0203 	and.w	r2, r2, #3
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	4093      	lsls	r3, r2
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021a2:	492f      	ldr	r1, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x2bc>)
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	492c      	ldr	r1, [pc, #176]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4928      	ldr	r1, [pc, #160]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4922      	ldr	r1, [pc, #136]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	491e      	ldr	r1, [pc, #120]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4918      	ldr	r1, [pc, #96]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	43db      	mvns	r3, r3
 8002222:	4914      	ldr	r1, [pc, #80]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 8002224:	4013      	ands	r3, r2
 8002226:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d021      	beq.n	8002278 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	490e      	ldr	r1, [pc, #56]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
 8002240:	e021      	b.n	8002286 <HAL_GPIO_Init+0x2e2>
 8002242:	bf00      	nop
 8002244:	10320000 	.word	0x10320000
 8002248:	10310000 	.word	0x10310000
 800224c:	10220000 	.word	0x10220000
 8002250:	10210000 	.word	0x10210000
 8002254:	10120000 	.word	0x10120000
 8002258:	10110000 	.word	0x10110000
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	40010800 	.word	0x40010800
 8002268:	40010c00 	.word	0x40010c00
 800226c:	40011000 	.word	0x40011000
 8002270:	40011400 	.word	0x40011400
 8002274:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_GPIO_Init+0x304>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	43db      	mvns	r3, r3
 8002280:	4909      	ldr	r1, [pc, #36]	; (80022a8 <HAL_GPIO_Init+0x304>)
 8002282:	4013      	ands	r3, r2
 8002284:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	3301      	adds	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	f47f ae8e 	bne.w	8001fb8 <HAL_GPIO_Init+0x14>
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	372c      	adds	r7, #44	; 0x2c
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40010400 	.word	0x40010400

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022c8:	e003      	b.n	80022d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f806 	bl	800230c <HAL_GPIO_EXTI_Callback>
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e26c      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8087 	beq.w	800244e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002340:	4b92      	ldr	r3, [pc, #584]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800234c:	4b8f      	ldr	r3, [pc, #572]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x5e>
 8002358:	4b8c      	ldr	r3, [pc, #560]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06c      	beq.n	800244c <HAL_RCC_OscConfig+0x12c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d168      	bne.n	800244c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e246      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x76>
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7f      	ldr	r2, [pc, #508]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e02e      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x98>
 800239e:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7a      	ldr	r2, [pc, #488]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b78      	ldr	r3, [pc, #480]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a77      	ldr	r2, [pc, #476]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0xbc>
 80023c2:	4b72      	ldr	r3, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a71      	ldr	r2, [pc, #452]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 80023dc:	4b6b      	ldr	r3, [pc, #428]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6a      	ldr	r2, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a67      	ldr	r2, [pc, #412]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fa1c 	bl	8001838 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff fa18 	bl	8001838 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1fa      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xe4>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fa08 	bl	8001838 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff fa04 	bl	8001838 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1e6      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x10c>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d063      	beq.n	8002522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245a:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002466:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x18c>
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x176>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1ba      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b3d      	ldr	r3, [pc, #244]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4939      	ldr	r1, [pc, #228]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e03a      	b.n	8002522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff f9bd 	bl	8001838 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7ff f9b9 	bl	8001838 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e19b      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4927      	ldr	r1, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f99c 	bl	8001838 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002504:	f7ff f998 	bl	8001838 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e17a      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03a      	beq.n	80025a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d019      	beq.n	800256a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7ff f97c 	bl	8001838 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7ff f978 	bl	8001838 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e15a      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f000 fad8 	bl	8002b18 <RCC_Delay>
 8002568:	e01c      	b.n	80025a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7ff f962 	bl	8001838 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002576:	e00f      	b.n	8002598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff f95e 	bl	8001838 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d908      	bls.n	8002598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e140      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	42420000 	.word	0x42420000
 8002594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	4b9e      	ldr	r3, [pc, #632]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e9      	bne.n	8002578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a6 	beq.w	80026fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b97      	ldr	r3, [pc, #604]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b94      	ldr	r3, [pc, #592]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a93      	ldr	r2, [pc, #588]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b91      	ldr	r3, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b8e      	ldr	r3, [pc, #568]	; (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a8a      	ldr	r2, [pc, #552]	; (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f91f 	bl	8001838 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7ff f91b 	bl	8001838 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0fd      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b81      	ldr	r3, [pc, #516]	; (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x312>
 8002624:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6213      	str	r3, [r2, #32]
 8002630:	e02d      	b.n	800268e <HAL_RCC_OscConfig+0x36e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x334>
 800263a:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a75      	ldr	r2, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	4b73      	ldr	r3, [pc, #460]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a72      	ldr	r2, [pc, #456]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6213      	str	r3, [r2, #32]
 8002652:	e01c      	b.n	800268e <HAL_RCC_OscConfig+0x36e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x356>
 800265c:	4b6d      	ldr	r3, [pc, #436]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a6c      	ldr	r2, [pc, #432]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a69      	ldr	r2, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x36e>
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a66      	ldr	r2, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a63      	ldr	r2, [pc, #396]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff f8cf 	bl	8001838 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7ff f8cb 	bl	8001838 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0ab      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	4b57      	ldr	r3, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ee      	beq.n	800269e <HAL_RCC_OscConfig+0x37e>
 80026c0:	e014      	b.n	80026ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7ff f8b9 	bl	8001838 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f8b5 	bl	8001838 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e095      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8081 	beq.w	800280a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002708:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d061      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d146      	bne.n	80027aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_OscConfig+0x4fc>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7ff f889 	bl	8001838 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7ff f885 	bl	8001838 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e067      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d108      	bne.n	8002764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002752:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	492d      	ldr	r1, [pc, #180]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a19      	ldr	r1, [r3, #32]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	430b      	orrs	r3, r1
 8002776:	4927      	ldr	r1, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x4fc>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff f859 	bl	8001838 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278a:	f7ff f855 	bl	8001838 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e037      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x46a>
 80027a8:	e02f      	b.n	800280a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_RCC_OscConfig+0x4fc>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff f842 	bl	8001838 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7ff f83e 	bl	8001838 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e020      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x498>
 80027d6:	e018      	b.n	800280a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e013      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	42420060 	.word	0x42420060

08002820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0d0      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d910      	bls.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4965      	ldr	r1, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800289e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d040      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e073      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4936      	ldr	r1, [pc, #216]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe ff92 	bl	8001838 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe ff8e 	bl	8001838 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e053      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d210      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4922      	ldr	r1, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1cc>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fef0 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08006abc 	.word	0x08006abc
 80029ec:	2000006c 	.word	0x2000006c
 80029f0:	20000070 	.word	0x20000070

080029f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b490      	push	{r4, r7}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029fa:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029fc:	1d3c      	adds	r4, r7, #4
 80029fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a04:	f240 2301 	movw	r3, #513	; 0x201
 8002a08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d002      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x46>
 8002a32:	e02d      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a36:	623b      	str	r3, [r7, #32]
      break;
 8002a38:	e02d      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	0c9b      	lsrs	r3, r3, #18
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a46:	4413      	add	r3, r2
 8002a48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c5b      	lsrs	r3, r3, #17
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a66:	4413      	add	r3, r2
 8002a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a72:	fb02 f203 	mul.w	r2, r2, r3
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	e004      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	623b      	str	r3, [r7, #32]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a92:	623b      	str	r3, [r7, #32]
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc90      	pop	{r4, r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	08006860 	.word	0x08006860
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	003d0900 	.word	0x003d0900

08002ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	2000006c 	.word	0x2000006c

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff2 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08006acc 	.word	0x08006acc

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffde 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0adb      	lsrs	r3, r3, #11
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08006acc 	.word	0x08006acc

08002b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCC_Delay+0x34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <RCC_Delay+0x38>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b34:	bf00      	nop
  }
  while (Delay --);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <RCC_Delay+0x1c>
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	2000006c 	.word	0x2000006c
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e041      	b.n	8002bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe fc5a 	bl	8001434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f001 fb0e 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e03a      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_TIM_Base_Start_IT+0x98>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x58>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d009      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x58>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x58>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d010      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	e007      	b.n	8002c80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	f240 4344 	movw	r3, #1092	; 0x444
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e041      	b.n	8002d8a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f839 	bl	8002d92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f001 fa3e 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e041      	b.n	8002e3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe fbd2 	bl	8001574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f001 f9e6 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_TIM_PWM_Start+0x24>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e022      	b.n	8002eae <HAL_TIM_PWM_Start+0x6a>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d109      	bne.n	8002e82 <HAL_TIM_PWM_Start+0x3e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e015      	b.n	8002eae <HAL_TIM_PWM_Start+0x6a>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d109      	bne.n	8002e9c <HAL_TIM_PWM_Start+0x58>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e008      	b.n	8002eae <HAL_TIM_PWM_Start+0x6a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e05e      	b.n	8002f74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x82>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec4:	e013      	b.n	8002eee <HAL_TIM_PWM_Start+0xaa>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x92>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	e00b      	b.n	8002eee <HAL_TIM_PWM_Start+0xaa>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0xa2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	e003      	b.n	8002eee <HAL_TIM_PWM_Start+0xaa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fce9 	bl	80048ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_TIM_PWM_Start+0x138>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d107      	bne.n	8002f16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_TIM_PWM_Start+0x138>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_TIM_PWM_Start+0xfa>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d009      	beq.n	8002f3e <HAL_TIM_PWM_Start+0xfa>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_TIM_PWM_Start+0x13c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_PWM_Start+0xfa>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_TIM_PWM_Start+0x140>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d111      	bne.n	8002f62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d010      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f60:	e007      	b.n	8002f72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800

08002f88 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x28>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e022      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d109      	bne.n	8002fca <HAL_TIM_PWM_Start_DMA+0x42>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e015      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d109      	bne.n	8002fe4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e008      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e14e      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_TIM_PWM_Start_DMA+0x90>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e022      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0xd6>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b04      	cmp	r3, #4
 800301c:	d109      	bne.n	8003032 <HAL_TIM_PWM_Start_DMA+0xaa>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	e015      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0xd6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d109      	bne.n	800304c <HAL_TIM_PWM_Start_DMA+0xc4>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e008      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0xd6>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d024      	beq.n	80030ac <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <HAL_TIM_PWM_Start_DMA+0xea>
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e114      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003080:	e016      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x128>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d104      	bne.n	8003092 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003090:	e00e      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x128>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PWM_Start_DMA+0x11a>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	e006      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x128>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030aa:	e001      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0f5      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	f200 80ae 	bhi.w	8003214 <HAL_TIM_PWM_Start_DMA+0x28c>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_TIM_PWM_Start_DMA+0x138>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003215 	.word	0x08003215
 80030c8:	08003215 	.word	0x08003215
 80030cc:	08003215 	.word	0x08003215
 80030d0:	0800313d 	.word	0x0800313d
 80030d4:	08003215 	.word	0x08003215
 80030d8:	08003215 	.word	0x08003215
 80030dc:	08003215 	.word	0x08003215
 80030e0:	08003185 	.word	0x08003185
 80030e4:	08003215 	.word	0x08003215
 80030e8:	08003215 	.word	0x08003215
 80030ec:	08003215 	.word	0x08003215
 80030f0:	080031cd 	.word	0x080031cd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4a6a      	ldr	r2, [pc, #424]	; (80032a4 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	4a69      	ldr	r2, [pc, #420]	; (80032a8 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_TIM_PWM_Start_DMA+0x324>)
 800310a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3334      	adds	r3, #52	; 0x34
 8003118:	461a      	mov	r2, r3
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	f7fe fcfe 	bl	8001b1c <HAL_DMA_Start_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0b8      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	60da      	str	r2, [r3, #12]
      break;
 800313a:	e06c      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	4a57      	ldr	r2, [pc, #348]	; (80032a8 <HAL_TIM_PWM_Start_DMA+0x320>)
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_TIM_PWM_Start_DMA+0x324>)
 8003152:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3338      	adds	r3, #56	; 0x38
 8003160:	461a      	mov	r2, r3
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	f7fe fcda 	bl	8001b1c <HAL_DMA_Start_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e094      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003180:	60da      	str	r2, [r3, #12]
      break;
 8003182:	e048      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a46      	ldr	r2, [pc, #280]	; (80032a4 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a45      	ldr	r2, [pc, #276]	; (80032a8 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4a44      	ldr	r2, [pc, #272]	; (80032ac <HAL_TIM_PWM_Start_DMA+0x324>)
 800319a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	333c      	adds	r3, #60	; 0x3c
 80031a8:	461a      	mov	r2, r3
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	f7fe fcb6 	bl	8001b1c <HAL_DMA_Start_IT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e070      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c8:	60da      	str	r2, [r3, #12]
      break;
 80031ca:	e024      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a33      	ldr	r2, [pc, #204]	; (80032a8 <HAL_TIM_PWM_Start_DMA+0x320>)
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a32      	ldr	r2, [pc, #200]	; (80032ac <HAL_TIM_PWM_Start_DMA+0x324>)
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3340      	adds	r3, #64	; 0x40
 80031f0:	461a      	mov	r2, r3
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	f7fe fc92 	bl	8001b1c <HAL_DMA_Start_IT>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e04c      	b.n	800329c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003210:	60da      	str	r2, [r3, #12]
      break;
 8003212:	e000      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003214:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f001 fb55 	bl	80048ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_TIM_PWM_Start_DMA+0x328>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d107      	bne.n	800323e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d009      	beq.n	8003266 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIM_PWM_Start_DMA+0x2de>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d111      	bne.n	800328a <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d010      	beq.n	800329a <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	e007      	b.n	800329a <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	080040a5 	.word	0x080040a5
 80032a8:	0800414d 	.word	0x0800414d
 80032ac:	08004013 	.word	0x08004013
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d855      	bhi.n	8003378 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	08003309 	.word	0x08003309
 80032d8:	08003379 	.word	0x08003379
 80032dc:	08003379 	.word	0x08003379
 80032e0:	08003379 	.word	0x08003379
 80032e4:	08003325 	.word	0x08003325
 80032e8:	08003379 	.word	0x08003379
 80032ec:	08003379 	.word	0x08003379
 80032f0:	08003379 	.word	0x08003379
 80032f4:	08003341 	.word	0x08003341
 80032f8:	08003379 	.word	0x08003379
 80032fc:	08003379 	.word	0x08003379
 8003300:	08003379 	.word	0x08003379
 8003304:	0800335d 	.word	0x0800335d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003316:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fc97 	bl	8001c50 <HAL_DMA_Abort_IT>
      break;
 8003322:	e02a      	b.n	800337a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003332:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe fc89 	bl	8001c50 <HAL_DMA_Abort_IT>
      break;
 800333e:	e01c      	b.n	800337a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fc7b 	bl	8001c50 <HAL_DMA_Abort_IT>
      break;
 800335a:	e00e      	b.n	800337a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fc6d 	bl	8001c50 <HAL_DMA_Abort_IT>
      break;
 8003376:	e000      	b.n	800337a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003378:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f001 faa3 	bl	80048ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d117      	bne.n	80033c2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	f241 1311 	movw	r3, #4369	; 0x1111
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	f240 4344 	movw	r3, #1092	; 0x444
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_TIM_PWM_Stop_DMA+0x136>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	f240 4344 	movw	r3, #1092	; 0x444
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_TIM_PWM_Stop_DMA+0x136>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Stop_DMA+0x146>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003400:	e013      	b.n	800342a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Stop_DMA+0x156>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003410:	e00b      	b.n	800342a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Stop_DMA+0x166>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003420:	e003      	b.n	800342a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40012c00 	.word	0x40012c00

08003438 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e041      	b.n	80034ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f839 	bl	80034d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fe9c 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_IC_Start_IT+0x1a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e013      	b.n	800352a <HAL_TIM_IC_Start_IT+0x42>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0x2a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e00b      	b.n	800352a <HAL_TIM_IC_Start_IT+0x42>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0x3a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e003      	b.n	800352a <HAL_TIM_IC_Start_IT+0x42>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_TIM_IC_Start_IT+0x54>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e013      	b.n	8003564 <HAL_TIM_IC_Start_IT+0x7c>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b04      	cmp	r3, #4
 8003540:	d104      	bne.n	800354c <HAL_TIM_IC_Start_IT+0x64>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e00b      	b.n	8003564 <HAL_TIM_IC_Start_IT+0x7c>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b08      	cmp	r3, #8
 8003550:	d104      	bne.n	800355c <HAL_TIM_IC_Start_IT+0x74>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e003      	b.n	8003564 <HAL_TIM_IC_Start_IT+0x7c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003562:	b2db      	uxtb	r3, r3
 8003564:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0b3      	b.n	80036de <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <HAL_TIM_IC_Start_IT+0x9e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	e013      	b.n	80035ae <HAL_TIM_IC_Start_IT+0xc6>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d104      	bne.n	8003596 <HAL_TIM_IC_Start_IT+0xae>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	e00b      	b.n	80035ae <HAL_TIM_IC_Start_IT+0xc6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start_IT+0xbe>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a4:	e003      	b.n	80035ae <HAL_TIM_IC_Start_IT+0xc6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_IC_Start_IT+0xd6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0xfe>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0xe6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0xfe>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start_IT+0xf6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0xfe>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d841      	bhi.n	8003670 <HAL_TIM_IC_Start_IT+0x188>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <HAL_TIM_IC_Start_IT+0x10c>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003629 	.word	0x08003629
 80035f8:	08003671 	.word	0x08003671
 80035fc:	08003671 	.word	0x08003671
 8003600:	08003671 	.word	0x08003671
 8003604:	0800363b 	.word	0x0800363b
 8003608:	08003671 	.word	0x08003671
 800360c:	08003671 	.word	0x08003671
 8003610:	08003671 	.word	0x08003671
 8003614:	0800364d 	.word	0x0800364d
 8003618:	08003671 	.word	0x08003671
 800361c:	08003671 	.word	0x08003671
 8003620:	08003671 	.word	0x08003671
 8003624:	0800365f 	.word	0x0800365f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0202 	orr.w	r2, r2, #2
 8003636:	60da      	str	r2, [r3, #12]
      break;
 8003638:	e01b      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0204 	orr.w	r2, r2, #4
 8003648:	60da      	str	r2, [r3, #12]
      break;
 800364a:	e012      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	60da      	str	r2, [r3, #12]
      break;
 800365c:	e009      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0210 	orr.w	r2, r2, #16
 800366c:	60da      	str	r2, [r3, #12]
      break;
 800366e:	e000      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003670:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f927 	bl	80048ce <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_TIM_IC_Start_IT+0x200>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_TIM_IC_Start_IT+0x1c0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d009      	beq.n	80036a8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <HAL_TIM_IC_Start_IT+0x204>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIM_IC_Start_IT+0x1c0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_TIM_IC_Start_IT+0x208>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d111      	bne.n	80036cc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d010      	beq.n	80036dc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	e007      	b.n	80036dc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800

080036f4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b0c      	cmp	r3, #12
 8003702:	d841      	bhi.n	8003788 <HAL_TIM_IC_Stop_IT+0x94>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <HAL_TIM_IC_Stop_IT+0x18>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003741 	.word	0x08003741
 8003710:	08003789 	.word	0x08003789
 8003714:	08003789 	.word	0x08003789
 8003718:	08003789 	.word	0x08003789
 800371c:	08003753 	.word	0x08003753
 8003720:	08003789 	.word	0x08003789
 8003724:	08003789 	.word	0x08003789
 8003728:	08003789 	.word	0x08003789
 800372c:	08003765 	.word	0x08003765
 8003730:	08003789 	.word	0x08003789
 8003734:	08003789 	.word	0x08003789
 8003738:	08003789 	.word	0x08003789
 800373c:	08003777 	.word	0x08003777
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0202 	bic.w	r2, r2, #2
 800374e:	60da      	str	r2, [r3, #12]
      break;
 8003750:	e01b      	b.n	800378a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0204 	bic.w	r2, r2, #4
 8003760:	60da      	str	r2, [r3, #12]
      break;
 8003762:	e012      	b.n	800378a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0208 	bic.w	r2, r2, #8
 8003772:	60da      	str	r2, [r3, #12]
      break;
 8003774:	e009      	b.n	800378a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0210 	bic.w	r2, r2, #16
 8003784:	60da      	str	r2, [r3, #12]
      break;
 8003786:	e000      	b.n	800378a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8003788:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f89b 	bl	80048ce <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	f241 1311 	movw	r3, #4369	; 0x1111
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <HAL_TIM_IC_Stop_IT+0xd4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	f240 4344 	movw	r3, #1092	; 0x444
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IC_Stop_IT+0xd4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <HAL_TIM_IC_Stop_IT+0xe4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d6:	e013      	b.n	8003800 <HAL_TIM_IC_Stop_IT+0x10c>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d104      	bne.n	80037e8 <HAL_TIM_IC_Stop_IT+0xf4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e6:	e00b      	b.n	8003800 <HAL_TIM_IC_Stop_IT+0x10c>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d104      	bne.n	80037f8 <HAL_TIM_IC_Stop_IT+0x104>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f6:	e003      	b.n	8003800 <HAL_TIM_IC_Stop_IT+0x10c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <HAL_TIM_IC_Stop_IT+0x11c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380e:	e013      	b.n	8003838 <HAL_TIM_IC_Stop_IT+0x144>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d104      	bne.n	8003820 <HAL_TIM_IC_Stop_IT+0x12c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800381e:	e00b      	b.n	8003838 <HAL_TIM_IC_Stop_IT+0x144>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d104      	bne.n	8003830 <HAL_TIM_IC_Stop_IT+0x13c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382e:	e003      	b.n	8003838 <HAL_TIM_IC_Stop_IT+0x144>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop

08003844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d122      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b02      	cmp	r3, #2
 8003866:	d11b      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0202 	mvn.w	r2, #2
 8003870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd f92a 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fb92 	bl	8003fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb98 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d122      	bne.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d11b      	bne.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0204 	mvn.w	r2, #4
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd f900 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fb68 	bl	8003fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fb6e 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d122      	bne.n	8003948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b08      	cmp	r3, #8
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0208 	mvn.w	r2, #8
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd f8d6 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fb3e 	bl	8003fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb44 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b10      	cmp	r3, #16
 8003954:	d122      	bne.n	800399c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d11b      	bne.n	800399c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0210 	mvn.w	r2, #16
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2208      	movs	r2, #8
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f8ac 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fb14 	bl	8003fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fb1a 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0201 	mvn.w	r2, #1
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd f85c 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 f84a 	bl	8004a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d10e      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d107      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fae7 	bl	8003fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0220 	mvn.w	r2, #32
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f001 f815 	bl	8004a76 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_OC_ConfigChannel+0x1a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e046      	b.n	8003afc <HAL_TIM_OC_ConfigChannel+0xa8>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d839      	bhi.n	8003af0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003af1 	.word	0x08003af1
 8003a8c:	08003af1 	.word	0x08003af1
 8003a90:	08003af1 	.word	0x08003af1
 8003a94:	08003ac7 	.word	0x08003ac7
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003ad5 	.word	0x08003ad5
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003af1 	.word	0x08003af1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003ae3 	.word	0x08003ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fbda 	bl	8004278 <TIM_OC1_SetConfig>
      break;
 8003ac4:	e015      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fc39 	bl	8004344 <TIM_OC2_SetConfig>
      break;
 8003ad2:	e00e      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fc9c 	bl	8004418 <TIM_OC3_SetConfig>
      break;
 8003ae0:	e007      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fcff 	bl	80044ec <TIM_OC4_SetConfig>
      break;
 8003aee:	e000      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_IC_ConfigChannel+0x1a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e082      	b.n	8003c24 <HAL_TIM_IC_ConfigChannel+0x120>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11b      	bne.n	8003b64 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f000 fd24 	bl	8004588 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 020c 	bic.w	r2, r2, #12
 8003b4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e05a      	b.n	8003c1a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d11c      	bne.n	8003ba4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f000 fd8d 	bl	8004698 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6999      	ldr	r1, [r3, #24]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	021a      	lsls	r2, r3, #8
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	619a      	str	r2, [r3, #24]
 8003ba2:	e03a      	b.n	8003c1a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d11b      	bne.n	8003be2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f000 fdd8 	bl	800476e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 020c 	bic.w	r2, r2, #12
 8003bcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69d9      	ldr	r1, [r3, #28]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	61da      	str	r2, [r3, #28]
 8003be0:	e01b      	b.n	8003c1a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 fdf7 	bl	80047e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0ac      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	f200 809f 	bhi.w	8003d94 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003d95 	.word	0x08003d95
 8003c64:	08003d95 	.word	0x08003d95
 8003c68:	08003d95 	.word	0x08003d95
 8003c6c:	08003cd1 	.word	0x08003cd1
 8003c70:	08003d95 	.word	0x08003d95
 8003c74:	08003d95 	.word	0x08003d95
 8003c78:	08003d95 	.word	0x08003d95
 8003c7c:	08003d13 	.word	0x08003d13
 8003c80:	08003d95 	.word	0x08003d95
 8003c84:	08003d95 	.word	0x08003d95
 8003c88:	08003d95 	.word	0x08003d95
 8003c8c:	08003d53 	.word	0x08003d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 faee 	bl	8004278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0208 	orr.w	r2, r2, #8
 8003caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6999      	ldr	r1, [r3, #24]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	619a      	str	r2, [r3, #24]
      break;
 8003cce:	e062      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fb34 	bl	8004344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6999      	ldr	r1, [r3, #24]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	021a      	lsls	r2, r3, #8
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	619a      	str	r2, [r3, #24]
      break;
 8003d10:	e041      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68b9      	ldr	r1, [r7, #8]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fb7d 	bl	8004418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0208 	orr.w	r2, r2, #8
 8003d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0204 	bic.w	r2, r2, #4
 8003d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69d9      	ldr	r1, [r3, #28]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	61da      	str	r2, [r3, #28]
      break;
 8003d50:	e021      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fbc7 	bl	80044ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69d9      	ldr	r1, [r3, #28]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	021a      	lsls	r2, r3, #8
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	61da      	str	r2, [r3, #28]
      break;
 8003d92:	e000      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_ConfigClockSource+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e0b3      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x180>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df8:	d03e      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0xd0>
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	f200 8087 	bhi.w	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e06:	f000 8085 	beq.w	8003f14 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d87f      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e10:	2b70      	cmp	r3, #112	; 0x70
 8003e12:	d01a      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0xa2>
 8003e14:	2b70      	cmp	r3, #112	; 0x70
 8003e16:	d87b      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e18:	2b60      	cmp	r3, #96	; 0x60
 8003e1a:	d050      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0x116>
 8003e1c:	2b60      	cmp	r3, #96	; 0x60
 8003e1e:	d877      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e20:	2b50      	cmp	r3, #80	; 0x50
 8003e22:	d03c      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0xf6>
 8003e24:	2b50      	cmp	r3, #80	; 0x50
 8003e26:	d873      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d058      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x136>
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d86f      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d064      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x156>
 8003e34:	2b30      	cmp	r3, #48	; 0x30
 8003e36:	d86b      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d060      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x156>
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d867      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x156>
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d05a      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e48:	e062      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f000 fd19 	bl	8004890 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	609a      	str	r2, [r3, #8]
      break;
 8003e76:	e04e      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f000 fd02 	bl	8004890 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e9a:	609a      	str	r2, [r3, #8]
      break;
 8003e9c:	e03b      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f000 fbc6 	bl	800463c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2150      	movs	r1, #80	; 0x50
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fcd0 	bl	800485c <TIM_ITRx_SetConfig>
      break;
 8003ebc:	e02b      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 fc20 	bl	8004710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2160      	movs	r1, #96	; 0x60
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fcc0 	bl	800485c <TIM_ITRx_SetConfig>
      break;
 8003edc:	e01b      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fba6 	bl	800463c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2140      	movs	r1, #64	; 0x40
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fcb0 	bl	800485c <TIM_ITRx_SetConfig>
      break;
 8003efc:	e00b      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f000 fca7 	bl	800485c <TIM_ITRx_SetConfig>
        break;
 8003f0e:	e002      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d831      	bhi.n	8003fa8 <HAL_TIM_ReadCapturedValue+0x78>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003fa9 	.word	0x08003fa9
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003fa9 	.word	0x08003fa9
 8003f5c:	08003f8b 	.word	0x08003f8b
 8003f60:	08003fa9 	.word	0x08003fa9
 8003f64:	08003fa9 	.word	0x08003fa9
 8003f68:	08003fa9 	.word	0x08003fa9
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003fa9 	.word	0x08003fa9
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fa9 	.word	0x08003fa9
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	60fb      	str	r3, [r7, #12]

      break;
 8003f88:	e00f      	b.n	8003faa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	60fb      	str	r3, [r7, #12]

      break;
 8003f92:	e00a      	b.n	8003faa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	60fb      	str	r3, [r7, #12]

      break;
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	60fb      	str	r3, [r7, #12]

      break;
 8003fa6:	e000      	b.n	8003faa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003fa8:	bf00      	nop
  }

  return tmpreg;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d107      	bne.n	800403a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	e02a      	b.n	8004090 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d107      	bne.n	8004054 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2202      	movs	r2, #2
 8004048:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004052:	e01d      	b.n	8004090 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d107      	bne.n	800406e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2204      	movs	r2, #4
 8004062:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	e010      	b.n	8004090 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2208      	movs	r2, #8
 800407c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004086:	e003      	b.n	8004090 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ffb5 	bl	8004000 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d10b      	bne.n	80040d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d136      	bne.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d2:	e031      	b.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10b      	bne.n	80040f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d125      	bne.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f4:	e020      	b.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d10b      	bne.n	8004118 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2204      	movs	r2, #4
 8004104:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d114      	bne.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004116:	e00f      	b.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d10a      	bne.n	8004138 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2208      	movs	r2, #8
 8004126:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff ff46 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d103      	bne.n	800416c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	771a      	strb	r2, [r3, #28]
 800416a:	e019      	b.n	80041a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d103      	bne.n	800417e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
 800417c:	e010      	b.n	80041a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d103      	bne.n	8004190 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2204      	movs	r2, #4
 800418c:	771a      	strb	r2, [r3, #28]
 800418e:	e007      	b.n	80041a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d102      	bne.n	80041a0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2208      	movs	r2, #8
 800419e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff ff1b 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a29      	ldr	r2, [pc, #164]	; (800426c <TIM_Base_SetConfig+0xb8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a26      	ldr	r2, [pc, #152]	; (8004270 <TIM_Base_SetConfig+0xbc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x30>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a25      	ldr	r2, [pc, #148]	; (8004274 <TIM_Base_SetConfig+0xc0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <TIM_Base_SetConfig+0xb8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d007      	beq.n	8004216 <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <TIM_Base_SetConfig+0xbc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_Base_SetConfig+0x62>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <TIM_Base_SetConfig+0xc0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d108      	bne.n	8004228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <TIM_Base_SetConfig+0xb8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	615a      	str	r2, [r3, #20]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800

08004278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 0302 	bic.w	r3, r3, #2
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <TIM_OC1_SetConfig+0xc8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10c      	bne.n	80042ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0308 	bic.w	r3, r3, #8
 80042da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0304 	bic.w	r3, r3, #4
 80042ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <TIM_OC1_SetConfig+0xc8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d111      	bne.n	800431a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00

08004344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0210 	bic.w	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0320 	bic.w	r3, r3, #32
 800438e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <TIM_OC2_SetConfig+0xd0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10d      	bne.n	80043c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a14      	ldr	r2, [pc, #80]	; (8004414 <TIM_OC2_SetConfig+0xd0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d113      	bne.n	80043f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40012c00 	.word	0x40012c00

08004418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <TIM_OC3_SetConfig+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800447c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <TIM_OC3_SetConfig+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d113      	bne.n	80044c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00

080044ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	031b      	lsls	r3, r3, #12
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a0f      	ldr	r2, [pc, #60]	; (8004584 <TIM_OC4_SetConfig+0x98>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d109      	bne.n	8004560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	40012c00 	.word	0x40012c00

08004588 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <TIM_TI1_SetConfig+0xa8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_TI1_SetConfig+0x46>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d007      	beq.n	80045ce <TIM_TI1_SetConfig+0x46>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <TIM_TI1_SetConfig+0xac>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_TI1_SetConfig+0x46>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <TIM_TI1_SetConfig+0xb0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <TIM_TI1_SetConfig+0x4a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <TIM_TI1_SetConfig+0x4c>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e003      	b.n	80045f2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 030a 	bic.w	r3, r3, #10
 800460c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 030a 	and.w	r3, r3, #10
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800

0800463c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 030a 	bic.w	r3, r3, #10
 8004678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0210 	bic.w	r2, r3, #16
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	031b      	lsls	r3, r3, #12
 80046dc:	b29b      	uxth	r3, r3
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f023 0210 	bic.w	r2, r3, #16
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800473a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	031b      	lsls	r3, r3, #12
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800474c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	621a      	str	r2, [r3, #32]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004822:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	031b      	lsls	r3, r3, #12
 8004828:	b29b      	uxth	r3, r3
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004836:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	031b      	lsls	r3, r3, #12
 800483c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	f043 0307 	orr.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b087      	sub	sp, #28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2201      	movs	r2, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	401a      	ands	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	431a      	orrs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800492c:	2302      	movs	r3, #2
 800492e:	e046      	b.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d009      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10c      	bne.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800

080049d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e03d      	b.n	8004a6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e03f      	b.n	8004b2c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc fdf5 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2224      	movs	r2, #36	; 0x24
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004adc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fbe4 	bl	80052ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d130      	bne.n	8004bb0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_UART_Transmit_IT+0x26>
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e029      	b.n	8004bb2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Transmit_IT+0x38>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e022      	b.n	8004bb2 <HAL_UART_Transmit_IT+0x7e>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2221      	movs	r2, #33	; 0x21
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004baa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d11d      	bne.n	8004c12 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_UART_Receive_IT+0x26>
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e016      	b.n	8004c14 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_UART_Receive_IT+0x38>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e00f      	b.n	8004c14 <HAL_UART_Receive_IT+0x58>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9c5 	bl	8004f98 <UART_Start_Receive_IT>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	e000      	b.n	8004c14 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_UART_IRQHandler+0x52>
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa76 	bl	8005158 <UART_Receive_IT>
      return;
 8004c6c:	e17b      	b.n	8004f66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80b1 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x1bc>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_UART_IRQHandler+0x70>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80a6 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_UART_IRQHandler+0x90>
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_UART_IRQHandler+0xb0>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f043 0202 	orr.w	r2, r3, #2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_UART_IRQHandler+0xd0>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0204 	orr.w	r2, r3, #4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <HAL_UART_IRQHandler+0xfa>
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <HAL_UART_IRQHandler+0xee>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0208 	orr.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 811e 	beq.w	8004f5c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_UART_IRQHandler+0x11e>
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fa0f 	bl	8005158 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_UART_IRQHandler+0x146>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d031      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f951 	bl	800500a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d023      	beq.n	8004dbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d013      	beq.n	8004db6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	4a76      	ldr	r2, [pc, #472]	; (8004f6c <HAL_UART_IRQHandler+0x350>)
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fc ff58 	bl	8001c50 <HAL_DMA_Abort_IT>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004db0:	4610      	mov	r0, r2
 8004db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e00e      	b.n	8004dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8da 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e00a      	b.n	8004dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8d6 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	e006      	b.n	8004dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8d2 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dd2:	e0c3      	b.n	8004f5c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	bf00      	nop
    return;
 8004dd6:	e0c1      	b.n	8004f5c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f040 80a1 	bne.w	8004f24 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 809b 	beq.w	8004f24 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8095 	beq.w	8004f24 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d04e      	beq.n	8004ebc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e28:	8a3b      	ldrh	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8098 	beq.w	8004f60 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e34:	8a3a      	ldrh	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f080 8092 	bcs.w	8004f60 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8a3a      	ldrh	r2, [r7, #16]
 8004e40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d02b      	beq.n	8004ea4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e5a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0210 	bic.w	r2, r2, #16
 8004e98:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fc fe9b 	bl	8001bda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f864 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eba:	e051      	b.n	8004f60 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d047      	beq.n	8004f64 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ed4:	8a7b      	ldrh	r3, [r7, #18]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d044      	beq.n	8004f64 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ee8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0210 	bic.w	r2, r2, #16
 8004f16:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f18:	8a7b      	ldrh	r3, [r7, #18]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f830 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f22:	e01f      	b.n	8004f64 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_UART_IRQHandler+0x324>
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8a6 	bl	800508a <UART_Transmit_IT>
    return;
 8004f3e:	e012      	b.n	8004f66 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <HAL_UART_IRQHandler+0x34a>
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f8e7 	bl	8005128 <UART_EndTransmit_IT>
    return;
 8004f5a:	e004      	b.n	8004f66 <HAL_UART_IRQHandler+0x34a>
    return;
 8004f5c:	bf00      	nop
 8004f5e:	e002      	b.n	8004f66 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f64:	bf00      	nop
  }
}
 8004f66:	3728      	adds	r7, #40	; 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08005063 	.word	0x08005063

08004f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2222      	movs	r2, #34	; 0x22
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0220 	orr.w	r2, r2, #32
 8004ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005020:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0210 	bic.w	r2, r2, #16
 8005048:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff ff77 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b21      	cmp	r3, #33	; 0x21
 800509c:	d13e      	bne.n	800511c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a6:	d114      	bne.n	80050d2 <UART_Transmit_IT+0x48>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d110      	bne.n	80050d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	621a      	str	r2, [r3, #32]
 80050d0:	e008      	b.n	80050e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6211      	str	r1, [r2, #32]
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4619      	mov	r1, r3
 80050f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fb fb7b 	bl	8000844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b22      	cmp	r3, #34	; 0x22
 800516a:	f040 8099 	bne.w	80052a0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	d117      	bne.n	80051a8 <UART_Receive_IT+0x50>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d113      	bne.n	80051a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	b29a      	uxth	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	1c9a      	adds	r2, r3, #2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	629a      	str	r2, [r3, #40]	; 0x28
 80051a6:	e026      	b.n	80051f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	d007      	beq.n	80051cc <UART_Receive_IT+0x74>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <UART_Receive_IT+0x82>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e008      	b.n	80051ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29b      	uxth	r3, r3
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4619      	mov	r1, r3
 8005204:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005206:	2b00      	cmp	r3, #0
 8005208:	d148      	bne.n	800529c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0220 	bic.w	r2, r2, #32
 8005218:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005228:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	2b01      	cmp	r3, #1
 8005248:	d123      	bne.n	8005292 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0210 	bic.w	r2, r2, #16
 800525e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b10      	cmp	r3, #16
 800526c:	d10a      	bne.n	8005284 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fe79 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
 8005290:	e002      	b.n	8005298 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb fb0a 	bl	80008ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	e002      	b.n	80052a2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e000      	b.n	80052a2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
  }
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052e6:	f023 030c 	bic.w	r3, r3, #12
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <UART_SetConfig+0x114>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d103      	bne.n	800531c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005314:	f7fd fbec 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	e002      	b.n	8005322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800531c:	f7fd fbd4 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8005320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009a      	lsls	r2, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <UART_SetConfig+0x118>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	0119      	lsls	r1, r3, #4
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fbb2 f2f3 	udiv	r2, r2, r3
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <UART_SetConfig+0x118>)
 800535a:	fba3 0302 	umull	r0, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2064      	movs	r0, #100	; 0x64
 8005362:	fb00 f303 	mul.w	r3, r0, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <UART_SetConfig+0x118>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005378:	4419      	add	r1, r3
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009a      	lsls	r2, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <UART_SetConfig+0x118>)
 8005392:	fba3 0302 	umull	r0, r3, r3, r2
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2064      	movs	r0, #100	; 0x64
 800539a:	fb00 f303 	mul.w	r3, r0, r3
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	; 0x32
 80053a4:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <UART_SetConfig+0x118>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	440a      	add	r2, r1
 80053b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40013800 	.word	0x40013800
 80053c4:	51eb851f 	.word	0x51eb851f

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	; (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000078 	.word	0x20000078

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	2600      	movs	r6, #0
 80053d8:	4d0c      	ldr	r5, [pc, #48]	; (800540c <__libc_init_array+0x38>)
 80053da:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053dc:	1b64      	subs	r4, r4, r5
 80053de:	10a4      	asrs	r4, r4, #2
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	f001 f91e 	bl	8006624 <_init>
 80053e8:	2600      	movs	r6, #0
 80053ea:	4d0a      	ldr	r5, [pc, #40]	; (8005414 <__libc_init_array+0x40>)
 80053ec:	4c0a      	ldr	r4, [pc, #40]	; (8005418 <__libc_init_array+0x44>)
 80053ee:	1b64      	subs	r4, r4, r5
 80053f0:	10a4      	asrs	r4, r4, #2
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08006c84 	.word	0x08006c84
 8005410:	08006c84 	.word	0x08006c84
 8005414:	08006c84 	.word	0x08006c84
 8005418:	08006c88 	.word	0x08006c88

0800541c <memset>:
 800541c:	4603      	mov	r3, r0
 800541e:	4402      	add	r2, r0
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	f803 1b01 	strb.w	r1, [r3], #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <siscanf>:
 800542c:	b40e      	push	{r1, r2, r3}
 800542e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005432:	b530      	push	{r4, r5, lr}
 8005434:	b09c      	sub	sp, #112	; 0x70
 8005436:	ac1f      	add	r4, sp, #124	; 0x7c
 8005438:	f854 5b04 	ldr.w	r5, [r4], #4
 800543c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005440:	9002      	str	r0, [sp, #8]
 8005442:	9006      	str	r0, [sp, #24]
 8005444:	f7fa fe8c 	bl	8000160 <strlen>
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <siscanf+0x4c>)
 800544a:	9003      	str	r0, [sp, #12]
 800544c:	930b      	str	r3, [sp, #44]	; 0x2c
 800544e:	2300      	movs	r3, #0
 8005450:	930f      	str	r3, [sp, #60]	; 0x3c
 8005452:	9314      	str	r3, [sp, #80]	; 0x50
 8005454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005458:	9007      	str	r0, [sp, #28]
 800545a:	4808      	ldr	r0, [pc, #32]	; (800547c <siscanf+0x50>)
 800545c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005460:	462a      	mov	r2, r5
 8005462:	4623      	mov	r3, r4
 8005464:	a902      	add	r1, sp, #8
 8005466:	6800      	ldr	r0, [r0, #0]
 8005468:	9401      	str	r4, [sp, #4]
 800546a:	f000 f9e1 	bl	8005830 <__ssvfiscanf_r>
 800546e:	b01c      	add	sp, #112	; 0x70
 8005470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005474:	b003      	add	sp, #12
 8005476:	4770      	bx	lr
 8005478:	08005481 	.word	0x08005481
 800547c:	20000078 	.word	0x20000078

08005480 <__seofread>:
 8005480:	2000      	movs	r0, #0
 8005482:	4770      	bx	lr

08005484 <_vsiprintf_r>:
 8005484:	b500      	push	{lr}
 8005486:	b09b      	sub	sp, #108	; 0x6c
 8005488:	9100      	str	r1, [sp, #0]
 800548a:	9104      	str	r1, [sp, #16]
 800548c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005490:	9105      	str	r1, [sp, #20]
 8005492:	9102      	str	r1, [sp, #8]
 8005494:	4905      	ldr	r1, [pc, #20]	; (80054ac <_vsiprintf_r+0x28>)
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	4669      	mov	r1, sp
 800549a:	f000 f86f 	bl	800557c <_svfiprintf_r>
 800549e:	2200      	movs	r2, #0
 80054a0:	9b00      	ldr	r3, [sp, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	b01b      	add	sp, #108	; 0x6c
 80054a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80054aa:	bf00      	nop
 80054ac:	ffff0208 	.word	0xffff0208

080054b0 <vsiprintf>:
 80054b0:	4613      	mov	r3, r2
 80054b2:	460a      	mov	r2, r1
 80054b4:	4601      	mov	r1, r0
 80054b6:	4802      	ldr	r0, [pc, #8]	; (80054c0 <vsiprintf+0x10>)
 80054b8:	6800      	ldr	r0, [r0, #0]
 80054ba:	f7ff bfe3 	b.w	8005484 <_vsiprintf_r>
 80054be:	bf00      	nop
 80054c0:	20000078 	.word	0x20000078

080054c4 <__ssputs_r>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	688e      	ldr	r6, [r1, #8]
 80054ca:	4682      	mov	sl, r0
 80054cc:	429e      	cmp	r6, r3
 80054ce:	460c      	mov	r4, r1
 80054d0:	4690      	mov	r8, r2
 80054d2:	461f      	mov	r7, r3
 80054d4:	d838      	bhi.n	8005548 <__ssputs_r+0x84>
 80054d6:	898a      	ldrh	r2, [r1, #12]
 80054d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054dc:	d032      	beq.n	8005544 <__ssputs_r+0x80>
 80054de:	6825      	ldr	r5, [r4, #0]
 80054e0:	6909      	ldr	r1, [r1, #16]
 80054e2:	3301      	adds	r3, #1
 80054e4:	eba5 0901 	sub.w	r9, r5, r1
 80054e8:	6965      	ldr	r5, [r4, #20]
 80054ea:	444b      	add	r3, r9
 80054ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054f4:	106d      	asrs	r5, r5, #1
 80054f6:	429d      	cmp	r5, r3
 80054f8:	bf38      	it	cc
 80054fa:	461d      	movcc	r5, r3
 80054fc:	0553      	lsls	r3, r2, #21
 80054fe:	d531      	bpl.n	8005564 <__ssputs_r+0xa0>
 8005500:	4629      	mov	r1, r5
 8005502:	f000 ffeb 	bl	80064dc <_malloc_r>
 8005506:	4606      	mov	r6, r0
 8005508:	b950      	cbnz	r0, 8005520 <__ssputs_r+0x5c>
 800550a:	230c      	movs	r3, #12
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	f8ca 3000 	str.w	r3, [sl]
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	464a      	mov	r2, r9
 8005522:	6921      	ldr	r1, [r4, #16]
 8005524:	f000 ff66 	bl	80063f4 <memcpy>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800552e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	6126      	str	r6, [r4, #16]
 8005536:	444e      	add	r6, r9
 8005538:	6026      	str	r6, [r4, #0]
 800553a:	463e      	mov	r6, r7
 800553c:	6165      	str	r5, [r4, #20]
 800553e:	eba5 0509 	sub.w	r5, r5, r9
 8005542:	60a5      	str	r5, [r4, #8]
 8005544:	42be      	cmp	r6, r7
 8005546:	d900      	bls.n	800554a <__ssputs_r+0x86>
 8005548:	463e      	mov	r6, r7
 800554a:	4632      	mov	r2, r6
 800554c:	4641      	mov	r1, r8
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	f000 ff5e 	bl	8006410 <memmove>
 8005554:	68a3      	ldr	r3, [r4, #8]
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	1b9b      	subs	r3, r3, r6
 800555a:	4432      	add	r2, r6
 800555c:	2000      	movs	r0, #0
 800555e:	60a3      	str	r3, [r4, #8]
 8005560:	6022      	str	r2, [r4, #0]
 8005562:	e7db      	b.n	800551c <__ssputs_r+0x58>
 8005564:	462a      	mov	r2, r5
 8005566:	f001 f813 	bl	8006590 <_realloc_r>
 800556a:	4606      	mov	r6, r0
 800556c:	2800      	cmp	r0, #0
 800556e:	d1e1      	bne.n	8005534 <__ssputs_r+0x70>
 8005570:	4650      	mov	r0, sl
 8005572:	6921      	ldr	r1, [r4, #16]
 8005574:	f000 ff66 	bl	8006444 <_free_r>
 8005578:	e7c7      	b.n	800550a <__ssputs_r+0x46>
	...

0800557c <_svfiprintf_r>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	4698      	mov	r8, r3
 8005582:	898b      	ldrh	r3, [r1, #12]
 8005584:	4607      	mov	r7, r0
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	460d      	mov	r5, r1
 800558a:	4614      	mov	r4, r2
 800558c:	b09d      	sub	sp, #116	; 0x74
 800558e:	d50e      	bpl.n	80055ae <_svfiprintf_r+0x32>
 8005590:	690b      	ldr	r3, [r1, #16]
 8005592:	b963      	cbnz	r3, 80055ae <_svfiprintf_r+0x32>
 8005594:	2140      	movs	r1, #64	; 0x40
 8005596:	f000 ffa1 	bl	80064dc <_malloc_r>
 800559a:	6028      	str	r0, [r5, #0]
 800559c:	6128      	str	r0, [r5, #16]
 800559e:	b920      	cbnz	r0, 80055aa <_svfiprintf_r+0x2e>
 80055a0:	230c      	movs	r3, #12
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	e0d1      	b.n	800574e <_svfiprintf_r+0x1d2>
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	616b      	str	r3, [r5, #20]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9309      	str	r3, [sp, #36]	; 0x24
 80055b2:	2320      	movs	r3, #32
 80055b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055b8:	2330      	movs	r3, #48	; 0x30
 80055ba:	f04f 0901 	mov.w	r9, #1
 80055be:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005768 <_svfiprintf_r+0x1ec>
 80055c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055ca:	4623      	mov	r3, r4
 80055cc:	469a      	mov	sl, r3
 80055ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d2:	b10a      	cbz	r2, 80055d8 <_svfiprintf_r+0x5c>
 80055d4:	2a25      	cmp	r2, #37	; 0x25
 80055d6:	d1f9      	bne.n	80055cc <_svfiprintf_r+0x50>
 80055d8:	ebba 0b04 	subs.w	fp, sl, r4
 80055dc:	d00b      	beq.n	80055f6 <_svfiprintf_r+0x7a>
 80055de:	465b      	mov	r3, fp
 80055e0:	4622      	mov	r2, r4
 80055e2:	4629      	mov	r1, r5
 80055e4:	4638      	mov	r0, r7
 80055e6:	f7ff ff6d 	bl	80054c4 <__ssputs_r>
 80055ea:	3001      	adds	r0, #1
 80055ec:	f000 80aa 	beq.w	8005744 <_svfiprintf_r+0x1c8>
 80055f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f2:	445a      	add	r2, fp
 80055f4:	9209      	str	r2, [sp, #36]	; 0x24
 80055f6:	f89a 3000 	ldrb.w	r3, [sl]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80a2 	beq.w	8005744 <_svfiprintf_r+0x1c8>
 8005600:	2300      	movs	r3, #0
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800560a:	f10a 0a01 	add.w	sl, sl, #1
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	9307      	str	r3, [sp, #28]
 8005612:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005616:	931a      	str	r3, [sp, #104]	; 0x68
 8005618:	4654      	mov	r4, sl
 800561a:	2205      	movs	r2, #5
 800561c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005620:	4851      	ldr	r0, [pc, #324]	; (8005768 <_svfiprintf_r+0x1ec>)
 8005622:	f000 fed9 	bl	80063d8 <memchr>
 8005626:	9a04      	ldr	r2, [sp, #16]
 8005628:	b9d8      	cbnz	r0, 8005662 <_svfiprintf_r+0xe6>
 800562a:	06d0      	lsls	r0, r2, #27
 800562c:	bf44      	itt	mi
 800562e:	2320      	movmi	r3, #32
 8005630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005634:	0711      	lsls	r1, r2, #28
 8005636:	bf44      	itt	mi
 8005638:	232b      	movmi	r3, #43	; 0x2b
 800563a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800563e:	f89a 3000 	ldrb.w	r3, [sl]
 8005642:	2b2a      	cmp	r3, #42	; 0x2a
 8005644:	d015      	beq.n	8005672 <_svfiprintf_r+0xf6>
 8005646:	4654      	mov	r4, sl
 8005648:	2000      	movs	r0, #0
 800564a:	f04f 0c0a 	mov.w	ip, #10
 800564e:	9a07      	ldr	r2, [sp, #28]
 8005650:	4621      	mov	r1, r4
 8005652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005656:	3b30      	subs	r3, #48	; 0x30
 8005658:	2b09      	cmp	r3, #9
 800565a:	d94e      	bls.n	80056fa <_svfiprintf_r+0x17e>
 800565c:	b1b0      	cbz	r0, 800568c <_svfiprintf_r+0x110>
 800565e:	9207      	str	r2, [sp, #28]
 8005660:	e014      	b.n	800568c <_svfiprintf_r+0x110>
 8005662:	eba0 0308 	sub.w	r3, r0, r8
 8005666:	fa09 f303 	lsl.w	r3, r9, r3
 800566a:	4313      	orrs	r3, r2
 800566c:	46a2      	mov	sl, r4
 800566e:	9304      	str	r3, [sp, #16]
 8005670:	e7d2      	b.n	8005618 <_svfiprintf_r+0x9c>
 8005672:	9b03      	ldr	r3, [sp, #12]
 8005674:	1d19      	adds	r1, r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	9103      	str	r1, [sp, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	bfbb      	ittet	lt
 800567e:	425b      	neglt	r3, r3
 8005680:	f042 0202 	orrlt.w	r2, r2, #2
 8005684:	9307      	strge	r3, [sp, #28]
 8005686:	9307      	strlt	r3, [sp, #28]
 8005688:	bfb8      	it	lt
 800568a:	9204      	strlt	r2, [sp, #16]
 800568c:	7823      	ldrb	r3, [r4, #0]
 800568e:	2b2e      	cmp	r3, #46	; 0x2e
 8005690:	d10c      	bne.n	80056ac <_svfiprintf_r+0x130>
 8005692:	7863      	ldrb	r3, [r4, #1]
 8005694:	2b2a      	cmp	r3, #42	; 0x2a
 8005696:	d135      	bne.n	8005704 <_svfiprintf_r+0x188>
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	3402      	adds	r4, #2
 800569c:	1d1a      	adds	r2, r3, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	9203      	str	r2, [sp, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bfb8      	it	lt
 80056a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005778 <_svfiprintf_r+0x1fc>
 80056b0:	2203      	movs	r2, #3
 80056b2:	4650      	mov	r0, sl
 80056b4:	7821      	ldrb	r1, [r4, #0]
 80056b6:	f000 fe8f 	bl	80063d8 <memchr>
 80056ba:	b140      	cbz	r0, 80056ce <_svfiprintf_r+0x152>
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	eba0 000a 	sub.w	r0, r0, sl
 80056c2:	fa03 f000 	lsl.w	r0, r3, r0
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	3401      	adds	r4, #1
 80056ca:	4303      	orrs	r3, r0
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d2:	2206      	movs	r2, #6
 80056d4:	4825      	ldr	r0, [pc, #148]	; (800576c <_svfiprintf_r+0x1f0>)
 80056d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056da:	f000 fe7d 	bl	80063d8 <memchr>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d038      	beq.n	8005754 <_svfiprintf_r+0x1d8>
 80056e2:	4b23      	ldr	r3, [pc, #140]	; (8005770 <_svfiprintf_r+0x1f4>)
 80056e4:	bb1b      	cbnz	r3, 800572e <_svfiprintf_r+0x1b2>
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	3307      	adds	r3, #7
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	3308      	adds	r3, #8
 80056f0:	9303      	str	r3, [sp, #12]
 80056f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f4:	4433      	add	r3, r6
 80056f6:	9309      	str	r3, [sp, #36]	; 0x24
 80056f8:	e767      	b.n	80055ca <_svfiprintf_r+0x4e>
 80056fa:	460c      	mov	r4, r1
 80056fc:	2001      	movs	r0, #1
 80056fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005702:	e7a5      	b.n	8005650 <_svfiprintf_r+0xd4>
 8005704:	2300      	movs	r3, #0
 8005706:	f04f 0c0a 	mov.w	ip, #10
 800570a:	4619      	mov	r1, r3
 800570c:	3401      	adds	r4, #1
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	4620      	mov	r0, r4
 8005712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005716:	3a30      	subs	r2, #48	; 0x30
 8005718:	2a09      	cmp	r2, #9
 800571a:	d903      	bls.n	8005724 <_svfiprintf_r+0x1a8>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0c5      	beq.n	80056ac <_svfiprintf_r+0x130>
 8005720:	9105      	str	r1, [sp, #20]
 8005722:	e7c3      	b.n	80056ac <_svfiprintf_r+0x130>
 8005724:	4604      	mov	r4, r0
 8005726:	2301      	movs	r3, #1
 8005728:	fb0c 2101 	mla	r1, ip, r1, r2
 800572c:	e7f0      	b.n	8005710 <_svfiprintf_r+0x194>
 800572e:	ab03      	add	r3, sp, #12
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	462a      	mov	r2, r5
 8005734:	4638      	mov	r0, r7
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <_svfiprintf_r+0x1f8>)
 8005738:	a904      	add	r1, sp, #16
 800573a:	f3af 8000 	nop.w
 800573e:	1c42      	adds	r2, r0, #1
 8005740:	4606      	mov	r6, r0
 8005742:	d1d6      	bne.n	80056f2 <_svfiprintf_r+0x176>
 8005744:	89ab      	ldrh	r3, [r5, #12]
 8005746:	065b      	lsls	r3, r3, #25
 8005748:	f53f af2c 	bmi.w	80055a4 <_svfiprintf_r+0x28>
 800574c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800574e:	b01d      	add	sp, #116	; 0x74
 8005750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005754:	ab03      	add	r3, sp, #12
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	462a      	mov	r2, r5
 800575a:	4638      	mov	r0, r7
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <_svfiprintf_r+0x1f8>)
 800575e:	a904      	add	r1, sp, #16
 8005760:	f000 fa50 	bl	8005c04 <_printf_i>
 8005764:	e7eb      	b.n	800573e <_svfiprintf_r+0x1c2>
 8005766:	bf00      	nop
 8005768:	08006ad4 	.word	0x08006ad4
 800576c:	08006ade 	.word	0x08006ade
 8005770:	00000000 	.word	0x00000000
 8005774:	080054c5 	.word	0x080054c5
 8005778:	08006ada 	.word	0x08006ada

0800577c <_sungetc_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	1c4b      	adds	r3, r1, #1
 8005780:	4614      	mov	r4, r2
 8005782:	d103      	bne.n	800578c <_sungetc_r+0x10>
 8005784:	f04f 35ff 	mov.w	r5, #4294967295
 8005788:	4628      	mov	r0, r5
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	8993      	ldrh	r3, [r2, #12]
 800578e:	b2cd      	uxtb	r5, r1
 8005790:	f023 0320 	bic.w	r3, r3, #32
 8005794:	8193      	strh	r3, [r2, #12]
 8005796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005798:	6852      	ldr	r2, [r2, #4]
 800579a:	b18b      	cbz	r3, 80057c0 <_sungetc_r+0x44>
 800579c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800579e:	4293      	cmp	r3, r2
 80057a0:	dd08      	ble.n	80057b4 <_sungetc_r+0x38>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	3301      	adds	r3, #1
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	e7e9      	b.n	8005788 <_sungetc_r+0xc>
 80057b4:	4621      	mov	r1, r4
 80057b6:	f000 fdd5 	bl	8006364 <__submore>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0f1      	beq.n	80057a2 <_sungetc_r+0x26>
 80057be:	e7e1      	b.n	8005784 <_sungetc_r+0x8>
 80057c0:	6921      	ldr	r1, [r4, #16]
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	b151      	cbz	r1, 80057dc <_sungetc_r+0x60>
 80057c6:	4299      	cmp	r1, r3
 80057c8:	d208      	bcs.n	80057dc <_sungetc_r+0x60>
 80057ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80057ce:	42a9      	cmp	r1, r5
 80057d0:	d104      	bne.n	80057dc <_sungetc_r+0x60>
 80057d2:	3b01      	subs	r3, #1
 80057d4:	3201      	adds	r2, #1
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	6062      	str	r2, [r4, #4]
 80057da:	e7d5      	b.n	8005788 <_sungetc_r+0xc>
 80057dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80057e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e4:	6363      	str	r3, [r4, #52]	; 0x34
 80057e6:	2303      	movs	r3, #3
 80057e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80057ea:	4623      	mov	r3, r4
 80057ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7dc      	b.n	80057b0 <_sungetc_r+0x34>

080057f6 <__ssrefill_r>:
 80057f6:	b510      	push	{r4, lr}
 80057f8:	460c      	mov	r4, r1
 80057fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057fc:	b169      	cbz	r1, 800581a <__ssrefill_r+0x24>
 80057fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005802:	4299      	cmp	r1, r3
 8005804:	d001      	beq.n	800580a <__ssrefill_r+0x14>
 8005806:	f000 fe1d 	bl	8006444 <_free_r>
 800580a:	2000      	movs	r0, #0
 800580c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800580e:	6360      	str	r0, [r4, #52]	; 0x34
 8005810:	6063      	str	r3, [r4, #4]
 8005812:	b113      	cbz	r3, 800581a <__ssrefill_r+0x24>
 8005814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	bd10      	pop	{r4, pc}
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	2300      	movs	r3, #0
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f043 0320 	orr.w	r3, r3, #32
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	e7f3      	b.n	8005818 <__ssrefill_r+0x22>

08005830 <__ssvfiscanf_r>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	460c      	mov	r4, r1
 8005836:	2100      	movs	r1, #0
 8005838:	4606      	mov	r6, r0
 800583a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800583e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005842:	49b3      	ldr	r1, [pc, #716]	; (8005b10 <__ssvfiscanf_r+0x2e0>)
 8005844:	f10d 0804 	add.w	r8, sp, #4
 8005848:	91a0      	str	r1, [sp, #640]	; 0x280
 800584a:	49b2      	ldr	r1, [pc, #712]	; (8005b14 <__ssvfiscanf_r+0x2e4>)
 800584c:	4fb2      	ldr	r7, [pc, #712]	; (8005b18 <__ssvfiscanf_r+0x2e8>)
 800584e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8005b1c <__ssvfiscanf_r+0x2ec>
 8005852:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005856:	91a1      	str	r1, [sp, #644]	; 0x284
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	f892 a000 	ldrb.w	sl, [r2]
 800585e:	f1ba 0f00 	cmp.w	sl, #0
 8005862:	f000 8153 	beq.w	8005b0c <__ssvfiscanf_r+0x2dc>
 8005866:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800586a:	1c55      	adds	r5, r2, #1
 800586c:	f013 0308 	ands.w	r3, r3, #8
 8005870:	d019      	beq.n	80058a6 <__ssvfiscanf_r+0x76>
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dd0f      	ble.n	8005898 <__ssvfiscanf_r+0x68>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	5cba      	ldrb	r2, [r7, r2]
 800587e:	0712      	lsls	r2, r2, #28
 8005880:	d401      	bmi.n	8005886 <__ssvfiscanf_r+0x56>
 8005882:	462a      	mov	r2, r5
 8005884:	e7e9      	b.n	800585a <__ssvfiscanf_r+0x2a>
 8005886:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005888:	3301      	adds	r3, #1
 800588a:	3201      	adds	r2, #1
 800588c:	9245      	str	r2, [sp, #276]	; 0x114
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	3a01      	subs	r2, #1
 8005894:	6062      	str	r2, [r4, #4]
 8005896:	e7ec      	b.n	8005872 <__ssvfiscanf_r+0x42>
 8005898:	4621      	mov	r1, r4
 800589a:	4630      	mov	r0, r6
 800589c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800589e:	4798      	blx	r3
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d0e9      	beq.n	8005878 <__ssvfiscanf_r+0x48>
 80058a4:	e7ed      	b.n	8005882 <__ssvfiscanf_r+0x52>
 80058a6:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80058aa:	f040 8086 	bne.w	80059ba <__ssvfiscanf_r+0x18a>
 80058ae:	9341      	str	r3, [sp, #260]	; 0x104
 80058b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80058b2:	7853      	ldrb	r3, [r2, #1]
 80058b4:	2b2a      	cmp	r3, #42	; 0x2a
 80058b6:	bf04      	itt	eq
 80058b8:	2310      	moveq	r3, #16
 80058ba:	1c95      	addeq	r5, r2, #2
 80058bc:	f04f 020a 	mov.w	r2, #10
 80058c0:	bf08      	it	eq
 80058c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80058c4:	46ab      	mov	fp, r5
 80058c6:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80058ca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d91d      	bls.n	800590e <__ssvfiscanf_r+0xde>
 80058d2:	2203      	movs	r2, #3
 80058d4:	4891      	ldr	r0, [pc, #580]	; (8005b1c <__ssvfiscanf_r+0x2ec>)
 80058d6:	f000 fd7f 	bl	80063d8 <memchr>
 80058da:	b140      	cbz	r0, 80058ee <__ssvfiscanf_r+0xbe>
 80058dc:	2301      	movs	r3, #1
 80058de:	465d      	mov	r5, fp
 80058e0:	eba0 0009 	sub.w	r0, r0, r9
 80058e4:	fa03 f000 	lsl.w	r0, r3, r0
 80058e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80058ea:	4318      	orrs	r0, r3
 80058ec:	9041      	str	r0, [sp, #260]	; 0x104
 80058ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058f2:	2b78      	cmp	r3, #120	; 0x78
 80058f4:	d806      	bhi.n	8005904 <__ssvfiscanf_r+0xd4>
 80058f6:	2b57      	cmp	r3, #87	; 0x57
 80058f8:	d810      	bhi.n	800591c <__ssvfiscanf_r+0xec>
 80058fa:	2b25      	cmp	r3, #37	; 0x25
 80058fc:	d05d      	beq.n	80059ba <__ssvfiscanf_r+0x18a>
 80058fe:	d857      	bhi.n	80059b0 <__ssvfiscanf_r+0x180>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d075      	beq.n	80059f0 <__ssvfiscanf_r+0x1c0>
 8005904:	2303      	movs	r3, #3
 8005906:	9347      	str	r3, [sp, #284]	; 0x11c
 8005908:	230a      	movs	r3, #10
 800590a:	9342      	str	r3, [sp, #264]	; 0x108
 800590c:	e082      	b.n	8005a14 <__ssvfiscanf_r+0x1e4>
 800590e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005910:	465d      	mov	r5, fp
 8005912:	fb02 1303 	mla	r3, r2, r3, r1
 8005916:	3b30      	subs	r3, #48	; 0x30
 8005918:	9343      	str	r3, [sp, #268]	; 0x10c
 800591a:	e7d3      	b.n	80058c4 <__ssvfiscanf_r+0x94>
 800591c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005920:	2a20      	cmp	r2, #32
 8005922:	d8ef      	bhi.n	8005904 <__ssvfiscanf_r+0xd4>
 8005924:	a101      	add	r1, pc, #4	; (adr r1, 800592c <__ssvfiscanf_r+0xfc>)
 8005926:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800592a:	bf00      	nop
 800592c:	080059ff 	.word	0x080059ff
 8005930:	08005905 	.word	0x08005905
 8005934:	08005905 	.word	0x08005905
 8005938:	08005a5d 	.word	0x08005a5d
 800593c:	08005905 	.word	0x08005905
 8005940:	08005905 	.word	0x08005905
 8005944:	08005905 	.word	0x08005905
 8005948:	08005905 	.word	0x08005905
 800594c:	08005905 	.word	0x08005905
 8005950:	08005905 	.word	0x08005905
 8005954:	08005905 	.word	0x08005905
 8005958:	08005a73 	.word	0x08005a73
 800595c:	08005a49 	.word	0x08005a49
 8005960:	080059b7 	.word	0x080059b7
 8005964:	080059b7 	.word	0x080059b7
 8005968:	080059b7 	.word	0x080059b7
 800596c:	08005905 	.word	0x08005905
 8005970:	08005a4d 	.word	0x08005a4d
 8005974:	08005905 	.word	0x08005905
 8005978:	08005905 	.word	0x08005905
 800597c:	08005905 	.word	0x08005905
 8005980:	08005905 	.word	0x08005905
 8005984:	08005a83 	.word	0x08005a83
 8005988:	08005a55 	.word	0x08005a55
 800598c:	080059f7 	.word	0x080059f7
 8005990:	08005905 	.word	0x08005905
 8005994:	08005905 	.word	0x08005905
 8005998:	08005a7f 	.word	0x08005a7f
 800599c:	08005905 	.word	0x08005905
 80059a0:	08005a49 	.word	0x08005a49
 80059a4:	08005905 	.word	0x08005905
 80059a8:	08005905 	.word	0x08005905
 80059ac:	080059ff 	.word	0x080059ff
 80059b0:	3b45      	subs	r3, #69	; 0x45
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d8a6      	bhi.n	8005904 <__ssvfiscanf_r+0xd4>
 80059b6:	2305      	movs	r3, #5
 80059b8:	e02b      	b.n	8005a12 <__ssvfiscanf_r+0x1e2>
 80059ba:	6863      	ldr	r3, [r4, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd0d      	ble.n	80059dc <__ssvfiscanf_r+0x1ac>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	4552      	cmp	r2, sl
 80059c6:	f040 80a1 	bne.w	8005b0c <__ssvfiscanf_r+0x2dc>
 80059ca:	3301      	adds	r3, #1
 80059cc:	6862      	ldr	r2, [r4, #4]
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80059d2:	3a01      	subs	r2, #1
 80059d4:	3301      	adds	r3, #1
 80059d6:	6062      	str	r2, [r4, #4]
 80059d8:	9345      	str	r3, [sp, #276]	; 0x114
 80059da:	e752      	b.n	8005882 <__ssvfiscanf_r+0x52>
 80059dc:	4621      	mov	r1, r4
 80059de:	4630      	mov	r0, r6
 80059e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80059e2:	4798      	blx	r3
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d0eb      	beq.n	80059c0 <__ssvfiscanf_r+0x190>
 80059e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f040 8084 	bne.w	8005af8 <__ssvfiscanf_r+0x2c8>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e086      	b.n	8005b04 <__ssvfiscanf_r+0x2d4>
 80059f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80059f8:	f042 0220 	orr.w	r2, r2, #32
 80059fc:	9241      	str	r2, [sp, #260]	; 0x104
 80059fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a04:	9241      	str	r2, [sp, #260]	; 0x104
 8005a06:	2210      	movs	r2, #16
 8005a08:	2b6f      	cmp	r3, #111	; 0x6f
 8005a0a:	bf34      	ite	cc
 8005a0c:	2303      	movcc	r3, #3
 8005a0e:	2304      	movcs	r3, #4
 8005a10:	9242      	str	r2, [sp, #264]	; 0x108
 8005a12:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dd41      	ble.n	8005a9e <__ssvfiscanf_r+0x26e>
 8005a1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a1c:	0659      	lsls	r1, r3, #25
 8005a1e:	d404      	bmi.n	8005a2a <__ssvfiscanf_r+0x1fa>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	5cba      	ldrb	r2, [r7, r2]
 8005a26:	0712      	lsls	r2, r2, #28
 8005a28:	d440      	bmi.n	8005aac <__ssvfiscanf_r+0x27c>
 8005a2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	dc4f      	bgt.n	8005ad0 <__ssvfiscanf_r+0x2a0>
 8005a30:	466b      	mov	r3, sp
 8005a32:	4622      	mov	r2, r4
 8005a34:	4630      	mov	r0, r6
 8005a36:	a941      	add	r1, sp, #260	; 0x104
 8005a38:	f000 fa0a 	bl	8005e50 <_scanf_chars>
 8005a3c:	2801      	cmp	r0, #1
 8005a3e:	d065      	beq.n	8005b0c <__ssvfiscanf_r+0x2dc>
 8005a40:	2802      	cmp	r0, #2
 8005a42:	f47f af1e 	bne.w	8005882 <__ssvfiscanf_r+0x52>
 8005a46:	e7cf      	b.n	80059e8 <__ssvfiscanf_r+0x1b8>
 8005a48:	220a      	movs	r2, #10
 8005a4a:	e7dd      	b.n	8005a08 <__ssvfiscanf_r+0x1d8>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9342      	str	r3, [sp, #264]	; 0x108
 8005a50:	2303      	movs	r3, #3
 8005a52:	e7de      	b.n	8005a12 <__ssvfiscanf_r+0x1e2>
 8005a54:	2308      	movs	r3, #8
 8005a56:	9342      	str	r3, [sp, #264]	; 0x108
 8005a58:	2304      	movs	r3, #4
 8005a5a:	e7da      	b.n	8005a12 <__ssvfiscanf_r+0x1e2>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4640      	mov	r0, r8
 8005a60:	f000 fb40 	bl	80060e4 <__sccl>
 8005a64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a66:	4605      	mov	r5, r0
 8005a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a6c:	9341      	str	r3, [sp, #260]	; 0x104
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e7cf      	b.n	8005a12 <__ssvfiscanf_r+0x1e2>
 8005a72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a78:	9341      	str	r3, [sp, #260]	; 0x104
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e7c9      	b.n	8005a12 <__ssvfiscanf_r+0x1e2>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e7c7      	b.n	8005a12 <__ssvfiscanf_r+0x1e2>
 8005a82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005a84:	06c3      	lsls	r3, r0, #27
 8005a86:	f53f aefc 	bmi.w	8005882 <__ssvfiscanf_r+0x52>
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a8e:	1d19      	adds	r1, r3, #4
 8005a90:	9100      	str	r1, [sp, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	07c0      	lsls	r0, r0, #31
 8005a96:	bf4c      	ite	mi
 8005a98:	801a      	strhmi	r2, [r3, #0]
 8005a9a:	601a      	strpl	r2, [r3, #0]
 8005a9c:	e6f1      	b.n	8005882 <__ssvfiscanf_r+0x52>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005aa4:	4798      	blx	r3
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0b7      	beq.n	8005a1a <__ssvfiscanf_r+0x1ea>
 8005aaa:	e79d      	b.n	80059e8 <__ssvfiscanf_r+0x1b8>
 8005aac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005aae:	3201      	adds	r2, #1
 8005ab0:	9245      	str	r2, [sp, #276]	; 0x114
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	6062      	str	r2, [r4, #4]
 8005aba:	dd02      	ble.n	8005ac2 <__ssvfiscanf_r+0x292>
 8005abc:	3301      	adds	r3, #1
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	e7ae      	b.n	8005a20 <__ssvfiscanf_r+0x1f0>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ac8:	4798      	blx	r3
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0a8      	beq.n	8005a20 <__ssvfiscanf_r+0x1f0>
 8005ace:	e78b      	b.n	80059e8 <__ssvfiscanf_r+0x1b8>
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	dc06      	bgt.n	8005ae2 <__ssvfiscanf_r+0x2b2>
 8005ad4:	466b      	mov	r3, sp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4630      	mov	r0, r6
 8005ada:	a941      	add	r1, sp, #260	; 0x104
 8005adc:	f000 fa10 	bl	8005f00 <_scanf_i>
 8005ae0:	e7ac      	b.n	8005a3c <__ssvfiscanf_r+0x20c>
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <__ssvfiscanf_r+0x2f0>)
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f43f aecc 	beq.w	8005882 <__ssvfiscanf_r+0x52>
 8005aea:	466b      	mov	r3, sp
 8005aec:	4622      	mov	r2, r4
 8005aee:	4630      	mov	r0, r6
 8005af0:	a941      	add	r1, sp, #260	; 0x104
 8005af2:	f3af 8000 	nop.w
 8005af6:	e7a1      	b.n	8005a3c <__ssvfiscanf_r+0x20c>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005afe:	bf18      	it	ne
 8005b00:	f04f 30ff 	movne.w	r0, #4294967295
 8005b04:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b0e:	e7f9      	b.n	8005b04 <__ssvfiscanf_r+0x2d4>
 8005b10:	0800577d 	.word	0x0800577d
 8005b14:	080057f7 	.word	0x080057f7
 8005b18:	08006b23 	.word	0x08006b23
 8005b1c:	08006ada 	.word	0x08006ada
 8005b20:	00000000 	.word	0x00000000

08005b24 <_printf_common>:
 8005b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	4616      	mov	r6, r2
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	688a      	ldr	r2, [r1, #8]
 8005b2e:	690b      	ldr	r3, [r1, #16]
 8005b30:	4607      	mov	r7, r0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfb8      	it	lt
 8005b36:	4613      	movlt	r3, r2
 8005b38:	6033      	str	r3, [r6, #0]
 8005b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b44:	b10a      	cbz	r2, 8005b4a <_printf_common+0x26>
 8005b46:	3301      	adds	r3, #1
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	0699      	lsls	r1, r3, #26
 8005b4e:	bf42      	ittt	mi
 8005b50:	6833      	ldrmi	r3, [r6, #0]
 8005b52:	3302      	addmi	r3, #2
 8005b54:	6033      	strmi	r3, [r6, #0]
 8005b56:	6825      	ldr	r5, [r4, #0]
 8005b58:	f015 0506 	ands.w	r5, r5, #6
 8005b5c:	d106      	bne.n	8005b6c <_printf_common+0x48>
 8005b5e:	f104 0a19 	add.w	sl, r4, #25
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	6832      	ldr	r2, [r6, #0]
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	dc28      	bgt.n	8005bbe <_printf_common+0x9a>
 8005b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b70:	1e13      	subs	r3, r2, #0
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	0692      	lsls	r2, r2, #26
 8005b7a:	d42d      	bmi.n	8005bd8 <_printf_common+0xb4>
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d020      	beq.n	8005bcc <_printf_common+0xa8>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	68e5      	ldr	r5, [r4, #12]
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	bf18      	it	ne
 8005b96:	2500      	movne	r5, #0
 8005b98:	6832      	ldr	r2, [r6, #0]
 8005b9a:	f04f 0600 	mov.w	r6, #0
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	bf08      	it	eq
 8005ba2:	1aad      	subeq	r5, r5, r2
 8005ba4:	6922      	ldr	r2, [r4, #16]
 8005ba6:	bf08      	it	eq
 8005ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bfc4      	itt	gt
 8005bb0:	1a9b      	subgt	r3, r3, r2
 8005bb2:	18ed      	addgt	r5, r5, r3
 8005bb4:	341a      	adds	r4, #26
 8005bb6:	42b5      	cmp	r5, r6
 8005bb8:	d11a      	bne.n	8005bf0 <_printf_common+0xcc>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e008      	b.n	8005bd0 <_printf_common+0xac>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	47c0      	blx	r8
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d103      	bne.n	8005bd4 <_printf_common+0xb0>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	e7c4      	b.n	8005b62 <_printf_common+0x3e>
 8005bd8:	2030      	movs	r0, #48	; 0x30
 8005bda:	18e1      	adds	r1, r4, r3
 8005bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be6:	4422      	add	r2, r4
 8005be8:	3302      	adds	r3, #2
 8005bea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bee:	e7c5      	b.n	8005b7c <_printf_common+0x58>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0e6      	beq.n	8005bcc <_printf_common+0xa8>
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7d9      	b.n	8005bb6 <_printf_common+0x92>
	...

08005c04 <_printf_i>:
 8005c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	460c      	mov	r4, r1
 8005c0a:	7e27      	ldrb	r7, [r4, #24]
 8005c0c:	4691      	mov	r9, r2
 8005c0e:	2f78      	cmp	r7, #120	; 0x78
 8005c10:	4680      	mov	r8, r0
 8005c12:	469a      	mov	sl, r3
 8005c14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1a:	d807      	bhi.n	8005c2c <_printf_i+0x28>
 8005c1c:	2f62      	cmp	r7, #98	; 0x62
 8005c1e:	d80a      	bhi.n	8005c36 <_printf_i+0x32>
 8005c20:	2f00      	cmp	r7, #0
 8005c22:	f000 80d9 	beq.w	8005dd8 <_printf_i+0x1d4>
 8005c26:	2f58      	cmp	r7, #88	; 0x58
 8005c28:	f000 80a4 	beq.w	8005d74 <_printf_i+0x170>
 8005c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c34:	e03a      	b.n	8005cac <_printf_i+0xa8>
 8005c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c3a:	2b15      	cmp	r3, #21
 8005c3c:	d8f6      	bhi.n	8005c2c <_printf_i+0x28>
 8005c3e:	a001      	add	r0, pc, #4	; (adr r0, 8005c44 <_printf_i+0x40>)
 8005c40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005c2d 	.word	0x08005c2d
 8005c50:	08005c2d 	.word	0x08005c2d
 8005c54:	08005c2d 	.word	0x08005c2d
 8005c58:	08005c2d 	.word	0x08005c2d
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005c2d 	.word	0x08005c2d
 8005c64:	08005c2d 	.word	0x08005c2d
 8005c68:	08005c2d 	.word	0x08005c2d
 8005c6c:	08005c2d 	.word	0x08005c2d
 8005c70:	08005dbf 	.word	0x08005dbf
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005da1 	.word	0x08005da1
 8005c7c:	08005c2d 	.word	0x08005c2d
 8005c80:	08005c2d 	.word	0x08005c2d
 8005c84:	08005de1 	.word	0x08005de1
 8005c88:	08005c2d 	.word	0x08005c2d
 8005c8c:	08005ce1 	.word	0x08005ce1
 8005c90:	08005c2d 	.word	0x08005c2d
 8005c94:	08005c2d 	.word	0x08005c2d
 8005c98:	08005da9 	.word	0x08005da9
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	600a      	str	r2, [r1, #0]
 8005ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0a4      	b.n	8005dfa <_printf_i+0x1f6>
 8005cb0:	6825      	ldr	r5, [r4, #0]
 8005cb2:	6808      	ldr	r0, [r1, #0]
 8005cb4:	062e      	lsls	r6, r5, #24
 8005cb6:	f100 0304 	add.w	r3, r0, #4
 8005cba:	d50a      	bpl.n	8005cd2 <_printf_i+0xce>
 8005cbc:	6805      	ldr	r5, [r0, #0]
 8005cbe:	600b      	str	r3, [r1, #0]
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	da03      	bge.n	8005ccc <_printf_i+0xc8>
 8005cc4:	232d      	movs	r3, #45	; 0x2d
 8005cc6:	426d      	negs	r5, r5
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	230a      	movs	r3, #10
 8005cce:	485e      	ldr	r0, [pc, #376]	; (8005e48 <_printf_i+0x244>)
 8005cd0:	e019      	b.n	8005d06 <_printf_i+0x102>
 8005cd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cd6:	6805      	ldr	r5, [r0, #0]
 8005cd8:	600b      	str	r3, [r1, #0]
 8005cda:	bf18      	it	ne
 8005cdc:	b22d      	sxthne	r5, r5
 8005cde:	e7ef      	b.n	8005cc0 <_printf_i+0xbc>
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	6825      	ldr	r5, [r4, #0]
 8005ce4:	1d18      	adds	r0, r3, #4
 8005ce6:	6008      	str	r0, [r1, #0]
 8005ce8:	0628      	lsls	r0, r5, #24
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0xec>
 8005cec:	681d      	ldr	r5, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <_printf_i+0xf2>
 8005cf0:	0669      	lsls	r1, r5, #25
 8005cf2:	d5fb      	bpl.n	8005cec <_printf_i+0xe8>
 8005cf4:	881d      	ldrh	r5, [r3, #0]
 8005cf6:	2f6f      	cmp	r7, #111	; 0x6f
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2308      	moveq	r3, #8
 8005cfc:	230a      	movne	r3, #10
 8005cfe:	4852      	ldr	r0, [pc, #328]	; (8005e48 <_printf_i+0x244>)
 8005d00:	2100      	movs	r1, #0
 8005d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d06:	6866      	ldr	r6, [r4, #4]
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	bfa8      	it	ge
 8005d0c:	6821      	ldrge	r1, [r4, #0]
 8005d0e:	60a6      	str	r6, [r4, #8]
 8005d10:	bfa4      	itt	ge
 8005d12:	f021 0104 	bicge.w	r1, r1, #4
 8005d16:	6021      	strge	r1, [r4, #0]
 8005d18:	b90d      	cbnz	r5, 8005d1e <_printf_i+0x11a>
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	d04d      	beq.n	8005dba <_printf_i+0x1b6>
 8005d1e:	4616      	mov	r6, r2
 8005d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d24:	fb03 5711 	mls	r7, r3, r1, r5
 8005d28:	5dc7      	ldrb	r7, [r0, r7]
 8005d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d2e:	462f      	mov	r7, r5
 8005d30:	42bb      	cmp	r3, r7
 8005d32:	460d      	mov	r5, r1
 8005d34:	d9f4      	bls.n	8005d20 <_printf_i+0x11c>
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d10b      	bne.n	8005d52 <_printf_i+0x14e>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	07df      	lsls	r7, r3, #31
 8005d3e:	d508      	bpl.n	8005d52 <_printf_i+0x14e>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	6861      	ldr	r1, [r4, #4]
 8005d44:	4299      	cmp	r1, r3
 8005d46:	bfde      	ittt	le
 8005d48:	2330      	movle	r3, #48	; 0x30
 8005d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d52:	1b92      	subs	r2, r2, r6
 8005d54:	6122      	str	r2, [r4, #16]
 8005d56:	464b      	mov	r3, r9
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	aa03      	add	r2, sp, #12
 8005d62:	f7ff fedf 	bl	8005b24 <_printf_common>
 8005d66:	3001      	adds	r0, #1
 8005d68:	d14c      	bne.n	8005e04 <_printf_i+0x200>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	b004      	add	sp, #16
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	4834      	ldr	r0, [pc, #208]	; (8005e48 <_printf_i+0x244>)
 8005d76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d82:	061f      	lsls	r7, r3, #24
 8005d84:	600e      	str	r6, [r1, #0]
 8005d86:	d514      	bpl.n	8005db2 <_printf_i+0x1ae>
 8005d88:	07d9      	lsls	r1, r3, #31
 8005d8a:	bf44      	itt	mi
 8005d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d90:	6023      	strmi	r3, [r4, #0]
 8005d92:	b91d      	cbnz	r5, 8005d9c <_printf_i+0x198>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	f023 0320 	bic.w	r3, r3, #32
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	e7af      	b.n	8005d00 <_printf_i+0xfc>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	f043 0320 	orr.w	r3, r3, #32
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	2378      	movs	r3, #120	; 0x78
 8005daa:	4828      	ldr	r0, [pc, #160]	; (8005e4c <_printf_i+0x248>)
 8005dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db0:	e7e3      	b.n	8005d7a <_printf_i+0x176>
 8005db2:	065e      	lsls	r6, r3, #25
 8005db4:	bf48      	it	mi
 8005db6:	b2ad      	uxthmi	r5, r5
 8005db8:	e7e6      	b.n	8005d88 <_printf_i+0x184>
 8005dba:	4616      	mov	r6, r2
 8005dbc:	e7bb      	b.n	8005d36 <_printf_i+0x132>
 8005dbe:	680b      	ldr	r3, [r1, #0]
 8005dc0:	6826      	ldr	r6, [r4, #0]
 8005dc2:	1d1d      	adds	r5, r3, #4
 8005dc4:	6960      	ldr	r0, [r4, #20]
 8005dc6:	600d      	str	r5, [r1, #0]
 8005dc8:	0635      	lsls	r5, r6, #24
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	d501      	bpl.n	8005dd2 <_printf_i+0x1ce>
 8005dce:	6018      	str	r0, [r3, #0]
 8005dd0:	e002      	b.n	8005dd8 <_printf_i+0x1d4>
 8005dd2:	0671      	lsls	r1, r6, #25
 8005dd4:	d5fb      	bpl.n	8005dce <_printf_i+0x1ca>
 8005dd6:	8018      	strh	r0, [r3, #0]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4616      	mov	r6, r2
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	e7ba      	b.n	8005d56 <_printf_i+0x152>
 8005de0:	680b      	ldr	r3, [r1, #0]
 8005de2:	1d1a      	adds	r2, r3, #4
 8005de4:	600a      	str	r2, [r1, #0]
 8005de6:	681e      	ldr	r6, [r3, #0]
 8005de8:	2100      	movs	r1, #0
 8005dea:	4630      	mov	r0, r6
 8005dec:	6862      	ldr	r2, [r4, #4]
 8005dee:	f000 faf3 	bl	80063d8 <memchr>
 8005df2:	b108      	cbz	r0, 8005df8 <_printf_i+0x1f4>
 8005df4:	1b80      	subs	r0, r0, r6
 8005df6:	6060      	str	r0, [r4, #4]
 8005df8:	6863      	ldr	r3, [r4, #4]
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e02:	e7a8      	b.n	8005d56 <_printf_i+0x152>
 8005e04:	4632      	mov	r2, r6
 8005e06:	4649      	mov	r1, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	47d0      	blx	sl
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d0ab      	beq.n	8005d6a <_printf_i+0x166>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	079b      	lsls	r3, r3, #30
 8005e16:	d413      	bmi.n	8005e40 <_printf_i+0x23c>
 8005e18:	68e0      	ldr	r0, [r4, #12]
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	4298      	cmp	r0, r3
 8005e1e:	bfb8      	it	lt
 8005e20:	4618      	movlt	r0, r3
 8005e22:	e7a4      	b.n	8005d6e <_printf_i+0x16a>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4632      	mov	r2, r6
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	47d0      	blx	sl
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d09b      	beq.n	8005d6a <_printf_i+0x166>
 8005e32:	3501      	adds	r5, #1
 8005e34:	68e3      	ldr	r3, [r4, #12]
 8005e36:	9903      	ldr	r1, [sp, #12]
 8005e38:	1a5b      	subs	r3, r3, r1
 8005e3a:	42ab      	cmp	r3, r5
 8005e3c:	dcf2      	bgt.n	8005e24 <_printf_i+0x220>
 8005e3e:	e7eb      	b.n	8005e18 <_printf_i+0x214>
 8005e40:	2500      	movs	r5, #0
 8005e42:	f104 0619 	add.w	r6, r4, #25
 8005e46:	e7f5      	b.n	8005e34 <_printf_i+0x230>
 8005e48:	08006ae5 	.word	0x08006ae5
 8005e4c:	08006af6 	.word	0x08006af6

08005e50 <_scanf_chars>:
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4615      	mov	r5, r2
 8005e56:	688a      	ldr	r2, [r1, #8]
 8005e58:	4680      	mov	r8, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	b932      	cbnz	r2, 8005e6c <_scanf_chars+0x1c>
 8005e5e:	698a      	ldr	r2, [r1, #24]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	bf0c      	ite	eq
 8005e64:	2201      	moveq	r2, #1
 8005e66:	f04f 32ff 	movne.w	r2, #4294967295
 8005e6a:	608a      	str	r2, [r1, #8]
 8005e6c:	2700      	movs	r7, #0
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005efc <_scanf_chars+0xac>
 8005e74:	06d1      	lsls	r1, r2, #27
 8005e76:	bf5f      	itttt	pl
 8005e78:	681a      	ldrpl	r2, [r3, #0]
 8005e7a:	1d11      	addpl	r1, r2, #4
 8005e7c:	6019      	strpl	r1, [r3, #0]
 8005e7e:	6816      	ldrpl	r6, [r2, #0]
 8005e80:	69a0      	ldr	r0, [r4, #24]
 8005e82:	b188      	cbz	r0, 8005ea8 <_scanf_chars+0x58>
 8005e84:	2801      	cmp	r0, #1
 8005e86:	d107      	bne.n	8005e98 <_scanf_chars+0x48>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	6963      	ldr	r3, [r4, #20]
 8005e8e:	5c9b      	ldrb	r3, [r3, r2]
 8005e90:	b953      	cbnz	r3, 8005ea8 <_scanf_chars+0x58>
 8005e92:	bb27      	cbnz	r7, 8005ede <_scanf_chars+0x8e>
 8005e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e98:	2802      	cmp	r0, #2
 8005e9a:	d120      	bne.n	8005ede <_scanf_chars+0x8e>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005ea4:	071b      	lsls	r3, r3, #28
 8005ea6:	d41a      	bmi.n	8005ede <_scanf_chars+0x8e>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	3701      	adds	r7, #1
 8005eac:	06da      	lsls	r2, r3, #27
 8005eae:	bf5e      	ittt	pl
 8005eb0:	682b      	ldrpl	r3, [r5, #0]
 8005eb2:	781b      	ldrbpl	r3, [r3, #0]
 8005eb4:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005eb8:	682a      	ldr	r2, [r5, #0]
 8005eba:	686b      	ldr	r3, [r5, #4]
 8005ebc:	3201      	adds	r2, #1
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	68a2      	ldr	r2, [r4, #8]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	606b      	str	r3, [r5, #4]
 8005ec8:	60a2      	str	r2, [r4, #8]
 8005eca:	b142      	cbz	r2, 8005ede <_scanf_chars+0x8e>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dcd7      	bgt.n	8005e80 <_scanf_chars+0x30>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ed8:	4798      	blx	r3
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0d0      	beq.n	8005e80 <_scanf_chars+0x30>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f013 0310 	ands.w	r3, r3, #16
 8005ee4:	d105      	bne.n	8005ef2 <_scanf_chars+0xa2>
 8005ee6:	68e2      	ldr	r2, [r4, #12]
 8005ee8:	3201      	adds	r2, #1
 8005eea:	60e2      	str	r2, [r4, #12]
 8005eec:	69a2      	ldr	r2, [r4, #24]
 8005eee:	b102      	cbz	r2, 8005ef2 <_scanf_chars+0xa2>
 8005ef0:	7033      	strb	r3, [r6, #0]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	441f      	add	r7, r3
 8005ef8:	6127      	str	r7, [r4, #16]
 8005efa:	e7cb      	b.n	8005e94 <_scanf_chars+0x44>
 8005efc:	08006b23 	.word	0x08006b23

08005f00 <_scanf_i>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	460c      	mov	r4, r1
 8005f06:	4698      	mov	r8, r3
 8005f08:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <_scanf_i+0x1d4>)
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	4616      	mov	r6, r2
 8005f10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f14:	ab03      	add	r3, sp, #12
 8005f16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005f1a:	4b6f      	ldr	r3, [pc, #444]	; (80060d8 <_scanf_i+0x1d8>)
 8005f1c:	69a1      	ldr	r1, [r4, #24]
 8005f1e:	4a6f      	ldr	r2, [pc, #444]	; (80060dc <_scanf_i+0x1dc>)
 8005f20:	4627      	mov	r7, r4
 8005f22:	2903      	cmp	r1, #3
 8005f24:	bf18      	it	ne
 8005f26:	461a      	movne	r2, r3
 8005f28:	68a3      	ldr	r3, [r4, #8]
 8005f2a:	9201      	str	r2, [sp, #4]
 8005f2c:	1e5a      	subs	r2, r3, #1
 8005f2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f32:	bf81      	itttt	hi
 8005f34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f38:	eb03 0905 	addhi.w	r9, r3, r5
 8005f3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f40:	60a3      	strhi	r3, [r4, #8]
 8005f42:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005f46:	bf98      	it	ls
 8005f48:	f04f 0900 	movls.w	r9, #0
 8005f4c:	463d      	mov	r5, r7
 8005f4e:	f04f 0b00 	mov.w	fp, #0
 8005f52:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	6831      	ldr	r1, [r6, #0]
 8005f5a:	ab03      	add	r3, sp, #12
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	7809      	ldrb	r1, [r1, #0]
 8005f60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005f64:	f000 fa38 	bl	80063d8 <memchr>
 8005f68:	b328      	cbz	r0, 8005fb6 <_scanf_i+0xb6>
 8005f6a:	f1bb 0f01 	cmp.w	fp, #1
 8005f6e:	d159      	bne.n	8006024 <_scanf_i+0x124>
 8005f70:	6862      	ldr	r2, [r4, #4]
 8005f72:	b92a      	cbnz	r2, 8005f80 <_scanf_i+0x80>
 8005f74:	2308      	movs	r3, #8
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7e:	6022      	str	r2, [r4, #0]
 8005f80:	6822      	ldr	r2, [r4, #0]
 8005f82:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005f86:	6022      	str	r2, [r4, #0]
 8005f88:	68a2      	ldr	r2, [r4, #8]
 8005f8a:	1e51      	subs	r1, r2, #1
 8005f8c:	60a1      	str	r1, [r4, #8]
 8005f8e:	b192      	cbz	r2, 8005fb6 <_scanf_i+0xb6>
 8005f90:	6832      	ldr	r2, [r6, #0]
 8005f92:	1c51      	adds	r1, r2, #1
 8005f94:	6031      	str	r1, [r6, #0]
 8005f96:	7812      	ldrb	r2, [r2, #0]
 8005f98:	f805 2b01 	strb.w	r2, [r5], #1
 8005f9c:	6872      	ldr	r2, [r6, #4]
 8005f9e:	3a01      	subs	r2, #1
 8005fa0:	2a00      	cmp	r2, #0
 8005fa2:	6072      	str	r2, [r6, #4]
 8005fa4:	dc07      	bgt.n	8005fb6 <_scanf_i+0xb6>
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4650      	mov	r0, sl
 8005faa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005fae:	4790      	blx	r2
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	f040 8085 	bne.w	80060c0 <_scanf_i+0x1c0>
 8005fb6:	f10b 0b01 	add.w	fp, fp, #1
 8005fba:	f1bb 0f03 	cmp.w	fp, #3
 8005fbe:	d1cb      	bne.n	8005f58 <_scanf_i+0x58>
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <_scanf_i+0xc8>
 8005fc4:	230a      	movs	r3, #10
 8005fc6:	6063      	str	r3, [r4, #4]
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	4945      	ldr	r1, [pc, #276]	; (80060e0 <_scanf_i+0x1e0>)
 8005fcc:	6960      	ldr	r0, [r4, #20]
 8005fce:	1ac9      	subs	r1, r1, r3
 8005fd0:	f000 f888 	bl	80060e4 <__sccl>
 8005fd4:	f04f 0b00 	mov.w	fp, #0
 8005fd8:	68a3      	ldr	r3, [r4, #8]
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d03d      	beq.n	800605c <_scanf_i+0x15c>
 8005fe0:	6831      	ldr	r1, [r6, #0]
 8005fe2:	6960      	ldr	r0, [r4, #20]
 8005fe4:	f891 c000 	ldrb.w	ip, [r1]
 8005fe8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d035      	beq.n	800605c <_scanf_i+0x15c>
 8005ff0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005ff4:	d124      	bne.n	8006040 <_scanf_i+0x140>
 8005ff6:	0510      	lsls	r0, r2, #20
 8005ff8:	d522      	bpl.n	8006040 <_scanf_i+0x140>
 8005ffa:	f10b 0b01 	add.w	fp, fp, #1
 8005ffe:	f1b9 0f00 	cmp.w	r9, #0
 8006002:	d003      	beq.n	800600c <_scanf_i+0x10c>
 8006004:	3301      	adds	r3, #1
 8006006:	f109 39ff 	add.w	r9, r9, #4294967295
 800600a:	60a3      	str	r3, [r4, #8]
 800600c:	6873      	ldr	r3, [r6, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	6073      	str	r3, [r6, #4]
 8006014:	dd1b      	ble.n	800604e <_scanf_i+0x14e>
 8006016:	6833      	ldr	r3, [r6, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	6033      	str	r3, [r6, #0]
 800601c:	68a3      	ldr	r3, [r4, #8]
 800601e:	3b01      	subs	r3, #1
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	e7d9      	b.n	8005fd8 <_scanf_i+0xd8>
 8006024:	f1bb 0f02 	cmp.w	fp, #2
 8006028:	d1ae      	bne.n	8005f88 <_scanf_i+0x88>
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006030:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006034:	d1bf      	bne.n	8005fb6 <_scanf_i+0xb6>
 8006036:	2310      	movs	r3, #16
 8006038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	e7a2      	b.n	8005f86 <_scanf_i+0x86>
 8006040:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	780b      	ldrb	r3, [r1, #0]
 8006048:	f805 3b01 	strb.w	r3, [r5], #1
 800604c:	e7de      	b.n	800600c <_scanf_i+0x10c>
 800604e:	4631      	mov	r1, r6
 8006050:	4650      	mov	r0, sl
 8006052:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006056:	4798      	blx	r3
 8006058:	2800      	cmp	r0, #0
 800605a:	d0df      	beq.n	800601c <_scanf_i+0x11c>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	05d9      	lsls	r1, r3, #23
 8006060:	d50d      	bpl.n	800607e <_scanf_i+0x17e>
 8006062:	42bd      	cmp	r5, r7
 8006064:	d909      	bls.n	800607a <_scanf_i+0x17a>
 8006066:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800606a:	4632      	mov	r2, r6
 800606c:	4650      	mov	r0, sl
 800606e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006072:	f105 39ff 	add.w	r9, r5, #4294967295
 8006076:	4798      	blx	r3
 8006078:	464d      	mov	r5, r9
 800607a:	42bd      	cmp	r5, r7
 800607c:	d028      	beq.n	80060d0 <_scanf_i+0x1d0>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	f012 0210 	ands.w	r2, r2, #16
 8006084:	d113      	bne.n	80060ae <_scanf_i+0x1ae>
 8006086:	702a      	strb	r2, [r5, #0]
 8006088:	4639      	mov	r1, r7
 800608a:	6863      	ldr	r3, [r4, #4]
 800608c:	4650      	mov	r0, sl
 800608e:	9e01      	ldr	r6, [sp, #4]
 8006090:	47b0      	blx	r6
 8006092:	f8d8 3000 	ldr.w	r3, [r8]
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	f8c8 2000 	str.w	r2, [r8]
 800609e:	f011 0f20 	tst.w	r1, #32
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	d00f      	beq.n	80060c6 <_scanf_i+0x1c6>
 80060a6:	6018      	str	r0, [r3, #0]
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60e3      	str	r3, [r4, #12]
 80060ae:	2000      	movs	r0, #0
 80060b0:	1bed      	subs	r5, r5, r7
 80060b2:	44ab      	add	fp, r5
 80060b4:	6925      	ldr	r5, [r4, #16]
 80060b6:	445d      	add	r5, fp
 80060b8:	6125      	str	r5, [r4, #16]
 80060ba:	b007      	add	sp, #28
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	e7ca      	b.n	800605c <_scanf_i+0x15c>
 80060c6:	07ca      	lsls	r2, r1, #31
 80060c8:	bf4c      	ite	mi
 80060ca:	8018      	strhmi	r0, [r3, #0]
 80060cc:	6018      	strpl	r0, [r3, #0]
 80060ce:	e7eb      	b.n	80060a8 <_scanf_i+0x1a8>
 80060d0:	2001      	movs	r0, #1
 80060d2:	e7f2      	b.n	80060ba <_scanf_i+0x1ba>
 80060d4:	08006870 	.word	0x08006870
 80060d8:	08006361 	.word	0x08006361
 80060dc:	08006265 	.word	0x08006265
 80060e0:	08006b20 	.word	0x08006b20

080060e4 <__sccl>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	780b      	ldrb	r3, [r1, #0]
 80060e8:	4604      	mov	r4, r0
 80060ea:	2b5e      	cmp	r3, #94	; 0x5e
 80060ec:	bf13      	iteet	ne
 80060ee:	2200      	movne	r2, #0
 80060f0:	2201      	moveq	r2, #1
 80060f2:	784b      	ldrbeq	r3, [r1, #1]
 80060f4:	1c48      	addne	r0, r1, #1
 80060f6:	bf08      	it	eq
 80060f8:	1c88      	addeq	r0, r1, #2
 80060fa:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80060fe:	1e61      	subs	r1, r4, #1
 8006100:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006104:	42a9      	cmp	r1, r5
 8006106:	d1fb      	bne.n	8006100 <__sccl+0x1c>
 8006108:	b90b      	cbnz	r3, 800610e <__sccl+0x2a>
 800610a:	3801      	subs	r0, #1
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	f082 0101 	eor.w	r1, r2, #1
 8006112:	54e1      	strb	r1, [r4, r3]
 8006114:	1c42      	adds	r2, r0, #1
 8006116:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800611a:	4610      	mov	r0, r2
 800611c:	2d2d      	cmp	r5, #45	; 0x2d
 800611e:	f102 36ff 	add.w	r6, r2, #4294967295
 8006122:	d006      	beq.n	8006132 <__sccl+0x4e>
 8006124:	2d5d      	cmp	r5, #93	; 0x5d
 8006126:	d0f1      	beq.n	800610c <__sccl+0x28>
 8006128:	b90d      	cbnz	r5, 800612e <__sccl+0x4a>
 800612a:	4630      	mov	r0, r6
 800612c:	e7ee      	b.n	800610c <__sccl+0x28>
 800612e:	462b      	mov	r3, r5
 8006130:	e7ef      	b.n	8006112 <__sccl+0x2e>
 8006132:	7816      	ldrb	r6, [r2, #0]
 8006134:	2e5d      	cmp	r6, #93	; 0x5d
 8006136:	d0fa      	beq.n	800612e <__sccl+0x4a>
 8006138:	42b3      	cmp	r3, r6
 800613a:	dcf8      	bgt.n	800612e <__sccl+0x4a>
 800613c:	4618      	mov	r0, r3
 800613e:	3001      	adds	r0, #1
 8006140:	4286      	cmp	r6, r0
 8006142:	5421      	strb	r1, [r4, r0]
 8006144:	dcfb      	bgt.n	800613e <__sccl+0x5a>
 8006146:	43d8      	mvns	r0, r3
 8006148:	4430      	add	r0, r6
 800614a:	42b3      	cmp	r3, r6
 800614c:	bfa8      	it	ge
 800614e:	2000      	movge	r0, #0
 8006150:	1c5d      	adds	r5, r3, #1
 8006152:	182b      	adds	r3, r5, r0
 8006154:	3202      	adds	r2, #2
 8006156:	e7de      	b.n	8006116 <__sccl+0x32>

08006158 <_strtol_l.isra.0>:
 8006158:	2b01      	cmp	r3, #1
 800615a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615e:	4686      	mov	lr, r0
 8006160:	d001      	beq.n	8006166 <_strtol_l.isra.0+0xe>
 8006162:	2b24      	cmp	r3, #36	; 0x24
 8006164:	d906      	bls.n	8006174 <_strtol_l.isra.0+0x1c>
 8006166:	f7ff f92f 	bl	80053c8 <__errno>
 800616a:	2316      	movs	r3, #22
 800616c:	6003      	str	r3, [r0, #0]
 800616e:	2000      	movs	r0, #0
 8006170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006174:	468c      	mov	ip, r1
 8006176:	4e3a      	ldr	r6, [pc, #232]	; (8006260 <_strtol_l.isra.0+0x108>)
 8006178:	4660      	mov	r0, ip
 800617a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800617e:	5da5      	ldrb	r5, [r4, r6]
 8006180:	f015 0508 	ands.w	r5, r5, #8
 8006184:	d1f8      	bne.n	8006178 <_strtol_l.isra.0+0x20>
 8006186:	2c2d      	cmp	r4, #45	; 0x2d
 8006188:	d133      	bne.n	80061f2 <_strtol_l.isra.0+0x9a>
 800618a:	f04f 0801 	mov.w	r8, #1
 800618e:	f89c 4000 	ldrb.w	r4, [ip]
 8006192:	f100 0c02 	add.w	ip, r0, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d05d      	beq.n	8006256 <_strtol_l.isra.0+0xfe>
 800619a:	2b10      	cmp	r3, #16
 800619c:	d10c      	bne.n	80061b8 <_strtol_l.isra.0+0x60>
 800619e:	2c30      	cmp	r4, #48	; 0x30
 80061a0:	d10a      	bne.n	80061b8 <_strtol_l.isra.0+0x60>
 80061a2:	f89c 0000 	ldrb.w	r0, [ip]
 80061a6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80061aa:	2858      	cmp	r0, #88	; 0x58
 80061ac:	d14e      	bne.n	800624c <_strtol_l.isra.0+0xf4>
 80061ae:	2310      	movs	r3, #16
 80061b0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80061b4:	f10c 0c02 	add.w	ip, ip, #2
 80061b8:	2500      	movs	r5, #0
 80061ba:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80061be:	3f01      	subs	r7, #1
 80061c0:	fbb7 f9f3 	udiv	r9, r7, r3
 80061c4:	4628      	mov	r0, r5
 80061c6:	fb03 7a19 	mls	sl, r3, r9, r7
 80061ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80061ce:	2e09      	cmp	r6, #9
 80061d0:	d818      	bhi.n	8006204 <_strtol_l.isra.0+0xac>
 80061d2:	4634      	mov	r4, r6
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	dd24      	ble.n	8006222 <_strtol_l.isra.0+0xca>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	db1f      	blt.n	800621c <_strtol_l.isra.0+0xc4>
 80061dc:	4581      	cmp	r9, r0
 80061de:	d31d      	bcc.n	800621c <_strtol_l.isra.0+0xc4>
 80061e0:	d101      	bne.n	80061e6 <_strtol_l.isra.0+0x8e>
 80061e2:	45a2      	cmp	sl, r4
 80061e4:	db1a      	blt.n	800621c <_strtol_l.isra.0+0xc4>
 80061e6:	2501      	movs	r5, #1
 80061e8:	fb00 4003 	mla	r0, r0, r3, r4
 80061ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80061f0:	e7eb      	b.n	80061ca <_strtol_l.isra.0+0x72>
 80061f2:	2c2b      	cmp	r4, #43	; 0x2b
 80061f4:	bf08      	it	eq
 80061f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80061fa:	46a8      	mov	r8, r5
 80061fc:	bf08      	it	eq
 80061fe:	f100 0c02 	addeq.w	ip, r0, #2
 8006202:	e7c8      	b.n	8006196 <_strtol_l.isra.0+0x3e>
 8006204:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006208:	2e19      	cmp	r6, #25
 800620a:	d801      	bhi.n	8006210 <_strtol_l.isra.0+0xb8>
 800620c:	3c37      	subs	r4, #55	; 0x37
 800620e:	e7e1      	b.n	80061d4 <_strtol_l.isra.0+0x7c>
 8006210:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006214:	2e19      	cmp	r6, #25
 8006216:	d804      	bhi.n	8006222 <_strtol_l.isra.0+0xca>
 8006218:	3c57      	subs	r4, #87	; 0x57
 800621a:	e7db      	b.n	80061d4 <_strtol_l.isra.0+0x7c>
 800621c:	f04f 35ff 	mov.w	r5, #4294967295
 8006220:	e7e4      	b.n	80061ec <_strtol_l.isra.0+0x94>
 8006222:	2d00      	cmp	r5, #0
 8006224:	da08      	bge.n	8006238 <_strtol_l.isra.0+0xe0>
 8006226:	2322      	movs	r3, #34	; 0x22
 8006228:	4638      	mov	r0, r7
 800622a:	f8ce 3000 	str.w	r3, [lr]
 800622e:	2a00      	cmp	r2, #0
 8006230:	d09e      	beq.n	8006170 <_strtol_l.isra.0+0x18>
 8006232:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006236:	e007      	b.n	8006248 <_strtol_l.isra.0+0xf0>
 8006238:	f1b8 0f00 	cmp.w	r8, #0
 800623c:	d000      	beq.n	8006240 <_strtol_l.isra.0+0xe8>
 800623e:	4240      	negs	r0, r0
 8006240:	2a00      	cmp	r2, #0
 8006242:	d095      	beq.n	8006170 <_strtol_l.isra.0+0x18>
 8006244:	2d00      	cmp	r5, #0
 8006246:	d1f4      	bne.n	8006232 <_strtol_l.isra.0+0xda>
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	e791      	b.n	8006170 <_strtol_l.isra.0+0x18>
 800624c:	2430      	movs	r4, #48	; 0x30
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1b2      	bne.n	80061b8 <_strtol_l.isra.0+0x60>
 8006252:	2308      	movs	r3, #8
 8006254:	e7b0      	b.n	80061b8 <_strtol_l.isra.0+0x60>
 8006256:	2c30      	cmp	r4, #48	; 0x30
 8006258:	d0a3      	beq.n	80061a2 <_strtol_l.isra.0+0x4a>
 800625a:	230a      	movs	r3, #10
 800625c:	e7ac      	b.n	80061b8 <_strtol_l.isra.0+0x60>
 800625e:	bf00      	nop
 8006260:	08006b23 	.word	0x08006b23

08006264 <_strtol_r>:
 8006264:	f7ff bf78 	b.w	8006158 <_strtol_l.isra.0>

08006268 <_strtoul_l.isra.0>:
 8006268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800626c:	468c      	mov	ip, r1
 800626e:	4686      	mov	lr, r0
 8006270:	4e3a      	ldr	r6, [pc, #232]	; (800635c <_strtoul_l.isra.0+0xf4>)
 8006272:	4660      	mov	r0, ip
 8006274:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006278:	5da5      	ldrb	r5, [r4, r6]
 800627a:	f015 0508 	ands.w	r5, r5, #8
 800627e:	d1f8      	bne.n	8006272 <_strtoul_l.isra.0+0xa>
 8006280:	2c2d      	cmp	r4, #45	; 0x2d
 8006282:	d134      	bne.n	80062ee <_strtoul_l.isra.0+0x86>
 8006284:	f04f 0801 	mov.w	r8, #1
 8006288:	f89c 4000 	ldrb.w	r4, [ip]
 800628c:	f100 0c02 	add.w	ip, r0, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05e      	beq.n	8006352 <_strtoul_l.isra.0+0xea>
 8006294:	2b10      	cmp	r3, #16
 8006296:	d10c      	bne.n	80062b2 <_strtoul_l.isra.0+0x4a>
 8006298:	2c30      	cmp	r4, #48	; 0x30
 800629a:	d10a      	bne.n	80062b2 <_strtoul_l.isra.0+0x4a>
 800629c:	f89c 0000 	ldrb.w	r0, [ip]
 80062a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80062a4:	2858      	cmp	r0, #88	; 0x58
 80062a6:	d14f      	bne.n	8006348 <_strtoul_l.isra.0+0xe0>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80062ae:	f10c 0c02 	add.w	ip, ip, #2
 80062b2:	f04f 37ff 	mov.w	r7, #4294967295
 80062b6:	fbb7 f7f3 	udiv	r7, r7, r3
 80062ba:	2500      	movs	r5, #0
 80062bc:	fb03 f907 	mul.w	r9, r3, r7
 80062c0:	4628      	mov	r0, r5
 80062c2:	ea6f 0909 	mvn.w	r9, r9
 80062c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80062ca:	2e09      	cmp	r6, #9
 80062cc:	d818      	bhi.n	8006300 <_strtoul_l.isra.0+0x98>
 80062ce:	4634      	mov	r4, r6
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	dd24      	ble.n	800631e <_strtoul_l.isra.0+0xb6>
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	db1f      	blt.n	8006318 <_strtoul_l.isra.0+0xb0>
 80062d8:	4287      	cmp	r7, r0
 80062da:	d31d      	bcc.n	8006318 <_strtoul_l.isra.0+0xb0>
 80062dc:	d101      	bne.n	80062e2 <_strtoul_l.isra.0+0x7a>
 80062de:	45a1      	cmp	r9, r4
 80062e0:	db1a      	blt.n	8006318 <_strtoul_l.isra.0+0xb0>
 80062e2:	2501      	movs	r5, #1
 80062e4:	fb00 4003 	mla	r0, r0, r3, r4
 80062e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80062ec:	e7eb      	b.n	80062c6 <_strtoul_l.isra.0+0x5e>
 80062ee:	2c2b      	cmp	r4, #43	; 0x2b
 80062f0:	bf08      	it	eq
 80062f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80062f6:	46a8      	mov	r8, r5
 80062f8:	bf08      	it	eq
 80062fa:	f100 0c02 	addeq.w	ip, r0, #2
 80062fe:	e7c7      	b.n	8006290 <_strtoul_l.isra.0+0x28>
 8006300:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006304:	2e19      	cmp	r6, #25
 8006306:	d801      	bhi.n	800630c <_strtoul_l.isra.0+0xa4>
 8006308:	3c37      	subs	r4, #55	; 0x37
 800630a:	e7e1      	b.n	80062d0 <_strtoul_l.isra.0+0x68>
 800630c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006310:	2e19      	cmp	r6, #25
 8006312:	d804      	bhi.n	800631e <_strtoul_l.isra.0+0xb6>
 8006314:	3c57      	subs	r4, #87	; 0x57
 8006316:	e7db      	b.n	80062d0 <_strtoul_l.isra.0+0x68>
 8006318:	f04f 35ff 	mov.w	r5, #4294967295
 800631c:	e7e4      	b.n	80062e8 <_strtoul_l.isra.0+0x80>
 800631e:	2d00      	cmp	r5, #0
 8006320:	da07      	bge.n	8006332 <_strtoul_l.isra.0+0xca>
 8006322:	2322      	movs	r3, #34	; 0x22
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	f8ce 3000 	str.w	r3, [lr]
 800632c:	b942      	cbnz	r2, 8006340 <_strtoul_l.isra.0+0xd8>
 800632e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006332:	f1b8 0f00 	cmp.w	r8, #0
 8006336:	d000      	beq.n	800633a <_strtoul_l.isra.0+0xd2>
 8006338:	4240      	negs	r0, r0
 800633a:	2a00      	cmp	r2, #0
 800633c:	d0f7      	beq.n	800632e <_strtoul_l.isra.0+0xc6>
 800633e:	b10d      	cbz	r5, 8006344 <_strtoul_l.isra.0+0xdc>
 8006340:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	e7f2      	b.n	800632e <_strtoul_l.isra.0+0xc6>
 8006348:	2430      	movs	r4, #48	; 0x30
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1b1      	bne.n	80062b2 <_strtoul_l.isra.0+0x4a>
 800634e:	2308      	movs	r3, #8
 8006350:	e7af      	b.n	80062b2 <_strtoul_l.isra.0+0x4a>
 8006352:	2c30      	cmp	r4, #48	; 0x30
 8006354:	d0a2      	beq.n	800629c <_strtoul_l.isra.0+0x34>
 8006356:	230a      	movs	r3, #10
 8006358:	e7ab      	b.n	80062b2 <_strtoul_l.isra.0+0x4a>
 800635a:	bf00      	nop
 800635c:	08006b23 	.word	0x08006b23

08006360 <_strtoul_r>:
 8006360:	f7ff bf82 	b.w	8006268 <_strtoul_l.isra.0>

08006364 <__submore>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	460c      	mov	r4, r1
 800636a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800636c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006370:	4299      	cmp	r1, r3
 8006372:	d11b      	bne.n	80063ac <__submore+0x48>
 8006374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006378:	f000 f8b0 	bl	80064dc <_malloc_r>
 800637c:	b918      	cbnz	r0, 8006386 <__submore+0x22>
 800637e:	f04f 30ff 	mov.w	r0, #4294967295
 8006382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800638a:	63a3      	str	r3, [r4, #56]	; 0x38
 800638c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006390:	6360      	str	r0, [r4, #52]	; 0x34
 8006392:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006396:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800639a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800639e:	7043      	strb	r3, [r0, #1]
 80063a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063a4:	7003      	strb	r3, [r0, #0]
 80063a6:	6020      	str	r0, [r4, #0]
 80063a8:	2000      	movs	r0, #0
 80063aa:	e7ea      	b.n	8006382 <__submore+0x1e>
 80063ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80063ae:	0077      	lsls	r7, r6, #1
 80063b0:	463a      	mov	r2, r7
 80063b2:	f000 f8ed 	bl	8006590 <_realloc_r>
 80063b6:	4605      	mov	r5, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d0e0      	beq.n	800637e <__submore+0x1a>
 80063bc:	eb00 0806 	add.w	r8, r0, r6
 80063c0:	4601      	mov	r1, r0
 80063c2:	4632      	mov	r2, r6
 80063c4:	4640      	mov	r0, r8
 80063c6:	f000 f815 	bl	80063f4 <memcpy>
 80063ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80063ce:	f8c4 8000 	str.w	r8, [r4]
 80063d2:	e7e9      	b.n	80063a8 <__submore+0x44>

080063d4 <__retarget_lock_acquire_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_release_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <memchr>:
 80063d8:	4603      	mov	r3, r0
 80063da:	b510      	push	{r4, lr}
 80063dc:	b2c9      	uxtb	r1, r1
 80063de:	4402      	add	r2, r0
 80063e0:	4293      	cmp	r3, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	d101      	bne.n	80063ea <memchr+0x12>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e003      	b.n	80063f2 <memchr+0x1a>
 80063ea:	7804      	ldrb	r4, [r0, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	428c      	cmp	r4, r1
 80063f0:	d1f6      	bne.n	80063e0 <memchr+0x8>
 80063f2:	bd10      	pop	{r4, pc}

080063f4 <memcpy>:
 80063f4:	440a      	add	r2, r1
 80063f6:	4291      	cmp	r1, r2
 80063f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063fc:	d100      	bne.n	8006400 <memcpy+0xc>
 80063fe:	4770      	bx	lr
 8006400:	b510      	push	{r4, lr}
 8006402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006406:	4291      	cmp	r1, r2
 8006408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800640c:	d1f9      	bne.n	8006402 <memcpy+0xe>
 800640e:	bd10      	pop	{r4, pc}

08006410 <memmove>:
 8006410:	4288      	cmp	r0, r1
 8006412:	b510      	push	{r4, lr}
 8006414:	eb01 0402 	add.w	r4, r1, r2
 8006418:	d902      	bls.n	8006420 <memmove+0x10>
 800641a:	4284      	cmp	r4, r0
 800641c:	4623      	mov	r3, r4
 800641e:	d807      	bhi.n	8006430 <memmove+0x20>
 8006420:	1e43      	subs	r3, r0, #1
 8006422:	42a1      	cmp	r1, r4
 8006424:	d008      	beq.n	8006438 <memmove+0x28>
 8006426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800642e:	e7f8      	b.n	8006422 <memmove+0x12>
 8006430:	4601      	mov	r1, r0
 8006432:	4402      	add	r2, r0
 8006434:	428a      	cmp	r2, r1
 8006436:	d100      	bne.n	800643a <memmove+0x2a>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800643e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006442:	e7f7      	b.n	8006434 <memmove+0x24>

08006444 <_free_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4605      	mov	r5, r0
 8006448:	2900      	cmp	r1, #0
 800644a:	d043      	beq.n	80064d4 <_free_r+0x90>
 800644c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006450:	1f0c      	subs	r4, r1, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	bfb8      	it	lt
 8006456:	18e4      	addlt	r4, r4, r3
 8006458:	f000 f8d0 	bl	80065fc <__malloc_lock>
 800645c:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <_free_r+0x94>)
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	4610      	mov	r0, r2
 8006462:	b933      	cbnz	r3, 8006472 <_free_r+0x2e>
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	6014      	str	r4, [r2, #0]
 8006468:	4628      	mov	r0, r5
 800646a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800646e:	f000 b8cb 	b.w	8006608 <__malloc_unlock>
 8006472:	42a3      	cmp	r3, r4
 8006474:	d90a      	bls.n	800648c <_free_r+0x48>
 8006476:	6821      	ldr	r1, [r4, #0]
 8006478:	1862      	adds	r2, r4, r1
 800647a:	4293      	cmp	r3, r2
 800647c:	bf01      	itttt	eq
 800647e:	681a      	ldreq	r2, [r3, #0]
 8006480:	685b      	ldreq	r3, [r3, #4]
 8006482:	1852      	addeq	r2, r2, r1
 8006484:	6022      	streq	r2, [r4, #0]
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	6004      	str	r4, [r0, #0]
 800648a:	e7ed      	b.n	8006468 <_free_r+0x24>
 800648c:	461a      	mov	r2, r3
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b10b      	cbz	r3, 8006496 <_free_r+0x52>
 8006492:	42a3      	cmp	r3, r4
 8006494:	d9fa      	bls.n	800648c <_free_r+0x48>
 8006496:	6811      	ldr	r1, [r2, #0]
 8006498:	1850      	adds	r0, r2, r1
 800649a:	42a0      	cmp	r0, r4
 800649c:	d10b      	bne.n	80064b6 <_free_r+0x72>
 800649e:	6820      	ldr	r0, [r4, #0]
 80064a0:	4401      	add	r1, r0
 80064a2:	1850      	adds	r0, r2, r1
 80064a4:	4283      	cmp	r3, r0
 80064a6:	6011      	str	r1, [r2, #0]
 80064a8:	d1de      	bne.n	8006468 <_free_r+0x24>
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4401      	add	r1, r0
 80064b0:	6011      	str	r1, [r2, #0]
 80064b2:	6053      	str	r3, [r2, #4]
 80064b4:	e7d8      	b.n	8006468 <_free_r+0x24>
 80064b6:	d902      	bls.n	80064be <_free_r+0x7a>
 80064b8:	230c      	movs	r3, #12
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	e7d4      	b.n	8006468 <_free_r+0x24>
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	1821      	adds	r1, r4, r0
 80064c2:	428b      	cmp	r3, r1
 80064c4:	bf01      	itttt	eq
 80064c6:	6819      	ldreq	r1, [r3, #0]
 80064c8:	685b      	ldreq	r3, [r3, #4]
 80064ca:	1809      	addeq	r1, r1, r0
 80064cc:	6021      	streq	r1, [r4, #0]
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7c9      	b.n	8006468 <_free_r+0x24>
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
 80064d6:	bf00      	nop
 80064d8:	2000012c 	.word	0x2000012c

080064dc <_malloc_r>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	1ccd      	adds	r5, r1, #3
 80064e0:	f025 0503 	bic.w	r5, r5, #3
 80064e4:	3508      	adds	r5, #8
 80064e6:	2d0c      	cmp	r5, #12
 80064e8:	bf38      	it	cc
 80064ea:	250c      	movcc	r5, #12
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	4606      	mov	r6, r0
 80064f0:	db01      	blt.n	80064f6 <_malloc_r+0x1a>
 80064f2:	42a9      	cmp	r1, r5
 80064f4:	d903      	bls.n	80064fe <_malloc_r+0x22>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	2000      	movs	r0, #0
 80064fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fe:	f000 f87d 	bl	80065fc <__malloc_lock>
 8006502:	4921      	ldr	r1, [pc, #132]	; (8006588 <_malloc_r+0xac>)
 8006504:	680a      	ldr	r2, [r1, #0]
 8006506:	4614      	mov	r4, r2
 8006508:	b99c      	cbnz	r4, 8006532 <_malloc_r+0x56>
 800650a:	4f20      	ldr	r7, [pc, #128]	; (800658c <_malloc_r+0xb0>)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b923      	cbnz	r3, 800651a <_malloc_r+0x3e>
 8006510:	4621      	mov	r1, r4
 8006512:	4630      	mov	r0, r6
 8006514:	f000 f862 	bl	80065dc <_sbrk_r>
 8006518:	6038      	str	r0, [r7, #0]
 800651a:	4629      	mov	r1, r5
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f85d 	bl	80065dc <_sbrk_r>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d123      	bne.n	800656e <_malloc_r+0x92>
 8006526:	230c      	movs	r3, #12
 8006528:	4630      	mov	r0, r6
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	f000 f86c 	bl	8006608 <__malloc_unlock>
 8006530:	e7e3      	b.n	80064fa <_malloc_r+0x1e>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	1b5b      	subs	r3, r3, r5
 8006536:	d417      	bmi.n	8006568 <_malloc_r+0x8c>
 8006538:	2b0b      	cmp	r3, #11
 800653a:	d903      	bls.n	8006544 <_malloc_r+0x68>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	441c      	add	r4, r3
 8006540:	6025      	str	r5, [r4, #0]
 8006542:	e004      	b.n	800654e <_malloc_r+0x72>
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	42a2      	cmp	r2, r4
 8006548:	bf0c      	ite	eq
 800654a:	600b      	streq	r3, [r1, #0]
 800654c:	6053      	strne	r3, [r2, #4]
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f85a 	bl	8006608 <__malloc_unlock>
 8006554:	f104 000b 	add.w	r0, r4, #11
 8006558:	1d23      	adds	r3, r4, #4
 800655a:	f020 0007 	bic.w	r0, r0, #7
 800655e:	1ac2      	subs	r2, r0, r3
 8006560:	d0cc      	beq.n	80064fc <_malloc_r+0x20>
 8006562:	1a1b      	subs	r3, r3, r0
 8006564:	50a3      	str	r3, [r4, r2]
 8006566:	e7c9      	b.n	80064fc <_malloc_r+0x20>
 8006568:	4622      	mov	r2, r4
 800656a:	6864      	ldr	r4, [r4, #4]
 800656c:	e7cc      	b.n	8006508 <_malloc_r+0x2c>
 800656e:	1cc4      	adds	r4, r0, #3
 8006570:	f024 0403 	bic.w	r4, r4, #3
 8006574:	42a0      	cmp	r0, r4
 8006576:	d0e3      	beq.n	8006540 <_malloc_r+0x64>
 8006578:	1a21      	subs	r1, r4, r0
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f82e 	bl	80065dc <_sbrk_r>
 8006580:	3001      	adds	r0, #1
 8006582:	d1dd      	bne.n	8006540 <_malloc_r+0x64>
 8006584:	e7cf      	b.n	8006526 <_malloc_r+0x4a>
 8006586:	bf00      	nop
 8006588:	2000012c 	.word	0x2000012c
 800658c:	20000130 	.word	0x20000130

08006590 <_realloc_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	4607      	mov	r7, r0
 8006594:	4614      	mov	r4, r2
 8006596:	460e      	mov	r6, r1
 8006598:	b921      	cbnz	r1, 80065a4 <_realloc_r+0x14>
 800659a:	4611      	mov	r1, r2
 800659c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065a0:	f7ff bf9c 	b.w	80064dc <_malloc_r>
 80065a4:	b922      	cbnz	r2, 80065b0 <_realloc_r+0x20>
 80065a6:	f7ff ff4d 	bl	8006444 <_free_r>
 80065aa:	4625      	mov	r5, r4
 80065ac:	4628      	mov	r0, r5
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b0:	f000 f830 	bl	8006614 <_malloc_usable_size_r>
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d20f      	bcs.n	80065d8 <_realloc_r+0x48>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7ff ff8e 	bl	80064dc <_malloc_r>
 80065c0:	4605      	mov	r5, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d0f2      	beq.n	80065ac <_realloc_r+0x1c>
 80065c6:	4631      	mov	r1, r6
 80065c8:	4622      	mov	r2, r4
 80065ca:	f7ff ff13 	bl	80063f4 <memcpy>
 80065ce:	4631      	mov	r1, r6
 80065d0:	4638      	mov	r0, r7
 80065d2:	f7ff ff37 	bl	8006444 <_free_r>
 80065d6:	e7e9      	b.n	80065ac <_realloc_r+0x1c>
 80065d8:	4635      	mov	r5, r6
 80065da:	e7e7      	b.n	80065ac <_realloc_r+0x1c>

080065dc <_sbrk_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	2300      	movs	r3, #0
 80065e0:	4d05      	ldr	r5, [pc, #20]	; (80065f8 <_sbrk_r+0x1c>)
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fa fd0c 	bl	8001004 <_sbrk>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_sbrk_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_sbrk_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20000d10 	.word	0x20000d10

080065fc <__malloc_lock>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__malloc_lock+0x8>)
 80065fe:	f7ff bee9 	b.w	80063d4 <__retarget_lock_acquire_recursive>
 8006602:	bf00      	nop
 8006604:	20000d18 	.word	0x20000d18

08006608 <__malloc_unlock>:
 8006608:	4801      	ldr	r0, [pc, #4]	; (8006610 <__malloc_unlock+0x8>)
 800660a:	f7ff bee4 	b.w	80063d6 <__retarget_lock_release_recursive>
 800660e:	bf00      	nop
 8006610:	20000d18 	.word	0x20000d18

08006614 <_malloc_usable_size_r>:
 8006614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006618:	1f18      	subs	r0, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	bfbc      	itt	lt
 800661e:	580b      	ldrlt	r3, [r1, r0]
 8006620:	18c0      	addlt	r0, r0, r3
 8006622:	4770      	bx	lr

08006624 <_init>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr

08006630 <_fini>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr
