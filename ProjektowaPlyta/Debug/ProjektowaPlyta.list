
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800699c  0800699c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800699c  0800699c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800699c  0800699c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080069a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000080  08006a24  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08006a24  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d578  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f4  00000000  00000000  0002d621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002f918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00030610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018499  00000000  00000000  00031238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e475  00000000  00000000  000496d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b858  00000000  00000000  00057b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e339e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000e33f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080065cc 	.word	0x080065cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080065cc 	.word	0x080065cc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000176:	4b14      	ldr	r3, [pc, #80]	; (80001c8 <MX_DMA_Init+0x58>)
 8000178:	695b      	ldr	r3, [r3, #20]
 800017a:	4a13      	ldr	r2, [pc, #76]	; (80001c8 <MX_DMA_Init+0x58>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6153      	str	r3, [r2, #20]
 8000182:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <MX_DMA_Init+0x58>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2100      	movs	r1, #0
 8000192:	200c      	movs	r0, #12
 8000194:	f001 fb8b 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000198:	200c      	movs	r0, #12
 800019a:	f001 fba4 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2100      	movs	r1, #0
 80001a2:	200f      	movs	r0, #15
 80001a4:	f001 fb83 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80001a8:	200f      	movs	r0, #15
 80001aa:	f001 fb9c 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2100      	movs	r1, #0
 80001b2:	2011      	movs	r0, #17
 80001b4:	f001 fb7b 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001b8:	2011      	movs	r0, #17
 80001ba:	f001 fb94 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40021000 	.word	0x40021000

080001cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e0:	4b41      	ldr	r3, [pc, #260]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a40      	ldr	r2, [pc, #256]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6193      	str	r3, [r2, #24]
 80001ec:	4b3e      	ldr	r3, [pc, #248]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f003 0310 	and.w	r3, r3, #16
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f8:	4b3b      	ldr	r3, [pc, #236]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a3a      	ldr	r2, [pc, #232]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001fe:	f043 0320 	orr.w	r3, r3, #32
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b38      	ldr	r3, [pc, #224]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f003 0320 	and.w	r3, r3, #32
 800020c:	60bb      	str	r3, [r7, #8]
 800020e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000210:	4b35      	ldr	r3, [pc, #212]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a34      	ldr	r2, [pc, #208]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <MX_GPIO_Init+0x11c>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0304 	and.w	r3, r3, #4
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000228:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <MX_GPIO_Init+0x11c>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <MX_GPIO_Init+0x11c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	6193      	str	r3, [r2, #24]
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	f003 0308 	and.w	r3, r3, #8
 800023c:	603b      	str	r3, [r7, #0]
 800023e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 8000240:	2200      	movs	r2, #0
 8000242:	219e      	movs	r1, #158	; 0x9e
 8000244:	4829      	ldr	r0, [pc, #164]	; (80002ec <MX_GPIO_Init+0x120>)
 8000246:	f001 ff8b 	bl	8002160 <HAL_GPIO_WritePin>
                          |DIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	4828      	ldr	r0, [pc, #160]	; (80002f0 <MX_GPIO_Init+0x124>)
 8000250:	f001 ff86 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800025a:	4826      	ldr	r0, [pc, #152]	; (80002f4 <MX_GPIO_Init+0x128>)
 800025c:	f001 ff80 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <MX_GPIO_Init+0x12c>)
 8000268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800026e:	f107 0310 	add.w	r3, r7, #16
 8000272:	4619      	mov	r1, r3
 8000274:	481d      	ldr	r0, [pc, #116]	; (80002ec <MX_GPIO_Init+0x120>)
 8000276:	f001 fdef 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 800027a:	239e      	movs	r3, #158	; 0x9e
 800027c:	613b      	str	r3, [r7, #16]
                          |DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027e:	2301      	movs	r3, #1
 8000280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	2302      	movs	r3, #2
 8000288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	4619      	mov	r1, r3
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <MX_GPIO_Init+0x120>)
 8000292:	f001 fde1 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000296:	2320      	movs	r3, #32
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	4619      	mov	r1, r3
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <MX_GPIO_Init+0x124>)
 80002ae:	f001 fdd3 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <MX_GPIO_Init+0x128>)
 80002cc:	f001 fdc4 	bl	8001e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2100      	movs	r1, #0
 80002d4:	2028      	movs	r0, #40	; 0x28
 80002d6:	f001 faea 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f001 fb03 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 80002e0:	bf00      	nop
 80002e2:	3720      	adds	r7, #32
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40011000 	.word	0x40011000
 80002f0:	40010800 	.word	0x40010800
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	10110000 	.word	0x10110000

080002fc <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <get_char+0x48>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <get_char+0x4c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	429a      	cmp	r2, r3
 800030c:	d013      	beq.n	8000336 <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <get_char+0x4c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <get_char+0x50>)
 8000314:	5cd3      	ldrb	r3, [r2, r3]
 8000316:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <get_char+0x4c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <get_char+0x4c>)
 8000320:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <get_char+0x4c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800032a:	db02      	blt.n	8000332 <get_char+0x36>
			busyRX=0;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <get_char+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	e000      	b.n	8000338 <get_char+0x3c>
	}
	else{
		return 0;
 8000336:	2300      	movs	r3, #0
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000a4 	.word	0x200000a4
 8000348:	200000a8 	.word	0x200000a8
 800034c:	200004f4 	.word	0x200004f4

08000350 <checkSum>:
int checkSum(char *buffer)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	int suma = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
	int dlugosc = strlen(buffer);
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f7ff feff 	bl	8000160 <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	60fb      	str	r3, [r7, #12]
	int i;
	for(i = 0; i<dlugosc-1; i++){
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
 800036a:	e00a      	b.n	8000382 <checkSum+0x32>
			suma=suma+buffer[i];
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	4413      	add	r3, r2
 800037a:	617b      	str	r3, [r7, #20]
	for(i = 0; i<dlugosc-1; i++){
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	3301      	adds	r3, #1
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3b01      	subs	r3, #1
 8000386:	693a      	ldr	r2, [r7, #16]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbef      	blt.n	800036c <checkSum+0x1c>
		}
	return suma%256;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	425a      	negs	r2, r3
 8000390:	b2db      	uxtb	r3, r3
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	bf58      	it	pl
 8000396:	4253      	negpl	r3, r2
}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <fmessage>:
void fmessage(char msg[], char dst[]){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	int ctrlSumMsg = checkSum(msg);
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ffd0 	bl	8000350 <checkSum>
 80003b0:	60f8      	str	r0, [r7, #12]
	sprintf(dst, "%c%s;%02X%c\r\n",EOT,msg,ctrlSumMsg,ENQ);
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <fmessage+0x34>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <fmessage+0x38>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4905      	ldr	r1, [pc, #20]	; (80003dc <fmessage+0x3c>)
 80003c6:	6838      	ldr	r0, [r7, #0]
 80003c8:	f004 fffe 	bl	80053c8 <siprintf>
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	2000000d 	.word	0x2000000d
 80003d8:	2000000c 	.word	0x2000000c
 80003dc:	080065e4 	.word	0x080065e4

080003e0 <fsend>:
void fsend(char* format, ...){
 80003e0:	b40f      	push	{r0, r1, r2, r3}
 80003e2:	b580      	push	{r7, lr}
 80003e4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80003e8:	af00      	add	r7, sp, #0
	char tmp_rs[256];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 80003ea:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80003ee:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80003f2:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs, format, arglist);
 80003f4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80003f8:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8000402:	f005 f843 	bl	800548c <vsiprintf>
	va_end(arglist);
	char fmsg[261]={0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	3304      	adds	r3, #4
 800040e:	f240 1201 	movw	r2, #257	; 0x101
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f004 ffcf 	bl	80053b8 <memset>
	fmessage(tmp_rs, fmsg);
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000420:	4611      	mov	r1, r2
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ffbc 	bl	80003a0 <fmessage>
	pid = emptyTX;
 8000428:	4b37      	ldr	r3, [pc, #220]	; (8000508 <fsend+0x128>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000430:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(fmsg); i++){
 8000432:	2300      	movs	r3, #0
 8000434:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000438:	e01f      	b.n	800047a <fsend+0x9a>
		Buf_TX[pid] = fmsg[i];
 800043a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1d39      	adds	r1, r7, #4
 8000442:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000446:	440a      	add	r2, r1
 8000448:	7811      	ldrb	r1, [r2, #0]
 800044a:	4a30      	ldr	r2, [pc, #192]	; (800050c <fsend+0x12c>)
 800044c:	54d1      	strb	r1, [r2, r3]
		pid++;
 800044e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800045a:	601a      	str	r2, [r3, #0]
		if(pid >= BUF_TX_LEN){
 800045c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000466:	db03      	blt.n	8000470 <fsend+0x90>
			pid = 0;
 8000468:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(fmsg); i++){
 8000470:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000474:	3301      	adds	r3, #1
 8000476:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe6f 	bl	8000160 <strlen>
 8000482:	4602      	mov	r2, r0
 8000484:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000488:	429a      	cmp	r2, r3
 800048a:	d8d6      	bhi.n	800043a <fsend+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <fsend+0x128>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <fsend+0x130>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	429a      	cmp	r2, r3
 800049a:	d125      	bne.n	80004e8 <fsend+0x108>
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <fsend+0x134>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a6:	2b80      	cmp	r3, #128	; 0x80
 80004a8:	d11e      	bne.n	80004e8 <fsend+0x108>
		emptyTX = pid;
 80004aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a15      	ldr	r2, [pc, #84]	; (8000508 <fsend+0x128>)
 80004b2:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <fsend+0x130>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <fsend+0x12c>)
 80004ba:	5cd2      	ldrb	r2, [r2, r3]
 80004bc:	1cfb      	adds	r3, r7, #3
 80004be:	701a      	strb	r2, [r3, #0]
		busyTX++;
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <fsend+0x130>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <fsend+0x130>)
 80004c8:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <fsend+0x130>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d2:	db02      	blt.n	80004da <fsend+0xfa>
			busyTX = 0;
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <fsend+0x130>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80004da:	1cfb      	adds	r3, r7, #3
 80004dc:	2201      	movs	r2, #1
 80004de:	4619      	mov	r1, r3
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <fsend+0x134>)
 80004e2:	f004 fadb 	bl	8004a9c <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80004e6:	e004      	b.n	80004f2 <fsend+0x112>
	}
	else{
		emptyTX = pid;
 80004e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <fsend+0x128>)
 80004f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004f2:	b662      	cpsie	i
}
 80004f4:	bf00      	nop
	}
	__enable_irq();
}
 80004f6:	bf00      	nop
 80004f8:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80004fc:	46bd      	mov	sp, r7
 80004fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000502:	b004      	add	sp, #16
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000009c 	.word	0x2000009c
 800050c:	200000e4 	.word	0x200000e4
 8000510:	200000a0 	.word	0x200000a0
 8000514:	20000aa8 	.word	0x20000aa8

08000518 <wypelnienie>:

void wypelnienie(int wartosc, uint32_t period){
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<=3; i++){
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e01d      	b.n	8000564 <wypelnienie+0x4c>
			if(wartosc>period){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	d20a      	bcs.n	8000546 <wypelnienie+0x2e>
				pwmData[i]=period;
 8000530:	4911      	ldr	r1, [pc, #68]	; (8000578 <wypelnienie+0x60>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				wartosc = wartosc/period;
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	e00b      	b.n	800055e <wypelnienie+0x46>
			}
			else{
				pwmData[i]=wartosc;
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	490b      	ldr	r1, [pc, #44]	; (8000578 <wypelnienie+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				pwmLen=i+1;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3301      	adds	r3, #1
 8000554:	461a      	mov	r2, r3
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <wypelnienie+0x64>)
 8000558:	601a      	str	r2, [r3, #0]
				i=4;
 800055a:	2304      	movs	r3, #4
 800055c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<=3; i++){
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b03      	cmp	r3, #3
 8000568:	ddde      	ble.n	8000528 <wypelnienie+0x10>
			}
		}
}
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	200004e4 	.word	0x200004e4
 800057c:	200000b8 	.word	0x200000b8

08000580 <start>:

void start(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
			period=(64000000/(czest*1000))-1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <start+0x74>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058c:	fb02 f303 	mul.w	r3, r2, r3
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <start+0x78>)
 8000592:	fb92 f3f3 	sdiv	r3, r2, r3
 8000596:	3b01      	subs	r3, #1
 8000598:	461a      	mov	r2, r3
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <start+0x7c>)
 800059c:	601a      	str	r2, [r3, #0]
			wypelnienie(wart,period);
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <start+0x80>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <start+0x7c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4610      	mov	r0, r2
 80005ac:	f7ff ffb4 	bl	8000518 <wypelnienie>
			TIM1->CCR1=pwmData[0];
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <start+0x84>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <start+0x88>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6353      	str	r3, [r2, #52]	; 0x34
			htim1.Init.Period = period;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <start+0x7c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <start+0x8c>)
 80005be:	60d3      	str	r3, [r2, #12]
			HAL_TIM_Base_Start_IT(&htim3);
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <start+0x90>)
 80005c2:	f002 fa71 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, pwmLen);
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <start+0x94>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <start+0x88>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <start+0x8c>)
 80005d2:	f002 fb99 	bl	8002d08 <HAL_TIM_PWM_Start_DMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,riseData,1);
 80005d6:	2301      	movs	r3, #1
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <start+0x98>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480f      	ldr	r0, [pc, #60]	; (800061c <start+0x9c>)
 80005de:	f002 fe43 	bl	8003268 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,fallData,1);
 80005e2:	2301      	movs	r3, #1
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <start+0xa0>)
 80005e6:	2104      	movs	r1, #4
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <start+0x9c>)
 80005ea:	f002 fe3d 	bl	8003268 <HAL_TIM_IC_Start_DMA>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000008 	.word	0x20000008
 80005f8:	03d09000 	.word	0x03d09000
 80005fc:	200000c0 	.word	0x200000c0
 8000600:	20000004 	.word	0x20000004
 8000604:	40012c00 	.word	0x40012c00
 8000608:	200004e4 	.word	0x200004e4
 800060c:	20000a18 	.word	0x20000a18
 8000610:	200009d0 	.word	0x200009d0
 8000614:	200000b8 	.word	0x200000b8
 8000618:	200007f4 	.word	0x200007f4
 800061c:	20000a60 	.word	0x20000a60
 8000620:	20000900 	.word	0x20000900

08000624 <doner>:
void doner(char *ord){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	4856      	ldr	r0, [pc, #344]	; (8000788 <doner+0x164>)
 8000630:	f7ff fd8c 	bl	800014c <strcmp>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d106      	bne.n	8000648 <doner+0x24>

		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi %d",Difference);
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <doner+0x168>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4853      	ldr	r0, [pc, #332]	; (8000790 <doner+0x16c>)
 8000642:	f7ff fecd 	bl	80003e0 <fsend>
	}
	else{
		fsend("WRCMD");
	}

}
 8000646:	e09a      	b.n	800077e <doner+0x15a>
	else if(strcmp("FCHKH;", ord) == 0){
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4852      	ldr	r0, [pc, #328]	; (8000794 <doner+0x170>)
 800064c:	f7ff fd7e 	bl	800014c <strcmp>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10b      	bne.n	800066e <doner+0x4a>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi %d",riseCaptured/pwmLen);
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <doner+0x174>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4b4f      	ldr	r3, [pc, #316]	; (800079c <doner+0x178>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	fbb2 f3f3 	udiv	r3, r2, r3
 8000664:	4619      	mov	r1, r3
 8000666:	484e      	ldr	r0, [pc, #312]	; (80007a0 <doner+0x17c>)
 8000668:	f7ff feba 	bl	80003e0 <fsend>
}
 800066c:	e087      	b.n	800077e <doner+0x15a>
	else if(strcmp("FSTART;", ord) == 0){
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	484c      	ldr	r0, [pc, #304]	; (80007a4 <doner+0x180>)
 8000672:	f7ff fd6b 	bl	800014c <strcmp>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d111      	bne.n	80006a0 <doner+0x7c>
		fsend("Rozpoczeto wysylanie impulsow");
 800067c:	484a      	ldr	r0, [pc, #296]	; (80007a8 <doner+0x184>)
 800067e:	f7ff feaf 	bl	80003e0 <fsend>
		seconds_passed=0;
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <doner+0x188>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
		Difference = 0;
 8000688:	4b40      	ldr	r3, [pc, #256]	; (800078c <doner+0x168>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		riseCaptured = 0;
 800068e:	4b42      	ldr	r3, [pc, #264]	; (8000798 <doner+0x174>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
		fallCaptured = 0;
 8000694:	4b46      	ldr	r3, [pc, #280]	; (80007b0 <doner+0x18c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		start();
 800069a:	f7ff ff71 	bl	8000580 <start>
}
 800069e:	e06e      	b.n	800077e <doner+0x15a>
	else if(strcmp("FSTAT;", ord) == 0){
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	4844      	ldr	r0, [pc, #272]	; (80007b4 <doner+0x190>)
 80006a4:	f7ff fd52 	bl	800014c <strcmp>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <doner+0x9e>
		fsend("Wypelnienie %u Czas %d Czestotliwosc %d",wart,czas,czest);
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <doner+0x194>)
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	4b42      	ldr	r3, [pc, #264]	; (80007bc <doner+0x198>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <doner+0x19c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4842      	ldr	r0, [pc, #264]	; (80007c4 <doner+0x1a0>)
 80006bc:	f7ff fe90 	bl	80003e0 <fsend>
}
 80006c0:	e05d      	b.n	800077e <doner+0x15a>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 80006c2:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <doner+0x198>)
 80006c4:	4940      	ldr	r1, [pc, #256]	; (80007c8 <doner+0x1a4>)
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f004 fe9e 	bl	8005408 <siscanf>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d006      	beq.n	80006e0 <doner+0xbc>
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	483d      	ldr	r0, [pc, #244]	; (80007cc <doner+0x1a8>)
 80006d6:	f7ff fd39 	bl	800014c <strcmp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d112      	bne.n	8000706 <doner+0xe2>
		if(czas>=0 && czas<=20){
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <doner+0x198>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db0a      	blt.n	80006fe <doner+0xda>
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <doner+0x198>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b14      	cmp	r3, #20
 80006ee:	dc06      	bgt.n	80006fe <doner+0xda>
			fsend("Ustawiono czas na %d sekund",czas);
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <doner+0x198>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4836      	ldr	r0, [pc, #216]	; (80007d0 <doner+0x1ac>)
 80006f8:	f7ff fe72 	bl	80003e0 <fsend>
		if(czas>=0 && czas<=20){
 80006fc:	e03f      	b.n	800077e <doner+0x15a>
			fsend("WRNUM");
 80006fe:	4835      	ldr	r0, [pc, #212]	; (80007d4 <doner+0x1b0>)
 8000700:	f7ff fe6e 	bl	80003e0 <fsend>
		if(czas>=0 && czas<=20){
 8000704:	e03b      	b.n	800077e <doner+0x15a>
	else if(sscanf(ord, "FFILL%u;", &wart) == 1 || strcmp("FFIL;", ord) == 0){
 8000706:	4a2c      	ldr	r2, [pc, #176]	; (80007b8 <doner+0x194>)
 8000708:	4933      	ldr	r1, [pc, #204]	; (80007d8 <doner+0x1b4>)
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f004 fe7c 	bl	8005408 <siscanf>
 8000710:	4603      	mov	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d006      	beq.n	8000724 <doner+0x100>
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	4830      	ldr	r0, [pc, #192]	; (80007dc <doner+0x1b8>)
 800071a:	f7ff fd17 	bl	800014c <strcmp>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d106      	bne.n	8000732 <doner+0x10e>
			fsend("Ustawiono wypelnienie na %u",wart);
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <doner+0x194>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	482d      	ldr	r0, [pc, #180]	; (80007e0 <doner+0x1bc>)
 800072c:	f7ff fe58 	bl	80003e0 <fsend>
		if(wart>=0 && wart<= 4294967295){
 8000730:	e025      	b.n	800077e <doner+0x15a>
	else if(sscanf(ord, "FSET%d;", &czest) == 1 || strcmp("FSET;", ord) == 0){
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <doner+0x19c>)
 8000734:	492b      	ldr	r1, [pc, #172]	; (80007e4 <doner+0x1c0>)
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f004 fe66 	bl	8005408 <siscanf>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d006      	beq.n	8000750 <doner+0x12c>
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4828      	ldr	r0, [pc, #160]	; (80007e8 <doner+0x1c4>)
 8000746:	f7ff fd01 	bl	800014c <strcmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d112      	bne.n	8000776 <doner+0x152>
		if(czest>=1 && czest<=250){
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <doner+0x19c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dd0a      	ble.n	800076e <doner+0x14a>
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <doner+0x19c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2bfa      	cmp	r3, #250	; 0xfa
 800075e:	dc06      	bgt.n	800076e <doner+0x14a>
					fsend("Ustawiono czestotliwosc na %d kHz",czest);
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <doner+0x19c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4821      	ldr	r0, [pc, #132]	; (80007ec <doner+0x1c8>)
 8000768:	f7ff fe3a 	bl	80003e0 <fsend>
		if(czest>=1 && czest<=250){
 800076c:	e007      	b.n	800077e <doner+0x15a>
					fsend("WRNUM");
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <doner+0x1b0>)
 8000770:	f7ff fe36 	bl	80003e0 <fsend>
		if(czest>=1 && czest<=250){
 8000774:	e003      	b.n	800077e <doner+0x15a>
		fsend("WRCMD");
 8000776:	481e      	ldr	r0, [pc, #120]	; (80007f0 <doner+0x1cc>)
 8000778:	f7ff fe32 	bl	80003e0 <fsend>
}
 800077c:	e7ff      	b.n	800077e <doner+0x15a>
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	080065f4 	.word	0x080065f4
 800078c:	200000b4 	.word	0x200000b4
 8000790:	080065fc 	.word	0x080065fc
 8000794:	0800663c 	.word	0x0800663c
 8000798:	200000cc 	.word	0x200000cc
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	08006644 	.word	0x08006644
 80007a4:	08006678 	.word	0x08006678
 80007a8:	08006680 	.word	0x08006680
 80007ac:	200000bc 	.word	0x200000bc
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	080066a0 	.word	0x080066a0
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008
 80007c4:	080066a8 	.word	0x080066a8
 80007c8:	080066d0 	.word	0x080066d0
 80007cc:	080066dc 	.word	0x080066dc
 80007d0:	080066e4 	.word	0x080066e4
 80007d4:	08006700 	.word	0x08006700
 80007d8:	08006708 	.word	0x08006708
 80007dc:	08006714 	.word	0x08006714
 80007e0:	0800671c 	.word	0x0800671c
 80007e4:	08006738 	.word	0x08006738
 80007e8:	08006740 	.word	0x08006740
 80007ec:	08006748 	.word	0x08006748
 80007f0:	0800676c 	.word	0x0800676c

080007f4 <hexVal>:

int hexVal(char *buffer){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	int suma = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
	int dlugosc = strlen(buffer);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fcad 	bl	8000160 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	60bb      	str	r3, [r7, #8]
	int i;
	int miejsca = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
	for(i = dlugosc-1; i>=0; i--){
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3b01      	subs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	e034      	b.n	8000880 <hexVal+0x8c>
		if(buffer[i]>='0' && buffer[i]<='9'){
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b2f      	cmp	r3, #47	; 0x2f
 8000820:	d911      	bls.n	8000846 <hexVal+0x52>
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b39      	cmp	r3, #57	; 0x39
 800082c:	d80b      	bhi.n	8000846 <hexVal+0x52>
			suma = suma +(buffer[i] - 48)*miejsca;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3b30      	subs	r3, #48	; 0x30
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	fb02 f303 	mul.w	r3, r2, r3
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4413      	add	r3, r2
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e016      	b.n	8000874 <hexVal+0x80>
		}else if(buffer[i]>='A' && buffer[i]<='F'){
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b40      	cmp	r3, #64	; 0x40
 8000850:	d910      	bls.n	8000874 <hexVal+0x80>
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b46      	cmp	r3, #70	; 0x46
 800085c:	d80a      	bhi.n	8000874 <hexVal+0x80>
			suma = suma +(buffer[i] - 55)*miejsca;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b37      	subs	r3, #55	; 0x37
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	4413      	add	r3, r2
 8000872:	617b      	str	r3, [r7, #20]
		}
		miejsca = miejsca*16;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	60fb      	str	r3, [r7, #12]
	for(i = dlugosc-1; i>=0; i--){
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	3b01      	subs	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dac7      	bge.n	8000816 <hexVal+0x22>
	}
	return suma;
 8000886:	697b      	ldr	r3, [r7, #20]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <get_analyze>:

void get_analyze(){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
	char temp = get_char();//Pobranie znaku do zmiennej
 8000896:	f7ff fd31 	bl	80002fc <get_char>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]

	if(temp==0x05){
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d11a      	bne.n	80008da <get_analyze+0x4a>
		fstate=listen;
 80008a4:	4b6b      	ldr	r3, [pc, #428]	; (8000a54 <get_analyze+0x1c4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
		fid = 0;
 80008aa:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <get_analyze+0x1c8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	801a      	strh	r2, [r3, #0]
		memset(&bfr[0],0, sizeof(bfr));
 80008b0:	f240 1205 	movw	r2, #261	; 0x105
 80008b4:	2100      	movs	r1, #0
 80008b6:	4869      	ldr	r0, [pc, #420]	; (8000a5c <get_analyze+0x1cc>)
 80008b8:	f004 fd7e 	bl	80053b8 <memset>
		bfr[fid] = temp;
 80008bc:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <get_analyze+0x1c8>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a65      	ldr	r2, [pc, #404]	; (8000a5c <get_analyze+0x1cc>)
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	5453      	strb	r3, [r2, r1]
		fid = fid+1;
 80008ca:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <get_analyze+0x1c8>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <get_analyze+0x1c8>)
 80008d6:	801a      	strh	r2, [r3, #0]
				fstate = notlisten;
			}
		}
	}

}
 80008d8:	e0b8      	b.n	8000a4c <get_analyze+0x1bc>
	else if(temp == 0x04 && fstate == listen){
 80008da:	7cfb      	ldrb	r3, [r7, #19]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	f040 8089 	bne.w	80009f4 <get_analyze+0x164>
 80008e2:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <get_analyze+0x1c4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f040 8084 	bne.w	80009f4 <get_analyze+0x164>
		fstate = notlisten;
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <get_analyze+0x1c4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
		bfr[fid]= temp;
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <get_analyze+0x1c8>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	4a58      	ldr	r2, [pc, #352]	; (8000a5c <get_analyze+0x1cc>)
 80008fc:	7cfb      	ldrb	r3, [r7, #19]
 80008fe:	5453      	strb	r3, [r2, r1]
		fid++;
 8000900:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <get_analyze+0x1c8>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	b29b      	uxth	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <get_analyze+0x1c8>)
 800090c:	801a      	strh	r2, [r3, #0]
		char ctrlSumFrame[3]={bfr[fid-3],
 800090e:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <get_analyze+0x1c8>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	3b03      	subs	r3, #3
 8000916:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <get_analyze+0x1cc>)
 8000918:	5cd3      	ldrb	r3, [r2, r3]
 800091a:	713b      	strb	r3, [r7, #4]
				bfr[fid-2], '\0'};
 800091c:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <get_analyze+0x1c8>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b02      	subs	r3, #2
 8000924:	4a4d      	ldr	r2, [pc, #308]	; (8000a5c <get_analyze+0x1cc>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
		char ctrlSumFrame[3]={bfr[fid-3],
 8000928:	717b      	strb	r3, [r7, #5]
 800092a:	2300      	movs	r3, #0
 800092c:	71bb      	strb	r3, [r7, #6]
		int ctrlSumUser = hexVal(ctrlSumFrame);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5f 	bl	80007f4 <hexVal>
 8000936:	60f8      	str	r0, [r7, #12]
		bfr[fid-3]='\0';
 8000938:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <get_analyze+0x1c8>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	3b03      	subs	r3, #3
 8000940:	4a46      	ldr	r2, [pc, #280]	; (8000a5c <get_analyze+0x1cc>)
 8000942:	2100      	movs	r1, #0
 8000944:	54d1      	strb	r1, [r2, r3]
		memmove(&bfr[0],&bfr[1],strlen(bfr));
 8000946:	4845      	ldr	r0, [pc, #276]	; (8000a5c <get_analyze+0x1cc>)
 8000948:	f7ff fc0a 	bl	8000160 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	4943      	ldr	r1, [pc, #268]	; (8000a60 <get_analyze+0x1d0>)
 8000952:	4842      	ldr	r0, [pc, #264]	; (8000a5c <get_analyze+0x1cc>)
 8000954:	f004 fd16 	bl	8005384 <memmove>
		int ctrlSumProgram = checkSum(bfr);
 8000958:	4840      	ldr	r0, [pc, #256]	; (8000a5c <get_analyze+0x1cc>)
 800095a:	f7ff fcf9 	bl	8000350 <checkSum>
 800095e:	60b8      	str	r0, [r7, #8]
		if(ctrlSumProgram == ctrlSumUser){
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d140      	bne.n	80009ea <get_analyze+0x15a>
			int frm_id = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
			for(i = 0; i< fid; i++){
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e033      	b.n	80009da <get_analyze+0x14a>
				if(bfr[i]==';' && bfr[i-1]!=';' && i!=0){
 8000972:	4a3a      	ldr	r2, [pc, #232]	; (8000a5c <get_analyze+0x1cc>)
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b3b      	cmp	r3, #59	; 0x3b
 800097c:	d12a      	bne.n	80009d4 <get_analyze+0x144>
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3b01      	subs	r3, #1
 8000982:	4a36      	ldr	r2, [pc, #216]	; (8000a5c <get_analyze+0x1cc>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	2b3b      	cmp	r3, #59	; 0x3b
 8000988:	d024      	beq.n	80009d4 <get_analyze+0x144>
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d021      	beq.n	80009d4 <get_analyze+0x144>
					memset(&order[0],0,sizeof(order));
 8000990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000994:	2100      	movs	r1, #0
 8000996:	4833      	ldr	r0, [pc, #204]	; (8000a64 <get_analyze+0x1d4>)
 8000998:	f004 fd0e 	bl	80053b8 <memset>
					ord_id = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
					while(frm_id <= i){
 80009a0:	e00e      	b.n	80009c0 <get_analyze+0x130>
						order[ord_id] = bfr[frm_id];
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <get_analyze+0x1cc>)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	4413      	add	r3, r2
 80009a8:	7819      	ldrb	r1, [r3, #0]
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <get_analyze+0x1d4>)
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	4413      	add	r3, r2
 80009b0:	460a      	mov	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
						frm_id++;
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3301      	adds	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
						ord_id++;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	3301      	adds	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
					while(frm_id <= i){
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	ddec      	ble.n	80009a2 <get_analyze+0x112>
					frm_id = i + 1;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3301      	adds	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
					doner(order);
 80009ce:	4825      	ldr	r0, [pc, #148]	; (8000a64 <get_analyze+0x1d4>)
 80009d0:	f7ff fe28 	bl	8000624 <doner>
			for(i = 0; i< fid; i++){
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3301      	adds	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <get_analyze+0x1c8>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	4293      	cmp	r3, r2
 80009e6:	dbc4      	blt.n	8000972 <get_analyze+0xe2>
	else if(temp == 0x04 && fstate == listen){
 80009e8:	e030      	b.n	8000a4c <get_analyze+0x1bc>
			fsend("WRCHS%02X",ctrlSumProgram);
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	481e      	ldr	r0, [pc, #120]	; (8000a68 <get_analyze+0x1d8>)
 80009ee:	f7ff fcf7 	bl	80003e0 <fsend>
	else if(temp == 0x04 && fstate == listen){
 80009f2:	e02b      	b.n	8000a4c <get_analyze+0x1bc>
	}else if(fstate == listen){
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <get_analyze+0x1c4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d127      	bne.n	8000a4c <get_analyze+0x1bc>
		if(!(temp > 0x21 && temp < 0x7E)){
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	2b21      	cmp	r3, #33	; 0x21
 8000a00:	d902      	bls.n	8000a08 <get_analyze+0x178>
 8000a02:	7cfb      	ldrb	r3, [r7, #19]
 8000a04:	2b7d      	cmp	r3, #125	; 0x7d
 8000a06:	d906      	bls.n	8000a16 <get_analyze+0x186>
			fsend("WRFRM");
 8000a08:	4818      	ldr	r0, [pc, #96]	; (8000a6c <get_analyze+0x1dc>)
 8000a0a:	f7ff fce9 	bl	80003e0 <fsend>
			fstate = notlisten;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <get_analyze+0x1c4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	e01a      	b.n	8000a4c <get_analyze+0x1bc>
			bfr[fid] = temp;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <get_analyze+0x1c8>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <get_analyze+0x1cc>)
 8000a20:	7cfb      	ldrb	r3, [r7, #19]
 8000a22:	5453      	strb	r3, [r2, r1]
			fid = fid + 1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <get_analyze+0x1c8>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <get_analyze+0x1c8>)
 8000a30:	801a      	strh	r2, [r3, #0]
			if(fid > 261){
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <get_analyze+0x1c8>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000a3c:	d306      	bcc.n	8000a4c <get_analyze+0x1bc>
				fsend("WRFRM");
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <get_analyze+0x1dc>)
 8000a40:	f7ff fcce 	bl	80003e0 <fsend>
				fstate = notlisten;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <get_analyze+0x1c4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	e7ff      	b.n	8000a4c <get_analyze+0x1bc>
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000b0 	.word	0x200000b0
 8000a58:	200000ac 	.word	0x200000ac
 8000a5c:	200007f8 	.word	0x200007f8
 8000a60:	200007f9 	.word	0x200007f9
 8000a64:	200006f4 	.word	0x200006f4
 8000a68:	08006774 	.word	0x08006774
 8000a6c:	08006780 	.word	0x08006780

08000a70 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_UART_TxCpltCallback+0x58>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d11e      	bne.n	8000abe <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_UART_TxCpltCallback+0x5c>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_TxCpltCallback+0x60>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d018      	beq.n	8000abe <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_UART_TxCpltCallback+0x60>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_TxCpltCallback+0x64>)
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_TxCpltCallback+0x60>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <HAL_UART_TxCpltCallback+0x60>)
 8000a9e:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_UART_TxCpltCallback+0x60>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa8:	db02      	blt.n	8000ab0 <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_UART_TxCpltCallback+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000ab0:	f107 030f 	add.w	r3, r7, #15
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <HAL_UART_TxCpltCallback+0x58>)
 8000aba:	f003 ffef 	bl	8004a9c <HAL_UART_Transmit_IT>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000aa8 	.word	0x20000aa8
 8000acc:	2000009c 	.word	0x2000009c
 8000ad0:	200000a0 	.word	0x200000a0
 8000ad4:	200000e4 	.word	0x200000e4

08000ad8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_UART_RxCpltCallback+0x44>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d115      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000af0:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000afa:	db02      	blt.n	8000b02 <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_UART_RxCpltCallback+0x4c>)
 8000b08:	4413      	add	r3, r2
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <HAL_UART_RxCpltCallback+0x44>)
 8000b10:	f004 f808 	bl	8004b24 <HAL_UART_Receive_IT>
	}
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000aa8 	.word	0x20000aa8
 8000b20:	200000a4 	.word	0x200000a4
 8000b24:	200004f4 	.word	0x200004f4

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fd86 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f846 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff fb4a 	bl	80001cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 fcea 	bl	8001510 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b3c:	f000 fa20 	bl	8000f80 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b40:	f000 fac0 	bl	80010c4 <MX_TIM2_Init>
  MX_DMA_Init();
 8000b44:	f7ff fb14 	bl	8000170 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b48:	f000 fb3a 	bl	80011c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  fsend("Czestotliwosciomierz");
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <main+0x74>)
 8000b4e:	f7ff fc47 	bl	80003e0 <fsend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <main+0x78>)
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <main+0x7c>)
 8000b58:	f003 ffe4 	bl	8004b24 <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <main+0x80>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <main+0x84>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d001      	beq.n	8000b6c <main+0x44>
		  get_analyze();
 8000b68:	f7ff fe92 	bl	8000890 <get_analyze>
	  }

	  if (isMeasured==1)
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <main+0x88>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d1f3      	bne.n	8000b5c <main+0x34>
	  	 	  {
	  	 		  TIM2->CNT = 0;
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24

	  	 		  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, riseData, 1);
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <main+0x8c>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <main+0x90>)
 8000b84:	f002 fb70 	bl	8003268 <HAL_TIM_IC_Start_DMA>

	  	 		  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, fallData, 1);
 8000b88:	2301      	movs	r3, #1
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <main+0x94>)
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <main+0x90>)
 8000b90:	f002 fb6a 	bl	8003268 <HAL_TIM_IC_Start_DMA>

	  	 		  isMeasured = 0;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <main+0x88>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
	  if(busyRX!=emptyRX){
 8000b9a:	e7df      	b.n	8000b5c <main+0x34>
 8000b9c:	08006788 	.word	0x08006788
 8000ba0:	200004f4 	.word	0x200004f4
 8000ba4:	20000aa8 	.word	0x20000aa8
 8000ba8:	200000a8 	.word	0x200000a8
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	200000d4 	.word	0x200000d4
 8000bb4:	200007f4 	.word	0x200007f4
 8000bb8:	20000a60 	.word	0x20000a60
 8000bbc:	20000900 	.word	0x20000900

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b090      	sub	sp, #64	; 0x40
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fbf2 	bl	80053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000bfe:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fae3 	bl	80021d4 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c14:	f000 f8d6 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fd4e 	bl	80026d4 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c3e:	f000 f8c1 	bl	8000dc4 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3740      	adds	r7, #64	; 0x40
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c5c:	d108      	bne.n	8000c70 <HAL_TIM_IC_CaptureCallback+0x24>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7f1b      	ldrb	r3, [r3, #28]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d104      	bne.n	8000c70 <HAL_TIM_IC_CaptureCallback+0x24>
		{
			riseCaptured++;
 8000c66:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c6e:	6013      	str	r3, [r2, #0]

		}

		if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c78:	d108      	bne.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x40>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7f1b      	ldrb	r3, [r3, #28]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d104      	bne.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x40>
		{

			fallCaptured++;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c8a:	6013      	str	r3, [r2, #0]


		}
		if ((riseCaptured)&&(fallCaptured)){
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d043      	beq.n	8000d1c <HAL_TIM_IC_CaptureCallback+0xd0>
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d03f      	beq.n	8000d1c <HAL_TIM_IC_CaptureCallback+0xd0>

			if(licznik>pwmLen-1){
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d202      	bcs.n	8000cb0 <HAL_TIM_IC_CaptureCallback+0x64>
				licznik = 0;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR1=pwmData[licznik];
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000cb6:	4921      	ldr	r1, [pc, #132]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000cb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cbc:	6353      	str	r3, [r2, #52]	; 0x34
			licznik++;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000cc6:	6013      	str	r3, [r2, #0]
			isMeasured = 1;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

			if(width<pwmLen){
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d21f      	bcs.n	8000d1c <HAL_TIM_IC_CaptureCallback+0xd0>
				if(fallData[0]>riseData[0]){
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d90a      	bls.n	8000cfe <HAL_TIM_IC_CaptureCallback+0xb2>
						Difference = Difference+(fallData[0]-riseData[0]);
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	e009      	b.n	8000d12 <HAL_TIM_IC_CaptureCallback+0xc6>
					}
				else{
						Difference = Difference+(riseData[0]-fallData[0]);
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000d10:	6013      	str	r3, [r2, #0]

					}
				width++;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000d1a:	6013      	str	r3, [r2, #0]
			}
		}
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200000cc 	.word	0x200000cc
 8000d2c:	200000d0 	.word	0x200000d0
 8000d30:	200000b8 	.word	0x200000b8
 8000d34:	200000c4 	.word	0x200000c4
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	200004e4 	.word	0x200004e4
 8000d40:	200000d4 	.word	0x200000d4
 8000d44:	200000c8 	.word	0x200000c8
 8000d48:	20000900 	.word	0x20000900
 8000d4c:	200007f4 	.word	0x200007f4
 8000d50:	200000b4 	.word	0x200000b4

08000d54 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d11c      	bne.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x4c>
		seconds_passed += 1;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d6e:	6013      	str	r3, [r2, #0]
		if(seconds_passed>=czas)
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d311      	bcc.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d80:	f002 f95c 	bl	800303c <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	480c      	ldr	r0, [pc, #48]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d88:	f002 fbf8 	bl	800357c <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d90:	f002 fbf4 	bl	800357c <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d96:	f001 fed9 	bl	8002b4c <HAL_TIM_Base_Stop_IT>

			fsend("Przesylanie zakonczone");
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d9c:	f7ff fb20 	bl	80003e0 <fsend>
		}
	}

}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40000400 	.word	0x40000400
 8000dac:	200000bc 	.word	0x200000bc
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000a18 	.word	0x20000a18
 8000db8:	20000a60 	.word	0x20000a60
 8000dbc:	200009d0 	.word	0x200009d0
 8000dc0:	080067a0 	.word	0x080067a0

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x4>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x5c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x60>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_MspInit+0x60>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 fc27 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA1_Channel2_IRQHandler+0x10>)
 8000e86:	f000 feb3 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000904 	.word	0x20000904

08000e94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <DMA1_Channel5_IRQHandler+0x10>)
 8000e9a:	f000 fea9 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000948 	.word	0x20000948

08000ea8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <DMA1_Channel7_IRQHandler+0x10>)
 8000eae:	f000 fe9f 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000098c 	.word	0x2000098c

08000ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM2_IRQHandler+0x10>)
 8000ec2:	f002 fc15 	bl	80036f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000a60 	.word	0x20000a60

08000ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM3_IRQHandler+0x10>)
 8000ed6:	f002 fc0b 	bl	80036f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200009d0 	.word	0x200009d0

08000ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USART2_IRQHandler+0x10>)
 8000eea:	f003 fe4b 	bl	8004b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000aa8 	.word	0x20000aa8

08000ef8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000efc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f00:	f001 f946 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f004 f9fa 	bl	8005330 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20005000 	.word	0x20005000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200000d8 	.word	0x200000d8
 8000f70:	20000b00 	.word	0x20000b00

08000f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b096      	sub	sp, #88	; 0x58
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 f9fd 	bl	80053b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fc0:	4a3f      	ldr	r2, [pc, #252]	; (80010c0 <MX_TIM1_Init+0x140>)
 8000fc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6399;
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fd2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000fd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe4:	4b35      	ldr	r3, [pc, #212]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fea:	4834      	ldr	r0, [pc, #208]	; (80010bc <MX_TIM1_Init+0x13c>)
 8000fec:	f001 fd0c 	bl	8002a08 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ff6:	f7ff fee5 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001004:	4619      	mov	r1, r3
 8001006:	482d      	ldr	r0, [pc, #180]	; (80010bc <MX_TIM1_Init+0x13c>)
 8001008:	f002 fe24 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001012:	f7ff fed7 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001016:	4829      	ldr	r0, [pc, #164]	; (80010bc <MX_TIM1_Init+0x13c>)
 8001018:	f001 fe1e 	bl	8002c58 <HAL_TIM_PWM_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001022:	f7ff fecf 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001032:	4619      	mov	r1, r3
 8001034:	4821      	ldr	r0, [pc, #132]	; (80010bc <MX_TIM1_Init+0x13c>)
 8001036:	f003 fc23 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001040:	f7ff fec0 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001044:	2360      	movs	r3, #96	; 0x60
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 3199;
 8001048:	f640 437f 	movw	r3, #3199	; 0xc7f
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <MX_TIM1_Init+0x13c>)
 800106c:	f002 fd34 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001076:	f7ff fea5 	bl	8000dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM1_Init+0x13c>)
 800109e:	f003 fc4d 	bl	800493c <HAL_TIMEx_ConfigBreakDeadTime>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80010a8:	f7ff fe8c 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM1_Init+0x13c>)
 80010ae:	f000 f9fb 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80010b2:	bf00      	nop
 80010b4:	3758      	adds	r7, #88	; 0x58
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000a18 	.word	0x20000a18
 80010c0:	40012c00 	.word	0x40012c00

080010c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <MX_TIM2_Init+0xf8>)
 80010f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <MX_TIM2_Init+0xf8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <MX_TIM2_Init+0xf8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001108:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <MX_TIM2_Init+0xf8>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001116:	4829      	ldr	r0, [pc, #164]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001118:	f001 fc76 	bl	8002a08 <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001122:	f7ff fe4f 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4619      	mov	r1, r3
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001134:	f002 fd8e 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800113e:	f7ff fe41 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001142:	481e      	ldr	r0, [pc, #120]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001144:	f002 f838 	bl	80031b8 <HAL_TIM_IC_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800114e:	f7ff fe39 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001162:	f003 fb8d 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800116c:	f7ff fe2a 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_TIM2_Init+0xf8>)
 8001188:	f002 fc12 	bl	80039b0 <HAL_TIM_IC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001192:	f7ff fe17 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001196:	2302      	movs	r3, #2
 8001198:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800119a:	2302      	movs	r3, #2
 800119c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2204      	movs	r2, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM2_Init+0xf8>)
 80011a6:	f002 fc03 	bl	80039b0 <HAL_TIM_IC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80011b0:	f7ff fe08 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000a60 	.word	0x20000a60

080011c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_TIM3_Init+0xe0>)
 80011f2:	4a2c      	ldr	r2, [pc, #176]	; (80012a4 <MX_TIM3_Init+0xe4>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MX_TIM3_Init+0xe0>)
 80011f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80011fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_TIM3_Init+0xe0>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MX_TIM3_Init+0xe0>)
 8001206:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800120a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_TIM3_Init+0xe0>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MX_TIM3_Init+0xe0>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <MX_TIM3_Init+0xe0>)
 800121a:	f001 fbf5 	bl	8002a08 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001224:	f7ff fdce 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800122e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001232:	4619      	mov	r1, r3
 8001234:	481a      	ldr	r0, [pc, #104]	; (80012a0 <MX_TIM3_Init+0xe0>)
 8001236:	f002 fd0d 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001240:	f7ff fdc0 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <MX_TIM3_Init+0xe0>)
 8001246:	f001 fcaf 	bl	8002ba8 <HAL_TIM_OC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001250:	f7ff fdb8 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4619      	mov	r1, r3
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <MX_TIM3_Init+0xe0>)
 8001264:	f003 fb0c 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800126e:	f7ff fda9 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_TIM3_Init+0xe0>)
 800128a:	f002 fb39 	bl	8003900 <HAL_TIM_OC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001294:	f7ff fd96 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200009d0 	.word	0x200009d0
 80012a4:	40000400 	.word	0x40000400

080012a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <HAL_TIM_Base_MspInit+0x1d8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d134      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c8:	4b6e      	ldr	r3, [pc, #440]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a6d      	ldr	r2, [pc, #436]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 80012ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80012e0:	4b69      	ldr	r3, [pc, #420]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 80012e2:	4a6a      	ldr	r2, [pc, #424]	; (800148c <HAL_TIM_Base_MspInit+0x1e4>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e6:	4b68      	ldr	r3, [pc, #416]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 80012e8:	2210      	movs	r2, #16
 80012ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 80012fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001300:	4b61      	ldr	r3, [pc, #388]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 8001302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001306:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001314:	485c      	ldr	r0, [pc, #368]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 8001316:	f000 fb01 	bl	800191c <HAL_DMA_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8001320:	f7ff fd50 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a58      	ldr	r2, [pc, #352]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
 800132a:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_TIM_Base_MspInit+0x1e0>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001330:	e0a1      	b.n	8001476 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133a:	f040 8083 	bne.w	8001444 <HAL_TIM_Base_MspInit+0x19c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a50      	ldr	r2, [pc, #320]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4619      	mov	r1, r3
 8001380:	4843      	ldr	r0, [pc, #268]	; (8001490 <HAL_TIM_Base_MspInit+0x1e8>)
 8001382:	f000 fd69 	bl	8001e58 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001386:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 8001388:	4a43      	ldr	r2, [pc, #268]	; (8001498 <HAL_TIM_Base_MspInit+0x1f0>)
 800138a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013ba:	4836      	ldr	r0, [pc, #216]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013bc:	f000 faae 	bl	800191c <HAL_DMA_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_TIM_Base_MspInit+0x122>
      Error_Handler();
 80013c6:	f7ff fcfd 	bl	8000dc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a31      	ldr	r2, [pc, #196]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
 80013d0:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_TIM_Base_MspInit+0x1ec>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 80013d8:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <HAL_TIM_Base_MspInit+0x1f8>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 80013f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013fc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800140a:	4824      	ldr	r0, [pc, #144]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 800140c:	f000 fa86 	bl	800191c <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_TIM_Base_MspInit+0x172>
      Error_Handler();
 8001416:	f7ff fcd5 	bl	8000dc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_TIM_Base_MspInit+0x1f4>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	201c      	movs	r0, #28
 8001438:	f000 fa39 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143c:	201c      	movs	r0, #28
 800143e:	f000 fa52 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 8001442:	e018      	b.n	8001476 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_TIM_Base_MspInit+0x1fc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d113      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_TIM_Base_MspInit+0x1dc>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201d      	movs	r0, #29
 800146c:	f000 fa1f 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001470:	201d      	movs	r0, #29
 8001472:	f000 fa38 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40021000 	.word	0x40021000
 8001488:	20000904 	.word	0x20000904
 800148c:	4002001c 	.word	0x4002001c
 8001490:	40010800 	.word	0x40010800
 8001494:	20000948 	.word	0x20000948
 8001498:	40020058 	.word	0x40020058
 800149c:	2000098c 	.word	0x2000098c
 80014a0:	40020080 	.word	0x40020080
 80014a4:	40000400 	.word	0x40000400

080014a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_TIM_MspPostInit+0x5c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d118      	bne.n	80014fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_TIM_MspPostInit+0x60>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_TIM_MspPostInit+0x60>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_TIM_MspPostInit+0x60>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_TIM_MspPostInit+0x64>)
 80014f6:	f000 fcaf 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40010800 	.word	0x40010800

08001510 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_USART2_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_USART2_UART_Init+0x4c>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART2_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001548:	f003 fa5b 	bl	8004a02 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f7ff fc37 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000aa8 	.word	0x20000aa8
 8001560:	40004400 	.word	0x40004400

08001564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0x80>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d12b      	bne.n	80015dc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_UART_MspInit+0x84>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_UART_MspInit+0x84>)
 800158a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158e:	61d3      	str	r3, [r2, #28]
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_UART_MspInit+0x84>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_UART_MspInit+0x84>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_UART_MspInit+0x84>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_UART_MspInit+0x84>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b4:	230c      	movs	r3, #12
 80015b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2302      	movs	r3, #2
 80015be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015c8:	f000 fc46 	bl	8001e58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2026      	movs	r0, #38	; 0x26
 80015d2:	f000 f96c 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d6:	2026      	movs	r0, #38	; 0x26
 80015d8:	f000 f985 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40004400 	.word	0x40004400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010800 	.word	0x40010800

080015f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	; (8001634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff fcad 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f003 fe8f 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161e:	f7ff fa83 	bl	8000b28 <main>
  bx lr
 8001622:	4770      	bx	lr
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800162c:	080069a4 	.word	0x080069a4
  ldr r2, =_sbss
 8001630:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001634:	20000b00 	.word	0x20000b00

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_Init+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_Init+0x28>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f923 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fbb8 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f93b 	bl	8001902 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f903 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000010 	.word	0x20000010
 80016c0:	20000018 	.word	0x20000018
 80016c4:	20000014 	.word	0x20000014

080016c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x1c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x20>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <HAL_IncTick+0x20>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000018 	.word	0x20000018
 80016e8:	20000aec 	.word	0x20000aec

080016ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <HAL_GetTick+0x10>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000aec 	.word	0x20000aec

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <__NVIC_EnableIRQ+0x34>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff90 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff2d 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff42 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff35 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e043      	b.n	80019ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_DMA_Init+0xa8>)
 800193a:	4413      	add	r3, r2
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_DMA_Init+0xac>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_DMA_Init+0xb0>)
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001966:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800196a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	bffdfff8 	.word	0xbffdfff8
 80019c8:	cccccccd 	.word	0xcccccccd
 80019cc:	40020000 	.word	0x40020000

080019d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Start_IT+0x20>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e04a      	b.n	8001a86 <HAL_DMA_Start_IT+0xb6>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d13a      	bne.n	8001a78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f9e8 	bl	8001dfc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 020e 	orr.w	r2, r2, #14
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e00f      	b.n	8001a66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0204 	bic.w	r2, r2, #4
 8001a54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 020a 	orr.w	r2, r2, #10
 8001a64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e005      	b.n	8001a84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
 8001a82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e020      	b.n	8001af8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 020e 	bic.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d005      	beq.n	8001b26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e051      	b.n	8001bca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 020e 	bic.w	r2, r2, #14
 8001b34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_DMA_Abort_IT+0xd0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d029      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0xa0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_DMA_Abort_IT+0xd4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d022      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x9c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_DMA_Abort_IT+0xd8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d01a      	beq.n	8001b9a <HAL_DMA_Abort_IT+0x96>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_DMA_Abort_IT+0xdc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d012      	beq.n	8001b94 <HAL_DMA_Abort_IT+0x90>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_DMA_Abort_IT+0xe0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00a      	beq.n	8001b8e <HAL_DMA_Abort_IT+0x8a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_DMA_Abort_IT+0xe4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <HAL_DMA_Abort_IT+0x84>
 8001b82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b86:	e00e      	b.n	8001ba6 <HAL_DMA_Abort_IT+0xa2>
 8001b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b8c:	e00b      	b.n	8001ba6 <HAL_DMA_Abort_IT+0xa2>
 8001b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b92:	e008      	b.n	8001ba6 <HAL_DMA_Abort_IT+0xa2>
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	e005      	b.n	8001ba6 <HAL_DMA_Abort_IT+0xa2>
 8001b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9e:	e002      	b.n	8001ba6 <HAL_DMA_Abort_IT+0xa2>
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	e000      	b.n	8001ba6 <HAL_DMA_Abort_IT+0xa2>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_DMA_Abort_IT+0xe8>)
 8001ba8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
    } 
  }
  return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40020008 	.word	0x40020008
 8001bd8:	4002001c 	.word	0x4002001c
 8001bdc:	40020030 	.word	0x40020030
 8001be0:	40020044 	.word	0x40020044
 8001be4:	40020058 	.word	0x40020058
 8001be8:	4002006c 	.word	0x4002006c
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d04f      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xc8>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d04a      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0204 	bic.w	r2, r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a66      	ldr	r2, [pc, #408]	; (8001de0 <HAL_DMA_IRQHandler+0x1f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d029      	beq.n	8001c9e <HAL_DMA_IRQHandler+0xae>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_DMA_IRQHandler+0x1f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_IRQHandler+0xaa>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a63      	ldr	r2, [pc, #396]	; (8001de8 <HAL_DMA_IRQHandler+0x1f8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01a      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xa4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a62      	ldr	r2, [pc, #392]	; (8001dec <HAL_DMA_IRQHandler+0x1fc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d012      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x9e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a60      	ldr	r2, [pc, #384]	; (8001df0 <HAL_DMA_IRQHandler+0x200>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00a      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x98>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a5f      	ldr	r2, [pc, #380]	; (8001df4 <HAL_DMA_IRQHandler+0x204>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d102      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x92>
 8001c7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c80:	e00e      	b.n	8001ca0 <HAL_DMA_IRQHandler+0xb0>
 8001c82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c86:	e00b      	b.n	8001ca0 <HAL_DMA_IRQHandler+0xb0>
 8001c88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c8c:	e008      	b.n	8001ca0 <HAL_DMA_IRQHandler+0xb0>
 8001c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c92:	e005      	b.n	8001ca0 <HAL_DMA_IRQHandler+0xb0>
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	e002      	b.n	8001ca0 <HAL_DMA_IRQHandler+0xb0>
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	e000      	b.n	8001ca0 <HAL_DMA_IRQHandler+0xb0>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_DMA_IRQHandler+0x208>)
 8001ca2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8094 	beq.w	8001dd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb6:	e08e      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d056      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x186>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d051      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 020a 	bic.w	r2, r2, #10
 8001cee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <HAL_DMA_IRQHandler+0x1f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d029      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x166>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <HAL_DMA_IRQHandler+0x1f4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x162>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a35      	ldr	r2, [pc, #212]	; (8001de8 <HAL_DMA_IRQHandler+0x1f8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01a      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x15c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <HAL_DMA_IRQHandler+0x1fc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d012      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x156>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a32      	ldr	r2, [pc, #200]	; (8001df0 <HAL_DMA_IRQHandler+0x200>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00a      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x150>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <HAL_DMA_IRQHandler+0x204>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d102      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x14a>
 8001d34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d38:	e00e      	b.n	8001d58 <HAL_DMA_IRQHandler+0x168>
 8001d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3e:	e00b      	b.n	8001d58 <HAL_DMA_IRQHandler+0x168>
 8001d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d44:	e008      	b.n	8001d58 <HAL_DMA_IRQHandler+0x168>
 8001d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4a:	e005      	b.n	8001d58 <HAL_DMA_IRQHandler+0x168>
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	e002      	b.n	8001d58 <HAL_DMA_IRQHandler+0x168>
 8001d52:	2320      	movs	r3, #32
 8001d54:	e000      	b.n	8001d58 <HAL_DMA_IRQHandler+0x168>
 8001d56:	2302      	movs	r3, #2
 8001d58:	4a27      	ldr	r2, [pc, #156]	; (8001df8 <HAL_DMA_IRQHandler+0x208>)
 8001d5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d034      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d74:	e02f      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d028      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x1e8>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d023      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020e 	bic.w	r2, r2, #14
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
    }
  }
  return;
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
}
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020008 	.word	0x40020008
 8001de4:	4002001c 	.word	0x4002001c
 8001de8:	40020030 	.word	0x40020030
 8001dec:	40020044 	.word	0x40020044
 8001df0:	40020058 	.word	0x40020058
 8001df4:	4002006c 	.word	0x4002006c
 8001df8:	40020000 	.word	0x40020000

08001dfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d108      	bne.n	8001e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e3a:	e007      	b.n	8001e4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b08b      	sub	sp, #44	; 0x2c
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	e169      	b.n	8002140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8158 	bne.w	800213a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a9a      	ldr	r2, [pc, #616]	; (80020f8 <HAL_GPIO_Init+0x2a0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d05e      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001e94:	4a98      	ldr	r2, [pc, #608]	; (80020f8 <HAL_GPIO_Init+0x2a0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d875      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001e9a:	4a98      	ldr	r2, [pc, #608]	; (80020fc <HAL_GPIO_Init+0x2a4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d058      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001ea0:	4a96      	ldr	r2, [pc, #600]	; (80020fc <HAL_GPIO_Init+0x2a4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d86f      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001ea6:	4a96      	ldr	r2, [pc, #600]	; (8002100 <HAL_GPIO_Init+0x2a8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d052      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001eac:	4a94      	ldr	r2, [pc, #592]	; (8002100 <HAL_GPIO_Init+0x2a8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d869      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001eb2:	4a94      	ldr	r2, [pc, #592]	; (8002104 <HAL_GPIO_Init+0x2ac>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d04c      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a92      	ldr	r2, [pc, #584]	; (8002104 <HAL_GPIO_Init+0x2ac>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d863      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001ebe:	4a92      	ldr	r2, [pc, #584]	; (8002108 <HAL_GPIO_Init+0x2b0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d046      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a90      	ldr	r2, [pc, #576]	; (8002108 <HAL_GPIO_Init+0x2b0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d85d      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d82a      	bhi.n	8001f24 <HAL_GPIO_Init+0xcc>
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d859      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <HAL_GPIO_Init+0x80>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f53 	.word	0x08001f53
 8001edc:	08001f2d 	.word	0x08001f2d
 8001ee0:	08001f3f 	.word	0x08001f3f
 8001ee4:	08001f81 	.word	0x08001f81
 8001ee8:	08001f87 	.word	0x08001f87
 8001eec:	08001f87 	.word	0x08001f87
 8001ef0:	08001f87 	.word	0x08001f87
 8001ef4:	08001f87 	.word	0x08001f87
 8001ef8:	08001f87 	.word	0x08001f87
 8001efc:	08001f87 	.word	0x08001f87
 8001f00:	08001f87 	.word	0x08001f87
 8001f04:	08001f87 	.word	0x08001f87
 8001f08:	08001f87 	.word	0x08001f87
 8001f0c:	08001f87 	.word	0x08001f87
 8001f10:	08001f87 	.word	0x08001f87
 8001f14:	08001f87 	.word	0x08001f87
 8001f18:	08001f87 	.word	0x08001f87
 8001f1c:	08001f35 	.word	0x08001f35
 8001f20:	08001f49 	.word	0x08001f49
 8001f24:	4a79      	ldr	r2, [pc, #484]	; (800210c <HAL_GPIO_Init+0x2b4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f2a:	e02c      	b.n	8001f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	623b      	str	r3, [r7, #32]
          break;
 8001f32:	e029      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e024      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	3308      	adds	r3, #8
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e01f      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e01a      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e013      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	611a      	str	r2, [r3, #16]
          break;
 8001f72:	e009      	b.n	8001f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f74:	2308      	movs	r3, #8
 8001f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	615a      	str	r2, [r3, #20]
          break;
 8001f7e:	e003      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          break;
 8001f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d801      	bhi.n	8001f92 <HAL_GPIO_Init+0x13a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	e001      	b.n	8001f96 <HAL_GPIO_Init+0x13e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d802      	bhi.n	8001fa4 <HAL_GPIO_Init+0x14c>
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x152>
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	3b08      	subs	r3, #8
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80b1 	beq.w	800213a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd8:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <HAL_GPIO_Init+0x2b8>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_GPIO_Init+0x2b8>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_GPIO_Init+0x2b8>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff0:	4a48      	ldr	r2, [pc, #288]	; (8002114 <HAL_GPIO_Init+0x2bc>)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <HAL_GPIO_Init+0x2c0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_GPIO_Init+0x1ec>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3f      	ldr	r2, [pc, #252]	; (800211c <HAL_GPIO_Init+0x2c4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00d      	beq.n	8002040 <HAL_GPIO_Init+0x1e8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3e      	ldr	r2, [pc, #248]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <HAL_GPIO_Init+0x1e4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <HAL_GPIO_Init+0x2cc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_GPIO_Init+0x1e0>
 8002034:	2303      	movs	r3, #3
 8002036:	e006      	b.n	8002046 <HAL_GPIO_Init+0x1ee>
 8002038:	2304      	movs	r3, #4
 800203a:	e004      	b.n	8002046 <HAL_GPIO_Init+0x1ee>
 800203c:	2302      	movs	r3, #2
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0x1ee>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_GPIO_Init+0x1ee>
 8002044:	2300      	movs	r3, #0
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	f002 0203 	and.w	r2, r2, #3
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	4093      	lsls	r3, r2
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002056:	492f      	ldr	r1, [pc, #188]	; (8002114 <HAL_GPIO_Init+0x2bc>)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	492c      	ldr	r1, [pc, #176]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	4928      	ldr	r1, [pc, #160]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 8002088:	4013      	ands	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002098:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	491e      	ldr	r1, [pc, #120]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4918      	ldr	r1, [pc, #96]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4914      	ldr	r1, [pc, #80]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d021      	beq.n	800212c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e021      	b.n	800213a <HAL_GPIO_Init+0x2e2>
 80020f6:	bf00      	nop
 80020f8:	10320000 	.word	0x10320000
 80020fc:	10310000 	.word	0x10310000
 8002100:	10220000 	.word	0x10220000
 8002104:	10210000 	.word	0x10210000
 8002108:	10120000 	.word	0x10120000
 800210c:	10110000 	.word	0x10110000
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	40010800 	.word	0x40010800
 800211c:	40010c00 	.word	0x40010c00
 8002120:	40011000 	.word	0x40011000
 8002124:	40011400 	.word	0x40011400
 8002128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_GPIO_Init+0x304>)
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	43db      	mvns	r3, r3
 8002134:	4909      	ldr	r1, [pc, #36]	; (800215c <HAL_GPIO_Init+0x304>)
 8002136:	4013      	ands	r3, r2
 8002138:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	3301      	adds	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	f47f ae8e 	bne.w	8001e6c <HAL_GPIO_Init+0x14>
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	372c      	adds	r7, #44	; 0x2c
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f806 	bl	80021c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e26c      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8087 	beq.w	8002302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d00c      	beq.n	800221a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002200:	4b8f      	ldr	r3, [pc, #572]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d112      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
 800220c:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d10b      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221a:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d06c      	beq.n	8002300 <HAL_RCC_OscConfig+0x12c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d168      	bne.n	8002300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e246      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x76>
 800223c:	4b80      	ldr	r3, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7f      	ldr	r2, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e02e      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x98>
 8002252:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7a      	ldr	r2, [pc, #488]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b78      	ldr	r3, [pc, #480]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a77      	ldr	r2, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0xbc>
 8002276:	4b72      	ldr	r3, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a71      	ldr	r2, [pc, #452]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 8002290:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a67      	ldr	r2, [pc, #412]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fa1c 	bl	80016ec <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fa18 	bl	80016ec <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1fa      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b5d      	ldr	r3, [pc, #372]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe4>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fa08 	bl	80016ec <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff fa04 	bl	80016ec <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1e6      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x10c>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d063      	beq.n	80023d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230e:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231a:	4b49      	ldr	r3, [pc, #292]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d11c      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1ba      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4939      	ldr	r1, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e03a      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_OscConfig+0x270>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff f9bd 	bl	80016ec <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7ff f9b9 	bl	80016ec <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e19b      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4927      	ldr	r1, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_RCC_OscConfig+0x270>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff f99c 	bl	80016ec <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7ff f998 	bl	80016ec <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e17a      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03a      	beq.n	8002458 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d019      	beq.n	800241e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7ff f97c 	bl	80016ec <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7ff f978 	bl	80016ec <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e15a      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fad8 	bl	80029cc <RCC_Delay>
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff f962 	bl	80016ec <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff f95e 	bl	80016ec <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d908      	bls.n	800244c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e140      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	42420000 	.word	0x42420000
 8002448:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b9e      	ldr	r3, [pc, #632]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e9      	bne.n	800242c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a6 	beq.w	80025b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b97      	ldr	r3, [pc, #604]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a93      	ldr	r2, [pc, #588]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
 8002482:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a8a      	ldr	r2, [pc, #552]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7ff f91f 	bl	80016ec <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff f91b 	bl	80016ec <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0fd      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x312>
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x334>
 80024ee:	4b76      	ldr	r3, [pc, #472]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a72      	ldr	r2, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x356>
 8002510:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a6c      	ldr	r2, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff f8cf 	bl	80016ec <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff f8cb 	bl	80016ec <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0ab      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x37e>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff f8b9 	bl	80016ec <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff f8b5 	bl	80016ec <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e095      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a47      	ldr	r2, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8081 	beq.w	80026be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d061      	beq.n	800268c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d146      	bne.n	800265e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0x4fc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff f889 	bl	80016ec <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff f885 	bl	80016ec <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e067      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	492d      	ldr	r1, [pc, #180]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a19      	ldr	r1, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	430b      	orrs	r3, r1
 800262a:	4927      	ldr	r1, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x4fc>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff f859 	bl	80016ec <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff f855 	bl	80016ec <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e037      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x46a>
 800265c:	e02f      	b.n	80026be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_RCC_OscConfig+0x4fc>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff f842 	bl	80016ec <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff f83e 	bl	80016ec <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e020      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x498>
 800268a:	e018      	b.n	80026be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e013      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060

080026d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0207 	bic.w	r2, r3, #7
 80026fe:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800273a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe ff92 	bl	80016ec <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe ff8e 	bl	80016ec <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1cc>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fef0 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	40021000 	.word	0x40021000
 800289c:	080067d4 	.word	0x080067d4
 80028a0:	20000010 	.word	0x20000010
 80028a4:	20000014 	.word	0x20000014

080028a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	b490      	push	{r4, r7}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028b0:	1d3c      	adds	r4, r7, #4
 80028b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028b8:	f240 2301 	movw	r3, #513	; 0x201
 80028bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d002      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d003      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x46>
 80028e6:	e02d      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ea:	623b      	str	r3, [r7, #32]
      break;
 80028ec:	e02d      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	0c9b      	lsrs	r3, r3, #18
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028fa:	4413      	add	r3, r2
 80028fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002900:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c5b      	lsrs	r3, r3, #17
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800291a:	4413      	add	r3, r2
 800291c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002920:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002926:	fb02 f203 	mul.w	r2, r2, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e004      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	623b      	str	r3, [r7, #32]
      break;
 8002942:	e002      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002946:	623b      	str	r3, [r7, #32]
      break;
 8002948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294a:	6a3b      	ldr	r3, [r7, #32]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bc90      	pop	{r4, r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	080067b8 	.word	0x080067b8
 800295c:	40021000 	.word	0x40021000
 8002960:	007a1200 	.word	0x007a1200
 8002964:	003d0900 	.word	0x003d0900

08002968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <HAL_RCC_GetHCLKFreq+0x10>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000010 	.word	0x20000010

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002980:	f7ff fff2 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	080067e4 	.word	0x080067e4

080029a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a8:	f7ff ffde 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	0adb      	lsrs	r3, r3, #11
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080067e4 	.word	0x080067e4

080029cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCC_Delay+0x34>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <RCC_Delay+0x38>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0a5b      	lsrs	r3, r3, #9
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e8:	bf00      	nop
  }
  while (Delay --);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	60fa      	str	r2, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <RCC_Delay+0x1c>
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000010 	.word	0x20000010
 8002a04:	10624dd3 	.word	0x10624dd3

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fc3a 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f001 fb68 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e03a      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_TIM_Base_Start_IT+0x98>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10f      	bne.n	8002b94 <HAL_TIM_Base_Stop_IT+0x48>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_Base_Stop_IT+0x48>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e041      	b.n	8002c3e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f839 	bl	8002c46 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f001 fa98 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f839 	bl	8002cf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f001 fa40 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_TIM_PWM_Start_DMA+0x28>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e022      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d109      	bne.n	8002d4a <HAL_TIM_PWM_Start_DMA+0x42>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e015      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d109      	bne.n	8002d64 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e008      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e14e      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_TIM_PWM_Start_DMA+0x90>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e022      	b.n	8002dde <HAL_TIM_PWM_Start_DMA+0xd6>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d109      	bne.n	8002db2 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e015      	b.n	8002dde <HAL_TIM_PWM_Start_DMA+0xd6>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d109      	bne.n	8002dcc <HAL_TIM_PWM_Start_DMA+0xc4>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e008      	b.n	8002dde <HAL_TIM_PWM_Start_DMA+0xd6>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Start_DMA+0xea>
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e114      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start_DMA+0xfa>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	e016      	b.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x128>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e10:	e00e      	b.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x128>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start_DMA+0x11a>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e20:	e006      	b.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x128>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e2a:	e001      	b.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0f5      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	f200 80ae 	bhi.w	8002f94 <HAL_TIM_PWM_Start_DMA+0x28c>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_TIM_PWM_Start_DMA+0x138>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002f95 	.word	0x08002f95
 8002e48:	08002f95 	.word	0x08002f95
 8002e4c:	08002f95 	.word	0x08002f95
 8002e50:	08002ebd 	.word	0x08002ebd
 8002e54:	08002f95 	.word	0x08002f95
 8002e58:	08002f95 	.word	0x08002f95
 8002e5c:	08002f95 	.word	0x08002f95
 8002e60:	08002f05 	.word	0x08002f05
 8002e64:	08002f95 	.word	0x08002f95
 8002e68:	08002f95 	.word	0x08002f95
 8002e6c:	08002f95 	.word	0x08002f95
 8002e70:	08002f4d 	.word	0x08002f4d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	4a6a      	ldr	r2, [pc, #424]	; (8003024 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	4a68      	ldr	r2, [pc, #416]	; (800302c <HAL_TIM_PWM_Start_DMA+0x324>)
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3334      	adds	r3, #52	; 0x34
 8002e98:	461a      	mov	r2, r3
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	f7fe fd98 	bl	80019d0 <HAL_DMA_Start_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0b8      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	60da      	str	r2, [r3, #12]
      break;
 8002eba:	e06c      	b.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	4a57      	ldr	r2, [pc, #348]	; (8003028 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_TIM_PWM_Start_DMA+0x324>)
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3338      	adds	r3, #56	; 0x38
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	f7fe fd74 	bl	80019d0 <HAL_DMA_Start_IT>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e094      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f00:	60da      	str	r2, [r3, #12]
      break;
 8002f02:	e048      	b.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	4a46      	ldr	r2, [pc, #280]	; (8003024 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	4a45      	ldr	r2, [pc, #276]	; (8003028 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a44      	ldr	r2, [pc, #272]	; (800302c <HAL_TIM_PWM_Start_DMA+0x324>)
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	333c      	adds	r3, #60	; 0x3c
 8002f28:	461a      	mov	r2, r3
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	f7fe fd50 	bl	80019d0 <HAL_DMA_Start_IT>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e070      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	60da      	str	r2, [r3, #12]
      break;
 8002f4a:	e024      	b.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	4a32      	ldr	r2, [pc, #200]	; (800302c <HAL_TIM_PWM_Start_DMA+0x324>)
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3340      	adds	r3, #64	; 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	f7fe fd2c 	bl	80019d0 <HAL_DMA_Start_IT>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e04c      	b.n	800301c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f90:	60da      	str	r2, [r3, #12]
      break;
 8002f92:	e000      	b.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002f94:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 fc49 	bl	8004836 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d107      	bne.n	8002fbe <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x2de>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x2de>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x2de>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d111      	bne.n	800300a <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d010      	beq.n	800301a <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003008:	e007      	b.n	800301a <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	08003edb 	.word	0x08003edb
 8003028:	08003f83 	.word	0x08003f83
 800302c:	08003e49 	.word	0x08003e49
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800

0800303c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d855      	bhi.n	80030f8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003089 	.word	0x08003089
 8003058:	080030f9 	.word	0x080030f9
 800305c:	080030f9 	.word	0x080030f9
 8003060:	080030f9 	.word	0x080030f9
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030f9 	.word	0x080030f9
 800306c:	080030f9 	.word	0x080030f9
 8003070:	080030f9 	.word	0x080030f9
 8003074:	080030c1 	.word	0x080030c1
 8003078:	080030f9 	.word	0x080030f9
 800307c:	080030f9 	.word	0x080030f9
 8003080:	080030f9 	.word	0x080030f9
 8003084:	080030dd 	.word	0x080030dd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003096:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fd31 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 80030a2:	e02a      	b.n	80030fa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fd23 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 80030be:	e01c      	b.n	80030fa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fd15 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 80030da:	e00e      	b.n	80030fa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fd07 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 80030f6:	e000      	b.n	80030fa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80030f8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fb97 	bl	8004836 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d117      	bne.n	8003142 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	f241 1311 	movw	r3, #4369	; 0x1111
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	f240 4344 	movw	r3, #1092	; 0x444
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	f241 1311 	movw	r3, #4369	; 0x1111
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	f240 4344 	movw	r3, #1092	; 0x444
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Stop_DMA+0x146>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003180:	e013      	b.n	80031aa <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Stop_DMA+0x156>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003190:	e00b      	b.n	80031aa <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Stop_DMA+0x166>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	e003      	b.n	80031aa <HAL_TIM_PWM_Stop_DMA+0x16e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f839 	bl	8003256 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 ff90 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_DMA+0x1e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e013      	b.n	80032ae <HAL_TIM_IC_Start_DMA+0x46>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start_DMA+0x2e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e00b      	b.n	80032ae <HAL_TIM_IC_Start_DMA+0x46>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start_DMA+0x3e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e003      	b.n	80032ae <HAL_TIM_IC_Start_DMA+0x46>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_TIM_IC_Start_DMA+0x58>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e013      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x80>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d104      	bne.n	80032d0 <HAL_TIM_IC_Start_DMA+0x68>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e00b      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x80>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d104      	bne.n	80032e0 <HAL_TIM_IC_Start_DMA+0x78>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e003      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x80>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d002      	beq.n	80032f6 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80032f0:	7dbb      	ldrb	r3, [r7, #22]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e130      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d143      	bne.n	8003388 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003300:	7dbb      	ldrb	r3, [r7, #22]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d140      	bne.n	8003388 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_DMA+0xae>
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e122      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <HAL_TIM_IC_Start_DMA+0xbe>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	e013      	b.n	800334e <HAL_TIM_IC_Start_DMA+0xe6>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d104      	bne.n	8003336 <HAL_TIM_IC_Start_DMA+0xce>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003334:	e00b      	b.n	800334e <HAL_TIM_IC_Start_DMA+0xe6>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start_DMA+0xde>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	e003      	b.n	800334e <HAL_TIM_IC_Start_DMA+0xe6>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_TIM_IC_Start_DMA+0xf6>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800335c:	e016      	b.n	800338c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d104      	bne.n	800336e <HAL_TIM_IC_Start_DMA+0x106>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800336c:	e00e      	b.n	800338c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d104      	bne.n	800337e <HAL_TIM_IC_Start_DMA+0x116>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800337c:	e006      	b.n	800338c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8003386:	e001      	b.n	800338c <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0e7      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fa4e 	bl	8004836 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a71      	ldr	r2, [pc, #452]	; (8003564 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIM_IC_Start_DMA+0x15a>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d009      	beq.n	80033c2 <HAL_TIM_IC_Start_DMA+0x15a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6d      	ldr	r2, [pc, #436]	; (8003568 <HAL_TIM_IC_Start_DMA+0x300>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIM_IC_Start_DMA+0x15a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_TIM_IC_Start_DMA+0x304>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d111      	bne.n	80033e6 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d010      	beq.n	80033f6 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	e007      	b.n	80033f6 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	f200 80ad 	bhi.w	8003558 <HAL_TIM_IC_Start_DMA+0x2f0>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_TIM_IC_Start_DMA+0x19c>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003439 	.word	0x08003439
 8003408:	08003559 	.word	0x08003559
 800340c:	08003559 	.word	0x08003559
 8003410:	08003559 	.word	0x08003559
 8003414:	08003481 	.word	0x08003481
 8003418:	08003559 	.word	0x08003559
 800341c:	08003559 	.word	0x08003559
 8003420:	08003559 	.word	0x08003559
 8003424:	080034c9 	.word	0x080034c9
 8003428:	08003559 	.word	0x08003559
 800342c:	08003559 	.word	0x08003559
 8003430:	08003559 	.word	0x08003559
 8003434:	08003511 	.word	0x08003511
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <HAL_TIM_IC_Start_DMA+0x308>)
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	4a4b      	ldr	r2, [pc, #300]	; (8003574 <HAL_TIM_IC_Start_DMA+0x30c>)
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	4a4a      	ldr	r2, [pc, #296]	; (8003578 <HAL_TIM_IC_Start_DMA+0x310>)
 800344e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3334      	adds	r3, #52	; 0x34
 800345a:	4619      	mov	r1, r3
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	f7fe fab6 	bl	80019d0 <HAL_DMA_Start_IT>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e076      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347c:	60da      	str	r2, [r3, #12]
      break;
 800347e:	e06c      	b.n	800355a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <HAL_TIM_IC_Start_DMA+0x308>)
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	4a39      	ldr	r2, [pc, #228]	; (8003574 <HAL_TIM_IC_Start_DMA+0x30c>)
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	4a38      	ldr	r2, [pc, #224]	; (8003578 <HAL_TIM_IC_Start_DMA+0x310>)
 8003496:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3338      	adds	r3, #56	; 0x38
 80034a2:	4619      	mov	r1, r3
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	f7fe fa92 	bl	80019d0 <HAL_DMA_Start_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e052      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c4:	60da      	str	r2, [r3, #12]
      break;
 80034c6:	e048      	b.n	800355a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <HAL_TIM_IC_Start_DMA+0x308>)
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	4a27      	ldr	r2, [pc, #156]	; (8003574 <HAL_TIM_IC_Start_DMA+0x30c>)
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <HAL_TIM_IC_Start_DMA+0x310>)
 80034de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	333c      	adds	r3, #60	; 0x3c
 80034ea:	4619      	mov	r1, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	f7fe fa6e 	bl	80019d0 <HAL_DMA_Start_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e02e      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350c:	60da      	str	r2, [r3, #12]
      break;
 800350e:	e024      	b.n	800355a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_TIM_IC_Start_DMA+0x308>)
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <HAL_TIM_IC_Start_DMA+0x30c>)
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIM_IC_Start_DMA+0x310>)
 8003526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3340      	adds	r3, #64	; 0x40
 8003532:	4619      	mov	r1, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	f7fe fa4a 	bl	80019d0 <HAL_DMA_Start_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e00a      	b.n	800355c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003554:	60da      	str	r2, [r3, #12]
      break;
 8003556:	e000      	b.n	800355a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 8003558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	08003feb 	.word	0x08003feb
 8003574:	080040b3 	.word	0x080040b3
 8003578:	08003e49 	.word	0x08003e49

0800357c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f001 f951 	bl	8004836 <TIM_CCxChannelCmd>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d854      	bhi.n	8003644 <HAL_TIM_IC_Stop_DMA+0xc8>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_TIM_IC_Stop_DMA+0x24>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	08003645 	.word	0x08003645
 80035a8:	08003645 	.word	0x08003645
 80035ac:	08003645 	.word	0x08003645
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	08003645 	.word	0x08003645
 80035b8:	08003645 	.word	0x08003645
 80035bc:	08003645 	.word	0x08003645
 80035c0:	0800360d 	.word	0x0800360d
 80035c4:	08003645 	.word	0x08003645
 80035c8:	08003645 	.word	0x08003645
 80035cc:	08003645 	.word	0x08003645
 80035d0:	08003629 	.word	0x08003629
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fa8b 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 80035ee:	e02a      	b.n	8003646 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fa7d 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 800360a:	e01c      	b.n	8003646 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe fa6f 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 8003626:	e00e      	b.n	8003646 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003636:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe fa61 	bl	8001b04 <HAL_DMA_Abort_IT>
      break;
 8003642:	e000      	b.n	8003646 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 8003644:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_TIM_IC_Stop_DMA+0xfa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	f240 4344 	movw	r3, #1092	; 0x444
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <HAL_TIM_IC_Stop_DMA+0xfa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_IC_Stop_DMA+0x10a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003684:	e013      	b.n	80036ae <HAL_TIM_IC_Stop_DMA+0x132>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_IC_Stop_DMA+0x11a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	e00b      	b.n	80036ae <HAL_TIM_IC_Stop_DMA+0x132>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_IC_Stop_DMA+0x12a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	e003      	b.n	80036ae <HAL_TIM_IC_Stop_DMA+0x132>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_IC_Stop_DMA+0x142>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_IC_Stop_DMA+0x16a>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_IC_Stop_DMA+0x152>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_IC_Stop_DMA+0x16a>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_IC_Stop_DMA+0x162>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_IC_Stop_DMA+0x16a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0202 	mvn.w	r2, #2
 800371c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fa8a 	bl	8000c4c <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb4e 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb5d 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0204 	mvn.w	r2, #4
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fa60 	bl	8000c4c <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fb24 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fb33 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0208 	mvn.w	r2, #8
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd fa36 	bl	8000c4c <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fafa 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fb09 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fa0c 	bl	8000c4c <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fad0 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fadf 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0201 	mvn.w	r2, #1
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fa70 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f001 f8a8 	bl	80049f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 faac 	bl	8003e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0220 	mvn.w	r2, #32
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f001 f873 	bl	80049de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003916:	2302      	movs	r3, #2
 8003918:	e046      	b.n	80039a8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d839      	bhi.n	800399c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_TIM_OC_ConfigChannel+0x30>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003965 	.word	0x08003965
 8003934:	0800399d 	.word	0x0800399d
 8003938:	0800399d 	.word	0x0800399d
 800393c:	0800399d 	.word	0x0800399d
 8003940:	08003973 	.word	0x08003973
 8003944:	0800399d 	.word	0x0800399d
 8003948:	0800399d 	.word	0x0800399d
 800394c:	0800399d 	.word	0x0800399d
 8003950:	08003981 	.word	0x08003981
 8003954:	0800399d 	.word	0x0800399d
 8003958:	0800399d 	.word	0x0800399d
 800395c:	0800399d 	.word	0x0800399d
 8003960:	0800398f 	.word	0x0800398f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fc38 	bl	80041e0 <TIM_OC1_SetConfig>
      break;
 8003970:	e015      	b.n	800399e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fc97 	bl	80042ac <TIM_OC2_SetConfig>
      break;
 800397e:	e00e      	b.n	800399e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fcfa 	bl	8004380 <TIM_OC3_SetConfig>
      break;
 800398c:	e007      	b.n	800399e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fd5d 	bl	8004454 <TIM_OC4_SetConfig>
      break;
 800399a:	e000      	b.n	800399e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800399c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e082      	b.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0x120>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f000 fd82 	bl	80044f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 020c 	bic.w	r2, r2, #12
 80039fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
 8003a0e:	e05a      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d11c      	bne.n	8003a50 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f000 fdeb 	bl	8004600 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6999      	ldr	r1, [r3, #24]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	619a      	str	r2, [r3, #24]
 8003a4e:	e03a      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d11b      	bne.n	8003a8e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f000 fe36 	bl	80046d6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 020c 	bic.w	r2, r2, #12
 8003a78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69d9      	ldr	r1, [r3, #28]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	61da      	str	r2, [r3, #28]
 8003a8c:	e01b      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f000 fe55 	bl	800474c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ab0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69d9      	ldr	r1, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0ac      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	f200 809f 	bhi.w	8003c40 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003c41 	.word	0x08003c41
 8003b10:	08003c41 	.word	0x08003c41
 8003b14:	08003c41 	.word	0x08003c41
 8003b18:	08003b7d 	.word	0x08003b7d
 8003b1c:	08003c41 	.word	0x08003c41
 8003b20:	08003c41 	.word	0x08003c41
 8003b24:	08003c41 	.word	0x08003c41
 8003b28:	08003bbf 	.word	0x08003bbf
 8003b2c:	08003c41 	.word	0x08003c41
 8003b30:	08003c41 	.word	0x08003c41
 8003b34:	08003c41 	.word	0x08003c41
 8003b38:	08003bff 	.word	0x08003bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fb4c 	bl	80041e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0208 	orr.w	r2, r2, #8
 8003b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6999      	ldr	r1, [r3, #24]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	619a      	str	r2, [r3, #24]
      break;
 8003b7a:	e062      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fb92 	bl	80042ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6999      	ldr	r1, [r3, #24]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	021a      	lsls	r2, r3, #8
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	619a      	str	r2, [r3, #24]
      break;
 8003bbc:	e041      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fbdb 	bl	8004380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0208 	orr.w	r2, r2, #8
 8003bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0204 	bic.w	r2, r2, #4
 8003be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69d9      	ldr	r1, [r3, #28]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	61da      	str	r2, [r3, #28]
      break;
 8003bfc:	e021      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fc25 	bl	8004454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69d9      	ldr	r1, [r3, #28]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	021a      	lsls	r2, r3, #8
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	61da      	str	r2, [r3, #28]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_ConfigClockSource+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0b3      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x180>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d03e      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0xd0>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	f200 8087 	bhi.w	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	f000 8085 	beq.w	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d87f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d01a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0xa2>
 8003cc0:	2b70      	cmp	r3, #112	; 0x70
 8003cc2:	d87b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d050      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x116>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d877      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d03c      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xf6>
 8003cd0:	2b50      	cmp	r3, #80	; 0x50
 8003cd2:	d873      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d058      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x136>
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d86f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d064      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x156>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d86b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d060      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x156>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d867      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05c      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x156>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d05a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cf4:	e062      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f000 fd77 	bl	80047f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	609a      	str	r2, [r3, #8]
      break;
 8003d22:	e04e      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f000 fd60 	bl	80047f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e03b      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fc24 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2150      	movs	r1, #80	; 0x50
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fd2e 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 8003d68:	e02b      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fc7e 	bl	8004678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fd1e 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 8003d88:	e01b      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 fc04 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fd0e 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e00b      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 fd05 	bl	80047c4 <TIM_ITRx_SetConfig>
        break;
 8003dba:	e002      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6e:	e02a      	b.n	8003ec6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d107      	bne.n	8003e8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	e01d      	b.n	8003ec6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d107      	bne.n	8003ea4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2204      	movs	r2, #4
 8003e98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea2:	e010      	b.n	8003ec6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d107      	bne.n	8003ebe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ebc:	e003      	b.n	8003ec6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ffb5 	bl	8003e36 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	771a      	strb	r2, [r3, #28]
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d10b      	bne.n	8003f0a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d136      	bne.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f08:	e031      	b.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d10b      	bne.n	8003f2c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2202      	movs	r2, #2
 8003f18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d125      	bne.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f2a:	e020      	b.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10b      	bne.n	8003f4e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d114      	bne.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	e00f      	b.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d10a      	bne.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff46 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	771a      	strb	r2, [r3, #28]
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d103      	bne.n	8003fa2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	771a      	strb	r2, [r3, #28]
 8003fa0:	e019      	b.n	8003fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d103      	bne.n	8003fb4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	771a      	strb	r2, [r3, #28]
 8003fb2:	e010      	b.n	8003fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d103      	bne.n	8003fc6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	771a      	strb	r2, [r3, #28]
 8003fc4:	e007      	b.n	8003fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d102      	bne.n	8003fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff ff1b 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d10f      	bne.n	8004022 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d146      	bne.n	800409e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	e03d      	b.n	800409e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d10f      	bne.n	800404c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2202      	movs	r2, #2
 8004030:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d131      	bne.n	800409e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800404a:	e028      	b.n	800409e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d10f      	bne.n	8004076 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2204      	movs	r2, #4
 800405a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11c      	bne.n	800409e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004074:	e013      	b.n	800409e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	d10e      	bne.n	800409e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2208      	movs	r2, #8
 8004084:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7fc fdd4 	bl	8000c4c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	771a      	strb	r2, [r3, #28]
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d103      	bne.n	80040d2 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	771a      	strb	r2, [r3, #28]
 80040d0:	e019      	b.n	8004106 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d103      	bne.n	80040e4 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2202      	movs	r2, #2
 80040e0:	771a      	strb	r2, [r3, #28]
 80040e2:	e010      	b.n	8004106 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d103      	bne.n	80040f6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
 80040f4:	e007      	b.n	8004106 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d102      	bne.n	8004106 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2208      	movs	r2, #8
 8004104:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff fe71 	bl	8003dee <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	771a      	strb	r2, [r3, #28]
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <TIM_Base_SetConfig+0xb8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00b      	beq.n	800414c <TIM_Base_SetConfig+0x30>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d007      	beq.n	800414c <TIM_Base_SetConfig+0x30>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <TIM_Base_SetConfig+0xbc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0x30>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a25      	ldr	r2, [pc, #148]	; (80041dc <TIM_Base_SetConfig+0xc0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d108      	bne.n	800415e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <TIM_Base_SetConfig+0xb8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00b      	beq.n	800417e <TIM_Base_SetConfig+0x62>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416c:	d007      	beq.n	800417e <TIM_Base_SetConfig+0x62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <TIM_Base_SetConfig+0xbc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a18      	ldr	r2, [pc, #96]	; (80041dc <TIM_Base_SetConfig+0xc0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d108      	bne.n	8004190 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <TIM_Base_SetConfig+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800

080041e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0302 	bic.w	r3, r3, #2
 8004228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <TIM_OC1_SetConfig+0xc8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10c      	bne.n	8004256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0308 	bic.w	r3, r3, #8
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <TIM_OC1_SetConfig+0xc8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00

080042ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0210 	bic.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0320 	bic.w	r3, r3, #32
 80042f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <TIM_OC2_SetConfig+0xd0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10d      	bne.n	8004328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a14      	ldr	r2, [pc, #80]	; (800437c <TIM_OC2_SetConfig+0xd0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d113      	bne.n	8004358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800433e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00

08004380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <TIM_OC3_SetConfig+0xd0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10d      	bne.n	80043fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <TIM_OC3_SetConfig+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d113      	bne.n	800442a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00

08004454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800449e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	031b      	lsls	r3, r3, #12
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <TIM_OC4_SetConfig+0x98>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d109      	bne.n	80044c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <TIM_TI1_SetConfig+0xa8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_TI1_SetConfig+0x46>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d007      	beq.n	8004536 <TIM_TI1_SetConfig+0x46>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a1c      	ldr	r2, [pc, #112]	; (800459c <TIM_TI1_SetConfig+0xac>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_TI1_SetConfig+0x46>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <TIM_TI1_SetConfig+0xb0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <TIM_TI1_SetConfig+0x4a>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <TIM_TI1_SetConfig+0x4c>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e003      	b.n	800455a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	b2db      	uxtb	r3, r3
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 030a 	and.w	r3, r3, #10
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800

080045a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 030a 	bic.w	r3, r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0210 	bic.w	r2, r3, #16
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800463e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	031b      	lsls	r3, r3, #12
 8004644:	b29b      	uxth	r3, r3
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004652:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 0210 	bic.w	r2, r3, #16
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b087      	sub	sp, #28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004712:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	b2db      	uxtb	r3, r3
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004726:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	031b      	lsls	r3, r3, #12
 8004790:	b29b      	uxth	r3, r3
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800479e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	031b      	lsls	r3, r3, #12
 80047a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f043 0307 	orr.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	609a      	str	r2, [r3, #8]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	431a      	orrs	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004836:	b480      	push	{r7}
 8004838:	b087      	sub	sp, #28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2201      	movs	r2, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
	...

08004880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e046      	b.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e4:	d009      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a10      	ldr	r2, [pc, #64]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10c      	bne.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4313      	orrs	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800

0800493c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004954:	2302      	movs	r3, #2
 8004956:	e03d      	b.n	80049d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e03f      	b.n	8004a94 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fc fd9b 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2224      	movs	r2, #36	; 0x24
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fbe4 	bl	8005214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d130      	bne.n	8004b18 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_UART_Transmit_IT+0x26>
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e029      	b.n	8004b1a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Transmit_IT+0x38>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e022      	b.n	8004b1a <HAL_UART_Transmit_IT+0x7e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2221      	movs	r2, #33	; 0x21
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b12:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d11d      	bne.n	8004b7a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_UART_Receive_IT+0x26>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e016      	b.n	8004b7c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Receive_IT+0x38>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e00f      	b.n	8004b7c <HAL_UART_Receive_IT+0x58>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f9c5 	bl	8004f00 <UART_Start_Receive_IT>
 8004b76:	4603      	mov	r3, r0
 8004b78:	e000      	b.n	8004b7c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10d      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x52>
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa76 	bl	80050c0 <UART_Receive_IT>
      return;
 8004bd4:	e17b      	b.n	8004ece <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80b1 	beq.w	8004d40 <HAL_UART_IRQHandler+0x1bc>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x70>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80a6 	beq.w	8004d40 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_UART_IRQHandler+0x90>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_UART_IRQHandler+0xb0>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	f043 0202 	orr.w	r2, r3, #2
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_UART_IRQHandler+0xd0>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00f      	beq.n	8004c7e <HAL_UART_IRQHandler+0xfa>
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_UART_IRQHandler+0xee>
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0208 	orr.w	r2, r3, #8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 811e 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x11e>
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa0f 	bl	80050c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <HAL_UART_IRQHandler+0x146>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d031      	beq.n	8004d2e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f951 	bl	8004f72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d023      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d013      	beq.n	8004d1e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4a76      	ldr	r2, [pc, #472]	; (8004ed4 <HAL_UART_IRQHandler+0x350>)
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc fefe 	bl	8001b04 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	e00e      	b.n	8004d3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8da 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	e00a      	b.n	8004d3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8d6 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	e006      	b.n	8004d3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8d2 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d3a:	e0c3      	b.n	8004ec4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	bf00      	nop
    return;
 8004d3e:	e0c1      	b.n	8004ec4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 80a1 	bne.w	8004e8c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 809b 	beq.w	8004e8c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8095 	beq.w	8004e8c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04e      	beq.n	8004e24 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d90:	8a3b      	ldrh	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8098 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d9c:	8a3a      	ldrh	r2, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	f080 8092 	bcs.w	8004ec8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8a3a      	ldrh	r2, [r7, #16]
 8004da8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d02b      	beq.n	8004e0c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dc2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0210 	bic.w	r2, r2, #16
 8004e00:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fc fe41 	bl	8001a8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f864 	bl	8004eea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e22:	e051      	b.n	8004ec8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d047      	beq.n	8004ecc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e3c:	8a7b      	ldrh	r3, [r7, #18]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d044      	beq.n	8004ecc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e50:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0210 	bic.w	r2, r2, #16
 8004e7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e80:	8a7b      	ldrh	r3, [r7, #18]
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f830 	bl	8004eea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e8a:	e01f      	b.n	8004ecc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x324>
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8a6 	bl	8004ff2 <UART_Transmit_IT>
    return;
 8004ea6:	e012      	b.n	8004ece <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <HAL_UART_IRQHandler+0x34a>
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8e7 	bl	8005090 <UART_EndTransmit_IT>
    return;
 8004ec2:	e004      	b.n	8004ece <HAL_UART_IRQHandler+0x34a>
    return;
 8004ec4:	bf00      	nop
 8004ec6:	e002      	b.n	8004ece <HAL_UART_IRQHandler+0x34a>
      return;
 8004ec8:	bf00      	nop
 8004eca:	e000      	b.n	8004ece <HAL_UART_IRQHandler+0x34a>
      return;
 8004ecc:	bf00      	nop
  }
}
 8004ece:	3728      	adds	r7, #40	; 0x28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	08004fcb 	.word	0x08004fcb

08004ed8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	88fa      	ldrh	r2, [r7, #6]
 8004f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2222      	movs	r2, #34	; 0x22
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f44:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0220 	orr.w	r2, r2, #32
 8004f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0210 	bic.w	r2, r2, #16
 8004fb0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff ff77 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b21      	cmp	r3, #33	; 0x21
 8005004:	d13e      	bne.n	8005084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500e:	d114      	bne.n	800503a <UART_Transmit_IT+0x48>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d110      	bne.n	800503a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	1c9a      	adds	r2, r3, #2
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]
 8005038:	e008      	b.n	800504c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	1c59      	adds	r1, r3, #1
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6211      	str	r1, [r2, #32]
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4619      	mov	r1, r3
 800505a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10f      	bne.n	8005080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800506e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800507e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fb fcdd 	bl	8000a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b22      	cmp	r3, #34	; 0x22
 80050d2:	f040 8099 	bne.w	8005208 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050de:	d117      	bne.n	8005110 <UART_Receive_IT+0x50>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d113      	bne.n	8005110 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	b29a      	uxth	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	629a      	str	r2, [r3, #40]	; 0x28
 800510e:	e026      	b.n	800515e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	d007      	beq.n	8005134 <UART_Receive_IT+0x74>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <UART_Receive_IT+0x82>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e008      	b.n	8005154 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800514e:	b2da      	uxtb	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4619      	mov	r1, r3
 800516c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800516e:	2b00      	cmp	r3, #0
 8005170:	d148      	bne.n	8005204 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0220 	bic.w	r2, r2, #32
 8005180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d123      	bne.n	80051fa <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0210 	bic.w	r2, r2, #16
 80051c6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d10a      	bne.n	80051ec <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff fe79 	bl	8004eea <HAL_UARTEx_RxEventCallback>
 80051f8:	e002      	b.n	8005200 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fb fc6c 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e002      	b.n	800520a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800524e:	f023 030c 	bic.w	r3, r3, #12
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	430b      	orrs	r3, r1
 800525a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <UART_SetConfig+0x114>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d103      	bne.n	8005284 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fd fb92 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	e002      	b.n	800528a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fd fb7a 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8005288:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009a      	lsls	r2, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	4a22      	ldr	r2, [pc, #136]	; (800532c <UART_SetConfig+0x118>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	0119      	lsls	r1, r3, #4
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009a      	lsls	r2, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <UART_SetConfig+0x118>)
 80052c2:	fba3 0302 	umull	r0, r3, r3, r2
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	2064      	movs	r0, #100	; 0x64
 80052ca:	fb00 f303 	mul.w	r3, r0, r3
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	3332      	adds	r3, #50	; 0x32
 80052d4:	4a15      	ldr	r2, [pc, #84]	; (800532c <UART_SetConfig+0x118>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e0:	4419      	add	r1, r3
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009a      	lsls	r2, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <UART_SetConfig+0x118>)
 80052fa:	fba3 0302 	umull	r0, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2064      	movs	r0, #100	; 0x64
 8005302:	fb00 f303 	mul.w	r3, r0, r3
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	3332      	adds	r3, #50	; 0x32
 800530c:	4a07      	ldr	r2, [pc, #28]	; (800532c <UART_SetConfig+0x118>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	440a      	add	r2, r1
 800531e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40013800 	.word	0x40013800
 800532c:	51eb851f 	.word	0x51eb851f

08005330 <__errno>:
 8005330:	4b01      	ldr	r3, [pc, #4]	; (8005338 <__errno+0x8>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000001c 	.word	0x2000001c

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	2600      	movs	r6, #0
 8005340:	4d0c      	ldr	r5, [pc, #48]	; (8005374 <__libc_init_array+0x38>)
 8005342:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	f001 f93e 	bl	80065cc <_init>
 8005350:	2600      	movs	r6, #0
 8005352:	4d0a      	ldr	r5, [pc, #40]	; (800537c <__libc_init_array+0x40>)
 8005354:	4c0a      	ldr	r4, [pc, #40]	; (8005380 <__libc_init_array+0x44>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	0800699c 	.word	0x0800699c
 8005378:	0800699c 	.word	0x0800699c
 800537c:	0800699c 	.word	0x0800699c
 8005380:	080069a0 	.word	0x080069a0

08005384 <memmove>:
 8005384:	4288      	cmp	r0, r1
 8005386:	b510      	push	{r4, lr}
 8005388:	eb01 0402 	add.w	r4, r1, r2
 800538c:	d902      	bls.n	8005394 <memmove+0x10>
 800538e:	4284      	cmp	r4, r0
 8005390:	4623      	mov	r3, r4
 8005392:	d807      	bhi.n	80053a4 <memmove+0x20>
 8005394:	1e43      	subs	r3, r0, #1
 8005396:	42a1      	cmp	r1, r4
 8005398:	d008      	beq.n	80053ac <memmove+0x28>
 800539a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800539e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053a2:	e7f8      	b.n	8005396 <memmove+0x12>
 80053a4:	4601      	mov	r1, r0
 80053a6:	4402      	add	r2, r0
 80053a8:	428a      	cmp	r2, r1
 80053aa:	d100      	bne.n	80053ae <memmove+0x2a>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053b6:	e7f7      	b.n	80053a8 <memmove+0x24>

080053b8 <memset>:
 80053b8:	4603      	mov	r3, r0
 80053ba:	4402      	add	r2, r0
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	f803 1b01 	strb.w	r1, [r3], #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <siprintf>:
 80053c8:	b40e      	push	{r1, r2, r3}
 80053ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ce:	b500      	push	{lr}
 80053d0:	b09c      	sub	sp, #112	; 0x70
 80053d2:	ab1d      	add	r3, sp, #116	; 0x74
 80053d4:	9002      	str	r0, [sp, #8]
 80053d6:	9006      	str	r0, [sp, #24]
 80053d8:	9107      	str	r1, [sp, #28]
 80053da:	9104      	str	r1, [sp, #16]
 80053dc:	4808      	ldr	r0, [pc, #32]	; (8005400 <siprintf+0x38>)
 80053de:	4909      	ldr	r1, [pc, #36]	; (8005404 <siprintf+0x3c>)
 80053e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e4:	9105      	str	r1, [sp, #20]
 80053e6:	6800      	ldr	r0, [r0, #0]
 80053e8:	a902      	add	r1, sp, #8
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	f000 f8b4 	bl	8005558 <_svfiprintf_r>
 80053f0:	2200      	movs	r2, #0
 80053f2:	9b02      	ldr	r3, [sp, #8]
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	b01c      	add	sp, #112	; 0x70
 80053f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053fc:	b003      	add	sp, #12
 80053fe:	4770      	bx	lr
 8005400:	2000001c 	.word	0x2000001c
 8005404:	ffff0208 	.word	0xffff0208

08005408 <siscanf>:
 8005408:	b40e      	push	{r1, r2, r3}
 800540a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800540e:	b530      	push	{r4, r5, lr}
 8005410:	b09c      	sub	sp, #112	; 0x70
 8005412:	ac1f      	add	r4, sp, #124	; 0x7c
 8005414:	f854 5b04 	ldr.w	r5, [r4], #4
 8005418:	f8ad 2014 	strh.w	r2, [sp, #20]
 800541c:	9002      	str	r0, [sp, #8]
 800541e:	9006      	str	r0, [sp, #24]
 8005420:	f7fa fe9e 	bl	8000160 <strlen>
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <siscanf+0x4c>)
 8005426:	9003      	str	r0, [sp, #12]
 8005428:	930b      	str	r3, [sp, #44]	; 0x2c
 800542a:	2300      	movs	r3, #0
 800542c:	930f      	str	r3, [sp, #60]	; 0x3c
 800542e:	9314      	str	r3, [sp, #80]	; 0x50
 8005430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005434:	9007      	str	r0, [sp, #28]
 8005436:	4808      	ldr	r0, [pc, #32]	; (8005458 <siscanf+0x50>)
 8005438:	f8ad 3016 	strh.w	r3, [sp, #22]
 800543c:	462a      	mov	r2, r5
 800543e:	4623      	mov	r3, r4
 8005440:	a902      	add	r1, sp, #8
 8005442:	6800      	ldr	r0, [r0, #0]
 8005444:	9401      	str	r4, [sp, #4]
 8005446:	f000 f9e1 	bl	800580c <__ssvfiscanf_r>
 800544a:	b01c      	add	sp, #112	; 0x70
 800544c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005450:	b003      	add	sp, #12
 8005452:	4770      	bx	lr
 8005454:	0800545d 	.word	0x0800545d
 8005458:	2000001c 	.word	0x2000001c

0800545c <__seofread>:
 800545c:	2000      	movs	r0, #0
 800545e:	4770      	bx	lr

08005460 <_vsiprintf_r>:
 8005460:	b500      	push	{lr}
 8005462:	b09b      	sub	sp, #108	; 0x6c
 8005464:	9100      	str	r1, [sp, #0]
 8005466:	9104      	str	r1, [sp, #16]
 8005468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800546c:	9105      	str	r1, [sp, #20]
 800546e:	9102      	str	r1, [sp, #8]
 8005470:	4905      	ldr	r1, [pc, #20]	; (8005488 <_vsiprintf_r+0x28>)
 8005472:	9103      	str	r1, [sp, #12]
 8005474:	4669      	mov	r1, sp
 8005476:	f000 f86f 	bl	8005558 <_svfiprintf_r>
 800547a:	2200      	movs	r2, #0
 800547c:	9b00      	ldr	r3, [sp, #0]
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	b01b      	add	sp, #108	; 0x6c
 8005482:	f85d fb04 	ldr.w	pc, [sp], #4
 8005486:	bf00      	nop
 8005488:	ffff0208 	.word	0xffff0208

0800548c <vsiprintf>:
 800548c:	4613      	mov	r3, r2
 800548e:	460a      	mov	r2, r1
 8005490:	4601      	mov	r1, r0
 8005492:	4802      	ldr	r0, [pc, #8]	; (800549c <vsiprintf+0x10>)
 8005494:	6800      	ldr	r0, [r0, #0]
 8005496:	f7ff bfe3 	b.w	8005460 <_vsiprintf_r>
 800549a:	bf00      	nop
 800549c:	2000001c 	.word	0x2000001c

080054a0 <__ssputs_r>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	688e      	ldr	r6, [r1, #8]
 80054a6:	4682      	mov	sl, r0
 80054a8:	429e      	cmp	r6, r3
 80054aa:	460c      	mov	r4, r1
 80054ac:	4690      	mov	r8, r2
 80054ae:	461f      	mov	r7, r3
 80054b0:	d838      	bhi.n	8005524 <__ssputs_r+0x84>
 80054b2:	898a      	ldrh	r2, [r1, #12]
 80054b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054b8:	d032      	beq.n	8005520 <__ssputs_r+0x80>
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	6909      	ldr	r1, [r1, #16]
 80054be:	3301      	adds	r3, #1
 80054c0:	eba5 0901 	sub.w	r9, r5, r1
 80054c4:	6965      	ldr	r5, [r4, #20]
 80054c6:	444b      	add	r3, r9
 80054c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054d0:	106d      	asrs	r5, r5, #1
 80054d2:	429d      	cmp	r5, r3
 80054d4:	bf38      	it	cc
 80054d6:	461d      	movcc	r5, r3
 80054d8:	0553      	lsls	r3, r2, #21
 80054da:	d531      	bpl.n	8005540 <__ssputs_r+0xa0>
 80054dc:	4629      	mov	r1, r5
 80054de:	f000 ffd1 	bl	8006484 <_malloc_r>
 80054e2:	4606      	mov	r6, r0
 80054e4:	b950      	cbnz	r0, 80054fc <__ssputs_r+0x5c>
 80054e6:	230c      	movs	r3, #12
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	f8ca 3000 	str.w	r3, [sl]
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fc:	464a      	mov	r2, r9
 80054fe:	6921      	ldr	r1, [r4, #16]
 8005500:	f000 ff66 	bl	80063d0 <memcpy>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	6126      	str	r6, [r4, #16]
 8005512:	444e      	add	r6, r9
 8005514:	6026      	str	r6, [r4, #0]
 8005516:	463e      	mov	r6, r7
 8005518:	6165      	str	r5, [r4, #20]
 800551a:	eba5 0509 	sub.w	r5, r5, r9
 800551e:	60a5      	str	r5, [r4, #8]
 8005520:	42be      	cmp	r6, r7
 8005522:	d900      	bls.n	8005526 <__ssputs_r+0x86>
 8005524:	463e      	mov	r6, r7
 8005526:	4632      	mov	r2, r6
 8005528:	4641      	mov	r1, r8
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	f7ff ff2a 	bl	8005384 <memmove>
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	1b9b      	subs	r3, r3, r6
 8005536:	4432      	add	r2, r6
 8005538:	2000      	movs	r0, #0
 800553a:	60a3      	str	r3, [r4, #8]
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	e7db      	b.n	80054f8 <__ssputs_r+0x58>
 8005540:	462a      	mov	r2, r5
 8005542:	f000 fff9 	bl	8006538 <_realloc_r>
 8005546:	4606      	mov	r6, r0
 8005548:	2800      	cmp	r0, #0
 800554a:	d1e1      	bne.n	8005510 <__ssputs_r+0x70>
 800554c:	4650      	mov	r0, sl
 800554e:	6921      	ldr	r1, [r4, #16]
 8005550:	f000 ff4c 	bl	80063ec <_free_r>
 8005554:	e7c7      	b.n	80054e6 <__ssputs_r+0x46>
	...

08005558 <_svfiprintf_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	4698      	mov	r8, r3
 800555e:	898b      	ldrh	r3, [r1, #12]
 8005560:	4607      	mov	r7, r0
 8005562:	061b      	lsls	r3, r3, #24
 8005564:	460d      	mov	r5, r1
 8005566:	4614      	mov	r4, r2
 8005568:	b09d      	sub	sp, #116	; 0x74
 800556a:	d50e      	bpl.n	800558a <_svfiprintf_r+0x32>
 800556c:	690b      	ldr	r3, [r1, #16]
 800556e:	b963      	cbnz	r3, 800558a <_svfiprintf_r+0x32>
 8005570:	2140      	movs	r1, #64	; 0x40
 8005572:	f000 ff87 	bl	8006484 <_malloc_r>
 8005576:	6028      	str	r0, [r5, #0]
 8005578:	6128      	str	r0, [r5, #16]
 800557a:	b920      	cbnz	r0, 8005586 <_svfiprintf_r+0x2e>
 800557c:	230c      	movs	r3, #12
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e0d1      	b.n	800572a <_svfiprintf_r+0x1d2>
 8005586:	2340      	movs	r3, #64	; 0x40
 8005588:	616b      	str	r3, [r5, #20]
 800558a:	2300      	movs	r3, #0
 800558c:	9309      	str	r3, [sp, #36]	; 0x24
 800558e:	2320      	movs	r3, #32
 8005590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005594:	2330      	movs	r3, #48	; 0x30
 8005596:	f04f 0901 	mov.w	r9, #1
 800559a:	f8cd 800c 	str.w	r8, [sp, #12]
 800559e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005744 <_svfiprintf_r+0x1ec>
 80055a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055a6:	4623      	mov	r3, r4
 80055a8:	469a      	mov	sl, r3
 80055aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ae:	b10a      	cbz	r2, 80055b4 <_svfiprintf_r+0x5c>
 80055b0:	2a25      	cmp	r2, #37	; 0x25
 80055b2:	d1f9      	bne.n	80055a8 <_svfiprintf_r+0x50>
 80055b4:	ebba 0b04 	subs.w	fp, sl, r4
 80055b8:	d00b      	beq.n	80055d2 <_svfiprintf_r+0x7a>
 80055ba:	465b      	mov	r3, fp
 80055bc:	4622      	mov	r2, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	4638      	mov	r0, r7
 80055c2:	f7ff ff6d 	bl	80054a0 <__ssputs_r>
 80055c6:	3001      	adds	r0, #1
 80055c8:	f000 80aa 	beq.w	8005720 <_svfiprintf_r+0x1c8>
 80055cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ce:	445a      	add	r2, fp
 80055d0:	9209      	str	r2, [sp, #36]	; 0x24
 80055d2:	f89a 3000 	ldrb.w	r3, [sl]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80a2 	beq.w	8005720 <_svfiprintf_r+0x1c8>
 80055dc:	2300      	movs	r3, #0
 80055de:	f04f 32ff 	mov.w	r2, #4294967295
 80055e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e6:	f10a 0a01 	add.w	sl, sl, #1
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	9307      	str	r3, [sp, #28]
 80055ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055f2:	931a      	str	r3, [sp, #104]	; 0x68
 80055f4:	4654      	mov	r4, sl
 80055f6:	2205      	movs	r2, #5
 80055f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fc:	4851      	ldr	r0, [pc, #324]	; (8005744 <_svfiprintf_r+0x1ec>)
 80055fe:	f000 fed9 	bl	80063b4 <memchr>
 8005602:	9a04      	ldr	r2, [sp, #16]
 8005604:	b9d8      	cbnz	r0, 800563e <_svfiprintf_r+0xe6>
 8005606:	06d0      	lsls	r0, r2, #27
 8005608:	bf44      	itt	mi
 800560a:	2320      	movmi	r3, #32
 800560c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005610:	0711      	lsls	r1, r2, #28
 8005612:	bf44      	itt	mi
 8005614:	232b      	movmi	r3, #43	; 0x2b
 8005616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800561a:	f89a 3000 	ldrb.w	r3, [sl]
 800561e:	2b2a      	cmp	r3, #42	; 0x2a
 8005620:	d015      	beq.n	800564e <_svfiprintf_r+0xf6>
 8005622:	4654      	mov	r4, sl
 8005624:	2000      	movs	r0, #0
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	9a07      	ldr	r2, [sp, #28]
 800562c:	4621      	mov	r1, r4
 800562e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005632:	3b30      	subs	r3, #48	; 0x30
 8005634:	2b09      	cmp	r3, #9
 8005636:	d94e      	bls.n	80056d6 <_svfiprintf_r+0x17e>
 8005638:	b1b0      	cbz	r0, 8005668 <_svfiprintf_r+0x110>
 800563a:	9207      	str	r2, [sp, #28]
 800563c:	e014      	b.n	8005668 <_svfiprintf_r+0x110>
 800563e:	eba0 0308 	sub.w	r3, r0, r8
 8005642:	fa09 f303 	lsl.w	r3, r9, r3
 8005646:	4313      	orrs	r3, r2
 8005648:	46a2      	mov	sl, r4
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	e7d2      	b.n	80055f4 <_svfiprintf_r+0x9c>
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	1d19      	adds	r1, r3, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	9103      	str	r1, [sp, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfbb      	ittet	lt
 800565a:	425b      	neglt	r3, r3
 800565c:	f042 0202 	orrlt.w	r2, r2, #2
 8005660:	9307      	strge	r3, [sp, #28]
 8005662:	9307      	strlt	r3, [sp, #28]
 8005664:	bfb8      	it	lt
 8005666:	9204      	strlt	r2, [sp, #16]
 8005668:	7823      	ldrb	r3, [r4, #0]
 800566a:	2b2e      	cmp	r3, #46	; 0x2e
 800566c:	d10c      	bne.n	8005688 <_svfiprintf_r+0x130>
 800566e:	7863      	ldrb	r3, [r4, #1]
 8005670:	2b2a      	cmp	r3, #42	; 0x2a
 8005672:	d135      	bne.n	80056e0 <_svfiprintf_r+0x188>
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	3402      	adds	r4, #2
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	9203      	str	r2, [sp, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfb8      	it	lt
 8005682:	f04f 33ff 	movlt.w	r3, #4294967295
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005754 <_svfiprintf_r+0x1fc>
 800568c:	2203      	movs	r2, #3
 800568e:	4650      	mov	r0, sl
 8005690:	7821      	ldrb	r1, [r4, #0]
 8005692:	f000 fe8f 	bl	80063b4 <memchr>
 8005696:	b140      	cbz	r0, 80056aa <_svfiprintf_r+0x152>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	eba0 000a 	sub.w	r0, r0, sl
 800569e:	fa03 f000 	lsl.w	r0, r3, r0
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	3401      	adds	r4, #1
 80056a6:	4303      	orrs	r3, r0
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ae:	2206      	movs	r2, #6
 80056b0:	4825      	ldr	r0, [pc, #148]	; (8005748 <_svfiprintf_r+0x1f0>)
 80056b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056b6:	f000 fe7d 	bl	80063b4 <memchr>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d038      	beq.n	8005730 <_svfiprintf_r+0x1d8>
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <_svfiprintf_r+0x1f4>)
 80056c0:	bb1b      	cbnz	r3, 800570a <_svfiprintf_r+0x1b2>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	3307      	adds	r3, #7
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	3308      	adds	r3, #8
 80056cc:	9303      	str	r3, [sp, #12]
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	4433      	add	r3, r6
 80056d2:	9309      	str	r3, [sp, #36]	; 0x24
 80056d4:	e767      	b.n	80055a6 <_svfiprintf_r+0x4e>
 80056d6:	460c      	mov	r4, r1
 80056d8:	2001      	movs	r0, #1
 80056da:	fb0c 3202 	mla	r2, ip, r2, r3
 80056de:	e7a5      	b.n	800562c <_svfiprintf_r+0xd4>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f04f 0c0a 	mov.w	ip, #10
 80056e6:	4619      	mov	r1, r3
 80056e8:	3401      	adds	r4, #1
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	4620      	mov	r0, r4
 80056ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f2:	3a30      	subs	r2, #48	; 0x30
 80056f4:	2a09      	cmp	r2, #9
 80056f6:	d903      	bls.n	8005700 <_svfiprintf_r+0x1a8>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0c5      	beq.n	8005688 <_svfiprintf_r+0x130>
 80056fc:	9105      	str	r1, [sp, #20]
 80056fe:	e7c3      	b.n	8005688 <_svfiprintf_r+0x130>
 8005700:	4604      	mov	r4, r0
 8005702:	2301      	movs	r3, #1
 8005704:	fb0c 2101 	mla	r1, ip, r1, r2
 8005708:	e7f0      	b.n	80056ec <_svfiprintf_r+0x194>
 800570a:	ab03      	add	r3, sp, #12
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	462a      	mov	r2, r5
 8005710:	4638      	mov	r0, r7
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <_svfiprintf_r+0x1f8>)
 8005714:	a904      	add	r1, sp, #16
 8005716:	f3af 8000 	nop.w
 800571a:	1c42      	adds	r2, r0, #1
 800571c:	4606      	mov	r6, r0
 800571e:	d1d6      	bne.n	80056ce <_svfiprintf_r+0x176>
 8005720:	89ab      	ldrh	r3, [r5, #12]
 8005722:	065b      	lsls	r3, r3, #25
 8005724:	f53f af2c 	bmi.w	8005580 <_svfiprintf_r+0x28>
 8005728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800572a:	b01d      	add	sp, #116	; 0x74
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	ab03      	add	r3, sp, #12
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	462a      	mov	r2, r5
 8005736:	4638      	mov	r0, r7
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <_svfiprintf_r+0x1f8>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	f000 fa50 	bl	8005be0 <_printf_i>
 8005740:	e7eb      	b.n	800571a <_svfiprintf_r+0x1c2>
 8005742:	bf00      	nop
 8005744:	080067ec 	.word	0x080067ec
 8005748:	080067f6 	.word	0x080067f6
 800574c:	00000000 	.word	0x00000000
 8005750:	080054a1 	.word	0x080054a1
 8005754:	080067f2 	.word	0x080067f2

08005758 <_sungetc_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	1c4b      	adds	r3, r1, #1
 800575c:	4614      	mov	r4, r2
 800575e:	d103      	bne.n	8005768 <_sungetc_r+0x10>
 8005760:	f04f 35ff 	mov.w	r5, #4294967295
 8005764:	4628      	mov	r0, r5
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	8993      	ldrh	r3, [r2, #12]
 800576a:	b2cd      	uxtb	r5, r1
 800576c:	f023 0320 	bic.w	r3, r3, #32
 8005770:	8193      	strh	r3, [r2, #12]
 8005772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005774:	6852      	ldr	r2, [r2, #4]
 8005776:	b18b      	cbz	r3, 800579c <_sungetc_r+0x44>
 8005778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800577a:	4293      	cmp	r3, r2
 800577c:	dd08      	ble.n	8005790 <_sungetc_r+0x38>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	1e5a      	subs	r2, r3, #1
 8005782:	6022      	str	r2, [r4, #0]
 8005784:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	3301      	adds	r3, #1
 800578c:	6063      	str	r3, [r4, #4]
 800578e:	e7e9      	b.n	8005764 <_sungetc_r+0xc>
 8005790:	4621      	mov	r1, r4
 8005792:	f000 fdd5 	bl	8006340 <__submore>
 8005796:	2800      	cmp	r0, #0
 8005798:	d0f1      	beq.n	800577e <_sungetc_r+0x26>
 800579a:	e7e1      	b.n	8005760 <_sungetc_r+0x8>
 800579c:	6921      	ldr	r1, [r4, #16]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	b151      	cbz	r1, 80057b8 <_sungetc_r+0x60>
 80057a2:	4299      	cmp	r1, r3
 80057a4:	d208      	bcs.n	80057b8 <_sungetc_r+0x60>
 80057a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80057aa:	42a9      	cmp	r1, r5
 80057ac:	d104      	bne.n	80057b8 <_sungetc_r+0x60>
 80057ae:	3b01      	subs	r3, #1
 80057b0:	3201      	adds	r2, #1
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	6062      	str	r2, [r4, #4]
 80057b6:	e7d5      	b.n	8005764 <_sungetc_r+0xc>
 80057b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80057bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057c0:	6363      	str	r3, [r4, #52]	; 0x34
 80057c2:	2303      	movs	r3, #3
 80057c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80057c6:	4623      	mov	r3, r4
 80057c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	2301      	movs	r3, #1
 80057d0:	e7dc      	b.n	800578c <_sungetc_r+0x34>

080057d2 <__ssrefill_r>:
 80057d2:	b510      	push	{r4, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057d8:	b169      	cbz	r1, 80057f6 <__ssrefill_r+0x24>
 80057da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057de:	4299      	cmp	r1, r3
 80057e0:	d001      	beq.n	80057e6 <__ssrefill_r+0x14>
 80057e2:	f000 fe03 	bl	80063ec <_free_r>
 80057e6:	2000      	movs	r0, #0
 80057e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ea:	6360      	str	r0, [r4, #52]	; 0x34
 80057ec:	6063      	str	r3, [r4, #4]
 80057ee:	b113      	cbz	r3, 80057f6 <__ssrefill_r+0x24>
 80057f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0320 	orr.w	r3, r3, #32
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	e7f3      	b.n	80057f4 <__ssrefill_r+0x22>

0800580c <__ssvfiscanf_r>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	2100      	movs	r1, #0
 8005814:	4606      	mov	r6, r0
 8005816:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800581a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800581e:	49b3      	ldr	r1, [pc, #716]	; (8005aec <__ssvfiscanf_r+0x2e0>)
 8005820:	f10d 0804 	add.w	r8, sp, #4
 8005824:	91a0      	str	r1, [sp, #640]	; 0x280
 8005826:	49b2      	ldr	r1, [pc, #712]	; (8005af0 <__ssvfiscanf_r+0x2e4>)
 8005828:	4fb2      	ldr	r7, [pc, #712]	; (8005af4 <__ssvfiscanf_r+0x2e8>)
 800582a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8005af8 <__ssvfiscanf_r+0x2ec>
 800582e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005832:	91a1      	str	r1, [sp, #644]	; 0x284
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	f892 a000 	ldrb.w	sl, [r2]
 800583a:	f1ba 0f00 	cmp.w	sl, #0
 800583e:	f000 8153 	beq.w	8005ae8 <__ssvfiscanf_r+0x2dc>
 8005842:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005846:	1c55      	adds	r5, r2, #1
 8005848:	f013 0308 	ands.w	r3, r3, #8
 800584c:	d019      	beq.n	8005882 <__ssvfiscanf_r+0x76>
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dd0f      	ble.n	8005874 <__ssvfiscanf_r+0x68>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	5cba      	ldrb	r2, [r7, r2]
 800585a:	0712      	lsls	r2, r2, #28
 800585c:	d401      	bmi.n	8005862 <__ssvfiscanf_r+0x56>
 800585e:	462a      	mov	r2, r5
 8005860:	e7e9      	b.n	8005836 <__ssvfiscanf_r+0x2a>
 8005862:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005864:	3301      	adds	r3, #1
 8005866:	3201      	adds	r2, #1
 8005868:	9245      	str	r2, [sp, #276]	; 0x114
 800586a:	6862      	ldr	r2, [r4, #4]
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	3a01      	subs	r2, #1
 8005870:	6062      	str	r2, [r4, #4]
 8005872:	e7ec      	b.n	800584e <__ssvfiscanf_r+0x42>
 8005874:	4621      	mov	r1, r4
 8005876:	4630      	mov	r0, r6
 8005878:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800587a:	4798      	blx	r3
 800587c:	2800      	cmp	r0, #0
 800587e:	d0e9      	beq.n	8005854 <__ssvfiscanf_r+0x48>
 8005880:	e7ed      	b.n	800585e <__ssvfiscanf_r+0x52>
 8005882:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005886:	f040 8086 	bne.w	8005996 <__ssvfiscanf_r+0x18a>
 800588a:	9341      	str	r3, [sp, #260]	; 0x104
 800588c:	9343      	str	r3, [sp, #268]	; 0x10c
 800588e:	7853      	ldrb	r3, [r2, #1]
 8005890:	2b2a      	cmp	r3, #42	; 0x2a
 8005892:	bf04      	itt	eq
 8005894:	2310      	moveq	r3, #16
 8005896:	1c95      	addeq	r5, r2, #2
 8005898:	f04f 020a 	mov.w	r2, #10
 800589c:	bf08      	it	eq
 800589e:	9341      	streq	r3, [sp, #260]	; 0x104
 80058a0:	46ab      	mov	fp, r5
 80058a2:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80058a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80058aa:	2b09      	cmp	r3, #9
 80058ac:	d91d      	bls.n	80058ea <__ssvfiscanf_r+0xde>
 80058ae:	2203      	movs	r2, #3
 80058b0:	4891      	ldr	r0, [pc, #580]	; (8005af8 <__ssvfiscanf_r+0x2ec>)
 80058b2:	f000 fd7f 	bl	80063b4 <memchr>
 80058b6:	b140      	cbz	r0, 80058ca <__ssvfiscanf_r+0xbe>
 80058b8:	2301      	movs	r3, #1
 80058ba:	465d      	mov	r5, fp
 80058bc:	eba0 0009 	sub.w	r0, r0, r9
 80058c0:	fa03 f000 	lsl.w	r0, r3, r0
 80058c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80058c6:	4318      	orrs	r0, r3
 80058c8:	9041      	str	r0, [sp, #260]	; 0x104
 80058ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058ce:	2b78      	cmp	r3, #120	; 0x78
 80058d0:	d806      	bhi.n	80058e0 <__ssvfiscanf_r+0xd4>
 80058d2:	2b57      	cmp	r3, #87	; 0x57
 80058d4:	d810      	bhi.n	80058f8 <__ssvfiscanf_r+0xec>
 80058d6:	2b25      	cmp	r3, #37	; 0x25
 80058d8:	d05d      	beq.n	8005996 <__ssvfiscanf_r+0x18a>
 80058da:	d857      	bhi.n	800598c <__ssvfiscanf_r+0x180>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d075      	beq.n	80059cc <__ssvfiscanf_r+0x1c0>
 80058e0:	2303      	movs	r3, #3
 80058e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80058e4:	230a      	movs	r3, #10
 80058e6:	9342      	str	r3, [sp, #264]	; 0x108
 80058e8:	e082      	b.n	80059f0 <__ssvfiscanf_r+0x1e4>
 80058ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80058ec:	465d      	mov	r5, fp
 80058ee:	fb02 1303 	mla	r3, r2, r3, r1
 80058f2:	3b30      	subs	r3, #48	; 0x30
 80058f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80058f6:	e7d3      	b.n	80058a0 <__ssvfiscanf_r+0x94>
 80058f8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80058fc:	2a20      	cmp	r2, #32
 80058fe:	d8ef      	bhi.n	80058e0 <__ssvfiscanf_r+0xd4>
 8005900:	a101      	add	r1, pc, #4	; (adr r1, 8005908 <__ssvfiscanf_r+0xfc>)
 8005902:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005906:	bf00      	nop
 8005908:	080059db 	.word	0x080059db
 800590c:	080058e1 	.word	0x080058e1
 8005910:	080058e1 	.word	0x080058e1
 8005914:	08005a39 	.word	0x08005a39
 8005918:	080058e1 	.word	0x080058e1
 800591c:	080058e1 	.word	0x080058e1
 8005920:	080058e1 	.word	0x080058e1
 8005924:	080058e1 	.word	0x080058e1
 8005928:	080058e1 	.word	0x080058e1
 800592c:	080058e1 	.word	0x080058e1
 8005930:	080058e1 	.word	0x080058e1
 8005934:	08005a4f 	.word	0x08005a4f
 8005938:	08005a25 	.word	0x08005a25
 800593c:	08005993 	.word	0x08005993
 8005940:	08005993 	.word	0x08005993
 8005944:	08005993 	.word	0x08005993
 8005948:	080058e1 	.word	0x080058e1
 800594c:	08005a29 	.word	0x08005a29
 8005950:	080058e1 	.word	0x080058e1
 8005954:	080058e1 	.word	0x080058e1
 8005958:	080058e1 	.word	0x080058e1
 800595c:	080058e1 	.word	0x080058e1
 8005960:	08005a5f 	.word	0x08005a5f
 8005964:	08005a31 	.word	0x08005a31
 8005968:	080059d3 	.word	0x080059d3
 800596c:	080058e1 	.word	0x080058e1
 8005970:	080058e1 	.word	0x080058e1
 8005974:	08005a5b 	.word	0x08005a5b
 8005978:	080058e1 	.word	0x080058e1
 800597c:	08005a25 	.word	0x08005a25
 8005980:	080058e1 	.word	0x080058e1
 8005984:	080058e1 	.word	0x080058e1
 8005988:	080059db 	.word	0x080059db
 800598c:	3b45      	subs	r3, #69	; 0x45
 800598e:	2b02      	cmp	r3, #2
 8005990:	d8a6      	bhi.n	80058e0 <__ssvfiscanf_r+0xd4>
 8005992:	2305      	movs	r3, #5
 8005994:	e02b      	b.n	80059ee <__ssvfiscanf_r+0x1e2>
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	dd0d      	ble.n	80059b8 <__ssvfiscanf_r+0x1ac>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	4552      	cmp	r2, sl
 80059a2:	f040 80a1 	bne.w	8005ae8 <__ssvfiscanf_r+0x2dc>
 80059a6:	3301      	adds	r3, #1
 80059a8:	6862      	ldr	r2, [r4, #4]
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80059ae:	3a01      	subs	r2, #1
 80059b0:	3301      	adds	r3, #1
 80059b2:	6062      	str	r2, [r4, #4]
 80059b4:	9345      	str	r3, [sp, #276]	; 0x114
 80059b6:	e752      	b.n	800585e <__ssvfiscanf_r+0x52>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4630      	mov	r0, r6
 80059bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80059be:	4798      	blx	r3
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d0eb      	beq.n	800599c <__ssvfiscanf_r+0x190>
 80059c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f040 8084 	bne.w	8005ad4 <__ssvfiscanf_r+0x2c8>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e086      	b.n	8005ae0 <__ssvfiscanf_r+0x2d4>
 80059d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80059d4:	f042 0220 	orr.w	r2, r2, #32
 80059d8:	9241      	str	r2, [sp, #260]	; 0x104
 80059da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80059dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e0:	9241      	str	r2, [sp, #260]	; 0x104
 80059e2:	2210      	movs	r2, #16
 80059e4:	2b6f      	cmp	r3, #111	; 0x6f
 80059e6:	bf34      	ite	cc
 80059e8:	2303      	movcc	r3, #3
 80059ea:	2304      	movcs	r3, #4
 80059ec:	9242      	str	r2, [sp, #264]	; 0x108
 80059ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	dd41      	ble.n	8005a7a <__ssvfiscanf_r+0x26e>
 80059f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80059f8:	0659      	lsls	r1, r3, #25
 80059fa:	d404      	bmi.n	8005a06 <__ssvfiscanf_r+0x1fa>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	781a      	ldrb	r2, [r3, #0]
 8005a00:	5cba      	ldrb	r2, [r7, r2]
 8005a02:	0712      	lsls	r2, r2, #28
 8005a04:	d440      	bmi.n	8005a88 <__ssvfiscanf_r+0x27c>
 8005a06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	dc4f      	bgt.n	8005aac <__ssvfiscanf_r+0x2a0>
 8005a0c:	466b      	mov	r3, sp
 8005a0e:	4622      	mov	r2, r4
 8005a10:	4630      	mov	r0, r6
 8005a12:	a941      	add	r1, sp, #260	; 0x104
 8005a14:	f000 fa0a 	bl	8005e2c <_scanf_chars>
 8005a18:	2801      	cmp	r0, #1
 8005a1a:	d065      	beq.n	8005ae8 <__ssvfiscanf_r+0x2dc>
 8005a1c:	2802      	cmp	r0, #2
 8005a1e:	f47f af1e 	bne.w	800585e <__ssvfiscanf_r+0x52>
 8005a22:	e7cf      	b.n	80059c4 <__ssvfiscanf_r+0x1b8>
 8005a24:	220a      	movs	r2, #10
 8005a26:	e7dd      	b.n	80059e4 <__ssvfiscanf_r+0x1d8>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9342      	str	r3, [sp, #264]	; 0x108
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e7de      	b.n	80059ee <__ssvfiscanf_r+0x1e2>
 8005a30:	2308      	movs	r3, #8
 8005a32:	9342      	str	r3, [sp, #264]	; 0x108
 8005a34:	2304      	movs	r3, #4
 8005a36:	e7da      	b.n	80059ee <__ssvfiscanf_r+0x1e2>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f000 fb40 	bl	80060c0 <__sccl>
 8005a40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a42:	4605      	mov	r5, r0
 8005a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a48:	9341      	str	r3, [sp, #260]	; 0x104
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e7cf      	b.n	80059ee <__ssvfiscanf_r+0x1e2>
 8005a4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a54:	9341      	str	r3, [sp, #260]	; 0x104
 8005a56:	2300      	movs	r3, #0
 8005a58:	e7c9      	b.n	80059ee <__ssvfiscanf_r+0x1e2>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e7c7      	b.n	80059ee <__ssvfiscanf_r+0x1e2>
 8005a5e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005a60:	06c3      	lsls	r3, r0, #27
 8005a62:	f53f aefc 	bmi.w	800585e <__ssvfiscanf_r+0x52>
 8005a66:	9b00      	ldr	r3, [sp, #0]
 8005a68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a6a:	1d19      	adds	r1, r3, #4
 8005a6c:	9100      	str	r1, [sp, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	07c0      	lsls	r0, r0, #31
 8005a72:	bf4c      	ite	mi
 8005a74:	801a      	strhmi	r2, [r3, #0]
 8005a76:	601a      	strpl	r2, [r3, #0]
 8005a78:	e6f1      	b.n	800585e <__ssvfiscanf_r+0x52>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a80:	4798      	blx	r3
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d0b7      	beq.n	80059f6 <__ssvfiscanf_r+0x1ea>
 8005a86:	e79d      	b.n	80059c4 <__ssvfiscanf_r+0x1b8>
 8005a88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a8a:	3201      	adds	r2, #1
 8005a8c:	9245      	str	r2, [sp, #276]	; 0x114
 8005a8e:	6862      	ldr	r2, [r4, #4]
 8005a90:	3a01      	subs	r2, #1
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	6062      	str	r2, [r4, #4]
 8005a96:	dd02      	ble.n	8005a9e <__ssvfiscanf_r+0x292>
 8005a98:	3301      	adds	r3, #1
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	e7ae      	b.n	80059fc <__ssvfiscanf_r+0x1f0>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005aa4:	4798      	blx	r3
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0a8      	beq.n	80059fc <__ssvfiscanf_r+0x1f0>
 8005aaa:	e78b      	b.n	80059c4 <__ssvfiscanf_r+0x1b8>
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	dc06      	bgt.n	8005abe <__ssvfiscanf_r+0x2b2>
 8005ab0:	466b      	mov	r3, sp
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	a941      	add	r1, sp, #260	; 0x104
 8005ab8:	f000 fa10 	bl	8005edc <_scanf_i>
 8005abc:	e7ac      	b.n	8005a18 <__ssvfiscanf_r+0x20c>
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <__ssvfiscanf_r+0x2f0>)
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f43f aecc 	beq.w	800585e <__ssvfiscanf_r+0x52>
 8005ac6:	466b      	mov	r3, sp
 8005ac8:	4622      	mov	r2, r4
 8005aca:	4630      	mov	r0, r6
 8005acc:	a941      	add	r1, sp, #260	; 0x104
 8005ace:	f3af 8000 	nop.w
 8005ad2:	e7a1      	b.n	8005a18 <__ssvfiscanf_r+0x20c>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ada:	bf18      	it	ne
 8005adc:	f04f 30ff 	movne.w	r0, #4294967295
 8005ae0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005aea:	e7f9      	b.n	8005ae0 <__ssvfiscanf_r+0x2d4>
 8005aec:	08005759 	.word	0x08005759
 8005af0:	080057d3 	.word	0x080057d3
 8005af4:	0800683b 	.word	0x0800683b
 8005af8:	080067f2 	.word	0x080067f2
 8005afc:	00000000 	.word	0x00000000

08005b00 <_printf_common>:
 8005b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	4616      	mov	r6, r2
 8005b06:	4699      	mov	r9, r3
 8005b08:	688a      	ldr	r2, [r1, #8]
 8005b0a:	690b      	ldr	r3, [r1, #16]
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	bfb8      	it	lt
 8005b12:	4613      	movlt	r3, r2
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b20:	b10a      	cbz	r2, 8005b26 <_printf_common+0x26>
 8005b22:	3301      	adds	r3, #1
 8005b24:	6033      	str	r3, [r6, #0]
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	0699      	lsls	r1, r3, #26
 8005b2a:	bf42      	ittt	mi
 8005b2c:	6833      	ldrmi	r3, [r6, #0]
 8005b2e:	3302      	addmi	r3, #2
 8005b30:	6033      	strmi	r3, [r6, #0]
 8005b32:	6825      	ldr	r5, [r4, #0]
 8005b34:	f015 0506 	ands.w	r5, r5, #6
 8005b38:	d106      	bne.n	8005b48 <_printf_common+0x48>
 8005b3a:	f104 0a19 	add.w	sl, r4, #25
 8005b3e:	68e3      	ldr	r3, [r4, #12]
 8005b40:	6832      	ldr	r2, [r6, #0]
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	dc28      	bgt.n	8005b9a <_printf_common+0x9a>
 8005b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b4c:	1e13      	subs	r3, r2, #0
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	bf18      	it	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	0692      	lsls	r2, r2, #26
 8005b56:	d42d      	bmi.n	8005bb4 <_printf_common+0xb4>
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b60:	47c0      	blx	r8
 8005b62:	3001      	adds	r0, #1
 8005b64:	d020      	beq.n	8005ba8 <_printf_common+0xa8>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	68e5      	ldr	r5, [r4, #12]
 8005b6a:	f003 0306 	and.w	r3, r3, #6
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	bf18      	it	ne
 8005b72:	2500      	movne	r5, #0
 8005b74:	6832      	ldr	r2, [r6, #0]
 8005b76:	f04f 0600 	mov.w	r6, #0
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	bf08      	it	eq
 8005b7e:	1aad      	subeq	r5, r5, r2
 8005b80:	6922      	ldr	r2, [r4, #16]
 8005b82:	bf08      	it	eq
 8005b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	bfc4      	itt	gt
 8005b8c:	1a9b      	subgt	r3, r3, r2
 8005b8e:	18ed      	addgt	r5, r5, r3
 8005b90:	341a      	adds	r4, #26
 8005b92:	42b5      	cmp	r5, r6
 8005b94:	d11a      	bne.n	8005bcc <_printf_common+0xcc>
 8005b96:	2000      	movs	r0, #0
 8005b98:	e008      	b.n	8005bac <_printf_common+0xac>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	47c0      	blx	r8
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d103      	bne.n	8005bb0 <_printf_common+0xb0>
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	e7c4      	b.n	8005b3e <_printf_common+0x3e>
 8005bb4:	2030      	movs	r0, #48	; 0x30
 8005bb6:	18e1      	adds	r1, r4, r3
 8005bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bc2:	4422      	add	r2, r4
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bca:	e7c5      	b.n	8005b58 <_printf_common+0x58>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4622      	mov	r2, r4
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	47c0      	blx	r8
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d0e6      	beq.n	8005ba8 <_printf_common+0xa8>
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7d9      	b.n	8005b92 <_printf_common+0x92>
	...

08005be0 <_printf_i>:
 8005be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	460c      	mov	r4, r1
 8005be6:	7e27      	ldrb	r7, [r4, #24]
 8005be8:	4691      	mov	r9, r2
 8005bea:	2f78      	cmp	r7, #120	; 0x78
 8005bec:	4680      	mov	r8, r0
 8005bee:	469a      	mov	sl, r3
 8005bf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf6:	d807      	bhi.n	8005c08 <_printf_i+0x28>
 8005bf8:	2f62      	cmp	r7, #98	; 0x62
 8005bfa:	d80a      	bhi.n	8005c12 <_printf_i+0x32>
 8005bfc:	2f00      	cmp	r7, #0
 8005bfe:	f000 80d9 	beq.w	8005db4 <_printf_i+0x1d4>
 8005c02:	2f58      	cmp	r7, #88	; 0x58
 8005c04:	f000 80a4 	beq.w	8005d50 <_printf_i+0x170>
 8005c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c10:	e03a      	b.n	8005c88 <_printf_i+0xa8>
 8005c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c16:	2b15      	cmp	r3, #21
 8005c18:	d8f6      	bhi.n	8005c08 <_printf_i+0x28>
 8005c1a:	a001      	add	r0, pc, #4	; (adr r0, 8005c20 <_printf_i+0x40>)
 8005c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c8d 	.word	0x08005c8d
 8005c28:	08005c09 	.word	0x08005c09
 8005c2c:	08005c09 	.word	0x08005c09
 8005c30:	08005c09 	.word	0x08005c09
 8005c34:	08005c09 	.word	0x08005c09
 8005c38:	08005c8d 	.word	0x08005c8d
 8005c3c:	08005c09 	.word	0x08005c09
 8005c40:	08005c09 	.word	0x08005c09
 8005c44:	08005c09 	.word	0x08005c09
 8005c48:	08005c09 	.word	0x08005c09
 8005c4c:	08005d9b 	.word	0x08005d9b
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005d7d 	.word	0x08005d7d
 8005c58:	08005c09 	.word	0x08005c09
 8005c5c:	08005c09 	.word	0x08005c09
 8005c60:	08005dbd 	.word	0x08005dbd
 8005c64:	08005c09 	.word	0x08005c09
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005c09 	.word	0x08005c09
 8005c70:	08005c09 	.word	0x08005c09
 8005c74:	08005d85 	.word	0x08005d85
 8005c78:	680b      	ldr	r3, [r1, #0]
 8005c7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c7e:	1d1a      	adds	r2, r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	600a      	str	r2, [r1, #0]
 8005c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0a4      	b.n	8005dd6 <_printf_i+0x1f6>
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	6808      	ldr	r0, [r1, #0]
 8005c90:	062e      	lsls	r6, r5, #24
 8005c92:	f100 0304 	add.w	r3, r0, #4
 8005c96:	d50a      	bpl.n	8005cae <_printf_i+0xce>
 8005c98:	6805      	ldr	r5, [r0, #0]
 8005c9a:	600b      	str	r3, [r1, #0]
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	da03      	bge.n	8005ca8 <_printf_i+0xc8>
 8005ca0:	232d      	movs	r3, #45	; 0x2d
 8005ca2:	426d      	negs	r5, r5
 8005ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca8:	230a      	movs	r3, #10
 8005caa:	485e      	ldr	r0, [pc, #376]	; (8005e24 <_printf_i+0x244>)
 8005cac:	e019      	b.n	8005ce2 <_printf_i+0x102>
 8005cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cb2:	6805      	ldr	r5, [r0, #0]
 8005cb4:	600b      	str	r3, [r1, #0]
 8005cb6:	bf18      	it	ne
 8005cb8:	b22d      	sxthne	r5, r5
 8005cba:	e7ef      	b.n	8005c9c <_printf_i+0xbc>
 8005cbc:	680b      	ldr	r3, [r1, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	1d18      	adds	r0, r3, #4
 8005cc2:	6008      	str	r0, [r1, #0]
 8005cc4:	0628      	lsls	r0, r5, #24
 8005cc6:	d501      	bpl.n	8005ccc <_printf_i+0xec>
 8005cc8:	681d      	ldr	r5, [r3, #0]
 8005cca:	e002      	b.n	8005cd2 <_printf_i+0xf2>
 8005ccc:	0669      	lsls	r1, r5, #25
 8005cce:	d5fb      	bpl.n	8005cc8 <_printf_i+0xe8>
 8005cd0:	881d      	ldrh	r5, [r3, #0]
 8005cd2:	2f6f      	cmp	r7, #111	; 0x6f
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2308      	moveq	r3, #8
 8005cd8:	230a      	movne	r3, #10
 8005cda:	4852      	ldr	r0, [pc, #328]	; (8005e24 <_printf_i+0x244>)
 8005cdc:	2100      	movs	r1, #0
 8005cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ce2:	6866      	ldr	r6, [r4, #4]
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	bfa8      	it	ge
 8005ce8:	6821      	ldrge	r1, [r4, #0]
 8005cea:	60a6      	str	r6, [r4, #8]
 8005cec:	bfa4      	itt	ge
 8005cee:	f021 0104 	bicge.w	r1, r1, #4
 8005cf2:	6021      	strge	r1, [r4, #0]
 8005cf4:	b90d      	cbnz	r5, 8005cfa <_printf_i+0x11a>
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d04d      	beq.n	8005d96 <_printf_i+0x1b6>
 8005cfa:	4616      	mov	r6, r2
 8005cfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d00:	fb03 5711 	mls	r7, r3, r1, r5
 8005d04:	5dc7      	ldrb	r7, [r0, r7]
 8005d06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d0a:	462f      	mov	r7, r5
 8005d0c:	42bb      	cmp	r3, r7
 8005d0e:	460d      	mov	r5, r1
 8005d10:	d9f4      	bls.n	8005cfc <_printf_i+0x11c>
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d10b      	bne.n	8005d2e <_printf_i+0x14e>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	07df      	lsls	r7, r3, #31
 8005d1a:	d508      	bpl.n	8005d2e <_printf_i+0x14e>
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	6861      	ldr	r1, [r4, #4]
 8005d20:	4299      	cmp	r1, r3
 8005d22:	bfde      	ittt	le
 8005d24:	2330      	movle	r3, #48	; 0x30
 8005d26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d2e:	1b92      	subs	r2, r2, r6
 8005d30:	6122      	str	r2, [r4, #16]
 8005d32:	464b      	mov	r3, r9
 8005d34:	4621      	mov	r1, r4
 8005d36:	4640      	mov	r0, r8
 8005d38:	f8cd a000 	str.w	sl, [sp]
 8005d3c:	aa03      	add	r2, sp, #12
 8005d3e:	f7ff fedf 	bl	8005b00 <_printf_common>
 8005d42:	3001      	adds	r0, #1
 8005d44:	d14c      	bne.n	8005de0 <_printf_i+0x200>
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	b004      	add	sp, #16
 8005d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d50:	4834      	ldr	r0, [pc, #208]	; (8005e24 <_printf_i+0x244>)
 8005d52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d56:	680e      	ldr	r6, [r1, #0]
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d5e:	061f      	lsls	r7, r3, #24
 8005d60:	600e      	str	r6, [r1, #0]
 8005d62:	d514      	bpl.n	8005d8e <_printf_i+0x1ae>
 8005d64:	07d9      	lsls	r1, r3, #31
 8005d66:	bf44      	itt	mi
 8005d68:	f043 0320 	orrmi.w	r3, r3, #32
 8005d6c:	6023      	strmi	r3, [r4, #0]
 8005d6e:	b91d      	cbnz	r5, 8005d78 <_printf_i+0x198>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	f023 0320 	bic.w	r3, r3, #32
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	2310      	movs	r3, #16
 8005d7a:	e7af      	b.n	8005cdc <_printf_i+0xfc>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	f043 0320 	orr.w	r3, r3, #32
 8005d82:	6023      	str	r3, [r4, #0]
 8005d84:	2378      	movs	r3, #120	; 0x78
 8005d86:	4828      	ldr	r0, [pc, #160]	; (8005e28 <_printf_i+0x248>)
 8005d88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d8c:	e7e3      	b.n	8005d56 <_printf_i+0x176>
 8005d8e:	065e      	lsls	r6, r3, #25
 8005d90:	bf48      	it	mi
 8005d92:	b2ad      	uxthmi	r5, r5
 8005d94:	e7e6      	b.n	8005d64 <_printf_i+0x184>
 8005d96:	4616      	mov	r6, r2
 8005d98:	e7bb      	b.n	8005d12 <_printf_i+0x132>
 8005d9a:	680b      	ldr	r3, [r1, #0]
 8005d9c:	6826      	ldr	r6, [r4, #0]
 8005d9e:	1d1d      	adds	r5, r3, #4
 8005da0:	6960      	ldr	r0, [r4, #20]
 8005da2:	600d      	str	r5, [r1, #0]
 8005da4:	0635      	lsls	r5, r6, #24
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	d501      	bpl.n	8005dae <_printf_i+0x1ce>
 8005daa:	6018      	str	r0, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <_printf_i+0x1d4>
 8005dae:	0671      	lsls	r1, r6, #25
 8005db0:	d5fb      	bpl.n	8005daa <_printf_i+0x1ca>
 8005db2:	8018      	strh	r0, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	4616      	mov	r6, r2
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	e7ba      	b.n	8005d32 <_printf_i+0x152>
 8005dbc:	680b      	ldr	r3, [r1, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	600a      	str	r2, [r1, #0]
 8005dc2:	681e      	ldr	r6, [r3, #0]
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	6862      	ldr	r2, [r4, #4]
 8005dca:	f000 faf3 	bl	80063b4 <memchr>
 8005dce:	b108      	cbz	r0, 8005dd4 <_printf_i+0x1f4>
 8005dd0:	1b80      	subs	r0, r0, r6
 8005dd2:	6060      	str	r0, [r4, #4]
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dde:	e7a8      	b.n	8005d32 <_printf_i+0x152>
 8005de0:	4632      	mov	r2, r6
 8005de2:	4649      	mov	r1, r9
 8005de4:	4640      	mov	r0, r8
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	47d0      	blx	sl
 8005dea:	3001      	adds	r0, #1
 8005dec:	d0ab      	beq.n	8005d46 <_printf_i+0x166>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	079b      	lsls	r3, r3, #30
 8005df2:	d413      	bmi.n	8005e1c <_printf_i+0x23c>
 8005df4:	68e0      	ldr	r0, [r4, #12]
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	4298      	cmp	r0, r3
 8005dfa:	bfb8      	it	lt
 8005dfc:	4618      	movlt	r0, r3
 8005dfe:	e7a4      	b.n	8005d4a <_printf_i+0x16a>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4632      	mov	r2, r6
 8005e04:	4649      	mov	r1, r9
 8005e06:	4640      	mov	r0, r8
 8005e08:	47d0      	blx	sl
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d09b      	beq.n	8005d46 <_printf_i+0x166>
 8005e0e:	3501      	adds	r5, #1
 8005e10:	68e3      	ldr	r3, [r4, #12]
 8005e12:	9903      	ldr	r1, [sp, #12]
 8005e14:	1a5b      	subs	r3, r3, r1
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	dcf2      	bgt.n	8005e00 <_printf_i+0x220>
 8005e1a:	e7eb      	b.n	8005df4 <_printf_i+0x214>
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	f104 0619 	add.w	r6, r4, #25
 8005e22:	e7f5      	b.n	8005e10 <_printf_i+0x230>
 8005e24:	080067fd 	.word	0x080067fd
 8005e28:	0800680e 	.word	0x0800680e

08005e2c <_scanf_chars>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	4615      	mov	r5, r2
 8005e32:	688a      	ldr	r2, [r1, #8]
 8005e34:	4680      	mov	r8, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	b932      	cbnz	r2, 8005e48 <_scanf_chars+0x1c>
 8005e3a:	698a      	ldr	r2, [r1, #24]
 8005e3c:	2a00      	cmp	r2, #0
 8005e3e:	bf0c      	ite	eq
 8005e40:	2201      	moveq	r2, #1
 8005e42:	f04f 32ff 	movne.w	r2, #4294967295
 8005e46:	608a      	str	r2, [r1, #8]
 8005e48:	2700      	movs	r7, #0
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005ed8 <_scanf_chars+0xac>
 8005e50:	06d1      	lsls	r1, r2, #27
 8005e52:	bf5f      	itttt	pl
 8005e54:	681a      	ldrpl	r2, [r3, #0]
 8005e56:	1d11      	addpl	r1, r2, #4
 8005e58:	6019      	strpl	r1, [r3, #0]
 8005e5a:	6816      	ldrpl	r6, [r2, #0]
 8005e5c:	69a0      	ldr	r0, [r4, #24]
 8005e5e:	b188      	cbz	r0, 8005e84 <_scanf_chars+0x58>
 8005e60:	2801      	cmp	r0, #1
 8005e62:	d107      	bne.n	8005e74 <_scanf_chars+0x48>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	6963      	ldr	r3, [r4, #20]
 8005e6a:	5c9b      	ldrb	r3, [r3, r2]
 8005e6c:	b953      	cbnz	r3, 8005e84 <_scanf_chars+0x58>
 8005e6e:	bb27      	cbnz	r7, 8005eba <_scanf_chars+0x8e>
 8005e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e74:	2802      	cmp	r0, #2
 8005e76:	d120      	bne.n	8005eba <_scanf_chars+0x8e>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005e80:	071b      	lsls	r3, r3, #28
 8005e82:	d41a      	bmi.n	8005eba <_scanf_chars+0x8e>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	3701      	adds	r7, #1
 8005e88:	06da      	lsls	r2, r3, #27
 8005e8a:	bf5e      	ittt	pl
 8005e8c:	682b      	ldrpl	r3, [r5, #0]
 8005e8e:	781b      	ldrbpl	r3, [r3, #0]
 8005e90:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005e94:	682a      	ldr	r2, [r5, #0]
 8005e96:	686b      	ldr	r3, [r5, #4]
 8005e98:	3201      	adds	r2, #1
 8005e9a:	602a      	str	r2, [r5, #0]
 8005e9c:	68a2      	ldr	r2, [r4, #8]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	606b      	str	r3, [r5, #4]
 8005ea4:	60a2      	str	r2, [r4, #8]
 8005ea6:	b142      	cbz	r2, 8005eba <_scanf_chars+0x8e>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dcd7      	bgt.n	8005e5c <_scanf_chars+0x30>
 8005eac:	4629      	mov	r1, r5
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005eb4:	4798      	blx	r3
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0d0      	beq.n	8005e5c <_scanf_chars+0x30>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f013 0310 	ands.w	r3, r3, #16
 8005ec0:	d105      	bne.n	8005ece <_scanf_chars+0xa2>
 8005ec2:	68e2      	ldr	r2, [r4, #12]
 8005ec4:	3201      	adds	r2, #1
 8005ec6:	60e2      	str	r2, [r4, #12]
 8005ec8:	69a2      	ldr	r2, [r4, #24]
 8005eca:	b102      	cbz	r2, 8005ece <_scanf_chars+0xa2>
 8005ecc:	7033      	strb	r3, [r6, #0]
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	441f      	add	r7, r3
 8005ed4:	6127      	str	r7, [r4, #16]
 8005ed6:	e7cb      	b.n	8005e70 <_scanf_chars+0x44>
 8005ed8:	0800683b 	.word	0x0800683b

08005edc <_scanf_i>:
 8005edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	4698      	mov	r8, r3
 8005ee4:	4b72      	ldr	r3, [pc, #456]	; (80060b0 <_scanf_i+0x1d4>)
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	4682      	mov	sl, r0
 8005eea:	4616      	mov	r6, r2
 8005eec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ef0:	ab03      	add	r3, sp, #12
 8005ef2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ef6:	4b6f      	ldr	r3, [pc, #444]	; (80060b4 <_scanf_i+0x1d8>)
 8005ef8:	69a1      	ldr	r1, [r4, #24]
 8005efa:	4a6f      	ldr	r2, [pc, #444]	; (80060b8 <_scanf_i+0x1dc>)
 8005efc:	4627      	mov	r7, r4
 8005efe:	2903      	cmp	r1, #3
 8005f00:	bf18      	it	ne
 8005f02:	461a      	movne	r2, r3
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f0e:	bf81      	itttt	hi
 8005f10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f14:	eb03 0905 	addhi.w	r9, r3, r5
 8005f18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f1c:	60a3      	strhi	r3, [r4, #8]
 8005f1e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005f22:	bf98      	it	ls
 8005f24:	f04f 0900 	movls.w	r9, #0
 8005f28:	463d      	mov	r5, r7
 8005f2a:	f04f 0b00 	mov.w	fp, #0
 8005f2e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	6831      	ldr	r1, [r6, #0]
 8005f36:	ab03      	add	r3, sp, #12
 8005f38:	2202      	movs	r2, #2
 8005f3a:	7809      	ldrb	r1, [r1, #0]
 8005f3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005f40:	f000 fa38 	bl	80063b4 <memchr>
 8005f44:	b328      	cbz	r0, 8005f92 <_scanf_i+0xb6>
 8005f46:	f1bb 0f01 	cmp.w	fp, #1
 8005f4a:	d159      	bne.n	8006000 <_scanf_i+0x124>
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	b92a      	cbnz	r2, 8005f5c <_scanf_i+0x80>
 8005f50:	2308      	movs	r3, #8
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	6063      	str	r3, [r4, #4]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	6022      	str	r2, [r4, #0]
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005f62:	6022      	str	r2, [r4, #0]
 8005f64:	68a2      	ldr	r2, [r4, #8]
 8005f66:	1e51      	subs	r1, r2, #1
 8005f68:	60a1      	str	r1, [r4, #8]
 8005f6a:	b192      	cbz	r2, 8005f92 <_scanf_i+0xb6>
 8005f6c:	6832      	ldr	r2, [r6, #0]
 8005f6e:	1c51      	adds	r1, r2, #1
 8005f70:	6031      	str	r1, [r6, #0]
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	f805 2b01 	strb.w	r2, [r5], #1
 8005f78:	6872      	ldr	r2, [r6, #4]
 8005f7a:	3a01      	subs	r2, #1
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	6072      	str	r2, [r6, #4]
 8005f80:	dc07      	bgt.n	8005f92 <_scanf_i+0xb6>
 8005f82:	4631      	mov	r1, r6
 8005f84:	4650      	mov	r0, sl
 8005f86:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005f8a:	4790      	blx	r2
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f040 8085 	bne.w	800609c <_scanf_i+0x1c0>
 8005f92:	f10b 0b01 	add.w	fp, fp, #1
 8005f96:	f1bb 0f03 	cmp.w	fp, #3
 8005f9a:	d1cb      	bne.n	8005f34 <_scanf_i+0x58>
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	b90b      	cbnz	r3, 8005fa4 <_scanf_i+0xc8>
 8005fa0:	230a      	movs	r3, #10
 8005fa2:	6063      	str	r3, [r4, #4]
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	4945      	ldr	r1, [pc, #276]	; (80060bc <_scanf_i+0x1e0>)
 8005fa8:	6960      	ldr	r0, [r4, #20]
 8005faa:	1ac9      	subs	r1, r1, r3
 8005fac:	f000 f888 	bl	80060c0 <__sccl>
 8005fb0:	f04f 0b00 	mov.w	fp, #0
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d03d      	beq.n	8006038 <_scanf_i+0x15c>
 8005fbc:	6831      	ldr	r1, [r6, #0]
 8005fbe:	6960      	ldr	r0, [r4, #20]
 8005fc0:	f891 c000 	ldrb.w	ip, [r1]
 8005fc4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d035      	beq.n	8006038 <_scanf_i+0x15c>
 8005fcc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005fd0:	d124      	bne.n	800601c <_scanf_i+0x140>
 8005fd2:	0510      	lsls	r0, r2, #20
 8005fd4:	d522      	bpl.n	800601c <_scanf_i+0x140>
 8005fd6:	f10b 0b01 	add.w	fp, fp, #1
 8005fda:	f1b9 0f00 	cmp.w	r9, #0
 8005fde:	d003      	beq.n	8005fe8 <_scanf_i+0x10c>
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	f109 39ff 	add.w	r9, r9, #4294967295
 8005fe6:	60a3      	str	r3, [r4, #8]
 8005fe8:	6873      	ldr	r3, [r6, #4]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	6073      	str	r3, [r6, #4]
 8005ff0:	dd1b      	ble.n	800602a <_scanf_i+0x14e>
 8005ff2:	6833      	ldr	r3, [r6, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	68a3      	ldr	r3, [r4, #8]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	e7d9      	b.n	8005fb4 <_scanf_i+0xd8>
 8006000:	f1bb 0f02 	cmp.w	fp, #2
 8006004:	d1ae      	bne.n	8005f64 <_scanf_i+0x88>
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800600c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006010:	d1bf      	bne.n	8005f92 <_scanf_i+0xb6>
 8006012:	2310      	movs	r3, #16
 8006014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	e7a2      	b.n	8005f62 <_scanf_i+0x86>
 800601c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006020:	6022      	str	r2, [r4, #0]
 8006022:	780b      	ldrb	r3, [r1, #0]
 8006024:	f805 3b01 	strb.w	r3, [r5], #1
 8006028:	e7de      	b.n	8005fe8 <_scanf_i+0x10c>
 800602a:	4631      	mov	r1, r6
 800602c:	4650      	mov	r0, sl
 800602e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006032:	4798      	blx	r3
 8006034:	2800      	cmp	r0, #0
 8006036:	d0df      	beq.n	8005ff8 <_scanf_i+0x11c>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	05d9      	lsls	r1, r3, #23
 800603c:	d50d      	bpl.n	800605a <_scanf_i+0x17e>
 800603e:	42bd      	cmp	r5, r7
 8006040:	d909      	bls.n	8006056 <_scanf_i+0x17a>
 8006042:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006046:	4632      	mov	r2, r6
 8006048:	4650      	mov	r0, sl
 800604a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800604e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006052:	4798      	blx	r3
 8006054:	464d      	mov	r5, r9
 8006056:	42bd      	cmp	r5, r7
 8006058:	d028      	beq.n	80060ac <_scanf_i+0x1d0>
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	f012 0210 	ands.w	r2, r2, #16
 8006060:	d113      	bne.n	800608a <_scanf_i+0x1ae>
 8006062:	702a      	strb	r2, [r5, #0]
 8006064:	4639      	mov	r1, r7
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	4650      	mov	r0, sl
 800606a:	9e01      	ldr	r6, [sp, #4]
 800606c:	47b0      	blx	r6
 800606e:	f8d8 3000 	ldr.w	r3, [r8]
 8006072:	6821      	ldr	r1, [r4, #0]
 8006074:	1d1a      	adds	r2, r3, #4
 8006076:	f8c8 2000 	str.w	r2, [r8]
 800607a:	f011 0f20 	tst.w	r1, #32
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	d00f      	beq.n	80060a2 <_scanf_i+0x1c6>
 8006082:	6018      	str	r0, [r3, #0]
 8006084:	68e3      	ldr	r3, [r4, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60e3      	str	r3, [r4, #12]
 800608a:	2000      	movs	r0, #0
 800608c:	1bed      	subs	r5, r5, r7
 800608e:	44ab      	add	fp, r5
 8006090:	6925      	ldr	r5, [r4, #16]
 8006092:	445d      	add	r5, fp
 8006094:	6125      	str	r5, [r4, #16]
 8006096:	b007      	add	sp, #28
 8006098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609c:	f04f 0b00 	mov.w	fp, #0
 80060a0:	e7ca      	b.n	8006038 <_scanf_i+0x15c>
 80060a2:	07ca      	lsls	r2, r1, #31
 80060a4:	bf4c      	ite	mi
 80060a6:	8018      	strhmi	r0, [r3, #0]
 80060a8:	6018      	strpl	r0, [r3, #0]
 80060aa:	e7eb      	b.n	8006084 <_scanf_i+0x1a8>
 80060ac:	2001      	movs	r0, #1
 80060ae:	e7f2      	b.n	8006096 <_scanf_i+0x1ba>
 80060b0:	080067c8 	.word	0x080067c8
 80060b4:	0800633d 	.word	0x0800633d
 80060b8:	08006241 	.word	0x08006241
 80060bc:	08006838 	.word	0x08006838

080060c0 <__sccl>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	780b      	ldrb	r3, [r1, #0]
 80060c4:	4604      	mov	r4, r0
 80060c6:	2b5e      	cmp	r3, #94	; 0x5e
 80060c8:	bf13      	iteet	ne
 80060ca:	2200      	movne	r2, #0
 80060cc:	2201      	moveq	r2, #1
 80060ce:	784b      	ldrbeq	r3, [r1, #1]
 80060d0:	1c48      	addne	r0, r1, #1
 80060d2:	bf08      	it	eq
 80060d4:	1c88      	addeq	r0, r1, #2
 80060d6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80060da:	1e61      	subs	r1, r4, #1
 80060dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80060e0:	42a9      	cmp	r1, r5
 80060e2:	d1fb      	bne.n	80060dc <__sccl+0x1c>
 80060e4:	b90b      	cbnz	r3, 80060ea <__sccl+0x2a>
 80060e6:	3801      	subs	r0, #1
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	f082 0101 	eor.w	r1, r2, #1
 80060ee:	54e1      	strb	r1, [r4, r3]
 80060f0:	1c42      	adds	r2, r0, #1
 80060f2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80060f6:	4610      	mov	r0, r2
 80060f8:	2d2d      	cmp	r5, #45	; 0x2d
 80060fa:	f102 36ff 	add.w	r6, r2, #4294967295
 80060fe:	d006      	beq.n	800610e <__sccl+0x4e>
 8006100:	2d5d      	cmp	r5, #93	; 0x5d
 8006102:	d0f1      	beq.n	80060e8 <__sccl+0x28>
 8006104:	b90d      	cbnz	r5, 800610a <__sccl+0x4a>
 8006106:	4630      	mov	r0, r6
 8006108:	e7ee      	b.n	80060e8 <__sccl+0x28>
 800610a:	462b      	mov	r3, r5
 800610c:	e7ef      	b.n	80060ee <__sccl+0x2e>
 800610e:	7816      	ldrb	r6, [r2, #0]
 8006110:	2e5d      	cmp	r6, #93	; 0x5d
 8006112:	d0fa      	beq.n	800610a <__sccl+0x4a>
 8006114:	42b3      	cmp	r3, r6
 8006116:	dcf8      	bgt.n	800610a <__sccl+0x4a>
 8006118:	4618      	mov	r0, r3
 800611a:	3001      	adds	r0, #1
 800611c:	4286      	cmp	r6, r0
 800611e:	5421      	strb	r1, [r4, r0]
 8006120:	dcfb      	bgt.n	800611a <__sccl+0x5a>
 8006122:	43d8      	mvns	r0, r3
 8006124:	4430      	add	r0, r6
 8006126:	42b3      	cmp	r3, r6
 8006128:	bfa8      	it	ge
 800612a:	2000      	movge	r0, #0
 800612c:	1c5d      	adds	r5, r3, #1
 800612e:	182b      	adds	r3, r5, r0
 8006130:	3202      	adds	r2, #2
 8006132:	e7de      	b.n	80060f2 <__sccl+0x32>

08006134 <_strtol_l.isra.0>:
 8006134:	2b01      	cmp	r3, #1
 8006136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613a:	4686      	mov	lr, r0
 800613c:	d001      	beq.n	8006142 <_strtol_l.isra.0+0xe>
 800613e:	2b24      	cmp	r3, #36	; 0x24
 8006140:	d906      	bls.n	8006150 <_strtol_l.isra.0+0x1c>
 8006142:	f7ff f8f5 	bl	8005330 <__errno>
 8006146:	2316      	movs	r3, #22
 8006148:	6003      	str	r3, [r0, #0]
 800614a:	2000      	movs	r0, #0
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	468c      	mov	ip, r1
 8006152:	4e3a      	ldr	r6, [pc, #232]	; (800623c <_strtol_l.isra.0+0x108>)
 8006154:	4660      	mov	r0, ip
 8006156:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800615a:	5da5      	ldrb	r5, [r4, r6]
 800615c:	f015 0508 	ands.w	r5, r5, #8
 8006160:	d1f8      	bne.n	8006154 <_strtol_l.isra.0+0x20>
 8006162:	2c2d      	cmp	r4, #45	; 0x2d
 8006164:	d133      	bne.n	80061ce <_strtol_l.isra.0+0x9a>
 8006166:	f04f 0801 	mov.w	r8, #1
 800616a:	f89c 4000 	ldrb.w	r4, [ip]
 800616e:	f100 0c02 	add.w	ip, r0, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d05d      	beq.n	8006232 <_strtol_l.isra.0+0xfe>
 8006176:	2b10      	cmp	r3, #16
 8006178:	d10c      	bne.n	8006194 <_strtol_l.isra.0+0x60>
 800617a:	2c30      	cmp	r4, #48	; 0x30
 800617c:	d10a      	bne.n	8006194 <_strtol_l.isra.0+0x60>
 800617e:	f89c 0000 	ldrb.w	r0, [ip]
 8006182:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006186:	2858      	cmp	r0, #88	; 0x58
 8006188:	d14e      	bne.n	8006228 <_strtol_l.isra.0+0xf4>
 800618a:	2310      	movs	r3, #16
 800618c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006190:	f10c 0c02 	add.w	ip, ip, #2
 8006194:	2500      	movs	r5, #0
 8006196:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800619a:	3f01      	subs	r7, #1
 800619c:	fbb7 f9f3 	udiv	r9, r7, r3
 80061a0:	4628      	mov	r0, r5
 80061a2:	fb03 7a19 	mls	sl, r3, r9, r7
 80061a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80061aa:	2e09      	cmp	r6, #9
 80061ac:	d818      	bhi.n	80061e0 <_strtol_l.isra.0+0xac>
 80061ae:	4634      	mov	r4, r6
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	dd24      	ble.n	80061fe <_strtol_l.isra.0+0xca>
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	db1f      	blt.n	80061f8 <_strtol_l.isra.0+0xc4>
 80061b8:	4581      	cmp	r9, r0
 80061ba:	d31d      	bcc.n	80061f8 <_strtol_l.isra.0+0xc4>
 80061bc:	d101      	bne.n	80061c2 <_strtol_l.isra.0+0x8e>
 80061be:	45a2      	cmp	sl, r4
 80061c0:	db1a      	blt.n	80061f8 <_strtol_l.isra.0+0xc4>
 80061c2:	2501      	movs	r5, #1
 80061c4:	fb00 4003 	mla	r0, r0, r3, r4
 80061c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80061cc:	e7eb      	b.n	80061a6 <_strtol_l.isra.0+0x72>
 80061ce:	2c2b      	cmp	r4, #43	; 0x2b
 80061d0:	bf08      	it	eq
 80061d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80061d6:	46a8      	mov	r8, r5
 80061d8:	bf08      	it	eq
 80061da:	f100 0c02 	addeq.w	ip, r0, #2
 80061de:	e7c8      	b.n	8006172 <_strtol_l.isra.0+0x3e>
 80061e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80061e4:	2e19      	cmp	r6, #25
 80061e6:	d801      	bhi.n	80061ec <_strtol_l.isra.0+0xb8>
 80061e8:	3c37      	subs	r4, #55	; 0x37
 80061ea:	e7e1      	b.n	80061b0 <_strtol_l.isra.0+0x7c>
 80061ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80061f0:	2e19      	cmp	r6, #25
 80061f2:	d804      	bhi.n	80061fe <_strtol_l.isra.0+0xca>
 80061f4:	3c57      	subs	r4, #87	; 0x57
 80061f6:	e7db      	b.n	80061b0 <_strtol_l.isra.0+0x7c>
 80061f8:	f04f 35ff 	mov.w	r5, #4294967295
 80061fc:	e7e4      	b.n	80061c8 <_strtol_l.isra.0+0x94>
 80061fe:	2d00      	cmp	r5, #0
 8006200:	da08      	bge.n	8006214 <_strtol_l.isra.0+0xe0>
 8006202:	2322      	movs	r3, #34	; 0x22
 8006204:	4638      	mov	r0, r7
 8006206:	f8ce 3000 	str.w	r3, [lr]
 800620a:	2a00      	cmp	r2, #0
 800620c:	d09e      	beq.n	800614c <_strtol_l.isra.0+0x18>
 800620e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006212:	e007      	b.n	8006224 <_strtol_l.isra.0+0xf0>
 8006214:	f1b8 0f00 	cmp.w	r8, #0
 8006218:	d000      	beq.n	800621c <_strtol_l.isra.0+0xe8>
 800621a:	4240      	negs	r0, r0
 800621c:	2a00      	cmp	r2, #0
 800621e:	d095      	beq.n	800614c <_strtol_l.isra.0+0x18>
 8006220:	2d00      	cmp	r5, #0
 8006222:	d1f4      	bne.n	800620e <_strtol_l.isra.0+0xda>
 8006224:	6011      	str	r1, [r2, #0]
 8006226:	e791      	b.n	800614c <_strtol_l.isra.0+0x18>
 8006228:	2430      	movs	r4, #48	; 0x30
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1b2      	bne.n	8006194 <_strtol_l.isra.0+0x60>
 800622e:	2308      	movs	r3, #8
 8006230:	e7b0      	b.n	8006194 <_strtol_l.isra.0+0x60>
 8006232:	2c30      	cmp	r4, #48	; 0x30
 8006234:	d0a3      	beq.n	800617e <_strtol_l.isra.0+0x4a>
 8006236:	230a      	movs	r3, #10
 8006238:	e7ac      	b.n	8006194 <_strtol_l.isra.0+0x60>
 800623a:	bf00      	nop
 800623c:	0800683b 	.word	0x0800683b

08006240 <_strtol_r>:
 8006240:	f7ff bf78 	b.w	8006134 <_strtol_l.isra.0>

08006244 <_strtoul_l.isra.0>:
 8006244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006248:	468c      	mov	ip, r1
 800624a:	4686      	mov	lr, r0
 800624c:	4e3a      	ldr	r6, [pc, #232]	; (8006338 <_strtoul_l.isra.0+0xf4>)
 800624e:	4660      	mov	r0, ip
 8006250:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006254:	5da5      	ldrb	r5, [r4, r6]
 8006256:	f015 0508 	ands.w	r5, r5, #8
 800625a:	d1f8      	bne.n	800624e <_strtoul_l.isra.0+0xa>
 800625c:	2c2d      	cmp	r4, #45	; 0x2d
 800625e:	d134      	bne.n	80062ca <_strtoul_l.isra.0+0x86>
 8006260:	f04f 0801 	mov.w	r8, #1
 8006264:	f89c 4000 	ldrb.w	r4, [ip]
 8006268:	f100 0c02 	add.w	ip, r0, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d05e      	beq.n	800632e <_strtoul_l.isra.0+0xea>
 8006270:	2b10      	cmp	r3, #16
 8006272:	d10c      	bne.n	800628e <_strtoul_l.isra.0+0x4a>
 8006274:	2c30      	cmp	r4, #48	; 0x30
 8006276:	d10a      	bne.n	800628e <_strtoul_l.isra.0+0x4a>
 8006278:	f89c 0000 	ldrb.w	r0, [ip]
 800627c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006280:	2858      	cmp	r0, #88	; 0x58
 8006282:	d14f      	bne.n	8006324 <_strtoul_l.isra.0+0xe0>
 8006284:	2310      	movs	r3, #16
 8006286:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800628a:	f10c 0c02 	add.w	ip, ip, #2
 800628e:	f04f 37ff 	mov.w	r7, #4294967295
 8006292:	fbb7 f7f3 	udiv	r7, r7, r3
 8006296:	2500      	movs	r5, #0
 8006298:	fb03 f907 	mul.w	r9, r3, r7
 800629c:	4628      	mov	r0, r5
 800629e:	ea6f 0909 	mvn.w	r9, r9
 80062a2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80062a6:	2e09      	cmp	r6, #9
 80062a8:	d818      	bhi.n	80062dc <_strtoul_l.isra.0+0x98>
 80062aa:	4634      	mov	r4, r6
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	dd24      	ble.n	80062fa <_strtoul_l.isra.0+0xb6>
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	db1f      	blt.n	80062f4 <_strtoul_l.isra.0+0xb0>
 80062b4:	4287      	cmp	r7, r0
 80062b6:	d31d      	bcc.n	80062f4 <_strtoul_l.isra.0+0xb0>
 80062b8:	d101      	bne.n	80062be <_strtoul_l.isra.0+0x7a>
 80062ba:	45a1      	cmp	r9, r4
 80062bc:	db1a      	blt.n	80062f4 <_strtoul_l.isra.0+0xb0>
 80062be:	2501      	movs	r5, #1
 80062c0:	fb00 4003 	mla	r0, r0, r3, r4
 80062c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80062c8:	e7eb      	b.n	80062a2 <_strtoul_l.isra.0+0x5e>
 80062ca:	2c2b      	cmp	r4, #43	; 0x2b
 80062cc:	bf08      	it	eq
 80062ce:	f89c 4000 	ldrbeq.w	r4, [ip]
 80062d2:	46a8      	mov	r8, r5
 80062d4:	bf08      	it	eq
 80062d6:	f100 0c02 	addeq.w	ip, r0, #2
 80062da:	e7c7      	b.n	800626c <_strtoul_l.isra.0+0x28>
 80062dc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80062e0:	2e19      	cmp	r6, #25
 80062e2:	d801      	bhi.n	80062e8 <_strtoul_l.isra.0+0xa4>
 80062e4:	3c37      	subs	r4, #55	; 0x37
 80062e6:	e7e1      	b.n	80062ac <_strtoul_l.isra.0+0x68>
 80062e8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80062ec:	2e19      	cmp	r6, #25
 80062ee:	d804      	bhi.n	80062fa <_strtoul_l.isra.0+0xb6>
 80062f0:	3c57      	subs	r4, #87	; 0x57
 80062f2:	e7db      	b.n	80062ac <_strtoul_l.isra.0+0x68>
 80062f4:	f04f 35ff 	mov.w	r5, #4294967295
 80062f8:	e7e4      	b.n	80062c4 <_strtoul_l.isra.0+0x80>
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	da07      	bge.n	800630e <_strtoul_l.isra.0+0xca>
 80062fe:	2322      	movs	r3, #34	; 0x22
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	f8ce 3000 	str.w	r3, [lr]
 8006308:	b942      	cbnz	r2, 800631c <_strtoul_l.isra.0+0xd8>
 800630a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800630e:	f1b8 0f00 	cmp.w	r8, #0
 8006312:	d000      	beq.n	8006316 <_strtoul_l.isra.0+0xd2>
 8006314:	4240      	negs	r0, r0
 8006316:	2a00      	cmp	r2, #0
 8006318:	d0f7      	beq.n	800630a <_strtoul_l.isra.0+0xc6>
 800631a:	b10d      	cbz	r5, 8006320 <_strtoul_l.isra.0+0xdc>
 800631c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006320:	6011      	str	r1, [r2, #0]
 8006322:	e7f2      	b.n	800630a <_strtoul_l.isra.0+0xc6>
 8006324:	2430      	movs	r4, #48	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1b1      	bne.n	800628e <_strtoul_l.isra.0+0x4a>
 800632a:	2308      	movs	r3, #8
 800632c:	e7af      	b.n	800628e <_strtoul_l.isra.0+0x4a>
 800632e:	2c30      	cmp	r4, #48	; 0x30
 8006330:	d0a2      	beq.n	8006278 <_strtoul_l.isra.0+0x34>
 8006332:	230a      	movs	r3, #10
 8006334:	e7ab      	b.n	800628e <_strtoul_l.isra.0+0x4a>
 8006336:	bf00      	nop
 8006338:	0800683b 	.word	0x0800683b

0800633c <_strtoul_r>:
 800633c:	f7ff bf82 	b.w	8006244 <_strtoul_l.isra.0>

08006340 <__submore>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	460c      	mov	r4, r1
 8006346:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800634c:	4299      	cmp	r1, r3
 800634e:	d11b      	bne.n	8006388 <__submore+0x48>
 8006350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006354:	f000 f896 	bl	8006484 <_malloc_r>
 8006358:	b918      	cbnz	r0, 8006362 <__submore+0x22>
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006366:	63a3      	str	r3, [r4, #56]	; 0x38
 8006368:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800636c:	6360      	str	r0, [r4, #52]	; 0x34
 800636e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006372:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006376:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800637a:	7043      	strb	r3, [r0, #1]
 800637c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006380:	7003      	strb	r3, [r0, #0]
 8006382:	6020      	str	r0, [r4, #0]
 8006384:	2000      	movs	r0, #0
 8006386:	e7ea      	b.n	800635e <__submore+0x1e>
 8006388:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800638a:	0077      	lsls	r7, r6, #1
 800638c:	463a      	mov	r2, r7
 800638e:	f000 f8d3 	bl	8006538 <_realloc_r>
 8006392:	4605      	mov	r5, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d0e0      	beq.n	800635a <__submore+0x1a>
 8006398:	eb00 0806 	add.w	r8, r0, r6
 800639c:	4601      	mov	r1, r0
 800639e:	4632      	mov	r2, r6
 80063a0:	4640      	mov	r0, r8
 80063a2:	f000 f815 	bl	80063d0 <memcpy>
 80063a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80063aa:	f8c4 8000 	str.w	r8, [r4]
 80063ae:	e7e9      	b.n	8006384 <__submore+0x44>

080063b0 <__retarget_lock_acquire_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_release_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <memchr>:
 80063b4:	4603      	mov	r3, r0
 80063b6:	b510      	push	{r4, lr}
 80063b8:	b2c9      	uxtb	r1, r1
 80063ba:	4402      	add	r2, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	d101      	bne.n	80063c6 <memchr+0x12>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e003      	b.n	80063ce <memchr+0x1a>
 80063c6:	7804      	ldrb	r4, [r0, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	428c      	cmp	r4, r1
 80063cc:	d1f6      	bne.n	80063bc <memchr+0x8>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memcpy>:
 80063d0:	440a      	add	r2, r1
 80063d2:	4291      	cmp	r1, r2
 80063d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063d8:	d100      	bne.n	80063dc <memcpy+0xc>
 80063da:	4770      	bx	lr
 80063dc:	b510      	push	{r4, lr}
 80063de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e2:	4291      	cmp	r1, r2
 80063e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e8:	d1f9      	bne.n	80063de <memcpy+0xe>
 80063ea:	bd10      	pop	{r4, pc}

080063ec <_free_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4605      	mov	r5, r0
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d043      	beq.n	800647c <_free_r+0x90>
 80063f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f8:	1f0c      	subs	r4, r1, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bfb8      	it	lt
 80063fe:	18e4      	addlt	r4, r4, r3
 8006400:	f000 f8d0 	bl	80065a4 <__malloc_lock>
 8006404:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <_free_r+0x94>)
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	4610      	mov	r0, r2
 800640a:	b933      	cbnz	r3, 800641a <_free_r+0x2e>
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	6014      	str	r4, [r2, #0]
 8006410:	4628      	mov	r0, r5
 8006412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006416:	f000 b8cb 	b.w	80065b0 <__malloc_unlock>
 800641a:	42a3      	cmp	r3, r4
 800641c:	d90a      	bls.n	8006434 <_free_r+0x48>
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	1862      	adds	r2, r4, r1
 8006422:	4293      	cmp	r3, r2
 8006424:	bf01      	itttt	eq
 8006426:	681a      	ldreq	r2, [r3, #0]
 8006428:	685b      	ldreq	r3, [r3, #4]
 800642a:	1852      	addeq	r2, r2, r1
 800642c:	6022      	streq	r2, [r4, #0]
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	6004      	str	r4, [r0, #0]
 8006432:	e7ed      	b.n	8006410 <_free_r+0x24>
 8006434:	461a      	mov	r2, r3
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	b10b      	cbz	r3, 800643e <_free_r+0x52>
 800643a:	42a3      	cmp	r3, r4
 800643c:	d9fa      	bls.n	8006434 <_free_r+0x48>
 800643e:	6811      	ldr	r1, [r2, #0]
 8006440:	1850      	adds	r0, r2, r1
 8006442:	42a0      	cmp	r0, r4
 8006444:	d10b      	bne.n	800645e <_free_r+0x72>
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	4401      	add	r1, r0
 800644a:	1850      	adds	r0, r2, r1
 800644c:	4283      	cmp	r3, r0
 800644e:	6011      	str	r1, [r2, #0]
 8006450:	d1de      	bne.n	8006410 <_free_r+0x24>
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4401      	add	r1, r0
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	6053      	str	r3, [r2, #4]
 800645c:	e7d8      	b.n	8006410 <_free_r+0x24>
 800645e:	d902      	bls.n	8006466 <_free_r+0x7a>
 8006460:	230c      	movs	r3, #12
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	e7d4      	b.n	8006410 <_free_r+0x24>
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	1821      	adds	r1, r4, r0
 800646a:	428b      	cmp	r3, r1
 800646c:	bf01      	itttt	eq
 800646e:	6819      	ldreq	r1, [r3, #0]
 8006470:	685b      	ldreq	r3, [r3, #4]
 8006472:	1809      	addeq	r1, r1, r0
 8006474:	6021      	streq	r1, [r4, #0]
 8006476:	6063      	str	r3, [r4, #4]
 8006478:	6054      	str	r4, [r2, #4]
 800647a:	e7c9      	b.n	8006410 <_free_r+0x24>
 800647c:	bd38      	pop	{r3, r4, r5, pc}
 800647e:	bf00      	nop
 8006480:	200000dc 	.word	0x200000dc

08006484 <_malloc_r>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	1ccd      	adds	r5, r1, #3
 8006488:	f025 0503 	bic.w	r5, r5, #3
 800648c:	3508      	adds	r5, #8
 800648e:	2d0c      	cmp	r5, #12
 8006490:	bf38      	it	cc
 8006492:	250c      	movcc	r5, #12
 8006494:	2d00      	cmp	r5, #0
 8006496:	4606      	mov	r6, r0
 8006498:	db01      	blt.n	800649e <_malloc_r+0x1a>
 800649a:	42a9      	cmp	r1, r5
 800649c:	d903      	bls.n	80064a6 <_malloc_r+0x22>
 800649e:	230c      	movs	r3, #12
 80064a0:	6033      	str	r3, [r6, #0]
 80064a2:	2000      	movs	r0, #0
 80064a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a6:	f000 f87d 	bl	80065a4 <__malloc_lock>
 80064aa:	4921      	ldr	r1, [pc, #132]	; (8006530 <_malloc_r+0xac>)
 80064ac:	680a      	ldr	r2, [r1, #0]
 80064ae:	4614      	mov	r4, r2
 80064b0:	b99c      	cbnz	r4, 80064da <_malloc_r+0x56>
 80064b2:	4f20      	ldr	r7, [pc, #128]	; (8006534 <_malloc_r+0xb0>)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	b923      	cbnz	r3, 80064c2 <_malloc_r+0x3e>
 80064b8:	4621      	mov	r1, r4
 80064ba:	4630      	mov	r0, r6
 80064bc:	f000 f862 	bl	8006584 <_sbrk_r>
 80064c0:	6038      	str	r0, [r7, #0]
 80064c2:	4629      	mov	r1, r5
 80064c4:	4630      	mov	r0, r6
 80064c6:	f000 f85d 	bl	8006584 <_sbrk_r>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	d123      	bne.n	8006516 <_malloc_r+0x92>
 80064ce:	230c      	movs	r3, #12
 80064d0:	4630      	mov	r0, r6
 80064d2:	6033      	str	r3, [r6, #0]
 80064d4:	f000 f86c 	bl	80065b0 <__malloc_unlock>
 80064d8:	e7e3      	b.n	80064a2 <_malloc_r+0x1e>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	1b5b      	subs	r3, r3, r5
 80064de:	d417      	bmi.n	8006510 <_malloc_r+0x8c>
 80064e0:	2b0b      	cmp	r3, #11
 80064e2:	d903      	bls.n	80064ec <_malloc_r+0x68>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	441c      	add	r4, r3
 80064e8:	6025      	str	r5, [r4, #0]
 80064ea:	e004      	b.n	80064f6 <_malloc_r+0x72>
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	42a2      	cmp	r2, r4
 80064f0:	bf0c      	ite	eq
 80064f2:	600b      	streq	r3, [r1, #0]
 80064f4:	6053      	strne	r3, [r2, #4]
 80064f6:	4630      	mov	r0, r6
 80064f8:	f000 f85a 	bl	80065b0 <__malloc_unlock>
 80064fc:	f104 000b 	add.w	r0, r4, #11
 8006500:	1d23      	adds	r3, r4, #4
 8006502:	f020 0007 	bic.w	r0, r0, #7
 8006506:	1ac2      	subs	r2, r0, r3
 8006508:	d0cc      	beq.n	80064a4 <_malloc_r+0x20>
 800650a:	1a1b      	subs	r3, r3, r0
 800650c:	50a3      	str	r3, [r4, r2]
 800650e:	e7c9      	b.n	80064a4 <_malloc_r+0x20>
 8006510:	4622      	mov	r2, r4
 8006512:	6864      	ldr	r4, [r4, #4]
 8006514:	e7cc      	b.n	80064b0 <_malloc_r+0x2c>
 8006516:	1cc4      	adds	r4, r0, #3
 8006518:	f024 0403 	bic.w	r4, r4, #3
 800651c:	42a0      	cmp	r0, r4
 800651e:	d0e3      	beq.n	80064e8 <_malloc_r+0x64>
 8006520:	1a21      	subs	r1, r4, r0
 8006522:	4630      	mov	r0, r6
 8006524:	f000 f82e 	bl	8006584 <_sbrk_r>
 8006528:	3001      	adds	r0, #1
 800652a:	d1dd      	bne.n	80064e8 <_malloc_r+0x64>
 800652c:	e7cf      	b.n	80064ce <_malloc_r+0x4a>
 800652e:	bf00      	nop
 8006530:	200000dc 	.word	0x200000dc
 8006534:	200000e0 	.word	0x200000e0

08006538 <_realloc_r>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	4607      	mov	r7, r0
 800653c:	4614      	mov	r4, r2
 800653e:	460e      	mov	r6, r1
 8006540:	b921      	cbnz	r1, 800654c <_realloc_r+0x14>
 8006542:	4611      	mov	r1, r2
 8006544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006548:	f7ff bf9c 	b.w	8006484 <_malloc_r>
 800654c:	b922      	cbnz	r2, 8006558 <_realloc_r+0x20>
 800654e:	f7ff ff4d 	bl	80063ec <_free_r>
 8006552:	4625      	mov	r5, r4
 8006554:	4628      	mov	r0, r5
 8006556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006558:	f000 f830 	bl	80065bc <_malloc_usable_size_r>
 800655c:	42a0      	cmp	r0, r4
 800655e:	d20f      	bcs.n	8006580 <_realloc_r+0x48>
 8006560:	4621      	mov	r1, r4
 8006562:	4638      	mov	r0, r7
 8006564:	f7ff ff8e 	bl	8006484 <_malloc_r>
 8006568:	4605      	mov	r5, r0
 800656a:	2800      	cmp	r0, #0
 800656c:	d0f2      	beq.n	8006554 <_realloc_r+0x1c>
 800656e:	4631      	mov	r1, r6
 8006570:	4622      	mov	r2, r4
 8006572:	f7ff ff2d 	bl	80063d0 <memcpy>
 8006576:	4631      	mov	r1, r6
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff ff37 	bl	80063ec <_free_r>
 800657e:	e7e9      	b.n	8006554 <_realloc_r+0x1c>
 8006580:	4635      	mov	r5, r6
 8006582:	e7e7      	b.n	8006554 <_realloc_r+0x1c>

08006584 <_sbrk_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	2300      	movs	r3, #0
 8006588:	4d05      	ldr	r5, [pc, #20]	; (80065a0 <_sbrk_r+0x1c>)
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	f7fa fcba 	bl	8000f08 <_sbrk>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_sbrk_r+0x1a>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_sbrk_r+0x1a>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	20000af0 	.word	0x20000af0

080065a4 <__malloc_lock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__malloc_lock+0x8>)
 80065a6:	f7ff bf03 	b.w	80063b0 <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000af8 	.word	0x20000af8

080065b0 <__malloc_unlock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__malloc_unlock+0x8>)
 80065b2:	f7ff befe 	b.w	80063b2 <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000af8 	.word	0x20000af8

080065bc <_malloc_usable_size_r>:
 80065bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c0:	1f18      	subs	r0, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfbc      	itt	lt
 80065c6:	580b      	ldrlt	r3, [r1, r0]
 80065c8:	18c0      	addlt	r0, r0, r3
 80065ca:	4770      	bx	lr

080065cc <_init>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr

080065d8 <_fini>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr
