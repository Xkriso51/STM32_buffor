
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004694  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004b18  08004b18  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b18  08004b18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000078  08004b98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  08004b98  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8fa  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a6  00000000  00000000  0002c99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018291  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d993  00000000  00000000  000484e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5aa  00000000  00000000  00055e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e141e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000e1474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004788 	.word	0x08004788

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004788 	.word	0x08004788

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b2d      	ldr	r3, [pc, #180]	; (800023c <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a2c      	ldr	r2, [pc, #176]	; (800023c <MX_GPIO_Init+0xcc>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b2a      	ldr	r3, [pc, #168]	; (800023c <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b27      	ldr	r3, [pc, #156]	; (800023c <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a26      	ldr	r2, [pc, #152]	; (800023c <MX_GPIO_Init+0xcc>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b24      	ldr	r3, [pc, #144]	; (800023c <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b21      	ldr	r3, [pc, #132]	; (800023c <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a20      	ldr	r2, [pc, #128]	; (800023c <MX_GPIO_Init+0xcc>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b1e      	ldr	r3, [pc, #120]	; (800023c <MX_GPIO_Init+0xcc>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b1b      	ldr	r3, [pc, #108]	; (800023c <MX_GPIO_Init+0xcc>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a1a      	ldr	r2, [pc, #104]	; (800023c <MX_GPIO_Init+0xcc>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_GPIO_Init+0xcc>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2120      	movs	r1, #32
 80001e8:	4815      	ldr	r0, [pc, #84]	; (8000240 <MX_GPIO_Init+0xd0>)
 80001ea:	f001 f961 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <MX_GPIO_Init+0xd4>)
 80001f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	4811      	ldr	r0, [pc, #68]	; (8000248 <MX_GPIO_Init+0xd8>)
 8000204:	f000 ffd0 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000208:	2320      	movs	r3, #32
 800020a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	2301      	movs	r3, #1
 800020e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000214:	2302      	movs	r3, #2
 8000216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000218:	f107 0310 	add.w	r3, r7, #16
 800021c:	4619      	mov	r1, r3
 800021e:	4808      	ldr	r0, [pc, #32]	; (8000240 <MX_GPIO_Init+0xd0>)
 8000220:	f000 ffc2 	bl	80011a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	2028      	movs	r0, #40	; 0x28
 800022a:	f000 fed6 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f000 feef 	bl	8001012 <HAL_NVIC_EnableIRQ>

}
 8000234:	bf00      	nop
 8000236:	3720      	adds	r7, #32
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800
 8000244:	10110000 	.word	0x10110000
 8000248:	40011000 	.word	0x40011000

0800024c <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <get_char+0x78>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <get_char+0x7c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d02c      	beq.n	80002b8 <get_char+0x6c>
		tmp = Buf_RX[busyRX];
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <get_char+0x7c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <get_char+0x80>)
 8000264:	5cd3      	ldrb	r3, [r2, r3]
 8000266:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <get_char+0x7c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <get_char+0x7c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <get_char+0x7c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800027a:	db02      	blt.n	8000282 <get_char+0x36>
			busyRX=0;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <get_char+0x7c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		}
		if (isalpha(tmp))
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	3301      	adds	r3, #1
 8000286:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <get_char+0x84>)
 8000288:	4413      	add	r3, r2
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 0303 	and.w	r3, r3, #3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <get_char+0x68>
		{
			tmp=toupper(tmp);
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	71bb      	strb	r3, [r7, #6]
 8000298:	79bb      	ldrb	r3, [r7, #6]
 800029a:	3301      	adds	r3, #1
 800029c:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <get_char+0x84>)
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	f003 0303 	and.w	r3, r3, #3
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d102      	bne.n	80002b0 <get_char+0x64>
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	3b20      	subs	r3, #32
 80002ae:	e000      	b.n	80002b2 <get_char+0x66>
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	71fb      	strb	r3, [r7, #7]
		}
		return tmp;
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	e000      	b.n	80002ba <get_char+0x6e>
	}
	else{
		return 0;
 80002b8:	2300      	movs	r3, #0
	}
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	2000009c 	.word	0x2000009c
 80002c8:	200000a0 	.word	0x200000a0
 80002cc:	200004b4 	.word	0x200004b4
 80002d0:	08004968 	.word	0x08004968

080002d4 <fsend>:
void fsend(char* format, ...){
 80002d4:	b40f      	push	{r0, r1, r2, r3}
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b0a4      	sub	sp, #144	; 0x90
 80002da:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 80002dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002e0:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs, format, arglist);
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 f991 	bl	8003614 <vsiprintf>
	va_end(arglist);
	pid = emptyTX;
 80002f2:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <fsend+0xdc>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 80002f8:	2300      	movs	r3, #0
 80002fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80002fe:	e016      	b.n	800032e <fsend+0x5a>
		Buf_TX[pid] = tmp_rs[i];
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	f107 010c 	add.w	r1, r7, #12
 8000306:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800030a:	440a      	add	r2, r1
 800030c:	7811      	ldrb	r1, [r2, #0]
 800030e:	4a29      	ldr	r2, [pc, #164]	; (80003b4 <fsend+0xe0>)
 8000310:	54d1      	strb	r1, [r2, r3]
		pid++;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
		if(pid >= BUF_TX_LEN){
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800031e:	db01      	blt.n	8000324 <fsend+0x50>
			pid = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000328:	3301      	adds	r3, #1
 800032a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff14 	bl	8000160 <strlen>
 8000338:	4602      	mov	r2, r0
 800033a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800033e:	429a      	cmp	r2, r3
 8000340:	d8de      	bhi.n	8000300 <fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <fsend+0xdc>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <fsend+0xe4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	429a      	cmp	r2, r3
 8000350:	d122      	bne.n	8000398 <fsend+0xc4>
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <fsend+0xe8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035c:	2b80      	cmp	r3, #128	; 0x80
 800035e:	d11b      	bne.n	8000398 <fsend+0xc4>
		emptyTX = pid;
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <fsend+0xdc>)
 8000364:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <fsend+0xe4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <fsend+0xe0>)
 800036c:	5cd3      	ldrb	r3, [r2, r3]
 800036e:	70fb      	strb	r3, [r7, #3]
		busyTX++;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <fsend+0xe4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <fsend+0xe4>)
 8000378:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <fsend+0xe4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000382:	db02      	blt.n	800038a <fsend+0xb6>
			busyTX = 0;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <fsend+0xe4>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800038a:	1cfb      	adds	r3, r7, #3
 800038c:	2201      	movs	r2, #1
 800038e:	4619      	mov	r1, r3
 8000390:	480a      	ldr	r0, [pc, #40]	; (80003bc <fsend+0xe8>)
 8000392:	f002 fc81 	bl	8002c98 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000396:	e002      	b.n	800039e <fsend+0xca>
	}
	else{
		emptyTX = pid;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <fsend+0xdc>)
 800039c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800039e:	b662      	cpsie	i
}
 80003a0:	bf00      	nop
	}
	__enable_irq();
}
 80003a2:	bf00      	nop
 80003a4:	3790      	adds	r7, #144	; 0x90
 80003a6:	46bd      	mov	sp, r7
 80003a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr
 80003b0:	20000094 	.word	0x20000094
 80003b4:	200000b4 	.word	0x200000b4
 80003b8:	20000098 	.word	0x20000098
 80003bc:	2000094c 	.word	0x2000094c

080003c0 <doner>:

void doner(char *ord){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	483b      	ldr	r0, [pc, #236]	; (80004b8 <doner+0xf8>)
 80003cc:	f7ff febe 	bl	800014c <strcmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d103      	bne.n	80003de <doner+0x1e>
		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi (liczba).\r\n");
 80003d6:	4839      	ldr	r0, [pc, #228]	; (80004bc <doner+0xfc>)
 80003d8:	f7ff ff7c 	bl	80002d4 <fsend>
	}
	else{
		fsend("WRCMD\r\n");
	}

}
 80003dc:	e068      	b.n	80004b0 <doner+0xf0>
	else if(strcmp("FCHKH;", ord) == 0){
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	4837      	ldr	r0, [pc, #220]	; (80004c0 <doner+0x100>)
 80003e2:	f7ff feb3 	bl	800014c <strcmp>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d103      	bne.n	80003f4 <doner+0x34>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi (liczba).\r\n");
 80003ec:	4835      	ldr	r0, [pc, #212]	; (80004c4 <doner+0x104>)
 80003ee:	f7ff ff71 	bl	80002d4 <fsend>
}
 80003f2:	e05d      	b.n	80004b0 <doner+0xf0>
	else if(strcmp("FSTART;", ord) == 0){
 80003f4:	6879      	ldr	r1, [r7, #4]
 80003f6:	4834      	ldr	r0, [pc, #208]	; (80004c8 <doner+0x108>)
 80003f8:	f7ff fea8 	bl	800014c <strcmp>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d103      	bne.n	800040a <doner+0x4a>
		fsend("Rozpoczeto wysylanie impulsow \r\n");
 8000402:	4832      	ldr	r0, [pc, #200]	; (80004cc <doner+0x10c>)
 8000404:	f7ff ff66 	bl	80002d4 <fsend>
}
 8000408:	e052      	b.n	80004b0 <doner+0xf0>
	else if(strcmp("FSTAT;", ord) == 0){
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	4830      	ldr	r0, [pc, #192]	; (80004d0 <doner+0x110>)
 800040e:	f7ff fe9d 	bl	800014c <strcmp>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d103      	bne.n	8000420 <doner+0x60>
		fsend("Wypelnienie (wartosc FSET) Czas (wartosc FTIME)\r\n");
 8000418:	482e      	ldr	r0, [pc, #184]	; (80004d4 <doner+0x114>)
 800041a:	f7ff ff5b 	bl	80002d4 <fsend>
}
 800041e:	e047      	b.n	80004b0 <doner+0xf0>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 8000420:	4a2d      	ldr	r2, [pc, #180]	; (80004d8 <doner+0x118>)
 8000422:	492e      	ldr	r1, [pc, #184]	; (80004dc <doner+0x11c>)
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f003 f8b3 	bl	8003590 <siscanf>
 800042a:	4603      	mov	r3, r0
 800042c:	2b01      	cmp	r3, #1
 800042e:	d006      	beq.n	800043e <doner+0x7e>
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	482b      	ldr	r0, [pc, #172]	; (80004e0 <doner+0x120>)
 8000434:	f7ff fe8a 	bl	800014c <strcmp>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d112      	bne.n	8000464 <doner+0xa4>
		if(czas>=0 && czas<=120){
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <doner+0x118>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	db0a      	blt.n	800045c <doner+0x9c>
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <doner+0x118>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b78      	cmp	r3, #120	; 0x78
 800044c:	dc06      	bgt.n	800045c <doner+0x9c>
			fsend("„Ustawiono czas na %d sekund.\r\n",czas);
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <doner+0x118>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4619      	mov	r1, r3
 8000454:	4823      	ldr	r0, [pc, #140]	; (80004e4 <doner+0x124>)
 8000456:	f7ff ff3d 	bl	80002d4 <fsend>
		if(czas>=0 && czas<=120){
 800045a:	e029      	b.n	80004b0 <doner+0xf0>
			fsend("WRNUM\r\n");
 800045c:	4822      	ldr	r0, [pc, #136]	; (80004e8 <doner+0x128>)
 800045e:	f7ff ff39 	bl	80002d4 <fsend>
		if(czas>=0 && czas<=120){
 8000462:	e025      	b.n	80004b0 <doner+0xf0>
	else if(sscanf(ord, "FSET%d;", &wart) == 1 || strcmp("FSET;", ord) == 0){
 8000464:	4a21      	ldr	r2, [pc, #132]	; (80004ec <doner+0x12c>)
 8000466:	4922      	ldr	r1, [pc, #136]	; (80004f0 <doner+0x130>)
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f003 f891 	bl	8003590 <siscanf>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d006      	beq.n	8000482 <doner+0xc2>
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	481f      	ldr	r0, [pc, #124]	; (80004f4 <doner+0x134>)
 8000478:	f7ff fe68 	bl	800014c <strcmp>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d112      	bne.n	80004a8 <doner+0xe8>
		if(wart>=0 && wart<=100){
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <doner+0x12c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	db0a      	blt.n	80004a0 <doner+0xe0>
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <doner+0x12c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b64      	cmp	r3, #100	; 0x64
 8000490:	dc06      	bgt.n	80004a0 <doner+0xe0>
			fsend("„Ustawiono wypelnienie na %d %.\r\n",wart);
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <doner+0x12c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <doner+0x138>)
 800049a:	f7ff ff1b 	bl	80002d4 <fsend>
		if(wart>=0 && wart<=100){
 800049e:	e007      	b.n	80004b0 <doner+0xf0>
			fsend("WRNUM\r\n");
 80004a0:	4811      	ldr	r0, [pc, #68]	; (80004e8 <doner+0x128>)
 80004a2:	f7ff ff17 	bl	80002d4 <fsend>
		if(wart>=0 && wart<=100){
 80004a6:	e003      	b.n	80004b0 <doner+0xf0>
		fsend("WRCMD\r\n");
 80004a8:	4814      	ldr	r0, [pc, #80]	; (80004fc <doner+0x13c>)
 80004aa:	f7ff ff13 	bl	80002d4 <fsend>
}
 80004ae:	e7ff      	b.n	80004b0 <doner+0xf0>
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	080047a0 	.word	0x080047a0
 80004bc:	080047a8 	.word	0x080047a8
 80004c0:	080047f4 	.word	0x080047f4
 80004c4:	080047fc 	.word	0x080047fc
 80004c8:	0800483c 	.word	0x0800483c
 80004cc:	08004844 	.word	0x08004844
 80004d0:	08004868 	.word	0x08004868
 80004d4:	08004870 	.word	0x08004870
 80004d8:	20000000 	.word	0x20000000
 80004dc:	080048a4 	.word	0x080048a4
 80004e0:	080048b0 	.word	0x080048b0
 80004e4:	080048b8 	.word	0x080048b8
 80004e8:	080048dc 	.word	0x080048dc
 80004ec:	20000004 	.word	0x20000004
 80004f0:	080048e4 	.word	0x080048e4
 80004f4:	080048ec 	.word	0x080048ec
 80004f8:	080048f4 	.word	0x080048f4
 80004fc:	08004918 	.word	0x08004918

08000500 <get_line>:

void get_line(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

	if(statframe==0)
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <get_line+0x11c>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d111      	bne.n	8000534 <get_line+0x34>
	{
		char temp = get_char();
 8000510:	f7ff fe9c 	bl	800024c <get_char>
 8000514:	4603      	mov	r3, r0
 8000516:	70bb      	strb	r3, [r7, #2]
		bfr[pid]=temp;
 8000518:	4b41      	ldr	r3, [pc, #260]	; (8000620 <get_line+0x120>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	4a40      	ldr	r2, [pc, #256]	; (8000624 <get_line+0x124>)
 8000522:	78bb      	ldrb	r3, [r7, #2]
 8000524:	5453      	strb	r3, [r2, r1]

		if(temp == 0x05)
 8000526:	78bb      	ldrb	r3, [r7, #2]
 8000528:	2b05      	cmp	r3, #5
 800052a:	d172      	bne.n	8000612 <get_line+0x112>
		{
			statframe=1;
 800052c:	4b3b      	ldr	r3, [pc, #236]	; (800061c <get_line+0x11c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
			statframe=0;


		}
	}
}
 8000532:	e06e      	b.n	8000612 <get_line+0x112>
	else if(statframe==1){
 8000534:	4b39      	ldr	r3, [pc, #228]	; (800061c <get_line+0x11c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b01      	cmp	r3, #1
 800053c:	d169      	bne.n	8000612 <get_line+0x112>
		pid++;
 800053e:	4b38      	ldr	r3, [pc, #224]	; (8000620 <get_line+0x120>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	b29b      	uxth	r3, r3
 8000544:	3301      	adds	r3, #1
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b35      	ldr	r3, [pc, #212]	; (8000620 <get_line+0x120>)
 800054a:	801a      	strh	r2, [r3, #0]
		if(pid > 261){
 800054c:	4b34      	ldr	r3, [pc, #208]	; (8000620 <get_line+0x120>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	b29b      	uxth	r3, r3
 8000552:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000556:	d305      	bcc.n	8000564 <get_line+0x64>
			pid=0;
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <get_line+0x120>)
 800055a:	2200      	movs	r2, #0
 800055c:	801a      	strh	r2, [r3, #0]
			statframe=0;
 800055e:	4b2f      	ldr	r3, [pc, #188]	; (800061c <get_line+0x11c>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
		char temp = get_char();
 8000564:	f7ff fe72 	bl	800024c <get_char>
 8000568:	4603      	mov	r3, r0
 800056a:	70fb      	strb	r3, [r7, #3]
		bfr[pid]=temp;
 800056c:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <get_line+0x120>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b29b      	uxth	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	4a2b      	ldr	r2, [pc, #172]	; (8000624 <get_line+0x124>)
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	5453      	strb	r3, [r2, r1]
		if(temp == 0x05){
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	2b05      	cmp	r3, #5
 800057e:	d102      	bne.n	8000586 <get_line+0x86>
			pid=0;
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <get_line+0x120>)
 8000582:	2200      	movs	r2, #0
 8000584:	801a      	strh	r2, [r3, #0]
		if(temp == 0x04){
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d142      	bne.n	8000612 <get_line+0x112>
			fsend(bfr);
 800058c:	4825      	ldr	r0, [pc, #148]	; (8000624 <get_line+0x124>)
 800058e:	f7ff fea1 	bl	80002d4 <fsend>
			fsend("\r\n");
 8000592:	4825      	ldr	r0, [pc, #148]	; (8000628 <get_line+0x128>)
 8000594:	f7ff fe9e 	bl	80002d4 <fsend>
			int poi=1;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
			for(int i=1;i<=pid;i++){
 800059c:	2301      	movs	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e02a      	b.n	80005f8 <get_line+0xf8>
				if(bfr[i] == ';'){
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <get_line+0x124>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b3b      	cmp	r3, #59	; 0x3b
 80005ac:	d121      	bne.n	80005f2 <get_line+0xf2>
					memset(&order[0],0,sizeof(order));
 80005ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b2:	2100      	movs	r1, #0
 80005b4:	481d      	ldr	r0, [pc, #116]	; (800062c <get_line+0x12c>)
 80005b6:	f002 ffe3 	bl	8003580 <memset>
					ordpid=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
					while(poi<=i){
 80005be:	e00e      	b.n	80005de <get_line+0xde>
						order[ordpid]=bfr[poi];
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <get_line+0x124>)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4413      	add	r3, r2
 80005c6:	7819      	ldrb	r1, [r3, #0]
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <get_line+0x12c>)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	460a      	mov	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
						ordpid++;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3301      	adds	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
						poi++;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3301      	adds	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
					while(poi<=i){
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	ddec      	ble.n	80005c0 <get_line+0xc0>
					ordpid=i+1;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
					doner(order);
 80005ec:	480f      	ldr	r0, [pc, #60]	; (800062c <get_line+0x12c>)
 80005ee:	f7ff fee7 	bl	80003c0 <doner>
			for(int i=1;i<=pid;i++){
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <get_line+0x120>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4293      	cmp	r3, r2
 8000604:	ddcd      	ble.n	80005a2 <get_line+0xa2>
			pid=0;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <get_line+0x120>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]
			statframe=0;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <get_line+0x11c>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000a6 	.word	0x200000a6
 8000620:	200000a4 	.word	0x200000a4
 8000624:	200007b4 	.word	0x200007b4
 8000628:	08004920 	.word	0x08004920
 800062c:	200006b4 	.word	0x200006b4

08000630 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <HAL_UART_TxCpltCallback+0x58>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d11e      	bne.n	800067e <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_UART_TxCpltCallback+0x5c>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	d018      	beq.n	800067e <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_UART_TxCpltCallback+0x64>)
 8000652:	5cd3      	ldrb	r3, [r2, r3]
 8000654:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 800065e:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000668:	db02      	blt.n	8000670 <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <HAL_UART_TxCpltCallback+0x58>)
 800067a:	f002 fb0d 	bl	8002c98 <HAL_UART_Transmit_IT>
		}
	}
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000094c 	.word	0x2000094c
 800068c:	20000094 	.word	0x20000094
 8000690:	20000098 	.word	0x20000098
 8000694:	200000b4 	.word	0x200000b4

08000698 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_UART_RxCpltCallback+0x44>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d115      	bne.n	80006d4 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_UART_RxCpltCallback+0x48>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <HAL_UART_RxCpltCallback+0x48>)
 80006b0:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <HAL_UART_RxCpltCallback+0x48>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ba:	db02      	blt.n	80006c2 <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_UART_RxCpltCallback+0x48>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_UART_RxCpltCallback+0x48>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_UART_RxCpltCallback+0x4c>)
 80006c8:	4413      	add	r3, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <HAL_UART_RxCpltCallback+0x44>)
 80006d0:	f002 fb26 	bl	8002d20 <HAL_UART_Receive_IT>
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000094c 	.word	0x2000094c
 80006e0:	2000009c 	.word	0x2000009c
 80006e4:	200004b4 	.word	0x200004b4

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fb3c 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f824 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f7ff fd3c 	bl	8000170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 faa0 	bl	8000c3c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006fc:	f000 f90a 	bl	8000914 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000700:	f000 f9a8 	bl	8000a54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  fsend("Hello user\r\n");
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <main+0x40>)
 8000706:	f7ff fde5 	bl	80002d4 <fsend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 800070a:	2201      	movs	r2, #1
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <main+0x44>)
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <main+0x48>)
 8000710:	f002 fb06 	bl	8002d20 <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <main+0x4c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <main+0x50>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d0f9      	beq.n	8000714 <main+0x2c>
		  get_line();
 8000720:	f7ff feee 	bl	8000500 <get_line>
	  if(busyRX!=emptyRX){
 8000724:	e7f6      	b.n	8000714 <main+0x2c>
 8000726:	bf00      	nop
 8000728:	08004924 	.word	0x08004924
 800072c:	200004b4 	.word	0x200004b4
 8000730:	2000094c 	.word	0x2000094c
 8000734:	200000a0 	.word	0x200000a0
 8000738:	2000009c 	.word	0x2000009c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 ff18 	bl	8003580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800076e:	2300      	movs	r3, #0
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000772:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0318 	add.w	r3, r7, #24
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fed1 	bl	8001524 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000788:	f000 f819 	bl	80007be <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f93c 	bl	8001a24 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007b2:	f000 f804 	bl	80007be <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3740      	adds	r7, #64	; 0x40
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80007c2:	e7fe      	b.n	80007c2 <Error_Handler+0x4>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_MspInit+0x5c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x5c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_MspInit+0x60>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_MspInit+0x60>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000
 8000824:	40010000 	.word	0x40010000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 fac1 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART2_IRQHandler+0x10>)
 800087e:	f002 fa7f 	bl	8002d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000094c 	.word	0x2000094c

0800088c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000894:	f000 fe24 	bl	80014e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f002 fe2e 	bl	800352c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20005000 	.word	0x20005000
 80008fc:	00000400 	.word	0x00000400
 8000900:	200000a8 	.word	0x200000a8
 8000904:	200009a8 	.word	0x200009a8

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	; 0x58
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fe17 	bl	8003580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000954:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <MX_TIM1_Init+0x13c>)
 8000956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <MX_TIM1_Init+0x138>)
 800095a:	22b3      	movs	r2, #179	; 0xb3
 800095c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <MX_TIM1_Init+0x138>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000972:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <MX_TIM1_Init+0x138>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000980:	f001 f9ea 	bl	8001d58 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800098a:	f7ff ff18 	bl	80007be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000998:	4619      	mov	r1, r3
 800099a:	482c      	ldr	r0, [pc, #176]	; (8000a4c <MX_TIM1_Init+0x138>)
 800099c:	f001 fc2e 	bl	80021fc <HAL_TIM_ConfigClockSource>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009a6:	f7ff ff0a 	bl	80007be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009aa:	4828      	ldr	r0, [pc, #160]	; (8000a4c <MX_TIM1_Init+0x138>)
 80009ac:	f001 fa23 	bl	8001df6 <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009b6:	f7ff ff02 	bl	80007be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c6:	4619      	mov	r1, r3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_TIM1_Init+0x138>)
 80009ca:	f002 f869 	bl	8002aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009d4:	f7ff fef3 	bl	80007be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2360      	movs	r3, #96	; 0x60
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM1_Init+0x138>)
 80009fe:	f001 fb3f 	bl	8002080 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a08:	f7ff fed9 	bl	80007be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000a30:	f002 f894 	bl	8002b5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a3a:	f7ff fec0 	bl	80007be <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM1_Init+0x138>)
 8000a40:	f000 f8c8 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3758      	adds	r7, #88	; 0x58
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200008bc 	.word	0x200008bc
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000a88:	2259      	movs	r2, #89	; 0x59
 8000a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa6:	4822      	ldr	r0, [pc, #136]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000aa8:	f001 f956 	bl	8001d58 <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ab2:	f7ff fe84 	bl	80007be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481b      	ldr	r0, [pc, #108]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000ac4:	f001 fb9a 	bl	80021fc <HAL_TIM_ConfigClockSource>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ace:	f7ff fe76 	bl	80007be <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000ad4:	f001 f9e7 	bl	8001ea6 <HAL_TIM_IC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ade:	f7ff fe6e 	bl	80007be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	480f      	ldr	r0, [pc, #60]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000af2:	f001 ffd5 	bl	8002aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000afc:	f7ff fe5f 	bl	80007be <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_TIM2_Init+0xdc>)
 8000b18:	f001 fa1d 	bl	8001f56 <HAL_TIM_IC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000b22:	f7ff fe4c 	bl	80007be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000904 	.word	0x20000904

08000b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <HAL_TIM_Base_MspInit+0x94>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d10c      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b6c:	e028      	b.n	8000bc0 <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM2)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b76:	d123      	bne.n	8000bc0 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_TIM_Base_MspInit+0x98>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000bbc:	f000 faf4 	bl	80011a8 <HAL_GPIO_Init>
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40012c00 	.word	0x40012c00
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_TIM_MspPostInit+0x5c>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d118      	bne.n	8000c26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_TIM_MspPostInit+0x60>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_TIM_MspPostInit+0x60>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_TIM_MspPostInit+0x60>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_TIM_MspPostInit+0x64>)
 8000c22:	f000 fac1 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART2_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f001 ffc3 	bl	8002bfe <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f7ff fd9e 	bl	80007be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000094c 	.word	0x2000094c
 8000c8c:	40004400 	.word	0x40004400

08000c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0x80>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d12b      	bne.n	8000d08 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cba:	61d3      	str	r3, [r2, #28]
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cf4:	f000 fa58 	bl	80011a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2026      	movs	r0, #38	; 0x26
 8000cfe:	f000 f96c 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d02:	2026      	movs	r0, #38	; 0x26
 8000d04:	f000 f985 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d42:	f7ff fde1 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fbf7 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4a:	f7ff fccd 	bl	80006e8 <main>
  bx lr
 8000d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d58:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 8000d5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d60:	200009a4 	.word	0x200009a4

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x28>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f923 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fd1e 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f93b 	bl	800102e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f903 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x20>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_IncTick+0x20>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000010 	.word	0x20000010
 8000e14:	20000990 	.word	0x20000990

08000e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <HAL_GetTick+0x10>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	20000990 	.word	0x20000990

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4906      	ldr	r1, [pc, #24]	; (8000ec4 <__NVIC_EnableIRQ+0x34>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff90 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff2d 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff42 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff90 	bl	8000f1c <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5f 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff35 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001058:	2b02      	cmp	r3, #2
 800105a:	d008      	beq.n	800106e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2204      	movs	r2, #4
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e020      	b.n	80010b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 020e 	bic.w	r2, r2, #14
 800107c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d005      	beq.n	80010de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e051      	b.n	8001182 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 020e 	bic.w	r2, r2, #14
 80010ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <HAL_DMA_Abort_IT+0xd0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d029      	beq.n	800115c <HAL_DMA_Abort_IT+0xa0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_DMA_Abort_IT+0xd4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d022      	beq.n	8001158 <HAL_DMA_Abort_IT+0x9c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_DMA_Abort_IT+0xd8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d01a      	beq.n	8001152 <HAL_DMA_Abort_IT+0x96>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_DMA_Abort_IT+0xdc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d012      	beq.n	800114c <HAL_DMA_Abort_IT+0x90>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_DMA_Abort_IT+0xe0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00a      	beq.n	8001146 <HAL_DMA_Abort_IT+0x8a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_DMA_Abort_IT+0xe4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d102      	bne.n	8001140 <HAL_DMA_Abort_IT+0x84>
 800113a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800113e:	e00e      	b.n	800115e <HAL_DMA_Abort_IT+0xa2>
 8001140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001144:	e00b      	b.n	800115e <HAL_DMA_Abort_IT+0xa2>
 8001146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114a:	e008      	b.n	800115e <HAL_DMA_Abort_IT+0xa2>
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	e005      	b.n	800115e <HAL_DMA_Abort_IT+0xa2>
 8001152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001156:	e002      	b.n	800115e <HAL_DMA_Abort_IT+0xa2>
 8001158:	2310      	movs	r3, #16
 800115a:	e000      	b.n	800115e <HAL_DMA_Abort_IT+0xa2>
 800115c:	2301      	movs	r3, #1
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_DMA_Abort_IT+0xe8>)
 8001160:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
    } 
  }
  return status;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020008 	.word	0x40020008
 8001190:	4002001c 	.word	0x4002001c
 8001194:	40020030 	.word	0x40020030
 8001198:	40020044 	.word	0x40020044
 800119c:	40020058 	.word	0x40020058
 80011a0:	4002006c 	.word	0x4002006c
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e169      	b.n	8001490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011bc:	2201      	movs	r2, #1
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8158 	bne.w	800148a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a9a      	ldr	r2, [pc, #616]	; (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d05e      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011e4:	4a98      	ldr	r2, [pc, #608]	; (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d875      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011ea:	4a98      	ldr	r2, [pc, #608]	; (800144c <HAL_GPIO_Init+0x2a4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d058      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011f0:	4a96      	ldr	r2, [pc, #600]	; (800144c <HAL_GPIO_Init+0x2a4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d86f      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011f6:	4a96      	ldr	r2, [pc, #600]	; (8001450 <HAL_GPIO_Init+0x2a8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d052      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011fc:	4a94      	ldr	r2, [pc, #592]	; (8001450 <HAL_GPIO_Init+0x2a8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d869      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001202:	4a94      	ldr	r2, [pc, #592]	; (8001454 <HAL_GPIO_Init+0x2ac>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d04c      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001208:	4a92      	ldr	r2, [pc, #584]	; (8001454 <HAL_GPIO_Init+0x2ac>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d863      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800120e:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_GPIO_Init+0x2b0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d046      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001214:	4a90      	ldr	r2, [pc, #576]	; (8001458 <HAL_GPIO_Init+0x2b0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d85d      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800121a:	2b12      	cmp	r3, #18
 800121c:	d82a      	bhi.n	8001274 <HAL_GPIO_Init+0xcc>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d859      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <HAL_GPIO_Init+0x80>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	080012a3 	.word	0x080012a3
 800122c:	0800127d 	.word	0x0800127d
 8001230:	0800128f 	.word	0x0800128f
 8001234:	080012d1 	.word	0x080012d1
 8001238:	080012d7 	.word	0x080012d7
 800123c:	080012d7 	.word	0x080012d7
 8001240:	080012d7 	.word	0x080012d7
 8001244:	080012d7 	.word	0x080012d7
 8001248:	080012d7 	.word	0x080012d7
 800124c:	080012d7 	.word	0x080012d7
 8001250:	080012d7 	.word	0x080012d7
 8001254:	080012d7 	.word	0x080012d7
 8001258:	080012d7 	.word	0x080012d7
 800125c:	080012d7 	.word	0x080012d7
 8001260:	080012d7 	.word	0x080012d7
 8001264:	080012d7 	.word	0x080012d7
 8001268:	080012d7 	.word	0x080012d7
 800126c:	08001285 	.word	0x08001285
 8001270:	08001299 	.word	0x08001299
 8001274:	4a79      	ldr	r2, [pc, #484]	; (800145c <HAL_GPIO_Init+0x2b4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127a:	e02c      	b.n	80012d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e029      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	3304      	adds	r3, #4
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e024      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	3308      	adds	r3, #8
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e01f      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	330c      	adds	r3, #12
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e01a      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012aa:	2304      	movs	r3, #4
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e013      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	611a      	str	r2, [r3, #16]
          break;
 80012c2:	e009      	b.n	80012d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	615a      	str	r2, [r3, #20]
          break;
 80012ce:	e003      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
          break;
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          break;
 80012d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d801      	bhi.n	80012e2 <HAL_GPIO_Init+0x13a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_Init+0x13e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3304      	adds	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2bff      	cmp	r3, #255	; 0xff
 80012ec:	d802      	bhi.n	80012f4 <HAL_GPIO_Init+0x14c>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x152>
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	3b08      	subs	r3, #8
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	210f      	movs	r1, #15
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	6a39      	ldr	r1, [r7, #32]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80b1 	beq.w	800148a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001328:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x2b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_GPIO_Init+0x2b8>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <HAL_GPIO_Init+0x2b8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001340:	4a48      	ldr	r2, [pc, #288]	; (8001464 <HAL_GPIO_Init+0x2bc>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <HAL_GPIO_Init+0x2c0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1ec>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3f      	ldr	r2, [pc, #252]	; (800146c <HAL_GPIO_Init+0x2c4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1e8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3e      	ldr	r2, [pc, #248]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1e0>
 8001384:	2303      	movs	r3, #3
 8001386:	e006      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001388:	2304      	movs	r3, #4
 800138a:	e004      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 800138c:	2302      	movs	r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001394:	2300      	movs	r3, #0
 8001396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a6:	492f      	ldr	r1, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x2bc>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	492c      	ldr	r1, [pc, #176]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4928      	ldr	r1, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4922      	ldr	r1, [pc, #136]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	491e      	ldr	r1, [pc, #120]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	4918      	ldr	r1, [pc, #96]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4914      	ldr	r1, [pc, #80]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d021      	beq.n	800147c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e021      	b.n	800148a <HAL_GPIO_Init+0x2e2>
 8001446:	bf00      	nop
 8001448:	10320000 	.word	0x10320000
 800144c:	10310000 	.word	0x10310000
 8001450:	10220000 	.word	0x10220000
 8001454:	10210000 	.word	0x10210000
 8001458:	10120000 	.word	0x10120000
 800145c:	10110000 	.word	0x10110000
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000
 8001474:	40011400 	.word	0x40011400
 8001478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_GPIO_Init+0x304>)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	4909      	ldr	r1, [pc, #36]	; (80014ac <HAL_GPIO_Init+0x304>)
 8001486:	4013      	ands	r3, r2
 8001488:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	f47f ae8e 	bne.w	80011bc <HAL_GPIO_Init+0x14>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	372c      	adds	r7, #44	; 0x2c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f806 	bl	8001510 <HAL_GPIO_EXTI_Callback>
  }
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e26c      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8087 	beq.w	8001652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b04      	cmp	r3, #4
 800154e:	d00c      	beq.n	800156a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001550:	4b8f      	ldr	r3, [pc, #572]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b08      	cmp	r3, #8
 800155a:	d112      	bne.n	8001582 <HAL_RCC_OscConfig+0x5e>
 800155c:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d10b      	bne.n	8001582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d06c      	beq.n	8001650 <HAL_RCC_OscConfig+0x12c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d168      	bne.n	8001650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e246      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x76>
 800158c:	4b80      	ldr	r3, [pc, #512]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a7f      	ldr	r2, [pc, #508]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e02e      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x98>
 80015a2:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7a      	ldr	r2, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a77      	ldr	r2, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0xbc>
 80015c6:	4b72      	ldr	r3, [pc, #456]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a71      	ldr	r2, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6e      	ldr	r2, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 80015e0:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a67      	ldr	r2, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fc0a 	bl	8000e18 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fc06 	bl	8000e18 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1fa      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xe4>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fbf6 	bl	8000e18 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fbf2 	bl	8000e18 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1e6      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x10c>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e1ba      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4939      	ldr	r1, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e03a      	b.n	8001726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fbab 	bl	8000e18 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fba7 	bl	8000e18 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e19b      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4927      	ldr	r1, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb8a 	bl	8000e18 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fb86 	bl	8000e18 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e17a      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03a      	beq.n	80017a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d019      	beq.n	800176e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fb6a 	bl	8000e18 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fb66 	bl	8000e18 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e15a      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001766:	2001      	movs	r0, #1
 8001768:	f000 fad8 	bl	8001d1c <RCC_Delay>
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fb50 	bl	8000e18 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177a:	e00f      	b.n	800179c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff fb4c 	bl	8000e18 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d908      	bls.n	800179c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e140      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	42420000 	.word	0x42420000
 8001798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b9e      	ldr	r3, [pc, #632]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e9      	bne.n	800177c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a6 	beq.w	8001902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b94      	ldr	r3, [pc, #592]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a93      	ldr	r2, [pc, #588]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b91      	ldr	r3, [pc, #580]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b8e      	ldr	r3, [pc, #568]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a8a      	ldr	r2, [pc, #552]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fb0d 	bl	8000e18 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fb09 	bl	8000e18 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0fd      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x312>
 8001828:	4b7b      	ldr	r3, [pc, #492]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a7a      	ldr	r2, [pc, #488]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	e02d      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x334>
 800183e:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a72      	ldr	r2, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x356>
 8001860:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a6c      	ldr	r2, [pc, #432]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a69      	ldr	r2, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fabd 	bl	8000e18 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fab9 	bl	8000e18 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0ab      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x37e>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff faa7 	bl	8000e18 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff faa3 	bl	8000e18 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e095      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8081 	beq.w	8001a0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d061      	beq.n	80019dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d146      	bne.n	80019ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_OscConfig+0x4fc>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fa77 	bl	8000e18 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fa73 	bl	8000e18 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e067      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	492d      	ldr	r1, [pc, #180]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a19      	ldr	r1, [r3, #32]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	430b      	orrs	r3, r1
 800197a:	4927      	ldr	r1, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x4fc>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fa47 	bl	8000e18 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fa43 	bl	8000e18 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e037      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x46a>
 80019ac:	e02f      	b.n	8001a0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_RCC_OscConfig+0x4fc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fa30 	bl	8000e18 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff fa2c 	bl	8000e18 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e020      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x498>
 80019da:	e018      	b.n	8001a0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e013      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42420060 	.word	0x42420060

08001a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d0      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4965      	ldr	r1, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d040      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e073      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b14:	f7ff f980 	bl	8000e18 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff f97c 	bl	8000e18 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e053      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d210      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4922      	ldr	r1, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8de 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08004950 	.word	0x08004950
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	2000000c 	.word	0x2000000c

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b490      	push	{r4, r7}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c00:	1d3c      	adds	r4, r7, #4
 8001c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c08:	f240 2301 	movw	r3, #513	; 0x201
 8001c0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x46>
 8001c36:	e02d      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	e02d      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c5b      	lsrs	r3, r3, #17
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c76:	fb02 f203 	mul.w	r2, r2, r3
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	623b      	str	r3, [r7, #32]
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c96:	623b      	str	r3, [r7, #32]
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc90      	pop	{r4, r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08004934 	.word	0x08004934
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	003d0900 	.word	0x003d0900

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd0:	f7ff fff2 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08004960 	.word	0x08004960

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08004960 	.word	0x08004960

08001d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <RCC_Delay+0x34>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <RCC_Delay+0x38>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d38:	bf00      	nop
  }
  while (Delay --);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	60fa      	str	r2, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <RCC_Delay+0x1c>
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000008 	.word	0x20000008
 8001d54:	10624dd3 	.word	0x10624dd3

08001d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e041      	b.n	8001dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fed8 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 faf4 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e041      	b.n	8001e8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f839 	bl	8001e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f000 faa5 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e041      	b.n	8001f3c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f839 	bl	8001f44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f000 fa4d 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e082      	b.n	8002076 <HAL_TIM_IC_ConfigChannel+0x120>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f000 fbe3 	bl	8002758 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 020c 	bic.w	r2, r2, #12
 8001fa0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6999      	ldr	r1, [r3, #24]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	619a      	str	r2, [r3, #24]
 8001fb4:	e05a      	b.n	800206c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d11c      	bne.n	8001ff6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f000 fc4c 	bl	8002868 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fde:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6999      	ldr	r1, [r3, #24]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	021a      	lsls	r2, r3, #8
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	619a      	str	r2, [r3, #24]
 8001ff4:	e03a      	b.n	800206c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f000 fc97 	bl	800293e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020c 	bic.w	r2, r2, #12
 800201e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69d9      	ldr	r1, [r3, #28]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	61da      	str	r2, [r3, #28]
 8002032:	e01b      	b.n	800206c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f000 fcb6 	bl	80029b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002056:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69d9      	ldr	r1, [r3, #28]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	021a      	lsls	r2, r3, #8
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002096:	2302      	movs	r3, #2
 8002098:	e0ac      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	f200 809f 	bhi.w	80021e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020e5 	.word	0x080020e5
 80020b4:	080021e9 	.word	0x080021e9
 80020b8:	080021e9 	.word	0x080021e9
 80020bc:	080021e9 	.word	0x080021e9
 80020c0:	08002125 	.word	0x08002125
 80020c4:	080021e9 	.word	0x080021e9
 80020c8:	080021e9 	.word	0x080021e9
 80020cc:	080021e9 	.word	0x080021e9
 80020d0:	08002167 	.word	0x08002167
 80020d4:	080021e9 	.word	0x080021e9
 80020d8:	080021e9 	.word	0x080021e9
 80020dc:	080021e9 	.word	0x080021e9
 80020e0:	080021a7 	.word	0x080021a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f9ac 	bl	8002448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0208 	orr.w	r2, r2, #8
 80020fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0204 	bic.w	r2, r2, #4
 800210e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6999      	ldr	r1, [r3, #24]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	619a      	str	r2, [r3, #24]
      break;
 8002122:	e062      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f9f2 	bl	8002514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6999      	ldr	r1, [r3, #24]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	021a      	lsls	r2, r3, #8
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	619a      	str	r2, [r3, #24]
      break;
 8002164:	e041      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fa3b 	bl	80025e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0208 	orr.w	r2, r2, #8
 8002180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0204 	bic.w	r2, r2, #4
 8002190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69d9      	ldr	r1, [r3, #28]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	61da      	str	r2, [r3, #28]
      break;
 80021a4:	e021      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fa85 	bl	80026bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69d9      	ldr	r1, [r3, #28]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	021a      	lsls	r2, r3, #8
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	61da      	str	r2, [r3, #28]
      break;
 80021e6:	e000      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80021e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x18>
 8002210:	2302      	movs	r3, #2
 8002212:	e0b3      	b.n	800237c <HAL_TIM_ConfigClockSource+0x180>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800223a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224c:	d03e      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0xd0>
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	f200 8087 	bhi.w	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	f000 8085 	beq.w	8002368 <HAL_TIM_ConfigClockSource+0x16c>
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d87f      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002264:	2b70      	cmp	r3, #112	; 0x70
 8002266:	d01a      	beq.n	800229e <HAL_TIM_ConfigClockSource+0xa2>
 8002268:	2b70      	cmp	r3, #112	; 0x70
 800226a:	d87b      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 800226c:	2b60      	cmp	r3, #96	; 0x60
 800226e:	d050      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x116>
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d877      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002274:	2b50      	cmp	r3, #80	; 0x50
 8002276:	d03c      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002278:	2b50      	cmp	r3, #80	; 0x50
 800227a:	d873      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d058      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x136>
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d86f      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002284:	2b30      	cmp	r3, #48	; 0x30
 8002286:	d064      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
 8002288:	2b30      	cmp	r3, #48	; 0x30
 800228a:	d86b      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 800228c:	2b20      	cmp	r3, #32
 800228e:	d060      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
 8002290:	2b20      	cmp	r3, #32
 8002292:	d867      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
 8002298:	2b10      	cmp	r3, #16
 800229a:	d05a      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800229c:	e062      	b.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f000 fbd7 	bl	8002a60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
      break;
 80022ca:	e04e      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f000 fbc0 	bl	8002a60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ee:	609a      	str	r2, [r3, #8]
      break;
 80022f0:	e03b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	461a      	mov	r2, r3
 8002300:	f000 fa84 	bl	800280c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2150      	movs	r1, #80	; 0x50
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fb8e 	bl	8002a2c <TIM_ITRx_SetConfig>
      break;
 8002310:	e02b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	461a      	mov	r2, r3
 8002320:	f000 fade 	bl	80028e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2160      	movs	r1, #96	; 0x60
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fb7e 	bl	8002a2c <TIM_ITRx_SetConfig>
      break;
 8002330:	e01b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	f000 fa64 	bl	800280c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2140      	movs	r1, #64	; 0x40
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fb6e 	bl	8002a2c <TIM_ITRx_SetConfig>
      break;
 8002350:	e00b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f000 fb65 	bl	8002a2c <TIM_ITRx_SetConfig>
        break;
 8002362:	e002      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002364:	bf00      	nop
 8002366:	e000      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a29      	ldr	r2, [pc, #164]	; (800243c <TIM_Base_SetConfig+0xb8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00b      	beq.n	80023b4 <TIM_Base_SetConfig+0x30>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d007      	beq.n	80023b4 <TIM_Base_SetConfig+0x30>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a26      	ldr	r2, [pc, #152]	; (8002440 <TIM_Base_SetConfig+0xbc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0x30>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <TIM_Base_SetConfig+0xc0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <TIM_Base_SetConfig+0xb8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_Base_SetConfig+0x62>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d007      	beq.n	80023e6 <TIM_Base_SetConfig+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <TIM_Base_SetConfig+0xbc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_Base_SetConfig+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <TIM_Base_SetConfig+0xc0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d108      	bne.n	80023f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <TIM_Base_SetConfig+0xb8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40000400 	.word	0x40000400
 8002444:	40000800 	.word	0x40000800

08002448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0201 	bic.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 0302 	bic.w	r3, r3, #2
 8002490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <TIM_OC1_SetConfig+0xc8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10c      	bne.n	80024be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f023 0308 	bic.w	r3, r3, #8
 80024aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <TIM_OC1_SetConfig+0xc8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	621a      	str	r2, [r3, #32]
}
 8002504:	bf00      	nop
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40012c00 	.word	0x40012c00

08002514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f023 0210 	bic.w	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0320 	bic.w	r3, r3, #32
 800255e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <TIM_OC2_SetConfig+0xd0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10d      	bne.n	8002590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800257a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800258e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <TIM_OC2_SetConfig+0xd0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d113      	bne.n	80025c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800259e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40012c00 	.word	0x40012c00

080025e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <TIM_OC3_SetConfig+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10d      	bne.n	8002662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800264c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <TIM_OC3_SetConfig+0xd0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d113      	bne.n	8002692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	621a      	str	r2, [r3, #32]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00

080026bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	031b      	lsls	r3, r3, #12
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <TIM_OC4_SetConfig+0x98>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d109      	bne.n	8002730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	621a      	str	r2, [r3, #32]
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40012c00 	.word	0x40012c00

08002758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0201 	bic.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <TIM_TI1_SetConfig+0xa8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_TI1_SetConfig+0x46>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d007      	beq.n	800279e <TIM_TI1_SetConfig+0x46>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <TIM_TI1_SetConfig+0xac>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_TI1_SetConfig+0x46>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <TIM_TI1_SetConfig+0xb0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <TIM_TI1_SetConfig+0x4a>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <TIM_TI1_SetConfig+0x4c>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e003      	b.n	80027c2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f023 030a 	bic.w	r3, r3, #10
 80027dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 030a 	and.w	r3, r3, #10
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800

0800280c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f023 030a 	bic.w	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0210 	bic.w	r2, r3, #16
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	031b      	lsls	r3, r3, #12
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 0210 	bic.w	r2, r3, #16
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800290a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	031b      	lsls	r3, r3, #12
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	621a      	str	r2, [r3, #32]
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800293e:	b480      	push	{r7}
 8002940:	b087      	sub	sp, #28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	b2db      	uxtb	r3, r3
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800298e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	031b      	lsls	r3, r3, #12
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	031b      	lsls	r3, r3, #12
 8002a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	621a      	str	r2, [r3, #32]
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f043 0307 	orr.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	021a      	lsls	r2, r3, #8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e046      	b.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d009      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10c      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800

08002b5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e03d      	b.n	8002bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e03f      	b.n	8002c90 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe f833 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2224      	movs	r2, #36	; 0x24
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fbe4 	bl	8003410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d130      	bne.n	8002d14 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_UART_Transmit_IT+0x26>
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e029      	b.n	8002d16 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_UART_Transmit_IT+0x38>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e022      	b.n	8002d16 <HAL_UART_Transmit_IT+0x7e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2221      	movs	r2, #33	; 0x21
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d11d      	bne.n	8002d76 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_UART_Receive_IT+0x26>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e016      	b.n	8002d78 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Receive_IT+0x38>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e00f      	b.n	8002d78 <HAL_UART_Receive_IT+0x58>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f9c5 	bl	80030fc <UART_Start_Receive_IT>
 8002d72:	4603      	mov	r3, r0
 8002d74:	e000      	b.n	8002d78 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x52>
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa76 	bl	80032bc <UART_Receive_IT>
      return;
 8002dd0:	e17b      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80b1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x1bc>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_UART_IRQHandler+0x70>
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a6 	beq.w	8002f3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0x90>
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_UART_IRQHandler+0xb0>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_UART_IRQHandler+0xd0>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00f      	beq.n	8002e7a <HAL_UART_IRQHandler+0xfa>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_UART_IRQHandler+0xee>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0208 	orr.w	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 811e 	beq.w	80030c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_UART_IRQHandler+0x11e>
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fa0f 	bl	80032bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x146>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d031      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f951 	bl	800316e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	4a76      	ldr	r2, [pc, #472]	; (80030d0 <HAL_UART_IRQHandler+0x350>)
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f8dc 	bl	80010bc <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00e      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8da 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00a      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8d6 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e006      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8d2 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f36:	e0c3      	b.n	80030c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	bf00      	nop
    return;
 8002f3a:	e0c1      	b.n	80030c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 80a1 	bne.w	8003088 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 809b 	beq.w	8003088 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8095 	beq.w	8003088 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04e      	beq.n	8003020 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f8c:	8a3b      	ldrh	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8098 	beq.w	80030c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f98:	8a3a      	ldrh	r2, [r7, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	f080 8092 	bcs.w	80030c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8a3a      	ldrh	r2, [r7, #16]
 8002fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d02b      	beq.n	8003008 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0210 	bic.w	r2, r2, #16
 8002ffc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f81f 	bl	8001046 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f864 	bl	80030e6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800301e:	e051      	b.n	80030c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003028:	b29b      	uxth	r3, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d047      	beq.n	80030c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003038:	8a7b      	ldrh	r3, [r7, #18]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800304c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800307c:	8a7b      	ldrh	r3, [r7, #18]
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f830 	bl	80030e6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003086:	e01f      	b.n	80030c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_UART_IRQHandler+0x324>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8a6 	bl	80031ee <UART_Transmit_IT>
    return;
 80030a2:	e012      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_UART_IRQHandler+0x34a>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8e7 	bl	800328c <UART_EndTransmit_IT>
    return;
 80030be:	e004      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
    return;
 80030c0:	bf00      	nop
 80030c2:	e002      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
      return;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
      return;
 80030c8:	bf00      	nop
  }
}
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	080031c7 	.word	0x080031c7

080030d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2222      	movs	r2, #34	; 0x22
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003140:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0220 	orr.w	r2, r2, #32
 8003160:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003184:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0210 	bic.w	r2, r2, #16
 80031ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff ff77 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b21      	cmp	r3, #33	; 0x21
 8003200:	d13e      	bne.n	8003280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d114      	bne.n	8003236 <UART_Transmit_IT+0x48>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d110      	bne.n	8003236 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	e008      	b.n	8003248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6211      	str	r1, [r2, #32]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4619      	mov	r1, r3
 8003256:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10f      	bne.n	800327c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7fd f9bf 	bl	8000630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b22      	cmp	r3, #34	; 0x22
 80032ce:	f040 8099 	bne.w	8003404 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d117      	bne.n	800330c <UART_Receive_IT+0x50>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d113      	bne.n	800330c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
 800330a:	e026      	b.n	800335a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	d007      	beq.n	8003330 <UART_Receive_IT+0x74>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <UART_Receive_IT+0x82>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e008      	b.n	8003350 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334a:	b2da      	uxtb	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4619      	mov	r1, r3
 8003368:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800336a:	2b00      	cmp	r3, #0
 800336c:	d148      	bne.n	8003400 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0220 	bic.w	r2, r2, #32
 800337c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d123      	bne.n	80033f6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0210 	bic.w	r2, r2, #16
 80033c2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d10a      	bne.n	80033e8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff fe79 	bl	80030e6 <HAL_UARTEx_RxEventCallback>
 80033f4:	e002      	b.n	80033fc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd f94e 	bl	8000698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e002      	b.n	8003406 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800344a:	f023 030c 	bic.w	r3, r3, #12
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	430b      	orrs	r3, r1
 8003456:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <UART_SetConfig+0x114>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003478:	f7fe fc3c 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	e002      	b.n	8003486 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003480:	f7fe fc24 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 8003484:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <UART_SetConfig+0x118>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	0119      	lsls	r1, r3, #4
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009a      	lsls	r2, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <UART_SetConfig+0x118>)
 80034be:	fba3 0302 	umull	r0, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2064      	movs	r0, #100	; 0x64
 80034c6:	fb00 f303 	mul.w	r3, r0, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	; 0x32
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <UART_SetConfig+0x118>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034dc:	4419      	add	r1, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009a      	lsls	r2, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <UART_SetConfig+0x118>)
 80034f6:	fba3 0302 	umull	r0, r3, r3, r2
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2064      	movs	r0, #100	; 0x64
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	3332      	adds	r3, #50	; 0x32
 8003508:	4a07      	ldr	r2, [pc, #28]	; (8003528 <UART_SetConfig+0x118>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	440a      	add	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40013800 	.word	0x40013800
 8003528:	51eb851f 	.word	0x51eb851f

0800352c <__errno>:
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <__errno+0x8>)
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000014 	.word	0x20000014

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	2600      	movs	r6, #0
 800353c:	4d0c      	ldr	r5, [pc, #48]	; (8003570 <__libc_init_array+0x38>)
 800353e:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	f001 f91e 	bl	8004788 <_init>
 800354c:	2600      	movs	r6, #0
 800354e:	4d0a      	ldr	r5, [pc, #40]	; (8003578 <__libc_init_array+0x40>)
 8003550:	4c0a      	ldr	r4, [pc, #40]	; (800357c <__libc_init_array+0x44>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	08004b18 	.word	0x08004b18
 8003574:	08004b18 	.word	0x08004b18
 8003578:	08004b18 	.word	0x08004b18
 800357c:	08004b1c 	.word	0x08004b1c

08003580 <memset>:
 8003580:	4603      	mov	r3, r0
 8003582:	4402      	add	r2, r0
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <memset+0xa>
 8003588:	4770      	bx	lr
 800358a:	f803 1b01 	strb.w	r1, [r3], #1
 800358e:	e7f9      	b.n	8003584 <memset+0x4>

08003590 <siscanf>:
 8003590:	b40e      	push	{r1, r2, r3}
 8003592:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003596:	b530      	push	{r4, r5, lr}
 8003598:	b09c      	sub	sp, #112	; 0x70
 800359a:	ac1f      	add	r4, sp, #124	; 0x7c
 800359c:	f854 5b04 	ldr.w	r5, [r4], #4
 80035a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80035a4:	9002      	str	r0, [sp, #8]
 80035a6:	9006      	str	r0, [sp, #24]
 80035a8:	f7fc fdda 	bl	8000160 <strlen>
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <siscanf+0x4c>)
 80035ae:	9003      	str	r0, [sp, #12]
 80035b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80035b2:	2300      	movs	r3, #0
 80035b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80035b6:	9314      	str	r3, [sp, #80]	; 0x50
 80035b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035bc:	9007      	str	r0, [sp, #28]
 80035be:	4808      	ldr	r0, [pc, #32]	; (80035e0 <siscanf+0x50>)
 80035c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80035c4:	462a      	mov	r2, r5
 80035c6:	4623      	mov	r3, r4
 80035c8:	a902      	add	r1, sp, #8
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	9401      	str	r4, [sp, #4]
 80035ce:	f000 f9e1 	bl	8003994 <__ssvfiscanf_r>
 80035d2:	b01c      	add	sp, #112	; 0x70
 80035d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035d8:	b003      	add	sp, #12
 80035da:	4770      	bx	lr
 80035dc:	080035e5 	.word	0x080035e5
 80035e0:	20000014 	.word	0x20000014

080035e4 <__seofread>:
 80035e4:	2000      	movs	r0, #0
 80035e6:	4770      	bx	lr

080035e8 <_vsiprintf_r>:
 80035e8:	b500      	push	{lr}
 80035ea:	b09b      	sub	sp, #108	; 0x6c
 80035ec:	9100      	str	r1, [sp, #0]
 80035ee:	9104      	str	r1, [sp, #16]
 80035f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035f4:	9105      	str	r1, [sp, #20]
 80035f6:	9102      	str	r1, [sp, #8]
 80035f8:	4905      	ldr	r1, [pc, #20]	; (8003610 <_vsiprintf_r+0x28>)
 80035fa:	9103      	str	r1, [sp, #12]
 80035fc:	4669      	mov	r1, sp
 80035fe:	f000 f86f 	bl	80036e0 <_svfiprintf_r>
 8003602:	2200      	movs	r2, #0
 8003604:	9b00      	ldr	r3, [sp, #0]
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	b01b      	add	sp, #108	; 0x6c
 800360a:	f85d fb04 	ldr.w	pc, [sp], #4
 800360e:	bf00      	nop
 8003610:	ffff0208 	.word	0xffff0208

08003614 <vsiprintf>:
 8003614:	4613      	mov	r3, r2
 8003616:	460a      	mov	r2, r1
 8003618:	4601      	mov	r1, r0
 800361a:	4802      	ldr	r0, [pc, #8]	; (8003624 <vsiprintf+0x10>)
 800361c:	6800      	ldr	r0, [r0, #0]
 800361e:	f7ff bfe3 	b.w	80035e8 <_vsiprintf_r>
 8003622:	bf00      	nop
 8003624:	20000014 	.word	0x20000014

08003628 <__ssputs_r>:
 8003628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	688e      	ldr	r6, [r1, #8]
 800362e:	4682      	mov	sl, r0
 8003630:	429e      	cmp	r6, r3
 8003632:	460c      	mov	r4, r1
 8003634:	4690      	mov	r8, r2
 8003636:	461f      	mov	r7, r3
 8003638:	d838      	bhi.n	80036ac <__ssputs_r+0x84>
 800363a:	898a      	ldrh	r2, [r1, #12]
 800363c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003640:	d032      	beq.n	80036a8 <__ssputs_r+0x80>
 8003642:	6825      	ldr	r5, [r4, #0]
 8003644:	6909      	ldr	r1, [r1, #16]
 8003646:	3301      	adds	r3, #1
 8003648:	eba5 0901 	sub.w	r9, r5, r1
 800364c:	6965      	ldr	r5, [r4, #20]
 800364e:	444b      	add	r3, r9
 8003650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003658:	106d      	asrs	r5, r5, #1
 800365a:	429d      	cmp	r5, r3
 800365c:	bf38      	it	cc
 800365e:	461d      	movcc	r5, r3
 8003660:	0553      	lsls	r3, r2, #21
 8003662:	d531      	bpl.n	80036c8 <__ssputs_r+0xa0>
 8003664:	4629      	mov	r1, r5
 8003666:	f000 ffeb 	bl	8004640 <_malloc_r>
 800366a:	4606      	mov	r6, r0
 800366c:	b950      	cbnz	r0, 8003684 <__ssputs_r+0x5c>
 800366e:	230c      	movs	r3, #12
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f8ca 3000 	str.w	r3, [sl]
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	464a      	mov	r2, r9
 8003686:	6921      	ldr	r1, [r4, #16]
 8003688:	f000 ff66 	bl	8004558 <memcpy>
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	6126      	str	r6, [r4, #16]
 800369a:	444e      	add	r6, r9
 800369c:	6026      	str	r6, [r4, #0]
 800369e:	463e      	mov	r6, r7
 80036a0:	6165      	str	r5, [r4, #20]
 80036a2:	eba5 0509 	sub.w	r5, r5, r9
 80036a6:	60a5      	str	r5, [r4, #8]
 80036a8:	42be      	cmp	r6, r7
 80036aa:	d900      	bls.n	80036ae <__ssputs_r+0x86>
 80036ac:	463e      	mov	r6, r7
 80036ae:	4632      	mov	r2, r6
 80036b0:	4641      	mov	r1, r8
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	f000 ff5e 	bl	8004574 <memmove>
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	1b9b      	subs	r3, r3, r6
 80036be:	4432      	add	r2, r6
 80036c0:	2000      	movs	r0, #0
 80036c2:	60a3      	str	r3, [r4, #8]
 80036c4:	6022      	str	r2, [r4, #0]
 80036c6:	e7db      	b.n	8003680 <__ssputs_r+0x58>
 80036c8:	462a      	mov	r2, r5
 80036ca:	f001 f813 	bl	80046f4 <_realloc_r>
 80036ce:	4606      	mov	r6, r0
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d1e1      	bne.n	8003698 <__ssputs_r+0x70>
 80036d4:	4650      	mov	r0, sl
 80036d6:	6921      	ldr	r1, [r4, #16]
 80036d8:	f000 ff66 	bl	80045a8 <_free_r>
 80036dc:	e7c7      	b.n	800366e <__ssputs_r+0x46>
	...

080036e0 <_svfiprintf_r>:
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	4698      	mov	r8, r3
 80036e6:	898b      	ldrh	r3, [r1, #12]
 80036e8:	4607      	mov	r7, r0
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	460d      	mov	r5, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	b09d      	sub	sp, #116	; 0x74
 80036f2:	d50e      	bpl.n	8003712 <_svfiprintf_r+0x32>
 80036f4:	690b      	ldr	r3, [r1, #16]
 80036f6:	b963      	cbnz	r3, 8003712 <_svfiprintf_r+0x32>
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	f000 ffa1 	bl	8004640 <_malloc_r>
 80036fe:	6028      	str	r0, [r5, #0]
 8003700:	6128      	str	r0, [r5, #16]
 8003702:	b920      	cbnz	r0, 800370e <_svfiprintf_r+0x2e>
 8003704:	230c      	movs	r3, #12
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	e0d1      	b.n	80038b2 <_svfiprintf_r+0x1d2>
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	616b      	str	r3, [r5, #20]
 8003712:	2300      	movs	r3, #0
 8003714:	9309      	str	r3, [sp, #36]	; 0x24
 8003716:	2320      	movs	r3, #32
 8003718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800371c:	2330      	movs	r3, #48	; 0x30
 800371e:	f04f 0901 	mov.w	r9, #1
 8003722:	f8cd 800c 	str.w	r8, [sp, #12]
 8003726:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038cc <_svfiprintf_r+0x1ec>
 800372a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800372e:	4623      	mov	r3, r4
 8003730:	469a      	mov	sl, r3
 8003732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003736:	b10a      	cbz	r2, 800373c <_svfiprintf_r+0x5c>
 8003738:	2a25      	cmp	r2, #37	; 0x25
 800373a:	d1f9      	bne.n	8003730 <_svfiprintf_r+0x50>
 800373c:	ebba 0b04 	subs.w	fp, sl, r4
 8003740:	d00b      	beq.n	800375a <_svfiprintf_r+0x7a>
 8003742:	465b      	mov	r3, fp
 8003744:	4622      	mov	r2, r4
 8003746:	4629      	mov	r1, r5
 8003748:	4638      	mov	r0, r7
 800374a:	f7ff ff6d 	bl	8003628 <__ssputs_r>
 800374e:	3001      	adds	r0, #1
 8003750:	f000 80aa 	beq.w	80038a8 <_svfiprintf_r+0x1c8>
 8003754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003756:	445a      	add	r2, fp
 8003758:	9209      	str	r2, [sp, #36]	; 0x24
 800375a:	f89a 3000 	ldrb.w	r3, [sl]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a2 	beq.w	80038a8 <_svfiprintf_r+0x1c8>
 8003764:	2300      	movs	r3, #0
 8003766:	f04f 32ff 	mov.w	r2, #4294967295
 800376a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376e:	f10a 0a01 	add.w	sl, sl, #1
 8003772:	9304      	str	r3, [sp, #16]
 8003774:	9307      	str	r3, [sp, #28]
 8003776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800377a:	931a      	str	r3, [sp, #104]	; 0x68
 800377c:	4654      	mov	r4, sl
 800377e:	2205      	movs	r2, #5
 8003780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003784:	4851      	ldr	r0, [pc, #324]	; (80038cc <_svfiprintf_r+0x1ec>)
 8003786:	f000 fed9 	bl	800453c <memchr>
 800378a:	9a04      	ldr	r2, [sp, #16]
 800378c:	b9d8      	cbnz	r0, 80037c6 <_svfiprintf_r+0xe6>
 800378e:	06d0      	lsls	r0, r2, #27
 8003790:	bf44      	itt	mi
 8003792:	2320      	movmi	r3, #32
 8003794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003798:	0711      	lsls	r1, r2, #28
 800379a:	bf44      	itt	mi
 800379c:	232b      	movmi	r3, #43	; 0x2b
 800379e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a2:	f89a 3000 	ldrb.w	r3, [sl]
 80037a6:	2b2a      	cmp	r3, #42	; 0x2a
 80037a8:	d015      	beq.n	80037d6 <_svfiprintf_r+0xf6>
 80037aa:	4654      	mov	r4, sl
 80037ac:	2000      	movs	r0, #0
 80037ae:	f04f 0c0a 	mov.w	ip, #10
 80037b2:	9a07      	ldr	r2, [sp, #28]
 80037b4:	4621      	mov	r1, r4
 80037b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ba:	3b30      	subs	r3, #48	; 0x30
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d94e      	bls.n	800385e <_svfiprintf_r+0x17e>
 80037c0:	b1b0      	cbz	r0, 80037f0 <_svfiprintf_r+0x110>
 80037c2:	9207      	str	r2, [sp, #28]
 80037c4:	e014      	b.n	80037f0 <_svfiprintf_r+0x110>
 80037c6:	eba0 0308 	sub.w	r3, r0, r8
 80037ca:	fa09 f303 	lsl.w	r3, r9, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	46a2      	mov	sl, r4
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	e7d2      	b.n	800377c <_svfiprintf_r+0x9c>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	1d19      	adds	r1, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9103      	str	r1, [sp, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bfbb      	ittet	lt
 80037e2:	425b      	neglt	r3, r3
 80037e4:	f042 0202 	orrlt.w	r2, r2, #2
 80037e8:	9307      	strge	r3, [sp, #28]
 80037ea:	9307      	strlt	r3, [sp, #28]
 80037ec:	bfb8      	it	lt
 80037ee:	9204      	strlt	r2, [sp, #16]
 80037f0:	7823      	ldrb	r3, [r4, #0]
 80037f2:	2b2e      	cmp	r3, #46	; 0x2e
 80037f4:	d10c      	bne.n	8003810 <_svfiprintf_r+0x130>
 80037f6:	7863      	ldrb	r3, [r4, #1]
 80037f8:	2b2a      	cmp	r3, #42	; 0x2a
 80037fa:	d135      	bne.n	8003868 <_svfiprintf_r+0x188>
 80037fc:	9b03      	ldr	r3, [sp, #12]
 80037fe:	3402      	adds	r4, #2
 8003800:	1d1a      	adds	r2, r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	9203      	str	r2, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfb8      	it	lt
 800380a:	f04f 33ff 	movlt.w	r3, #4294967295
 800380e:	9305      	str	r3, [sp, #20]
 8003810:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038dc <_svfiprintf_r+0x1fc>
 8003814:	2203      	movs	r2, #3
 8003816:	4650      	mov	r0, sl
 8003818:	7821      	ldrb	r1, [r4, #0]
 800381a:	f000 fe8f 	bl	800453c <memchr>
 800381e:	b140      	cbz	r0, 8003832 <_svfiprintf_r+0x152>
 8003820:	2340      	movs	r3, #64	; 0x40
 8003822:	eba0 000a 	sub.w	r0, r0, sl
 8003826:	fa03 f000 	lsl.w	r0, r3, r0
 800382a:	9b04      	ldr	r3, [sp, #16]
 800382c:	3401      	adds	r4, #1
 800382e:	4303      	orrs	r3, r0
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003836:	2206      	movs	r2, #6
 8003838:	4825      	ldr	r0, [pc, #148]	; (80038d0 <_svfiprintf_r+0x1f0>)
 800383a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800383e:	f000 fe7d 	bl	800453c <memchr>
 8003842:	2800      	cmp	r0, #0
 8003844:	d038      	beq.n	80038b8 <_svfiprintf_r+0x1d8>
 8003846:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <_svfiprintf_r+0x1f4>)
 8003848:	bb1b      	cbnz	r3, 8003892 <_svfiprintf_r+0x1b2>
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	3307      	adds	r3, #7
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	3308      	adds	r3, #8
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003858:	4433      	add	r3, r6
 800385a:	9309      	str	r3, [sp, #36]	; 0x24
 800385c:	e767      	b.n	800372e <_svfiprintf_r+0x4e>
 800385e:	460c      	mov	r4, r1
 8003860:	2001      	movs	r0, #1
 8003862:	fb0c 3202 	mla	r2, ip, r2, r3
 8003866:	e7a5      	b.n	80037b4 <_svfiprintf_r+0xd4>
 8003868:	2300      	movs	r3, #0
 800386a:	f04f 0c0a 	mov.w	ip, #10
 800386e:	4619      	mov	r1, r3
 8003870:	3401      	adds	r4, #1
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	4620      	mov	r0, r4
 8003876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800387a:	3a30      	subs	r2, #48	; 0x30
 800387c:	2a09      	cmp	r2, #9
 800387e:	d903      	bls.n	8003888 <_svfiprintf_r+0x1a8>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0c5      	beq.n	8003810 <_svfiprintf_r+0x130>
 8003884:	9105      	str	r1, [sp, #20]
 8003886:	e7c3      	b.n	8003810 <_svfiprintf_r+0x130>
 8003888:	4604      	mov	r4, r0
 800388a:	2301      	movs	r3, #1
 800388c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003890:	e7f0      	b.n	8003874 <_svfiprintf_r+0x194>
 8003892:	ab03      	add	r3, sp, #12
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	462a      	mov	r2, r5
 8003898:	4638      	mov	r0, r7
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <_svfiprintf_r+0x1f8>)
 800389c:	a904      	add	r1, sp, #16
 800389e:	f3af 8000 	nop.w
 80038a2:	1c42      	adds	r2, r0, #1
 80038a4:	4606      	mov	r6, r0
 80038a6:	d1d6      	bne.n	8003856 <_svfiprintf_r+0x176>
 80038a8:	89ab      	ldrh	r3, [r5, #12]
 80038aa:	065b      	lsls	r3, r3, #25
 80038ac:	f53f af2c 	bmi.w	8003708 <_svfiprintf_r+0x28>
 80038b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b2:	b01d      	add	sp, #116	; 0x74
 80038b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b8:	ab03      	add	r3, sp, #12
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	462a      	mov	r2, r5
 80038be:	4638      	mov	r0, r7
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <_svfiprintf_r+0x1f8>)
 80038c2:	a904      	add	r1, sp, #16
 80038c4:	f000 fa50 	bl	8003d68 <_printf_i>
 80038c8:	e7eb      	b.n	80038a2 <_svfiprintf_r+0x1c2>
 80038ca:	bf00      	nop
 80038cc:	08004a69 	.word	0x08004a69
 80038d0:	08004a73 	.word	0x08004a73
 80038d4:	00000000 	.word	0x00000000
 80038d8:	08003629 	.word	0x08003629
 80038dc:	08004a6f 	.word	0x08004a6f

080038e0 <_sungetc_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	1c4b      	adds	r3, r1, #1
 80038e4:	4614      	mov	r4, r2
 80038e6:	d103      	bne.n	80038f0 <_sungetc_r+0x10>
 80038e8:	f04f 35ff 	mov.w	r5, #4294967295
 80038ec:	4628      	mov	r0, r5
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	8993      	ldrh	r3, [r2, #12]
 80038f2:	b2cd      	uxtb	r5, r1
 80038f4:	f023 0320 	bic.w	r3, r3, #32
 80038f8:	8193      	strh	r3, [r2, #12]
 80038fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038fc:	6852      	ldr	r2, [r2, #4]
 80038fe:	b18b      	cbz	r3, 8003924 <_sungetc_r+0x44>
 8003900:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003902:	4293      	cmp	r3, r2
 8003904:	dd08      	ble.n	8003918 <_sungetc_r+0x38>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	6022      	str	r2, [r4, #0]
 800390c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	3301      	adds	r3, #1
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	e7e9      	b.n	80038ec <_sungetc_r+0xc>
 8003918:	4621      	mov	r1, r4
 800391a:	f000 fdd5 	bl	80044c8 <__submore>
 800391e:	2800      	cmp	r0, #0
 8003920:	d0f1      	beq.n	8003906 <_sungetc_r+0x26>
 8003922:	e7e1      	b.n	80038e8 <_sungetc_r+0x8>
 8003924:	6921      	ldr	r1, [r4, #16]
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	b151      	cbz	r1, 8003940 <_sungetc_r+0x60>
 800392a:	4299      	cmp	r1, r3
 800392c:	d208      	bcs.n	8003940 <_sungetc_r+0x60>
 800392e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003932:	42a9      	cmp	r1, r5
 8003934:	d104      	bne.n	8003940 <_sungetc_r+0x60>
 8003936:	3b01      	subs	r3, #1
 8003938:	3201      	adds	r2, #1
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	6062      	str	r2, [r4, #4]
 800393e:	e7d5      	b.n	80038ec <_sungetc_r+0xc>
 8003940:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003948:	6363      	str	r3, [r4, #52]	; 0x34
 800394a:	2303      	movs	r3, #3
 800394c:	63a3      	str	r3, [r4, #56]	; 0x38
 800394e:	4623      	mov	r3, r4
 8003950:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	2301      	movs	r3, #1
 8003958:	e7dc      	b.n	8003914 <_sungetc_r+0x34>

0800395a <__ssrefill_r>:
 800395a:	b510      	push	{r4, lr}
 800395c:	460c      	mov	r4, r1
 800395e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003960:	b169      	cbz	r1, 800397e <__ssrefill_r+0x24>
 8003962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003966:	4299      	cmp	r1, r3
 8003968:	d001      	beq.n	800396e <__ssrefill_r+0x14>
 800396a:	f000 fe1d 	bl	80045a8 <_free_r>
 800396e:	2000      	movs	r0, #0
 8003970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003972:	6360      	str	r0, [r4, #52]	; 0x34
 8003974:	6063      	str	r3, [r4, #4]
 8003976:	b113      	cbz	r3, 800397e <__ssrefill_r+0x24>
 8003978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	bd10      	pop	{r4, pc}
 800397e:	6923      	ldr	r3, [r4, #16]
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	2300      	movs	r3, #0
 8003988:	6063      	str	r3, [r4, #4]
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f043 0320 	orr.w	r3, r3, #32
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	e7f3      	b.n	800397c <__ssrefill_r+0x22>

08003994 <__ssvfiscanf_r>:
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	460c      	mov	r4, r1
 800399a:	2100      	movs	r1, #0
 800399c:	4606      	mov	r6, r0
 800399e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80039a2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80039a6:	49b3      	ldr	r1, [pc, #716]	; (8003c74 <__ssvfiscanf_r+0x2e0>)
 80039a8:	f10d 0804 	add.w	r8, sp, #4
 80039ac:	91a0      	str	r1, [sp, #640]	; 0x280
 80039ae:	49b2      	ldr	r1, [pc, #712]	; (8003c78 <__ssvfiscanf_r+0x2e4>)
 80039b0:	4fb2      	ldr	r7, [pc, #712]	; (8003c7c <__ssvfiscanf_r+0x2e8>)
 80039b2:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8003c80 <__ssvfiscanf_r+0x2ec>
 80039b6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80039ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	f892 a000 	ldrb.w	sl, [r2]
 80039c2:	f1ba 0f00 	cmp.w	sl, #0
 80039c6:	f000 8153 	beq.w	8003c70 <__ssvfiscanf_r+0x2dc>
 80039ca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80039ce:	1c55      	adds	r5, r2, #1
 80039d0:	f013 0308 	ands.w	r3, r3, #8
 80039d4:	d019      	beq.n	8003a0a <__ssvfiscanf_r+0x76>
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dd0f      	ble.n	80039fc <__ssvfiscanf_r+0x68>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	5cba      	ldrb	r2, [r7, r2]
 80039e2:	0712      	lsls	r2, r2, #28
 80039e4:	d401      	bmi.n	80039ea <__ssvfiscanf_r+0x56>
 80039e6:	462a      	mov	r2, r5
 80039e8:	e7e9      	b.n	80039be <__ssvfiscanf_r+0x2a>
 80039ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80039ec:	3301      	adds	r3, #1
 80039ee:	3201      	adds	r2, #1
 80039f0:	9245      	str	r2, [sp, #276]	; 0x114
 80039f2:	6862      	ldr	r2, [r4, #4]
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	3a01      	subs	r2, #1
 80039f8:	6062      	str	r2, [r4, #4]
 80039fa:	e7ec      	b.n	80039d6 <__ssvfiscanf_r+0x42>
 80039fc:	4621      	mov	r1, r4
 80039fe:	4630      	mov	r0, r6
 8003a00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a02:	4798      	blx	r3
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d0e9      	beq.n	80039dc <__ssvfiscanf_r+0x48>
 8003a08:	e7ed      	b.n	80039e6 <__ssvfiscanf_r+0x52>
 8003a0a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003a0e:	f040 8086 	bne.w	8003b1e <__ssvfiscanf_r+0x18a>
 8003a12:	9341      	str	r3, [sp, #260]	; 0x104
 8003a14:	9343      	str	r3, [sp, #268]	; 0x10c
 8003a16:	7853      	ldrb	r3, [r2, #1]
 8003a18:	2b2a      	cmp	r3, #42	; 0x2a
 8003a1a:	bf04      	itt	eq
 8003a1c:	2310      	moveq	r3, #16
 8003a1e:	1c95      	addeq	r5, r2, #2
 8003a20:	f04f 020a 	mov.w	r2, #10
 8003a24:	bf08      	it	eq
 8003a26:	9341      	streq	r3, [sp, #260]	; 0x104
 8003a28:	46ab      	mov	fp, r5
 8003a2a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003a2e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003a32:	2b09      	cmp	r3, #9
 8003a34:	d91d      	bls.n	8003a72 <__ssvfiscanf_r+0xde>
 8003a36:	2203      	movs	r2, #3
 8003a38:	4891      	ldr	r0, [pc, #580]	; (8003c80 <__ssvfiscanf_r+0x2ec>)
 8003a3a:	f000 fd7f 	bl	800453c <memchr>
 8003a3e:	b140      	cbz	r0, 8003a52 <__ssvfiscanf_r+0xbe>
 8003a40:	2301      	movs	r3, #1
 8003a42:	465d      	mov	r5, fp
 8003a44:	eba0 0009 	sub.w	r0, r0, r9
 8003a48:	fa03 f000 	lsl.w	r0, r3, r0
 8003a4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a4e:	4318      	orrs	r0, r3
 8003a50:	9041      	str	r0, [sp, #260]	; 0x104
 8003a52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a56:	2b78      	cmp	r3, #120	; 0x78
 8003a58:	d806      	bhi.n	8003a68 <__ssvfiscanf_r+0xd4>
 8003a5a:	2b57      	cmp	r3, #87	; 0x57
 8003a5c:	d810      	bhi.n	8003a80 <__ssvfiscanf_r+0xec>
 8003a5e:	2b25      	cmp	r3, #37	; 0x25
 8003a60:	d05d      	beq.n	8003b1e <__ssvfiscanf_r+0x18a>
 8003a62:	d857      	bhi.n	8003b14 <__ssvfiscanf_r+0x180>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d075      	beq.n	8003b54 <__ssvfiscanf_r+0x1c0>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8003a6c:	230a      	movs	r3, #10
 8003a6e:	9342      	str	r3, [sp, #264]	; 0x108
 8003a70:	e082      	b.n	8003b78 <__ssvfiscanf_r+0x1e4>
 8003a72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003a74:	465d      	mov	r5, fp
 8003a76:	fb02 1303 	mla	r3, r2, r3, r1
 8003a7a:	3b30      	subs	r3, #48	; 0x30
 8003a7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8003a7e:	e7d3      	b.n	8003a28 <__ssvfiscanf_r+0x94>
 8003a80:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003a84:	2a20      	cmp	r2, #32
 8003a86:	d8ef      	bhi.n	8003a68 <__ssvfiscanf_r+0xd4>
 8003a88:	a101      	add	r1, pc, #4	; (adr r1, 8003a90 <__ssvfiscanf_r+0xfc>)
 8003a8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003b63 	.word	0x08003b63
 8003a94:	08003a69 	.word	0x08003a69
 8003a98:	08003a69 	.word	0x08003a69
 8003a9c:	08003bc1 	.word	0x08003bc1
 8003aa0:	08003a69 	.word	0x08003a69
 8003aa4:	08003a69 	.word	0x08003a69
 8003aa8:	08003a69 	.word	0x08003a69
 8003aac:	08003a69 	.word	0x08003a69
 8003ab0:	08003a69 	.word	0x08003a69
 8003ab4:	08003a69 	.word	0x08003a69
 8003ab8:	08003a69 	.word	0x08003a69
 8003abc:	08003bd7 	.word	0x08003bd7
 8003ac0:	08003bad 	.word	0x08003bad
 8003ac4:	08003b1b 	.word	0x08003b1b
 8003ac8:	08003b1b 	.word	0x08003b1b
 8003acc:	08003b1b 	.word	0x08003b1b
 8003ad0:	08003a69 	.word	0x08003a69
 8003ad4:	08003bb1 	.word	0x08003bb1
 8003ad8:	08003a69 	.word	0x08003a69
 8003adc:	08003a69 	.word	0x08003a69
 8003ae0:	08003a69 	.word	0x08003a69
 8003ae4:	08003a69 	.word	0x08003a69
 8003ae8:	08003be7 	.word	0x08003be7
 8003aec:	08003bb9 	.word	0x08003bb9
 8003af0:	08003b5b 	.word	0x08003b5b
 8003af4:	08003a69 	.word	0x08003a69
 8003af8:	08003a69 	.word	0x08003a69
 8003afc:	08003be3 	.word	0x08003be3
 8003b00:	08003a69 	.word	0x08003a69
 8003b04:	08003bad 	.word	0x08003bad
 8003b08:	08003a69 	.word	0x08003a69
 8003b0c:	08003a69 	.word	0x08003a69
 8003b10:	08003b63 	.word	0x08003b63
 8003b14:	3b45      	subs	r3, #69	; 0x45
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d8a6      	bhi.n	8003a68 <__ssvfiscanf_r+0xd4>
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	e02b      	b.n	8003b76 <__ssvfiscanf_r+0x1e2>
 8003b1e:	6863      	ldr	r3, [r4, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	dd0d      	ble.n	8003b40 <__ssvfiscanf_r+0x1ac>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	4552      	cmp	r2, sl
 8003b2a:	f040 80a1 	bne.w	8003c70 <__ssvfiscanf_r+0x2dc>
 8003b2e:	3301      	adds	r3, #1
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003b36:	3a01      	subs	r2, #1
 8003b38:	3301      	adds	r3, #1
 8003b3a:	6062      	str	r2, [r4, #4]
 8003b3c:	9345      	str	r3, [sp, #276]	; 0x114
 8003b3e:	e752      	b.n	80039e6 <__ssvfiscanf_r+0x52>
 8003b40:	4621      	mov	r1, r4
 8003b42:	4630      	mov	r0, r6
 8003b44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b46:	4798      	blx	r3
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d0eb      	beq.n	8003b24 <__ssvfiscanf_r+0x190>
 8003b4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	f040 8084 	bne.w	8003c5c <__ssvfiscanf_r+0x2c8>
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	e086      	b.n	8003c68 <__ssvfiscanf_r+0x2d4>
 8003b5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	9241      	str	r2, [sp, #260]	; 0x104
 8003b62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b68:	9241      	str	r2, [sp, #260]	; 0x104
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	2b6f      	cmp	r3, #111	; 0x6f
 8003b6e:	bf34      	ite	cc
 8003b70:	2303      	movcc	r3, #3
 8003b72:	2304      	movcs	r3, #4
 8003b74:	9242      	str	r2, [sp, #264]	; 0x108
 8003b76:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	dd41      	ble.n	8003c02 <__ssvfiscanf_r+0x26e>
 8003b7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b80:	0659      	lsls	r1, r3, #25
 8003b82:	d404      	bmi.n	8003b8e <__ssvfiscanf_r+0x1fa>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	5cba      	ldrb	r2, [r7, r2]
 8003b8a:	0712      	lsls	r2, r2, #28
 8003b8c:	d440      	bmi.n	8003c10 <__ssvfiscanf_r+0x27c>
 8003b8e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	dc4f      	bgt.n	8003c34 <__ssvfiscanf_r+0x2a0>
 8003b94:	466b      	mov	r3, sp
 8003b96:	4622      	mov	r2, r4
 8003b98:	4630      	mov	r0, r6
 8003b9a:	a941      	add	r1, sp, #260	; 0x104
 8003b9c:	f000 fa0a 	bl	8003fb4 <_scanf_chars>
 8003ba0:	2801      	cmp	r0, #1
 8003ba2:	d065      	beq.n	8003c70 <__ssvfiscanf_r+0x2dc>
 8003ba4:	2802      	cmp	r0, #2
 8003ba6:	f47f af1e 	bne.w	80039e6 <__ssvfiscanf_r+0x52>
 8003baa:	e7cf      	b.n	8003b4c <__ssvfiscanf_r+0x1b8>
 8003bac:	220a      	movs	r2, #10
 8003bae:	e7dd      	b.n	8003b6c <__ssvfiscanf_r+0x1d8>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9342      	str	r3, [sp, #264]	; 0x108
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e7de      	b.n	8003b76 <__ssvfiscanf_r+0x1e2>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	9342      	str	r3, [sp, #264]	; 0x108
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e7da      	b.n	8003b76 <__ssvfiscanf_r+0x1e2>
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f000 fb40 	bl	8004248 <__sccl>
 8003bc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bca:	4605      	mov	r5, r0
 8003bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd0:	9341      	str	r3, [sp, #260]	; 0x104
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e7cf      	b.n	8003b76 <__ssvfiscanf_r+0x1e2>
 8003bd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bdc:	9341      	str	r3, [sp, #260]	; 0x104
 8003bde:	2300      	movs	r3, #0
 8003be0:	e7c9      	b.n	8003b76 <__ssvfiscanf_r+0x1e2>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e7c7      	b.n	8003b76 <__ssvfiscanf_r+0x1e2>
 8003be6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003be8:	06c3      	lsls	r3, r0, #27
 8003bea:	f53f aefc 	bmi.w	80039e6 <__ssvfiscanf_r+0x52>
 8003bee:	9b00      	ldr	r3, [sp, #0]
 8003bf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bf2:	1d19      	adds	r1, r3, #4
 8003bf4:	9100      	str	r1, [sp, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	07c0      	lsls	r0, r0, #31
 8003bfa:	bf4c      	ite	mi
 8003bfc:	801a      	strhmi	r2, [r3, #0]
 8003bfe:	601a      	strpl	r2, [r3, #0]
 8003c00:	e6f1      	b.n	80039e6 <__ssvfiscanf_r+0x52>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c08:	4798      	blx	r3
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0b7      	beq.n	8003b7e <__ssvfiscanf_r+0x1ea>
 8003c0e:	e79d      	b.n	8003b4c <__ssvfiscanf_r+0x1b8>
 8003c10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c12:	3201      	adds	r2, #1
 8003c14:	9245      	str	r2, [sp, #276]	; 0x114
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	6062      	str	r2, [r4, #4]
 8003c1e:	dd02      	ble.n	8003c26 <__ssvfiscanf_r+0x292>
 8003c20:	3301      	adds	r3, #1
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	e7ae      	b.n	8003b84 <__ssvfiscanf_r+0x1f0>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4630      	mov	r0, r6
 8003c2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c2c:	4798      	blx	r3
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0a8      	beq.n	8003b84 <__ssvfiscanf_r+0x1f0>
 8003c32:	e78b      	b.n	8003b4c <__ssvfiscanf_r+0x1b8>
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	dc06      	bgt.n	8003c46 <__ssvfiscanf_r+0x2b2>
 8003c38:	466b      	mov	r3, sp
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	a941      	add	r1, sp, #260	; 0x104
 8003c40:	f000 fa10 	bl	8004064 <_scanf_i>
 8003c44:	e7ac      	b.n	8003ba0 <__ssvfiscanf_r+0x20c>
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <__ssvfiscanf_r+0x2f0>)
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f43f aecc 	beq.w	80039e6 <__ssvfiscanf_r+0x52>
 8003c4e:	466b      	mov	r3, sp
 8003c50:	4622      	mov	r2, r4
 8003c52:	4630      	mov	r0, r6
 8003c54:	a941      	add	r1, sp, #260	; 0x104
 8003c56:	f3af 8000 	nop.w
 8003c5a:	e7a1      	b.n	8003ba0 <__ssvfiscanf_r+0x20c>
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c62:	bf18      	it	ne
 8003c64:	f04f 30ff 	movne.w	r0, #4294967295
 8003c68:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c72:	e7f9      	b.n	8003c68 <__ssvfiscanf_r+0x2d4>
 8003c74:	080038e1 	.word	0x080038e1
 8003c78:	0800395b 	.word	0x0800395b
 8003c7c:	08004969 	.word	0x08004969
 8003c80:	08004a6f 	.word	0x08004a6f
 8003c84:	00000000 	.word	0x00000000

08003c88 <_printf_common>:
 8003c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	4699      	mov	r9, r3
 8003c90:	688a      	ldr	r2, [r1, #8]
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	4607      	mov	r7, r0
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bfb8      	it	lt
 8003c9a:	4613      	movlt	r3, r2
 8003c9c:	6033      	str	r3, [r6, #0]
 8003c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca8:	b10a      	cbz	r2, 8003cae <_printf_common+0x26>
 8003caa:	3301      	adds	r3, #1
 8003cac:	6033      	str	r3, [r6, #0]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	0699      	lsls	r1, r3, #26
 8003cb2:	bf42      	ittt	mi
 8003cb4:	6833      	ldrmi	r3, [r6, #0]
 8003cb6:	3302      	addmi	r3, #2
 8003cb8:	6033      	strmi	r3, [r6, #0]
 8003cba:	6825      	ldr	r5, [r4, #0]
 8003cbc:	f015 0506 	ands.w	r5, r5, #6
 8003cc0:	d106      	bne.n	8003cd0 <_printf_common+0x48>
 8003cc2:	f104 0a19 	add.w	sl, r4, #25
 8003cc6:	68e3      	ldr	r3, [r4, #12]
 8003cc8:	6832      	ldr	r2, [r6, #0]
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	42ab      	cmp	r3, r5
 8003cce:	dc28      	bgt.n	8003d22 <_printf_common+0x9a>
 8003cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cd4:	1e13      	subs	r3, r2, #0
 8003cd6:	6822      	ldr	r2, [r4, #0]
 8003cd8:	bf18      	it	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	0692      	lsls	r2, r2, #26
 8003cde:	d42d      	bmi.n	8003d3c <_printf_common+0xb4>
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ce8:	47c0      	blx	r8
 8003cea:	3001      	adds	r0, #1
 8003cec:	d020      	beq.n	8003d30 <_printf_common+0xa8>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	68e5      	ldr	r5, [r4, #12]
 8003cf2:	f003 0306 	and.w	r3, r3, #6
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf18      	it	ne
 8003cfa:	2500      	movne	r5, #0
 8003cfc:	6832      	ldr	r2, [r6, #0]
 8003cfe:	f04f 0600 	mov.w	r6, #0
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	bf08      	it	eq
 8003d06:	1aad      	subeq	r5, r5, r2
 8003d08:	6922      	ldr	r2, [r4, #16]
 8003d0a:	bf08      	it	eq
 8003d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bfc4      	itt	gt
 8003d14:	1a9b      	subgt	r3, r3, r2
 8003d16:	18ed      	addgt	r5, r5, r3
 8003d18:	341a      	adds	r4, #26
 8003d1a:	42b5      	cmp	r5, r6
 8003d1c:	d11a      	bne.n	8003d54 <_printf_common+0xcc>
 8003d1e:	2000      	movs	r0, #0
 8003d20:	e008      	b.n	8003d34 <_printf_common+0xac>
 8003d22:	2301      	movs	r3, #1
 8003d24:	4652      	mov	r2, sl
 8003d26:	4649      	mov	r1, r9
 8003d28:	4638      	mov	r0, r7
 8003d2a:	47c0      	blx	r8
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d103      	bne.n	8003d38 <_printf_common+0xb0>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d38:	3501      	adds	r5, #1
 8003d3a:	e7c4      	b.n	8003cc6 <_printf_common+0x3e>
 8003d3c:	2030      	movs	r0, #48	; 0x30
 8003d3e:	18e1      	adds	r1, r4, r3
 8003d40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d4a:	4422      	add	r2, r4
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d52:	e7c5      	b.n	8003ce0 <_printf_common+0x58>
 8003d54:	2301      	movs	r3, #1
 8003d56:	4622      	mov	r2, r4
 8003d58:	4649      	mov	r1, r9
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	47c0      	blx	r8
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d0e6      	beq.n	8003d30 <_printf_common+0xa8>
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7d9      	b.n	8003d1a <_printf_common+0x92>
	...

08003d68 <_printf_i>:
 8003d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	7e27      	ldrb	r7, [r4, #24]
 8003d70:	4691      	mov	r9, r2
 8003d72:	2f78      	cmp	r7, #120	; 0x78
 8003d74:	4680      	mov	r8, r0
 8003d76:	469a      	mov	sl, r3
 8003d78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d7e:	d807      	bhi.n	8003d90 <_printf_i+0x28>
 8003d80:	2f62      	cmp	r7, #98	; 0x62
 8003d82:	d80a      	bhi.n	8003d9a <_printf_i+0x32>
 8003d84:	2f00      	cmp	r7, #0
 8003d86:	f000 80d9 	beq.w	8003f3c <_printf_i+0x1d4>
 8003d8a:	2f58      	cmp	r7, #88	; 0x58
 8003d8c:	f000 80a4 	beq.w	8003ed8 <_printf_i+0x170>
 8003d90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d98:	e03a      	b.n	8003e10 <_printf_i+0xa8>
 8003d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d9e:	2b15      	cmp	r3, #21
 8003da0:	d8f6      	bhi.n	8003d90 <_printf_i+0x28>
 8003da2:	a001      	add	r0, pc, #4	; (adr r0, 8003da8 <_printf_i+0x40>)
 8003da4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e15 	.word	0x08003e15
 8003db0:	08003d91 	.word	0x08003d91
 8003db4:	08003d91 	.word	0x08003d91
 8003db8:	08003d91 	.word	0x08003d91
 8003dbc:	08003d91 	.word	0x08003d91
 8003dc0:	08003e15 	.word	0x08003e15
 8003dc4:	08003d91 	.word	0x08003d91
 8003dc8:	08003d91 	.word	0x08003d91
 8003dcc:	08003d91 	.word	0x08003d91
 8003dd0:	08003d91 	.word	0x08003d91
 8003dd4:	08003f23 	.word	0x08003f23
 8003dd8:	08003e45 	.word	0x08003e45
 8003ddc:	08003f05 	.word	0x08003f05
 8003de0:	08003d91 	.word	0x08003d91
 8003de4:	08003d91 	.word	0x08003d91
 8003de8:	08003f45 	.word	0x08003f45
 8003dec:	08003d91 	.word	0x08003d91
 8003df0:	08003e45 	.word	0x08003e45
 8003df4:	08003d91 	.word	0x08003d91
 8003df8:	08003d91 	.word	0x08003d91
 8003dfc:	08003f0d 	.word	0x08003f0d
 8003e00:	680b      	ldr	r3, [r1, #0]
 8003e02:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e06:	1d1a      	adds	r2, r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	600a      	str	r2, [r1, #0]
 8003e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0a4      	b.n	8003f5e <_printf_i+0x1f6>
 8003e14:	6825      	ldr	r5, [r4, #0]
 8003e16:	6808      	ldr	r0, [r1, #0]
 8003e18:	062e      	lsls	r6, r5, #24
 8003e1a:	f100 0304 	add.w	r3, r0, #4
 8003e1e:	d50a      	bpl.n	8003e36 <_printf_i+0xce>
 8003e20:	6805      	ldr	r5, [r0, #0]
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	2d00      	cmp	r5, #0
 8003e26:	da03      	bge.n	8003e30 <_printf_i+0xc8>
 8003e28:	232d      	movs	r3, #45	; 0x2d
 8003e2a:	426d      	negs	r5, r5
 8003e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e30:	230a      	movs	r3, #10
 8003e32:	485e      	ldr	r0, [pc, #376]	; (8003fac <_printf_i+0x244>)
 8003e34:	e019      	b.n	8003e6a <_printf_i+0x102>
 8003e36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e3a:	6805      	ldr	r5, [r0, #0]
 8003e3c:	600b      	str	r3, [r1, #0]
 8003e3e:	bf18      	it	ne
 8003e40:	b22d      	sxthne	r5, r5
 8003e42:	e7ef      	b.n	8003e24 <_printf_i+0xbc>
 8003e44:	680b      	ldr	r3, [r1, #0]
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	1d18      	adds	r0, r3, #4
 8003e4a:	6008      	str	r0, [r1, #0]
 8003e4c:	0628      	lsls	r0, r5, #24
 8003e4e:	d501      	bpl.n	8003e54 <_printf_i+0xec>
 8003e50:	681d      	ldr	r5, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <_printf_i+0xf2>
 8003e54:	0669      	lsls	r1, r5, #25
 8003e56:	d5fb      	bpl.n	8003e50 <_printf_i+0xe8>
 8003e58:	881d      	ldrh	r5, [r3, #0]
 8003e5a:	2f6f      	cmp	r7, #111	; 0x6f
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2308      	moveq	r3, #8
 8003e60:	230a      	movne	r3, #10
 8003e62:	4852      	ldr	r0, [pc, #328]	; (8003fac <_printf_i+0x244>)
 8003e64:	2100      	movs	r1, #0
 8003e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e6a:	6866      	ldr	r6, [r4, #4]
 8003e6c:	2e00      	cmp	r6, #0
 8003e6e:	bfa8      	it	ge
 8003e70:	6821      	ldrge	r1, [r4, #0]
 8003e72:	60a6      	str	r6, [r4, #8]
 8003e74:	bfa4      	itt	ge
 8003e76:	f021 0104 	bicge.w	r1, r1, #4
 8003e7a:	6021      	strge	r1, [r4, #0]
 8003e7c:	b90d      	cbnz	r5, 8003e82 <_printf_i+0x11a>
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	d04d      	beq.n	8003f1e <_printf_i+0x1b6>
 8003e82:	4616      	mov	r6, r2
 8003e84:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e88:	fb03 5711 	mls	r7, r3, r1, r5
 8003e8c:	5dc7      	ldrb	r7, [r0, r7]
 8003e8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e92:	462f      	mov	r7, r5
 8003e94:	42bb      	cmp	r3, r7
 8003e96:	460d      	mov	r5, r1
 8003e98:	d9f4      	bls.n	8003e84 <_printf_i+0x11c>
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d10b      	bne.n	8003eb6 <_printf_i+0x14e>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	07df      	lsls	r7, r3, #31
 8003ea2:	d508      	bpl.n	8003eb6 <_printf_i+0x14e>
 8003ea4:	6923      	ldr	r3, [r4, #16]
 8003ea6:	6861      	ldr	r1, [r4, #4]
 8003ea8:	4299      	cmp	r1, r3
 8003eaa:	bfde      	ittt	le
 8003eac:	2330      	movle	r3, #48	; 0x30
 8003eae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eb6:	1b92      	subs	r2, r2, r6
 8003eb8:	6122      	str	r2, [r4, #16]
 8003eba:	464b      	mov	r3, r9
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f8cd a000 	str.w	sl, [sp]
 8003ec4:	aa03      	add	r2, sp, #12
 8003ec6:	f7ff fedf 	bl	8003c88 <_printf_common>
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d14c      	bne.n	8003f68 <_printf_i+0x200>
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	b004      	add	sp, #16
 8003ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed8:	4834      	ldr	r0, [pc, #208]	; (8003fac <_printf_i+0x244>)
 8003eda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ede:	680e      	ldr	r6, [r1, #0]
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ee6:	061f      	lsls	r7, r3, #24
 8003ee8:	600e      	str	r6, [r1, #0]
 8003eea:	d514      	bpl.n	8003f16 <_printf_i+0x1ae>
 8003eec:	07d9      	lsls	r1, r3, #31
 8003eee:	bf44      	itt	mi
 8003ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ef4:	6023      	strmi	r3, [r4, #0]
 8003ef6:	b91d      	cbnz	r5, 8003f00 <_printf_i+0x198>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	f023 0320 	bic.w	r3, r3, #32
 8003efe:	6023      	str	r3, [r4, #0]
 8003f00:	2310      	movs	r3, #16
 8003f02:	e7af      	b.n	8003e64 <_printf_i+0xfc>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	f043 0320 	orr.w	r3, r3, #32
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	2378      	movs	r3, #120	; 0x78
 8003f0e:	4828      	ldr	r0, [pc, #160]	; (8003fb0 <_printf_i+0x248>)
 8003f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f14:	e7e3      	b.n	8003ede <_printf_i+0x176>
 8003f16:	065e      	lsls	r6, r3, #25
 8003f18:	bf48      	it	mi
 8003f1a:	b2ad      	uxthmi	r5, r5
 8003f1c:	e7e6      	b.n	8003eec <_printf_i+0x184>
 8003f1e:	4616      	mov	r6, r2
 8003f20:	e7bb      	b.n	8003e9a <_printf_i+0x132>
 8003f22:	680b      	ldr	r3, [r1, #0]
 8003f24:	6826      	ldr	r6, [r4, #0]
 8003f26:	1d1d      	adds	r5, r3, #4
 8003f28:	6960      	ldr	r0, [r4, #20]
 8003f2a:	600d      	str	r5, [r1, #0]
 8003f2c:	0635      	lsls	r5, r6, #24
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	d501      	bpl.n	8003f36 <_printf_i+0x1ce>
 8003f32:	6018      	str	r0, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <_printf_i+0x1d4>
 8003f36:	0671      	lsls	r1, r6, #25
 8003f38:	d5fb      	bpl.n	8003f32 <_printf_i+0x1ca>
 8003f3a:	8018      	strh	r0, [r3, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4616      	mov	r6, r2
 8003f40:	6123      	str	r3, [r4, #16]
 8003f42:	e7ba      	b.n	8003eba <_printf_i+0x152>
 8003f44:	680b      	ldr	r3, [r1, #0]
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	600a      	str	r2, [r1, #0]
 8003f4a:	681e      	ldr	r6, [r3, #0]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4630      	mov	r0, r6
 8003f50:	6862      	ldr	r2, [r4, #4]
 8003f52:	f000 faf3 	bl	800453c <memchr>
 8003f56:	b108      	cbz	r0, 8003f5c <_printf_i+0x1f4>
 8003f58:	1b80      	subs	r0, r0, r6
 8003f5a:	6060      	str	r0, [r4, #4]
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f66:	e7a8      	b.n	8003eba <_printf_i+0x152>
 8003f68:	4632      	mov	r2, r6
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	47d0      	blx	sl
 8003f72:	3001      	adds	r0, #1
 8003f74:	d0ab      	beq.n	8003ece <_printf_i+0x166>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	079b      	lsls	r3, r3, #30
 8003f7a:	d413      	bmi.n	8003fa4 <_printf_i+0x23c>
 8003f7c:	68e0      	ldr	r0, [r4, #12]
 8003f7e:	9b03      	ldr	r3, [sp, #12]
 8003f80:	4298      	cmp	r0, r3
 8003f82:	bfb8      	it	lt
 8003f84:	4618      	movlt	r0, r3
 8003f86:	e7a4      	b.n	8003ed2 <_printf_i+0x16a>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	4640      	mov	r0, r8
 8003f90:	47d0      	blx	sl
 8003f92:	3001      	adds	r0, #1
 8003f94:	d09b      	beq.n	8003ece <_printf_i+0x166>
 8003f96:	3501      	adds	r5, #1
 8003f98:	68e3      	ldr	r3, [r4, #12]
 8003f9a:	9903      	ldr	r1, [sp, #12]
 8003f9c:	1a5b      	subs	r3, r3, r1
 8003f9e:	42ab      	cmp	r3, r5
 8003fa0:	dcf2      	bgt.n	8003f88 <_printf_i+0x220>
 8003fa2:	e7eb      	b.n	8003f7c <_printf_i+0x214>
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	f104 0619 	add.w	r6, r4, #25
 8003faa:	e7f5      	b.n	8003f98 <_printf_i+0x230>
 8003fac:	08004a7a 	.word	0x08004a7a
 8003fb0:	08004a8b 	.word	0x08004a8b

08003fb4 <_scanf_chars>:
 8003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	4615      	mov	r5, r2
 8003fba:	688a      	ldr	r2, [r1, #8]
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	b932      	cbnz	r2, 8003fd0 <_scanf_chars+0x1c>
 8003fc2:	698a      	ldr	r2, [r1, #24]
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2201      	moveq	r2, #1
 8003fca:	f04f 32ff 	movne.w	r2, #4294967295
 8003fce:	608a      	str	r2, [r1, #8]
 8003fd0:	2700      	movs	r7, #0
 8003fd2:	6822      	ldr	r2, [r4, #0]
 8003fd4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004060 <_scanf_chars+0xac>
 8003fd8:	06d1      	lsls	r1, r2, #27
 8003fda:	bf5f      	itttt	pl
 8003fdc:	681a      	ldrpl	r2, [r3, #0]
 8003fde:	1d11      	addpl	r1, r2, #4
 8003fe0:	6019      	strpl	r1, [r3, #0]
 8003fe2:	6816      	ldrpl	r6, [r2, #0]
 8003fe4:	69a0      	ldr	r0, [r4, #24]
 8003fe6:	b188      	cbz	r0, 800400c <_scanf_chars+0x58>
 8003fe8:	2801      	cmp	r0, #1
 8003fea:	d107      	bne.n	8003ffc <_scanf_chars+0x48>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	6963      	ldr	r3, [r4, #20]
 8003ff2:	5c9b      	ldrb	r3, [r3, r2]
 8003ff4:	b953      	cbnz	r3, 800400c <_scanf_chars+0x58>
 8003ff6:	bb27      	cbnz	r7, 8004042 <_scanf_chars+0x8e>
 8003ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffc:	2802      	cmp	r0, #2
 8003ffe:	d120      	bne.n	8004042 <_scanf_chars+0x8e>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004008:	071b      	lsls	r3, r3, #28
 800400a:	d41a      	bmi.n	8004042 <_scanf_chars+0x8e>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	3701      	adds	r7, #1
 8004010:	06da      	lsls	r2, r3, #27
 8004012:	bf5e      	ittt	pl
 8004014:	682b      	ldrpl	r3, [r5, #0]
 8004016:	781b      	ldrbpl	r3, [r3, #0]
 8004018:	f806 3b01 	strbpl.w	r3, [r6], #1
 800401c:	682a      	ldr	r2, [r5, #0]
 800401e:	686b      	ldr	r3, [r5, #4]
 8004020:	3201      	adds	r2, #1
 8004022:	602a      	str	r2, [r5, #0]
 8004024:	68a2      	ldr	r2, [r4, #8]
 8004026:	3b01      	subs	r3, #1
 8004028:	3a01      	subs	r2, #1
 800402a:	606b      	str	r3, [r5, #4]
 800402c:	60a2      	str	r2, [r4, #8]
 800402e:	b142      	cbz	r2, 8004042 <_scanf_chars+0x8e>
 8004030:	2b00      	cmp	r3, #0
 8004032:	dcd7      	bgt.n	8003fe4 <_scanf_chars+0x30>
 8004034:	4629      	mov	r1, r5
 8004036:	4640      	mov	r0, r8
 8004038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800403c:	4798      	blx	r3
 800403e:	2800      	cmp	r0, #0
 8004040:	d0d0      	beq.n	8003fe4 <_scanf_chars+0x30>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f013 0310 	ands.w	r3, r3, #16
 8004048:	d105      	bne.n	8004056 <_scanf_chars+0xa2>
 800404a:	68e2      	ldr	r2, [r4, #12]
 800404c:	3201      	adds	r2, #1
 800404e:	60e2      	str	r2, [r4, #12]
 8004050:	69a2      	ldr	r2, [r4, #24]
 8004052:	b102      	cbz	r2, 8004056 <_scanf_chars+0xa2>
 8004054:	7033      	strb	r3, [r6, #0]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	2000      	movs	r0, #0
 800405a:	441f      	add	r7, r3
 800405c:	6127      	str	r7, [r4, #16]
 800405e:	e7cb      	b.n	8003ff8 <_scanf_chars+0x44>
 8004060:	08004969 	.word	0x08004969

08004064 <_scanf_i>:
 8004064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004068:	460c      	mov	r4, r1
 800406a:	4698      	mov	r8, r3
 800406c:	4b72      	ldr	r3, [pc, #456]	; (8004238 <_scanf_i+0x1d4>)
 800406e:	b087      	sub	sp, #28
 8004070:	4682      	mov	sl, r0
 8004072:	4616      	mov	r6, r2
 8004074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004078:	ab03      	add	r3, sp, #12
 800407a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800407e:	4b6f      	ldr	r3, [pc, #444]	; (800423c <_scanf_i+0x1d8>)
 8004080:	69a1      	ldr	r1, [r4, #24]
 8004082:	4a6f      	ldr	r2, [pc, #444]	; (8004240 <_scanf_i+0x1dc>)
 8004084:	4627      	mov	r7, r4
 8004086:	2903      	cmp	r1, #3
 8004088:	bf18      	it	ne
 800408a:	461a      	movne	r2, r3
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	9201      	str	r2, [sp, #4]
 8004090:	1e5a      	subs	r2, r3, #1
 8004092:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004096:	bf81      	itttt	hi
 8004098:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800409c:	eb03 0905 	addhi.w	r9, r3, r5
 80040a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040a4:	60a3      	strhi	r3, [r4, #8]
 80040a6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80040aa:	bf98      	it	ls
 80040ac:	f04f 0900 	movls.w	r9, #0
 80040b0:	463d      	mov	r5, r7
 80040b2:	f04f 0b00 	mov.w	fp, #0
 80040b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	6831      	ldr	r1, [r6, #0]
 80040be:	ab03      	add	r3, sp, #12
 80040c0:	2202      	movs	r2, #2
 80040c2:	7809      	ldrb	r1, [r1, #0]
 80040c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80040c8:	f000 fa38 	bl	800453c <memchr>
 80040cc:	b328      	cbz	r0, 800411a <_scanf_i+0xb6>
 80040ce:	f1bb 0f01 	cmp.w	fp, #1
 80040d2:	d159      	bne.n	8004188 <_scanf_i+0x124>
 80040d4:	6862      	ldr	r2, [r4, #4]
 80040d6:	b92a      	cbnz	r2, 80040e4 <_scanf_i+0x80>
 80040d8:	2308      	movs	r3, #8
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	6063      	str	r3, [r4, #4]
 80040de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	68a2      	ldr	r2, [r4, #8]
 80040ee:	1e51      	subs	r1, r2, #1
 80040f0:	60a1      	str	r1, [r4, #8]
 80040f2:	b192      	cbz	r2, 800411a <_scanf_i+0xb6>
 80040f4:	6832      	ldr	r2, [r6, #0]
 80040f6:	1c51      	adds	r1, r2, #1
 80040f8:	6031      	str	r1, [r6, #0]
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	f805 2b01 	strb.w	r2, [r5], #1
 8004100:	6872      	ldr	r2, [r6, #4]
 8004102:	3a01      	subs	r2, #1
 8004104:	2a00      	cmp	r2, #0
 8004106:	6072      	str	r2, [r6, #4]
 8004108:	dc07      	bgt.n	800411a <_scanf_i+0xb6>
 800410a:	4631      	mov	r1, r6
 800410c:	4650      	mov	r0, sl
 800410e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004112:	4790      	blx	r2
 8004114:	2800      	cmp	r0, #0
 8004116:	f040 8085 	bne.w	8004224 <_scanf_i+0x1c0>
 800411a:	f10b 0b01 	add.w	fp, fp, #1
 800411e:	f1bb 0f03 	cmp.w	fp, #3
 8004122:	d1cb      	bne.n	80040bc <_scanf_i+0x58>
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	b90b      	cbnz	r3, 800412c <_scanf_i+0xc8>
 8004128:	230a      	movs	r3, #10
 800412a:	6063      	str	r3, [r4, #4]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	4945      	ldr	r1, [pc, #276]	; (8004244 <_scanf_i+0x1e0>)
 8004130:	6960      	ldr	r0, [r4, #20]
 8004132:	1ac9      	subs	r1, r1, r3
 8004134:	f000 f888 	bl	8004248 <__sccl>
 8004138:	f04f 0b00 	mov.w	fp, #0
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d03d      	beq.n	80041c0 <_scanf_i+0x15c>
 8004144:	6831      	ldr	r1, [r6, #0]
 8004146:	6960      	ldr	r0, [r4, #20]
 8004148:	f891 c000 	ldrb.w	ip, [r1]
 800414c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004150:	2800      	cmp	r0, #0
 8004152:	d035      	beq.n	80041c0 <_scanf_i+0x15c>
 8004154:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004158:	d124      	bne.n	80041a4 <_scanf_i+0x140>
 800415a:	0510      	lsls	r0, r2, #20
 800415c:	d522      	bpl.n	80041a4 <_scanf_i+0x140>
 800415e:	f10b 0b01 	add.w	fp, fp, #1
 8004162:	f1b9 0f00 	cmp.w	r9, #0
 8004166:	d003      	beq.n	8004170 <_scanf_i+0x10c>
 8004168:	3301      	adds	r3, #1
 800416a:	f109 39ff 	add.w	r9, r9, #4294967295
 800416e:	60a3      	str	r3, [r4, #8]
 8004170:	6873      	ldr	r3, [r6, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	6073      	str	r3, [r6, #4]
 8004178:	dd1b      	ble.n	80041b2 <_scanf_i+0x14e>
 800417a:	6833      	ldr	r3, [r6, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	6033      	str	r3, [r6, #0]
 8004180:	68a3      	ldr	r3, [r4, #8]
 8004182:	3b01      	subs	r3, #1
 8004184:	60a3      	str	r3, [r4, #8]
 8004186:	e7d9      	b.n	800413c <_scanf_i+0xd8>
 8004188:	f1bb 0f02 	cmp.w	fp, #2
 800418c:	d1ae      	bne.n	80040ec <_scanf_i+0x88>
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004194:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004198:	d1bf      	bne.n	800411a <_scanf_i+0xb6>
 800419a:	2310      	movs	r3, #16
 800419c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a0:	6063      	str	r3, [r4, #4]
 80041a2:	e7a2      	b.n	80040ea <_scanf_i+0x86>
 80041a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80041a8:	6022      	str	r2, [r4, #0]
 80041aa:	780b      	ldrb	r3, [r1, #0]
 80041ac:	f805 3b01 	strb.w	r3, [r5], #1
 80041b0:	e7de      	b.n	8004170 <_scanf_i+0x10c>
 80041b2:	4631      	mov	r1, r6
 80041b4:	4650      	mov	r0, sl
 80041b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041ba:	4798      	blx	r3
 80041bc:	2800      	cmp	r0, #0
 80041be:	d0df      	beq.n	8004180 <_scanf_i+0x11c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	05d9      	lsls	r1, r3, #23
 80041c4:	d50d      	bpl.n	80041e2 <_scanf_i+0x17e>
 80041c6:	42bd      	cmp	r5, r7
 80041c8:	d909      	bls.n	80041de <_scanf_i+0x17a>
 80041ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80041ce:	4632      	mov	r2, r6
 80041d0:	4650      	mov	r0, sl
 80041d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80041da:	4798      	blx	r3
 80041dc:	464d      	mov	r5, r9
 80041de:	42bd      	cmp	r5, r7
 80041e0:	d028      	beq.n	8004234 <_scanf_i+0x1d0>
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	f012 0210 	ands.w	r2, r2, #16
 80041e8:	d113      	bne.n	8004212 <_scanf_i+0x1ae>
 80041ea:	702a      	strb	r2, [r5, #0]
 80041ec:	4639      	mov	r1, r7
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	4650      	mov	r0, sl
 80041f2:	9e01      	ldr	r6, [sp, #4]
 80041f4:	47b0      	blx	r6
 80041f6:	f8d8 3000 	ldr.w	r3, [r8]
 80041fa:	6821      	ldr	r1, [r4, #0]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	f8c8 2000 	str.w	r2, [r8]
 8004202:	f011 0f20 	tst.w	r1, #32
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	d00f      	beq.n	800422a <_scanf_i+0x1c6>
 800420a:	6018      	str	r0, [r3, #0]
 800420c:	68e3      	ldr	r3, [r4, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60e3      	str	r3, [r4, #12]
 8004212:	2000      	movs	r0, #0
 8004214:	1bed      	subs	r5, r5, r7
 8004216:	44ab      	add	fp, r5
 8004218:	6925      	ldr	r5, [r4, #16]
 800421a:	445d      	add	r5, fp
 800421c:	6125      	str	r5, [r4, #16]
 800421e:	b007      	add	sp, #28
 8004220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004224:	f04f 0b00 	mov.w	fp, #0
 8004228:	e7ca      	b.n	80041c0 <_scanf_i+0x15c>
 800422a:	07ca      	lsls	r2, r1, #31
 800422c:	bf4c      	ite	mi
 800422e:	8018      	strhmi	r0, [r3, #0]
 8004230:	6018      	strpl	r0, [r3, #0]
 8004232:	e7eb      	b.n	800420c <_scanf_i+0x1a8>
 8004234:	2001      	movs	r0, #1
 8004236:	e7f2      	b.n	800421e <_scanf_i+0x1ba>
 8004238:	08004944 	.word	0x08004944
 800423c:	080044c5 	.word	0x080044c5
 8004240:	080043c9 	.word	0x080043c9
 8004244:	08004ab5 	.word	0x08004ab5

08004248 <__sccl>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	780b      	ldrb	r3, [r1, #0]
 800424c:	4604      	mov	r4, r0
 800424e:	2b5e      	cmp	r3, #94	; 0x5e
 8004250:	bf13      	iteet	ne
 8004252:	2200      	movne	r2, #0
 8004254:	2201      	moveq	r2, #1
 8004256:	784b      	ldrbeq	r3, [r1, #1]
 8004258:	1c48      	addne	r0, r1, #1
 800425a:	bf08      	it	eq
 800425c:	1c88      	addeq	r0, r1, #2
 800425e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004262:	1e61      	subs	r1, r4, #1
 8004264:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004268:	42a9      	cmp	r1, r5
 800426a:	d1fb      	bne.n	8004264 <__sccl+0x1c>
 800426c:	b90b      	cbnz	r3, 8004272 <__sccl+0x2a>
 800426e:	3801      	subs	r0, #1
 8004270:	bd70      	pop	{r4, r5, r6, pc}
 8004272:	f082 0101 	eor.w	r1, r2, #1
 8004276:	54e1      	strb	r1, [r4, r3]
 8004278:	1c42      	adds	r2, r0, #1
 800427a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800427e:	4610      	mov	r0, r2
 8004280:	2d2d      	cmp	r5, #45	; 0x2d
 8004282:	f102 36ff 	add.w	r6, r2, #4294967295
 8004286:	d006      	beq.n	8004296 <__sccl+0x4e>
 8004288:	2d5d      	cmp	r5, #93	; 0x5d
 800428a:	d0f1      	beq.n	8004270 <__sccl+0x28>
 800428c:	b90d      	cbnz	r5, 8004292 <__sccl+0x4a>
 800428e:	4630      	mov	r0, r6
 8004290:	e7ee      	b.n	8004270 <__sccl+0x28>
 8004292:	462b      	mov	r3, r5
 8004294:	e7ef      	b.n	8004276 <__sccl+0x2e>
 8004296:	7816      	ldrb	r6, [r2, #0]
 8004298:	2e5d      	cmp	r6, #93	; 0x5d
 800429a:	d0fa      	beq.n	8004292 <__sccl+0x4a>
 800429c:	42b3      	cmp	r3, r6
 800429e:	dcf8      	bgt.n	8004292 <__sccl+0x4a>
 80042a0:	4618      	mov	r0, r3
 80042a2:	3001      	adds	r0, #1
 80042a4:	4286      	cmp	r6, r0
 80042a6:	5421      	strb	r1, [r4, r0]
 80042a8:	dcfb      	bgt.n	80042a2 <__sccl+0x5a>
 80042aa:	43d8      	mvns	r0, r3
 80042ac:	4430      	add	r0, r6
 80042ae:	42b3      	cmp	r3, r6
 80042b0:	bfa8      	it	ge
 80042b2:	2000      	movge	r0, #0
 80042b4:	1c5d      	adds	r5, r3, #1
 80042b6:	182b      	adds	r3, r5, r0
 80042b8:	3202      	adds	r2, #2
 80042ba:	e7de      	b.n	800427a <__sccl+0x32>

080042bc <_strtol_l.isra.0>:
 80042bc:	2b01      	cmp	r3, #1
 80042be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c2:	4686      	mov	lr, r0
 80042c4:	d001      	beq.n	80042ca <_strtol_l.isra.0+0xe>
 80042c6:	2b24      	cmp	r3, #36	; 0x24
 80042c8:	d906      	bls.n	80042d8 <_strtol_l.isra.0+0x1c>
 80042ca:	f7ff f92f 	bl	800352c <__errno>
 80042ce:	2316      	movs	r3, #22
 80042d0:	6003      	str	r3, [r0, #0]
 80042d2:	2000      	movs	r0, #0
 80042d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d8:	468c      	mov	ip, r1
 80042da:	4e3a      	ldr	r6, [pc, #232]	; (80043c4 <_strtol_l.isra.0+0x108>)
 80042dc:	4660      	mov	r0, ip
 80042de:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80042e2:	5da5      	ldrb	r5, [r4, r6]
 80042e4:	f015 0508 	ands.w	r5, r5, #8
 80042e8:	d1f8      	bne.n	80042dc <_strtol_l.isra.0+0x20>
 80042ea:	2c2d      	cmp	r4, #45	; 0x2d
 80042ec:	d133      	bne.n	8004356 <_strtol_l.isra.0+0x9a>
 80042ee:	f04f 0801 	mov.w	r8, #1
 80042f2:	f89c 4000 	ldrb.w	r4, [ip]
 80042f6:	f100 0c02 	add.w	ip, r0, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d05d      	beq.n	80043ba <_strtol_l.isra.0+0xfe>
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d10c      	bne.n	800431c <_strtol_l.isra.0+0x60>
 8004302:	2c30      	cmp	r4, #48	; 0x30
 8004304:	d10a      	bne.n	800431c <_strtol_l.isra.0+0x60>
 8004306:	f89c 0000 	ldrb.w	r0, [ip]
 800430a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800430e:	2858      	cmp	r0, #88	; 0x58
 8004310:	d14e      	bne.n	80043b0 <_strtol_l.isra.0+0xf4>
 8004312:	2310      	movs	r3, #16
 8004314:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004318:	f10c 0c02 	add.w	ip, ip, #2
 800431c:	2500      	movs	r5, #0
 800431e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004322:	3f01      	subs	r7, #1
 8004324:	fbb7 f9f3 	udiv	r9, r7, r3
 8004328:	4628      	mov	r0, r5
 800432a:	fb03 7a19 	mls	sl, r3, r9, r7
 800432e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004332:	2e09      	cmp	r6, #9
 8004334:	d818      	bhi.n	8004368 <_strtol_l.isra.0+0xac>
 8004336:	4634      	mov	r4, r6
 8004338:	42a3      	cmp	r3, r4
 800433a:	dd24      	ble.n	8004386 <_strtol_l.isra.0+0xca>
 800433c:	2d00      	cmp	r5, #0
 800433e:	db1f      	blt.n	8004380 <_strtol_l.isra.0+0xc4>
 8004340:	4581      	cmp	r9, r0
 8004342:	d31d      	bcc.n	8004380 <_strtol_l.isra.0+0xc4>
 8004344:	d101      	bne.n	800434a <_strtol_l.isra.0+0x8e>
 8004346:	45a2      	cmp	sl, r4
 8004348:	db1a      	blt.n	8004380 <_strtol_l.isra.0+0xc4>
 800434a:	2501      	movs	r5, #1
 800434c:	fb00 4003 	mla	r0, r0, r3, r4
 8004350:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004354:	e7eb      	b.n	800432e <_strtol_l.isra.0+0x72>
 8004356:	2c2b      	cmp	r4, #43	; 0x2b
 8004358:	bf08      	it	eq
 800435a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800435e:	46a8      	mov	r8, r5
 8004360:	bf08      	it	eq
 8004362:	f100 0c02 	addeq.w	ip, r0, #2
 8004366:	e7c8      	b.n	80042fa <_strtol_l.isra.0+0x3e>
 8004368:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800436c:	2e19      	cmp	r6, #25
 800436e:	d801      	bhi.n	8004374 <_strtol_l.isra.0+0xb8>
 8004370:	3c37      	subs	r4, #55	; 0x37
 8004372:	e7e1      	b.n	8004338 <_strtol_l.isra.0+0x7c>
 8004374:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004378:	2e19      	cmp	r6, #25
 800437a:	d804      	bhi.n	8004386 <_strtol_l.isra.0+0xca>
 800437c:	3c57      	subs	r4, #87	; 0x57
 800437e:	e7db      	b.n	8004338 <_strtol_l.isra.0+0x7c>
 8004380:	f04f 35ff 	mov.w	r5, #4294967295
 8004384:	e7e4      	b.n	8004350 <_strtol_l.isra.0+0x94>
 8004386:	2d00      	cmp	r5, #0
 8004388:	da08      	bge.n	800439c <_strtol_l.isra.0+0xe0>
 800438a:	2322      	movs	r3, #34	; 0x22
 800438c:	4638      	mov	r0, r7
 800438e:	f8ce 3000 	str.w	r3, [lr]
 8004392:	2a00      	cmp	r2, #0
 8004394:	d09e      	beq.n	80042d4 <_strtol_l.isra.0+0x18>
 8004396:	f10c 31ff 	add.w	r1, ip, #4294967295
 800439a:	e007      	b.n	80043ac <_strtol_l.isra.0+0xf0>
 800439c:	f1b8 0f00 	cmp.w	r8, #0
 80043a0:	d000      	beq.n	80043a4 <_strtol_l.isra.0+0xe8>
 80043a2:	4240      	negs	r0, r0
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	d095      	beq.n	80042d4 <_strtol_l.isra.0+0x18>
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	d1f4      	bne.n	8004396 <_strtol_l.isra.0+0xda>
 80043ac:	6011      	str	r1, [r2, #0]
 80043ae:	e791      	b.n	80042d4 <_strtol_l.isra.0+0x18>
 80043b0:	2430      	movs	r4, #48	; 0x30
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1b2      	bne.n	800431c <_strtol_l.isra.0+0x60>
 80043b6:	2308      	movs	r3, #8
 80043b8:	e7b0      	b.n	800431c <_strtol_l.isra.0+0x60>
 80043ba:	2c30      	cmp	r4, #48	; 0x30
 80043bc:	d0a3      	beq.n	8004306 <_strtol_l.isra.0+0x4a>
 80043be:	230a      	movs	r3, #10
 80043c0:	e7ac      	b.n	800431c <_strtol_l.isra.0+0x60>
 80043c2:	bf00      	nop
 80043c4:	08004969 	.word	0x08004969

080043c8 <_strtol_r>:
 80043c8:	f7ff bf78 	b.w	80042bc <_strtol_l.isra.0>

080043cc <_strtoul_l.isra.0>:
 80043cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043d0:	468c      	mov	ip, r1
 80043d2:	4686      	mov	lr, r0
 80043d4:	4e3a      	ldr	r6, [pc, #232]	; (80044c0 <_strtoul_l.isra.0+0xf4>)
 80043d6:	4660      	mov	r0, ip
 80043d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80043dc:	5da5      	ldrb	r5, [r4, r6]
 80043de:	f015 0508 	ands.w	r5, r5, #8
 80043e2:	d1f8      	bne.n	80043d6 <_strtoul_l.isra.0+0xa>
 80043e4:	2c2d      	cmp	r4, #45	; 0x2d
 80043e6:	d134      	bne.n	8004452 <_strtoul_l.isra.0+0x86>
 80043e8:	f04f 0801 	mov.w	r8, #1
 80043ec:	f89c 4000 	ldrb.w	r4, [ip]
 80043f0:	f100 0c02 	add.w	ip, r0, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05e      	beq.n	80044b6 <_strtoul_l.isra.0+0xea>
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d10c      	bne.n	8004416 <_strtoul_l.isra.0+0x4a>
 80043fc:	2c30      	cmp	r4, #48	; 0x30
 80043fe:	d10a      	bne.n	8004416 <_strtoul_l.isra.0+0x4a>
 8004400:	f89c 0000 	ldrb.w	r0, [ip]
 8004404:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004408:	2858      	cmp	r0, #88	; 0x58
 800440a:	d14f      	bne.n	80044ac <_strtoul_l.isra.0+0xe0>
 800440c:	2310      	movs	r3, #16
 800440e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004412:	f10c 0c02 	add.w	ip, ip, #2
 8004416:	f04f 37ff 	mov.w	r7, #4294967295
 800441a:	fbb7 f7f3 	udiv	r7, r7, r3
 800441e:	2500      	movs	r5, #0
 8004420:	fb03 f907 	mul.w	r9, r3, r7
 8004424:	4628      	mov	r0, r5
 8004426:	ea6f 0909 	mvn.w	r9, r9
 800442a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800442e:	2e09      	cmp	r6, #9
 8004430:	d818      	bhi.n	8004464 <_strtoul_l.isra.0+0x98>
 8004432:	4634      	mov	r4, r6
 8004434:	42a3      	cmp	r3, r4
 8004436:	dd24      	ble.n	8004482 <_strtoul_l.isra.0+0xb6>
 8004438:	2d00      	cmp	r5, #0
 800443a:	db1f      	blt.n	800447c <_strtoul_l.isra.0+0xb0>
 800443c:	4287      	cmp	r7, r0
 800443e:	d31d      	bcc.n	800447c <_strtoul_l.isra.0+0xb0>
 8004440:	d101      	bne.n	8004446 <_strtoul_l.isra.0+0x7a>
 8004442:	45a1      	cmp	r9, r4
 8004444:	db1a      	blt.n	800447c <_strtoul_l.isra.0+0xb0>
 8004446:	2501      	movs	r5, #1
 8004448:	fb00 4003 	mla	r0, r0, r3, r4
 800444c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004450:	e7eb      	b.n	800442a <_strtoul_l.isra.0+0x5e>
 8004452:	2c2b      	cmp	r4, #43	; 0x2b
 8004454:	bf08      	it	eq
 8004456:	f89c 4000 	ldrbeq.w	r4, [ip]
 800445a:	46a8      	mov	r8, r5
 800445c:	bf08      	it	eq
 800445e:	f100 0c02 	addeq.w	ip, r0, #2
 8004462:	e7c7      	b.n	80043f4 <_strtoul_l.isra.0+0x28>
 8004464:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004468:	2e19      	cmp	r6, #25
 800446a:	d801      	bhi.n	8004470 <_strtoul_l.isra.0+0xa4>
 800446c:	3c37      	subs	r4, #55	; 0x37
 800446e:	e7e1      	b.n	8004434 <_strtoul_l.isra.0+0x68>
 8004470:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004474:	2e19      	cmp	r6, #25
 8004476:	d804      	bhi.n	8004482 <_strtoul_l.isra.0+0xb6>
 8004478:	3c57      	subs	r4, #87	; 0x57
 800447a:	e7db      	b.n	8004434 <_strtoul_l.isra.0+0x68>
 800447c:	f04f 35ff 	mov.w	r5, #4294967295
 8004480:	e7e4      	b.n	800444c <_strtoul_l.isra.0+0x80>
 8004482:	2d00      	cmp	r5, #0
 8004484:	da07      	bge.n	8004496 <_strtoul_l.isra.0+0xca>
 8004486:	2322      	movs	r3, #34	; 0x22
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f8ce 3000 	str.w	r3, [lr]
 8004490:	b942      	cbnz	r2, 80044a4 <_strtoul_l.isra.0+0xd8>
 8004492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004496:	f1b8 0f00 	cmp.w	r8, #0
 800449a:	d000      	beq.n	800449e <_strtoul_l.isra.0+0xd2>
 800449c:	4240      	negs	r0, r0
 800449e:	2a00      	cmp	r2, #0
 80044a0:	d0f7      	beq.n	8004492 <_strtoul_l.isra.0+0xc6>
 80044a2:	b10d      	cbz	r5, 80044a8 <_strtoul_l.isra.0+0xdc>
 80044a4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80044a8:	6011      	str	r1, [r2, #0]
 80044aa:	e7f2      	b.n	8004492 <_strtoul_l.isra.0+0xc6>
 80044ac:	2430      	movs	r4, #48	; 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1b1      	bne.n	8004416 <_strtoul_l.isra.0+0x4a>
 80044b2:	2308      	movs	r3, #8
 80044b4:	e7af      	b.n	8004416 <_strtoul_l.isra.0+0x4a>
 80044b6:	2c30      	cmp	r4, #48	; 0x30
 80044b8:	d0a2      	beq.n	8004400 <_strtoul_l.isra.0+0x34>
 80044ba:	230a      	movs	r3, #10
 80044bc:	e7ab      	b.n	8004416 <_strtoul_l.isra.0+0x4a>
 80044be:	bf00      	nop
 80044c0:	08004969 	.word	0x08004969

080044c4 <_strtoul_r>:
 80044c4:	f7ff bf82 	b.w	80043cc <_strtoul_l.isra.0>

080044c8 <__submore>:
 80044c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044cc:	460c      	mov	r4, r1
 80044ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80044d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d11b      	bne.n	8004510 <__submore+0x48>
 80044d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044dc:	f000 f8b0 	bl	8004640 <_malloc_r>
 80044e0:	b918      	cbnz	r0, 80044ea <__submore+0x22>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80044f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80044f4:	6360      	str	r0, [r4, #52]	; 0x34
 80044f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80044fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80044fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004502:	7043      	strb	r3, [r0, #1]
 8004504:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004508:	7003      	strb	r3, [r0, #0]
 800450a:	6020      	str	r0, [r4, #0]
 800450c:	2000      	movs	r0, #0
 800450e:	e7ea      	b.n	80044e6 <__submore+0x1e>
 8004510:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004512:	0077      	lsls	r7, r6, #1
 8004514:	463a      	mov	r2, r7
 8004516:	f000 f8ed 	bl	80046f4 <_realloc_r>
 800451a:	4605      	mov	r5, r0
 800451c:	2800      	cmp	r0, #0
 800451e:	d0e0      	beq.n	80044e2 <__submore+0x1a>
 8004520:	eb00 0806 	add.w	r8, r0, r6
 8004524:	4601      	mov	r1, r0
 8004526:	4632      	mov	r2, r6
 8004528:	4640      	mov	r0, r8
 800452a:	f000 f815 	bl	8004558 <memcpy>
 800452e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004532:	f8c4 8000 	str.w	r8, [r4]
 8004536:	e7e9      	b.n	800450c <__submore+0x44>

08004538 <__retarget_lock_acquire_recursive>:
 8004538:	4770      	bx	lr

0800453a <__retarget_lock_release_recursive>:
 800453a:	4770      	bx	lr

0800453c <memchr>:
 800453c:	4603      	mov	r3, r0
 800453e:	b510      	push	{r4, lr}
 8004540:	b2c9      	uxtb	r1, r1
 8004542:	4402      	add	r2, r0
 8004544:	4293      	cmp	r3, r2
 8004546:	4618      	mov	r0, r3
 8004548:	d101      	bne.n	800454e <memchr+0x12>
 800454a:	2000      	movs	r0, #0
 800454c:	e003      	b.n	8004556 <memchr+0x1a>
 800454e:	7804      	ldrb	r4, [r0, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	428c      	cmp	r4, r1
 8004554:	d1f6      	bne.n	8004544 <memchr+0x8>
 8004556:	bd10      	pop	{r4, pc}

08004558 <memcpy>:
 8004558:	440a      	add	r2, r1
 800455a:	4291      	cmp	r1, r2
 800455c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004560:	d100      	bne.n	8004564 <memcpy+0xc>
 8004562:	4770      	bx	lr
 8004564:	b510      	push	{r4, lr}
 8004566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456a:	4291      	cmp	r1, r2
 800456c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004570:	d1f9      	bne.n	8004566 <memcpy+0xe>
 8004572:	bd10      	pop	{r4, pc}

08004574 <memmove>:
 8004574:	4288      	cmp	r0, r1
 8004576:	b510      	push	{r4, lr}
 8004578:	eb01 0402 	add.w	r4, r1, r2
 800457c:	d902      	bls.n	8004584 <memmove+0x10>
 800457e:	4284      	cmp	r4, r0
 8004580:	4623      	mov	r3, r4
 8004582:	d807      	bhi.n	8004594 <memmove+0x20>
 8004584:	1e43      	subs	r3, r0, #1
 8004586:	42a1      	cmp	r1, r4
 8004588:	d008      	beq.n	800459c <memmove+0x28>
 800458a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800458e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004592:	e7f8      	b.n	8004586 <memmove+0x12>
 8004594:	4601      	mov	r1, r0
 8004596:	4402      	add	r2, r0
 8004598:	428a      	cmp	r2, r1
 800459a:	d100      	bne.n	800459e <memmove+0x2a>
 800459c:	bd10      	pop	{r4, pc}
 800459e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045a6:	e7f7      	b.n	8004598 <memmove+0x24>

080045a8 <_free_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4605      	mov	r5, r0
 80045ac:	2900      	cmp	r1, #0
 80045ae:	d043      	beq.n	8004638 <_free_r+0x90>
 80045b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b4:	1f0c      	subs	r4, r1, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bfb8      	it	lt
 80045ba:	18e4      	addlt	r4, r4, r3
 80045bc:	f000 f8d0 	bl	8004760 <__malloc_lock>
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <_free_r+0x94>)
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	4610      	mov	r0, r2
 80045c6:	b933      	cbnz	r3, 80045d6 <_free_r+0x2e>
 80045c8:	6063      	str	r3, [r4, #4]
 80045ca:	6014      	str	r4, [r2, #0]
 80045cc:	4628      	mov	r0, r5
 80045ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045d2:	f000 b8cb 	b.w	800476c <__malloc_unlock>
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	d90a      	bls.n	80045f0 <_free_r+0x48>
 80045da:	6821      	ldr	r1, [r4, #0]
 80045dc:	1862      	adds	r2, r4, r1
 80045de:	4293      	cmp	r3, r2
 80045e0:	bf01      	itttt	eq
 80045e2:	681a      	ldreq	r2, [r3, #0]
 80045e4:	685b      	ldreq	r3, [r3, #4]
 80045e6:	1852      	addeq	r2, r2, r1
 80045e8:	6022      	streq	r2, [r4, #0]
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6004      	str	r4, [r0, #0]
 80045ee:	e7ed      	b.n	80045cc <_free_r+0x24>
 80045f0:	461a      	mov	r2, r3
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	b10b      	cbz	r3, 80045fa <_free_r+0x52>
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	d9fa      	bls.n	80045f0 <_free_r+0x48>
 80045fa:	6811      	ldr	r1, [r2, #0]
 80045fc:	1850      	adds	r0, r2, r1
 80045fe:	42a0      	cmp	r0, r4
 8004600:	d10b      	bne.n	800461a <_free_r+0x72>
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	4401      	add	r1, r0
 8004606:	1850      	adds	r0, r2, r1
 8004608:	4283      	cmp	r3, r0
 800460a:	6011      	str	r1, [r2, #0]
 800460c:	d1de      	bne.n	80045cc <_free_r+0x24>
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4401      	add	r1, r0
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	6053      	str	r3, [r2, #4]
 8004618:	e7d8      	b.n	80045cc <_free_r+0x24>
 800461a:	d902      	bls.n	8004622 <_free_r+0x7a>
 800461c:	230c      	movs	r3, #12
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	e7d4      	b.n	80045cc <_free_r+0x24>
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	1821      	adds	r1, r4, r0
 8004626:	428b      	cmp	r3, r1
 8004628:	bf01      	itttt	eq
 800462a:	6819      	ldreq	r1, [r3, #0]
 800462c:	685b      	ldreq	r3, [r3, #4]
 800462e:	1809      	addeq	r1, r1, r0
 8004630:	6021      	streq	r1, [r4, #0]
 8004632:	6063      	str	r3, [r4, #4]
 8004634:	6054      	str	r4, [r2, #4]
 8004636:	e7c9      	b.n	80045cc <_free_r+0x24>
 8004638:	bd38      	pop	{r3, r4, r5, pc}
 800463a:	bf00      	nop
 800463c:	200000ac 	.word	0x200000ac

08004640 <_malloc_r>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	1ccd      	adds	r5, r1, #3
 8004644:	f025 0503 	bic.w	r5, r5, #3
 8004648:	3508      	adds	r5, #8
 800464a:	2d0c      	cmp	r5, #12
 800464c:	bf38      	it	cc
 800464e:	250c      	movcc	r5, #12
 8004650:	2d00      	cmp	r5, #0
 8004652:	4606      	mov	r6, r0
 8004654:	db01      	blt.n	800465a <_malloc_r+0x1a>
 8004656:	42a9      	cmp	r1, r5
 8004658:	d903      	bls.n	8004662 <_malloc_r+0x22>
 800465a:	230c      	movs	r3, #12
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	2000      	movs	r0, #0
 8004660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004662:	f000 f87d 	bl	8004760 <__malloc_lock>
 8004666:	4921      	ldr	r1, [pc, #132]	; (80046ec <_malloc_r+0xac>)
 8004668:	680a      	ldr	r2, [r1, #0]
 800466a:	4614      	mov	r4, r2
 800466c:	b99c      	cbnz	r4, 8004696 <_malloc_r+0x56>
 800466e:	4f20      	ldr	r7, [pc, #128]	; (80046f0 <_malloc_r+0xb0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	b923      	cbnz	r3, 800467e <_malloc_r+0x3e>
 8004674:	4621      	mov	r1, r4
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f862 	bl	8004740 <_sbrk_r>
 800467c:	6038      	str	r0, [r7, #0]
 800467e:	4629      	mov	r1, r5
 8004680:	4630      	mov	r0, r6
 8004682:	f000 f85d 	bl	8004740 <_sbrk_r>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d123      	bne.n	80046d2 <_malloc_r+0x92>
 800468a:	230c      	movs	r3, #12
 800468c:	4630      	mov	r0, r6
 800468e:	6033      	str	r3, [r6, #0]
 8004690:	f000 f86c 	bl	800476c <__malloc_unlock>
 8004694:	e7e3      	b.n	800465e <_malloc_r+0x1e>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	1b5b      	subs	r3, r3, r5
 800469a:	d417      	bmi.n	80046cc <_malloc_r+0x8c>
 800469c:	2b0b      	cmp	r3, #11
 800469e:	d903      	bls.n	80046a8 <_malloc_r+0x68>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	441c      	add	r4, r3
 80046a4:	6025      	str	r5, [r4, #0]
 80046a6:	e004      	b.n	80046b2 <_malloc_r+0x72>
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	42a2      	cmp	r2, r4
 80046ac:	bf0c      	ite	eq
 80046ae:	600b      	streq	r3, [r1, #0]
 80046b0:	6053      	strne	r3, [r2, #4]
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f85a 	bl	800476c <__malloc_unlock>
 80046b8:	f104 000b 	add.w	r0, r4, #11
 80046bc:	1d23      	adds	r3, r4, #4
 80046be:	f020 0007 	bic.w	r0, r0, #7
 80046c2:	1ac2      	subs	r2, r0, r3
 80046c4:	d0cc      	beq.n	8004660 <_malloc_r+0x20>
 80046c6:	1a1b      	subs	r3, r3, r0
 80046c8:	50a3      	str	r3, [r4, r2]
 80046ca:	e7c9      	b.n	8004660 <_malloc_r+0x20>
 80046cc:	4622      	mov	r2, r4
 80046ce:	6864      	ldr	r4, [r4, #4]
 80046d0:	e7cc      	b.n	800466c <_malloc_r+0x2c>
 80046d2:	1cc4      	adds	r4, r0, #3
 80046d4:	f024 0403 	bic.w	r4, r4, #3
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d0e3      	beq.n	80046a4 <_malloc_r+0x64>
 80046dc:	1a21      	subs	r1, r4, r0
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 f82e 	bl	8004740 <_sbrk_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d1dd      	bne.n	80046a4 <_malloc_r+0x64>
 80046e8:	e7cf      	b.n	800468a <_malloc_r+0x4a>
 80046ea:	bf00      	nop
 80046ec:	200000ac 	.word	0x200000ac
 80046f0:	200000b0 	.word	0x200000b0

080046f4 <_realloc_r>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	4607      	mov	r7, r0
 80046f8:	4614      	mov	r4, r2
 80046fa:	460e      	mov	r6, r1
 80046fc:	b921      	cbnz	r1, 8004708 <_realloc_r+0x14>
 80046fe:	4611      	mov	r1, r2
 8004700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004704:	f7ff bf9c 	b.w	8004640 <_malloc_r>
 8004708:	b922      	cbnz	r2, 8004714 <_realloc_r+0x20>
 800470a:	f7ff ff4d 	bl	80045a8 <_free_r>
 800470e:	4625      	mov	r5, r4
 8004710:	4628      	mov	r0, r5
 8004712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004714:	f000 f830 	bl	8004778 <_malloc_usable_size_r>
 8004718:	42a0      	cmp	r0, r4
 800471a:	d20f      	bcs.n	800473c <_realloc_r+0x48>
 800471c:	4621      	mov	r1, r4
 800471e:	4638      	mov	r0, r7
 8004720:	f7ff ff8e 	bl	8004640 <_malloc_r>
 8004724:	4605      	mov	r5, r0
 8004726:	2800      	cmp	r0, #0
 8004728:	d0f2      	beq.n	8004710 <_realloc_r+0x1c>
 800472a:	4631      	mov	r1, r6
 800472c:	4622      	mov	r2, r4
 800472e:	f7ff ff13 	bl	8004558 <memcpy>
 8004732:	4631      	mov	r1, r6
 8004734:	4638      	mov	r0, r7
 8004736:	f7ff ff37 	bl	80045a8 <_free_r>
 800473a:	e7e9      	b.n	8004710 <_realloc_r+0x1c>
 800473c:	4635      	mov	r5, r6
 800473e:	e7e7      	b.n	8004710 <_realloc_r+0x1c>

08004740 <_sbrk_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	2300      	movs	r3, #0
 8004744:	4d05      	ldr	r5, [pc, #20]	; (800475c <_sbrk_r+0x1c>)
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7fc f8a6 	bl	800089c <_sbrk>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_sbrk_r+0x1a>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_sbrk_r+0x1a>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	20000994 	.word	0x20000994

08004760 <__malloc_lock>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__malloc_lock+0x8>)
 8004762:	f7ff bee9 	b.w	8004538 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	2000099c 	.word	0x2000099c

0800476c <__malloc_unlock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_unlock+0x8>)
 800476e:	f7ff bee4 	b.w	800453a <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	2000099c 	.word	0x2000099c

08004778 <_malloc_usable_size_r>:
 8004778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477c:	1f18      	subs	r0, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfbc      	itt	lt
 8004782:	580b      	ldrlt	r3, [r1, r0]
 8004784:	18c0      	addlt	r0, r0, r3
 8004786:	4770      	bx	lr

08004788 <_init>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr

08004794 <_fini>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr
