
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc0  08004cc0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc0  08004cc0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc0  08004cc0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009bc  2000007c  08004d44  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  08004d44  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca72  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002117  00000000  00000000  0002cb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002ec30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018291  00000000  00000000  00030468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da9a  00000000  00000000  000486f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5f9  00000000  00000000  00056193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e178c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000e17e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080048f8 	.word	0x080048f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080048f8 	.word	0x080048f8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b2d      	ldr	r3, [pc, #180]	; (800023c <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a2c      	ldr	r2, [pc, #176]	; (800023c <MX_GPIO_Init+0xcc>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b2a      	ldr	r3, [pc, #168]	; (800023c <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b27      	ldr	r3, [pc, #156]	; (800023c <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a26      	ldr	r2, [pc, #152]	; (800023c <MX_GPIO_Init+0xcc>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b24      	ldr	r3, [pc, #144]	; (800023c <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b21      	ldr	r3, [pc, #132]	; (800023c <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a20      	ldr	r2, [pc, #128]	; (800023c <MX_GPIO_Init+0xcc>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b1e      	ldr	r3, [pc, #120]	; (800023c <MX_GPIO_Init+0xcc>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b1b      	ldr	r3, [pc, #108]	; (800023c <MX_GPIO_Init+0xcc>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a1a      	ldr	r2, [pc, #104]	; (800023c <MX_GPIO_Init+0xcc>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_GPIO_Init+0xcc>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2120      	movs	r1, #32
 80001e8:	4815      	ldr	r0, [pc, #84]	; (8000240 <MX_GPIO_Init+0xd0>)
 80001ea:	f001 fa19 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <MX_GPIO_Init+0xd4>)
 80001f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	4811      	ldr	r0, [pc, #68]	; (8000248 <MX_GPIO_Init+0xd8>)
 8000204:	f001 f888 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000208:	2320      	movs	r3, #32
 800020a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	2301      	movs	r3, #1
 800020e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000214:	2302      	movs	r3, #2
 8000216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000218:	f107 0310 	add.w	r3, r7, #16
 800021c:	4619      	mov	r1, r3
 800021e:	4808      	ldr	r0, [pc, #32]	; (8000240 <MX_GPIO_Init+0xd0>)
 8000220:	f001 f87a 	bl	8001318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	2028      	movs	r0, #40	; 0x28
 800022a:	f000 ff8e 	bl	800114a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f000 ffa7 	bl	8001182 <HAL_NVIC_EnableIRQ>

}
 8000234:	bf00      	nop
 8000236:	3720      	adds	r7, #32
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800
 8000244:	10110000 	.word	0x10110000
 8000248:	40011000 	.word	0x40011000

0800024c <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <get_char+0x48>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b10      	ldr	r3, [pc, #64]	; (8000298 <get_char+0x4c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d013      	beq.n	8000286 <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <get_char+0x4c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0e      	ldr	r2, [pc, #56]	; (800029c <get_char+0x50>)
 8000264:	5cd3      	ldrb	r3, [r2, r3]
 8000266:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <get_char+0x4c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <get_char+0x4c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <get_char+0x4c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800027a:	db02      	blt.n	8000282 <get_char+0x36>
			busyRX=0;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <get_char+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	e000      	b.n	8000288 <get_char+0x3c>
	}
	else{
		return 0;
 8000286:	2300      	movs	r3, #0
	}
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	200000a0 	.word	0x200000a0
 8000298:	200000a4 	.word	0x200000a4
 800029c:	20000544 	.word	0x20000544

080002a0 <fsend>:
void fsend(char* format, ...){
 80002a0:	b40f      	push	{r0, r1, r2, r3}
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b0a4      	sub	sp, #144	; 0x90
 80002a6:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 80002a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002ac:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs, format, arglist);
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 fa63 	bl	8003784 <vsiprintf>
	va_end(arglist);
	pid = emptyTX;
 80002be:	4b2f      	ldr	r3, [pc, #188]	; (800037c <fsend+0xdc>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80002ca:	e016      	b.n	80002fa <fsend+0x5a>
		Buf_TX[pid] = tmp_rs[i];
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80002d6:	440a      	add	r2, r1
 80002d8:	7811      	ldrb	r1, [r2, #0]
 80002da:	4a29      	ldr	r2, [pc, #164]	; (8000380 <fsend+0xe0>)
 80002dc:	54d1      	strb	r1, [r2, r3]
		pid++;
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	3301      	adds	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
		if(pid >= BUF_TX_LEN){
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002ea:	db01      	blt.n	80002f0 <fsend+0x50>
			pid = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 80002f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80002f4:	3301      	adds	r3, #1
 80002f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff2e 	bl	8000160 <strlen>
 8000304:	4602      	mov	r2, r0
 8000306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800030a:	429a      	cmp	r2, r3
 800030c:	d8de      	bhi.n	80002cc <fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030e:	b672      	cpsid	i
}
 8000310:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <fsend+0xdc>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <fsend+0xe4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	429a      	cmp	r2, r3
 800031c:	d122      	bne.n	8000364 <fsend+0xc4>
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <fsend+0xe8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000328:	2b80      	cmp	r3, #128	; 0x80
 800032a:	d11b      	bne.n	8000364 <fsend+0xc4>
		emptyTX = pid;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <fsend+0xdc>)
 8000330:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <fsend+0xe4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <fsend+0xe0>)
 8000338:	5cd3      	ldrb	r3, [r2, r3]
 800033a:	70fb      	strb	r3, [r7, #3]
		busyTX++;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <fsend+0xe4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	4a10      	ldr	r2, [pc, #64]	; (8000384 <fsend+0xe4>)
 8000344:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <fsend+0xe4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800034e:	db02      	blt.n	8000356 <fsend+0xb6>
			busyTX = 0;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <fsend+0xe4>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000356:	1cfb      	adds	r3, r7, #3
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <fsend+0xe8>)
 800035e:	f002 fd53 	bl	8002e08 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000362:	e002      	b.n	800036a <fsend+0xca>
	}
	else{
		emptyTX = pid;
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <fsend+0xdc>)
 8000368:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800036a:	b662      	cpsie	i
}
 800036c:	bf00      	nop
	}
	__enable_irq();
}
 800036e:	bf00      	nop
 8000370:	3790      	adds	r7, #144	; 0x90
 8000372:	46bd      	mov	sp, r7
 8000374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000378:	b004      	add	sp, #16
 800037a:	4770      	bx	lr
 800037c:	20000098 	.word	0x20000098
 8000380:	200000c4 	.word	0x200000c4
 8000384:	2000009c 	.word	0x2000009c
 8000388:	200009e0 	.word	0x200009e0

0800038c <doner>:

void doner(char *ord){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	4857      	ldr	r0, [pc, #348]	; (80004f4 <doner+0x168>)
 8000398:	f7ff fed8 	bl	800014c <strcmp>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d106      	bne.n	80003b0 <doner+0x24>

		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi %d.\r\n",width);
 80003a2:	4b55      	ldr	r3, [pc, #340]	; (80004f8 <doner+0x16c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4854      	ldr	r0, [pc, #336]	; (80004fc <doner+0x170>)
 80003aa:	f7ff ff79 	bl	80002a0 <fsend>
	}
	else{
		fsend("WRCMD\r\n");
	}

}
 80003ae:	e09c      	b.n	80004ea <doner+0x15e>
	else if(strcmp("FCHKH;", ord) == 0){
 80003b0:	6879      	ldr	r1, [r7, #4]
 80003b2:	4853      	ldr	r0, [pc, #332]	; (8000500 <doner+0x174>)
 80003b4:	f7ff feca 	bl	800014c <strcmp>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d106      	bne.n	80003cc <doner+0x40>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi %d.\r\n",countered);
 80003be:	4b51      	ldr	r3, [pc, #324]	; (8000504 <doner+0x178>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	4850      	ldr	r0, [pc, #320]	; (8000508 <doner+0x17c>)
 80003c6:	f7ff ff6b 	bl	80002a0 <fsend>
}
 80003ca:	e08e      	b.n	80004ea <doner+0x15e>
	else if(strcmp("FSTART;", ord) == 0){
 80003cc:	6879      	ldr	r1, [r7, #4]
 80003ce:	484f      	ldr	r0, [pc, #316]	; (800050c <doner+0x180>)
 80003d0:	f7ff febc 	bl	800014c <strcmp>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d103      	bne.n	80003e2 <doner+0x56>
		fsend("Rozpoczeto wysylanie impulsow \r\n");
 80003da:	484d      	ldr	r0, [pc, #308]	; (8000510 <doner+0x184>)
 80003dc:	f7ff ff60 	bl	80002a0 <fsend>
}
 80003e0:	e083      	b.n	80004ea <doner+0x15e>
	else if(strcmp("FSTAT;", ord) == 0){
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	484b      	ldr	r0, [pc, #300]	; (8000514 <doner+0x188>)
 80003e6:	f7ff feb1 	bl	800014c <strcmp>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d109      	bne.n	8000404 <doner+0x78>
		fsend("Wypelnienie %d Czas %d Czestotliwosc %d\r\n",wart,czas,czest);
 80003f0:	4b49      	ldr	r3, [pc, #292]	; (8000518 <doner+0x18c>)
 80003f2:	6819      	ldr	r1, [r3, #0]
 80003f4:	4b49      	ldr	r3, [pc, #292]	; (800051c <doner+0x190>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b49      	ldr	r3, [pc, #292]	; (8000520 <doner+0x194>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4849      	ldr	r0, [pc, #292]	; (8000524 <doner+0x198>)
 80003fe:	f7ff ff4f 	bl	80002a0 <fsend>
}
 8000402:	e072      	b.n	80004ea <doner+0x15e>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 8000404:	4a45      	ldr	r2, [pc, #276]	; (800051c <doner+0x190>)
 8000406:	4948      	ldr	r1, [pc, #288]	; (8000528 <doner+0x19c>)
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f003 f979 	bl	8003700 <siscanf>
 800040e:	4603      	mov	r3, r0
 8000410:	2b01      	cmp	r3, #1
 8000412:	d006      	beq.n	8000422 <doner+0x96>
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	4845      	ldr	r0, [pc, #276]	; (800052c <doner+0x1a0>)
 8000418:	f7ff fe98 	bl	800014c <strcmp>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d112      	bne.n	8000448 <doner+0xbc>
		if(czas>=0 && czas<=20){
 8000422:	4b3e      	ldr	r3, [pc, #248]	; (800051c <doner+0x190>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	db0a      	blt.n	8000440 <doner+0xb4>
 800042a:	4b3c      	ldr	r3, [pc, #240]	; (800051c <doner+0x190>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b14      	cmp	r3, #20
 8000430:	dc06      	bgt.n	8000440 <doner+0xb4>
			fsend("„Ustawiono czas na %d sekund.\r\n",czas);
 8000432:	4b3a      	ldr	r3, [pc, #232]	; (800051c <doner+0x190>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4619      	mov	r1, r3
 8000438:	483d      	ldr	r0, [pc, #244]	; (8000530 <doner+0x1a4>)
 800043a:	f7ff ff31 	bl	80002a0 <fsend>
		if(czas>=0 && czas<=20){
 800043e:	e054      	b.n	80004ea <doner+0x15e>
			fsend("WRNUM\r\n");
 8000440:	483c      	ldr	r0, [pc, #240]	; (8000534 <doner+0x1a8>)
 8000442:	f7ff ff2d 	bl	80002a0 <fsend>
		if(czas>=0 && czas<=20){
 8000446:	e050      	b.n	80004ea <doner+0x15e>
	else if(sscanf(ord, "FFILL%d;", &wart) == 1 || strcmp("FFIL;", ord) == 0){
 8000448:	4a33      	ldr	r2, [pc, #204]	; (8000518 <doner+0x18c>)
 800044a:	493b      	ldr	r1, [pc, #236]	; (8000538 <doner+0x1ac>)
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f003 f957 	bl	8003700 <siscanf>
 8000452:	4603      	mov	r3, r0
 8000454:	2b01      	cmp	r3, #1
 8000456:	d006      	beq.n	8000466 <doner+0xda>
 8000458:	6879      	ldr	r1, [r7, #4]
 800045a:	4838      	ldr	r0, [pc, #224]	; (800053c <doner+0x1b0>)
 800045c:	f7ff fe76 	bl	800014c <strcmp>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d10e      	bne.n	8000484 <doner+0xf8>
		if(wart>=0 && wart<= 4294967295){
 8000466:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <doner+0x18c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	db06      	blt.n	800047c <doner+0xf0>
			fsend("„Ustawiono wypelnienie na %d .\r\n",wart);
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <doner+0x18c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4619      	mov	r1, r3
 8000474:	4832      	ldr	r0, [pc, #200]	; (8000540 <doner+0x1b4>)
 8000476:	f7ff ff13 	bl	80002a0 <fsend>
		if(wart>=0 && wart<= 4294967295){
 800047a:	e036      	b.n	80004ea <doner+0x15e>
			fsend("WRNUM\r\n");
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <doner+0x1a8>)
 800047e:	f7ff ff0f 	bl	80002a0 <fsend>
		if(wart>=0 && wart<= 4294967295){
 8000482:	e032      	b.n	80004ea <doner+0x15e>
	else if(sscanf(ord, "FSET%d;", &czest) == 1 || strcmp("FSET;", ord) == 0){
 8000484:	4a26      	ldr	r2, [pc, #152]	; (8000520 <doner+0x194>)
 8000486:	492f      	ldr	r1, [pc, #188]	; (8000544 <doner+0x1b8>)
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f003 f939 	bl	8003700 <siscanf>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	d006      	beq.n	80004a2 <doner+0x116>
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	482c      	ldr	r0, [pc, #176]	; (8000548 <doner+0x1bc>)
 8000498:	f7ff fe58 	bl	800014c <strcmp>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d11f      	bne.n	80004e2 <doner+0x156>
		if(czest>=10 && czest<=1000){
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <doner+0x194>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b09      	cmp	r3, #9
 80004a8:	dd17      	ble.n	80004da <doner+0x14e>
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <doner+0x194>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004b2:	dc12      	bgt.n	80004da <doner+0x14e>
					fsend("„Ustawiono czestotliwosc na %d kH.\r\n",czest);
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <doner+0x194>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	4824      	ldr	r0, [pc, #144]	; (800054c <doner+0x1c0>)
 80004bc:	f7ff fef0 	bl	80002a0 <fsend>
					htim1.Init.Period = 72000/czest-1;
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <doner+0x194>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a22      	ldr	r2, [pc, #136]	; (8000550 <doner+0x1c4>)
 80004c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80004ca:	3b01      	subs	r3, #1
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b21      	ldr	r3, [pc, #132]	; (8000554 <doner+0x1c8>)
 80004d0:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Init(&htim1);
 80004d2:	4820      	ldr	r0, [pc, #128]	; (8000554 <doner+0x1c8>)
 80004d4:	f001 fcf8 	bl	8001ec8 <HAL_TIM_Base_Init>
		if(czest>=10 && czest<=1000){
 80004d8:	e007      	b.n	80004ea <doner+0x15e>
					fsend("WRNUM\r\n");
 80004da:	4816      	ldr	r0, [pc, #88]	; (8000534 <doner+0x1a8>)
 80004dc:	f7ff fee0 	bl	80002a0 <fsend>
		if(czest>=10 && czest<=1000){
 80004e0:	e003      	b.n	80004ea <doner+0x15e>
		fsend("WRCMD\r\n");
 80004e2:	481d      	ldr	r0, [pc, #116]	; (8000558 <doner+0x1cc>)
 80004e4:	f7ff fedc 	bl	80002a0 <fsend>
}
 80004e8:	e7ff      	b.n	80004ea <doner+0x15e>
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	08004910 	.word	0x08004910
 80004f8:	200000b0 	.word	0x200000b0
 80004fc:	08004918 	.word	0x08004918
 8000500:	0800495c 	.word	0x0800495c
 8000504:	200000b4 	.word	0x200000b4
 8000508:	08004964 	.word	0x08004964
 800050c:	0800499c 	.word	0x0800499c
 8000510:	080049a4 	.word	0x080049a4
 8000514:	080049c8 	.word	0x080049c8
 8000518:	20000004 	.word	0x20000004
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	080049d0 	.word	0x080049d0
 8000528:	080049fc 	.word	0x080049fc
 800052c:	08004a08 	.word	0x08004a08
 8000530:	08004a10 	.word	0x08004a10
 8000534:	08004a34 	.word	0x08004a34
 8000538:	08004a3c 	.word	0x08004a3c
 800053c:	08004a48 	.word	0x08004a48
 8000540:	08004a50 	.word	0x08004a50
 8000544:	08004a74 	.word	0x08004a74
 8000548:	08004a7c 	.word	0x08004a7c
 800054c:	08004a84 	.word	0x08004a84
 8000550:	00011940 	.word	0x00011940
 8000554:	20000950 	.word	0x20000950
 8000558:	08004aac 	.word	0x08004aac

0800055c <checksum>:

int checksum(char *buffer){
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	int suma = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
	int i;
	char userSum[2];
	userSum[0]=buffer[strlen(buffer)-3];
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff fdf9 	bl	8000160 <strlen>
 800056e:	4603      	mov	r3, r0
 8000570:	3b03      	subs	r3, #3
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	723b      	strb	r3, [r7, #8]
	userSum[1]=buffer[strlen(buffer)-2];
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff fdf0 	bl	8000160 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	3b02      	subs	r3, #2
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	727b      	strb	r3, [r7, #9]

	for(i = 0;i<strlen(buffer)-4;i++){
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	e00a      	b.n	80005a8 <checksum+0x4c>
		suma=suma+buffer[i];
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	4413      	add	r3, r2
 80005a0:	61fb      	str	r3, [r7, #28]
	for(i = 0;i<strlen(buffer)-4;i++){
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	3301      	adds	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fdd9 	bl	8000160 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	1f1a      	subs	r2, r3, #4
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8ec      	bhi.n	8000592 <checksum+0x36>
	}
	int mod=suma%256;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	425a      	negs	r2, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	bf58      	it	pl
 80005c2:	4253      	negpl	r3, r2
 80005c4:	617b      	str	r3, [r7, #20]
	long temp;
	int j=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
	while (mod != 0){
 80005ca:	e024      	b.n	8000616 <checksum+0xba>
		temp = mod % 16;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	425a      	negs	r2, r3
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	f002 020f 	and.w	r2, r2, #15
 80005d8:	bf58      	it	pl
 80005da:	4253      	negpl	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
		if (temp < 10)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b09      	cmp	r3, #9
 80005e2:	dc09      	bgt.n	80005f8 <checksum+0x9c>
			hex[j++] = 48 + temp;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	1c59      	adds	r1, r3, #1
 80005ec:	6139      	str	r1, [r7, #16]
 80005ee:	3230      	adds	r2, #48	; 0x30
 80005f0:	b2d1      	uxtb	r1, r2
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <checksum+0xe4>)
 80005f4:	54d1      	strb	r1, [r2, r3]
 80005f6:	e008      	b.n	800060a <checksum+0xae>
		else
		    hex[j++] = 55 + temp;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	1c59      	adds	r1, r3, #1
 8000600:	6139      	str	r1, [r7, #16]
 8000602:	3237      	adds	r2, #55	; 0x37
 8000604:	b2d1      	uxtb	r1, r2
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <checksum+0xe4>)
 8000608:	54d1      	strb	r1, [r2, r3]
		mod = mod / 16;
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b00      	cmp	r3, #0
 800060e:	da00      	bge.n	8000612 <checksum+0xb6>
 8000610:	330f      	adds	r3, #15
 8000612:	111b      	asrs	r3, r3, #4
 8000614:	617b      	str	r3, [r7, #20]
	while (mod != 0){
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1d7      	bne.n	80005cc <checksum+0x70>
	}

	if(hex[1]==userSum[0] && hex[0]==userSum[1])
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <checksum+0xe4>)
 800061e:	785a      	ldrb	r2, [r3, #1]
 8000620:	7a3b      	ldrb	r3, [r7, #8]
 8000622:	429a      	cmp	r2, r3
 8000624:	d106      	bne.n	8000634 <checksum+0xd8>
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <checksum+0xe4>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	7a7b      	ldrb	r3, [r7, #9]
 800062c:	429a      	cmp	r2, r3
 800062e:	d101      	bne.n	8000634 <checksum+0xd8>
	{
		return 1;
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <checksum+0xda>
	}
	else
	{
		return 0;
 8000634:	2300      	movs	r3, #0
	}

}
 8000636:	4618      	mov	r0, r3
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000094c 	.word	0x2000094c

08000644 <get_line>:
void get_line(){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
	char temp = get_char();
 800064a:	f7ff fdff 	bl	800024c <get_char>
 800064e:	4603      	mov	r3, r0
 8000650:	70fb      	strb	r3, [r7, #3]
	bfr[pidx]=temp;
 8000652:	4b4b      	ldr	r3, [pc, #300]	; (8000780 <get_line+0x13c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	4a4a      	ldr	r2, [pc, #296]	; (8000784 <get_line+0x140>)
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	5453      	strb	r3, [r2, r1]
	pidx++;
 8000660:	4b47      	ldr	r3, [pc, #284]	; (8000780 <get_line+0x13c>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	3301      	adds	r3, #1
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b45      	ldr	r3, [pc, #276]	; (8000780 <get_line+0x13c>)
 800066c:	801a      	strh	r2, [r3, #0]
	if(temp == 0x05){
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2b05      	cmp	r3, #5
 8000672:	d10c      	bne.n	800068e <get_line+0x4a>
		pidx=0;
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <get_line+0x13c>)
 8000676:	2200      	movs	r2, #0
 8000678:	801a      	strh	r2, [r3, #0]
		memset(&bfr[0],0,sizeof(bfr));
 800067a:	f240 1205 	movw	r2, #261	; 0x105
 800067e:	2100      	movs	r1, #0
 8000680:	4840      	ldr	r0, [pc, #256]	; (8000784 <get_line+0x140>)
 8000682:	f003 f835 	bl	80036f0 <memset>
		fstate = active;
 8000686:	4b40      	ldr	r3, [pc, #256]	; (8000788 <get_line+0x144>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
			fsend("WRFRM");
			fsend("\r\n");
		}
		pidx=0;
	}
}
 800068c:	e073      	b.n	8000776 <get_line+0x132>
	else if(pidx > 261){
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <get_line+0x13c>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29b      	uxth	r3, r3
 8000694:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000698:	d303      	bcc.n	80006a2 <get_line+0x5e>
		pidx=0;
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <get_line+0x13c>)
 800069c:	2200      	movs	r2, #0
 800069e:	801a      	strh	r2, [r3, #0]
}
 80006a0:	e069      	b.n	8000776 <get_line+0x132>
	else if(temp == 0x04 && fstate == active){
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d166      	bne.n	8000776 <get_line+0x132>
 80006a8:	4b37      	ldr	r3, [pc, #220]	; (8000788 <get_line+0x144>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d162      	bne.n	8000776 <get_line+0x132>
		fstate = inactive;
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <get_line+0x144>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
		if(strlen(bfr)>4){
 80006b6:	4833      	ldr	r0, [pc, #204]	; (8000784 <get_line+0x140>)
 80006b8:	f7ff fd52 	bl	8000160 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d950      	bls.n	8000764 <get_line+0x120>
			fsend(bfr);
 80006c2:	4830      	ldr	r0, [pc, #192]	; (8000784 <get_line+0x140>)
 80006c4:	f7ff fdec 	bl	80002a0 <fsend>
			fsend("\r\n");
 80006c8:	4830      	ldr	r0, [pc, #192]	; (800078c <get_line+0x148>)
 80006ca:	f7ff fde9 	bl	80002a0 <fsend>
			int poi=0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
			if(checksum(bfr)==1){
 80006d2:	482c      	ldr	r0, [pc, #176]	; (8000784 <get_line+0x140>)
 80006d4:	f7ff ff42 	bl	800055c <checksum>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d135      	bne.n	800074a <get_line+0x106>
				for(int i=1;i<=pidx;i++){
 80006de:	2301      	movs	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	e02a      	b.n	800073a <get_line+0xf6>
					if(bfr[i] == ';'){
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <get_line+0x140>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b3b      	cmp	r3, #59	; 0x3b
 80006ee:	d121      	bne.n	8000734 <get_line+0xf0>
						memset(&order[0],0,sizeof(order));
 80006f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f4:	2100      	movs	r1, #0
 80006f6:	4826      	ldr	r0, [pc, #152]	; (8000790 <get_line+0x14c>)
 80006f8:	f002 fffa 	bl	80036f0 <memset>
						ordpidx=0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
						while(poi<=i){
 8000700:	e00e      	b.n	8000720 <get_line+0xdc>
							order[ordpidx]=bfr[poi];
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <get_line+0x140>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4413      	add	r3, r2
 8000708:	7819      	ldrb	r1, [r3, #0]
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <get_line+0x14c>)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	460a      	mov	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
							ordpidx++;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
							poi++;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
						while(poi<=i){
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	429a      	cmp	r2, r3
 8000726:	ddec      	ble.n	8000702 <get_line+0xbe>
						ordpidx=i+1;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
						doner(order);
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <get_line+0x14c>)
 8000730:	f7ff fe2c 	bl	800038c <doner>
				for(int i=1;i<=pidx;i++){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <get_line+0x13c>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4293      	cmp	r3, r2
 8000746:	ddcd      	ble.n	80006e4 <get_line+0xa0>
 8000748:	e012      	b.n	8000770 <get_line+0x12c>
				fsend("WRCHS%c%c",hex[1],hex[0]);
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <get_line+0x150>)
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	4619      	mov	r1, r3
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <get_line+0x150>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4810      	ldr	r0, [pc, #64]	; (8000798 <get_line+0x154>)
 8000758:	f7ff fda2 	bl	80002a0 <fsend>
				fsend("\r\n");
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <get_line+0x148>)
 800075e:	f7ff fd9f 	bl	80002a0 <fsend>
 8000762:	e005      	b.n	8000770 <get_line+0x12c>
			fsend("WRFRM");
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <get_line+0x158>)
 8000766:	f7ff fd9b 	bl	80002a0 <fsend>
			fsend("\r\n");
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <get_line+0x148>)
 800076c:	f7ff fd98 	bl	80002a0 <fsend>
		pidx=0;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <get_line+0x13c>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000a8 	.word	0x200000a8
 8000784:	20000844 	.word	0x20000844
 8000788:	200000ac 	.word	0x200000ac
 800078c:	08004ab4 	.word	0x08004ab4
 8000790:	20000744 	.word	0x20000744
 8000794:	2000094c 	.word	0x2000094c
 8000798:	08004ab8 	.word	0x08004ab8
 800079c:	08004ac4 	.word	0x08004ac4

080007a0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_UART_TxCpltCallback+0x58>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d11e      	bne.n	80007ee <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_UART_TxCpltCallback+0x5c>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_UART_TxCpltCallback+0x60>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d018      	beq.n	80007ee <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_UART_TxCpltCallback+0x60>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_UART_TxCpltCallback+0x64>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_UART_TxCpltCallback+0x60>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <HAL_UART_TxCpltCallback+0x60>)
 80007ce:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_TxCpltCallback+0x60>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d8:	db02      	blt.n	80007e0 <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_UART_TxCpltCallback+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80007e0:	f107 030f 	add.w	r3, r7, #15
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <HAL_UART_TxCpltCallback+0x58>)
 80007ea:	f002 fb0d 	bl	8002e08 <HAL_UART_Transmit_IT>
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200009e0 	.word	0x200009e0
 80007fc:	20000098 	.word	0x20000098
 8000800:	2000009c 	.word	0x2000009c
 8000804:	200000c4 	.word	0x200000c4

08000808 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_UART_RxCpltCallback+0x44>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d115      	bne.n	8000844 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_UART_RxCpltCallback+0x48>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <HAL_UART_RxCpltCallback+0x48>)
 8000820:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_UART_RxCpltCallback+0x48>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800082a:	db02      	blt.n	8000832 <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_UART_RxCpltCallback+0x48>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_UART_RxCpltCallback+0x48>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_UART_RxCpltCallback+0x4c>)
 8000838:	4413      	add	r3, r2
 800083a:	2201      	movs	r2, #1
 800083c:	4619      	mov	r1, r3
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <HAL_UART_RxCpltCallback+0x44>)
 8000840:	f002 fb26 	bl	8002e90 <HAL_UART_Receive_IT>
	}
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200009e0 	.word	0x200009e0
 8000850:	200000a0 	.word	0x200000a0
 8000854:	20000544 	.word	0x20000544

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fb3c 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f824 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff fc84 	bl	8000170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000868:	f000 faa0 	bl	8000dac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800086c:	f000 f90a 	bl	8000a84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000870:	f000 f9a8 	bl	8000bc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  fsend("Hello user\r\n");
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <main+0x40>)
 8000876:	f7ff fd13 	bl	80002a0 <fsend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 800087a:	2201      	movs	r2, #1
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <main+0x44>)
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <main+0x48>)
 8000880:	f002 fb06 	bl	8002e90 <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <main+0x4c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <main+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d0f9      	beq.n	8000884 <main+0x2c>
		  get_line();
 8000890:	f7ff fed8 	bl	8000644 <get_line>
	  if(busyRX!=emptyRX){
 8000894:	e7f6      	b.n	8000884 <main+0x2c>
 8000896:	bf00      	nop
 8000898:	08004acc 	.word	0x08004acc
 800089c:	20000544 	.word	0x20000544
 80008a0:	200009e0 	.word	0x200009e0
 80008a4:	200000a4 	.word	0x200000a4
 80008a8:	200000a0 	.word	0x200000a0

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	; 0x40
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	2228      	movs	r2, #40	; 0x28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 ff18 	bl	80036f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d6:	2310      	movs	r3, #16
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fed1 	bl	8001694 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008f8:	f000 f819 	bl	800092e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f93c 	bl	8001b94 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000922:	f000 f804 	bl	800092e <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3740      	adds	r7, #64	; 0x40
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x4>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 fac1 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <USART2_IRQHandler+0x10>)
 80009ee:	f002 fa7f 	bl	8002ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200009e0 	.word	0x200009e0

080009fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a04:	f000 fe24 	bl	8001650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f002 fe2e 	bl	800369c <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20005000 	.word	0x20005000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	200000b8 	.word	0x200000b8
 8000a74:	20000a38 	.word	0x20000a38

08000a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	; 0x58
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2220      	movs	r2, #32
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 fe17 	bl	80036f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <MX_TIM1_Init+0x13c>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000ac8:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000aca:	22b3      	movs	r2, #179	; 0xb3
 8000acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aee:	4833      	ldr	r0, [pc, #204]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000af0:	f001 f9ea 	bl	8001ec8 <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000afa:	f7ff ff18 	bl	800092e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b08:	4619      	mov	r1, r3
 8000b0a:	482c      	ldr	r0, [pc, #176]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000b0c:	f001 fc2e 	bl	800236c <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b16:	f7ff ff0a 	bl	800092e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b1a:	4828      	ldr	r0, [pc, #160]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000b1c:	f001 fa23 	bl	8001f66 <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b26:	f7ff ff02 	bl	800092e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b36:	4619      	mov	r1, r3
 8000b38:	4820      	ldr	r0, [pc, #128]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000b3a:	f002 f869 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b44:	f7ff fef3 	bl	800092e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b48:	2360      	movs	r3, #96	; 0x60
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000b6e:	f001 fb3f 	bl	80021f0 <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b78:	f7ff fed9 	bl	800092e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000ba0:	f002 f894 	bl	8002ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000baa:	f7ff fec0 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM1_Init+0x138>)
 8000bb0:	f000 f8c8 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 8000bb4:	bf00      	nop
 8000bb6:	3758      	adds	r7, #88	; 0x58
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000950 	.word	0x20000950
 8000bc0:	40012c00 	.word	0x40012c00

08000bc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000bf8:	2259      	movs	r2, #89	; 0x59
 8000bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c16:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c18:	f001 f956 	bl	8001ec8 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000c22:	f7ff fe84 	bl	800092e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4619      	mov	r1, r3
 8000c32:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c34:	f001 fb9a 	bl	800236c <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c3e:	f7ff fe76 	bl	800092e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c42:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c44:	f001 f9e7 	bl	8002016 <HAL_TIM_IC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f7ff fe6e 	bl	800092e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c62:	f001 ffd5 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000c6c:	f7ff fe5f 	bl	800092e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_TIM2_Init+0xdc>)
 8000c88:	f001 fa1d 	bl	80020c6 <HAL_TIM_IC_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000c92:	f7ff fe4c 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000998 	.word	0x20000998

08000ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <HAL_TIM_Base_MspInit+0x94>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d10c      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000cca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cdc:	e028      	b.n	8000d30 <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce6:	d123      	bne.n	8000d30 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	61d3      	str	r3, [r2, #28]
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_TIM_Base_MspInit+0x98>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_TIM_Base_MspInit+0x9c>)
 8000d2c:	f000 faf4 	bl	8001318 <HAL_GPIO_Init>
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800

08000d44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_MspPostInit+0x5c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d118      	bne.n	8000d96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_TIM_MspPostInit+0x60>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_TIM_MspPostInit+0x60>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_TIM_MspPostInit+0x60>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_TIM_MspPostInit+0x64>)
 8000d92:	f000 fac1 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800

08000dac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f001 ffc3 	bl	8002d6e <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f7ff fd9e 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200009e0 	.word	0x200009e0
 8000dfc:	40004400 	.word	0x40004400

08000e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d12b      	bne.n	8000e78 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2a:	61d3      	str	r3, [r2, #28]
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e50:	230c      	movs	r3, #12
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e64:	f000 fa58 	bl	8001318 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2026      	movs	r0, #38	; 0x26
 8000e6e:	f000 f96c 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e72:	2026      	movs	r0, #38	; 0x26
 8000e74:	f000 f985 	bl	8001182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004400 	.word	0x40004400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb2:	f7ff fde1 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 fbf7 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fccd 	bl	8000858 <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ec8:	08004cc8 	.word	0x08004cc8
  ldr r2, =_sbss
 8000ecc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ed0:	20000a38 	.word	0x20000a38

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f923 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fd1e 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93b 	bl	800119e <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f903 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	20000010 	.word	0x20000010

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_IncTick+0x20>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000014 	.word	0x20000014
 8000f84:	20000a24 	.word	0x20000a24

08000f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000a24 	.word	0x20000a24

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4906      	ldr	r1, [pc, #24]	; (8001034 <__NVIC_EnableIRQ+0x34>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff90 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff2d 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff42 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff90 	bl	800108c <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5f 	bl	8001038 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff35 	bl	8001000 <__NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffa2 	bl	80010f0 <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d008      	beq.n	80011de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2204      	movs	r2, #4
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e020      	b.n	8001220 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 020e 	bic.w	r2, r2, #14
 80011ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
	...

0800122c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123e:	2b02      	cmp	r3, #2
 8001240:	d005      	beq.n	800124e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2204      	movs	r2, #4
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e051      	b.n	80012f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 020e 	bic.w	r2, r2, #14
 800125c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a22      	ldr	r2, [pc, #136]	; (80012fc <HAL_DMA_Abort_IT+0xd0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d029      	beq.n	80012cc <HAL_DMA_Abort_IT+0xa0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_DMA_Abort_IT+0xd4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d022      	beq.n	80012c8 <HAL_DMA_Abort_IT+0x9c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_DMA_Abort_IT+0xd8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d01a      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x96>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_DMA_Abort_IT+0xdc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d012      	beq.n	80012bc <HAL_DMA_Abort_IT+0x90>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_DMA_Abort_IT+0xe0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d00a      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x8a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <HAL_DMA_Abort_IT+0xe4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d102      	bne.n	80012b0 <HAL_DMA_Abort_IT+0x84>
 80012aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012ae:	e00e      	b.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 80012b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b4:	e00b      	b.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 80012b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ba:	e008      	b.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 80012bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c0:	e005      	b.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 80012c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c6:	e002      	b.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 80012c8:	2310      	movs	r3, #16
 80012ca:	e000      	b.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 80012cc:	2301      	movs	r3, #1
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_DMA_Abort_IT+0xe8>)
 80012d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
    } 
  }
  return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40020008 	.word	0x40020008
 8001300:	4002001c 	.word	0x4002001c
 8001304:	40020030 	.word	0x40020030
 8001308:	40020044 	.word	0x40020044
 800130c:	40020058 	.word	0x40020058
 8001310:	4002006c 	.word	0x4002006c
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e169      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8158 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a9a      	ldr	r2, [pc, #616]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4a98      	ldr	r2, [pc, #608]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4a98      	ldr	r2, [pc, #608]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a96      	ldr	r2, [pc, #600]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a79      	ldr	r2, [pc, #484]	; (80015cc <HAL_GPIO_Init+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b1 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001504:	2300      	movs	r3, #0
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001516:	492f      	ldr	r1, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	491e      	ldr	r1, [pc, #120]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4918      	ldr	r1, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60cb      	str	r3, [r1, #12]
 80015b4:	e021      	b.n	80015fa <HAL_GPIO_Init+0x2e2>
 80015b6:	bf00      	nop
 80015b8:	10320000 	.word	0x10320000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10210000 	.word	0x10210000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_GPIO_Init+0x304>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	; (800161c <HAL_GPIO_Init+0x304>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae8e 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f806 	bl	8001680 <HAL_GPIO_EXTI_Callback>
  }
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e26c      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8087 	beq.w	80017c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d00c      	beq.n	80016da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c0:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d112      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
 80016cc:	4b8c      	ldr	r3, [pc, #560]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d06c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x12c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d168      	bne.n	80017c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e246      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x76>
 80016fc:	4b80      	ldr	r3, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7f      	ldr	r2, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e02e      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b78      	ldr	r3, [pc, #480]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a77      	ldr	r2, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e01d      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0xbc>
 8001736:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a71      	ldr	r2, [pc, #452]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6a      	ldr	r2, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a67      	ldr	r2, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fc0a 	bl	8000f88 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fc06 	bl	8000f88 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1fa      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xe4>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fbf6 	bl	8000f88 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fbf2 	bl	8000f88 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1e6      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x10c>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d063      	beq.n	8001896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d11c      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1ba      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4939      	ldr	r1, [pc, #228]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e03a      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x270>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fbab 	bl	8000f88 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fba7 	bl	8000f88 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e19b      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4927      	ldr	r1, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCC_OscConfig+0x270>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb8a 	bl	8000f88 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fb86 	bl	8000f88 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e17a      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03a      	beq.n	8001918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d019      	beq.n	80018de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_RCC_OscConfig+0x274>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fb6a 	bl	8000f88 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb66 	bl	8000f88 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e15a      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 fad8 	bl	8001e8c <RCC_Delay>
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x274>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb50 	bl	8000f88 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	e00f      	b.n	800190c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb4c 	bl	8000f88 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d908      	bls.n	800190c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e140      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	42420000 	.word	0x42420000
 8001908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e9      	bne.n	80018ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a6 	beq.w	8001a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b97      	ldr	r3, [pc, #604]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a93      	ldr	r2, [pc, #588]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b8e      	ldr	r3, [pc, #568]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fb0d 	bl	8000f88 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fb09 	bl	8000f88 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0fd      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x312>
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	e02d      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x334>
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a72      	ldr	r2, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	e01c      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x356>
 80019d0:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a6c      	ldr	r2, [pc, #432]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a66      	ldr	r2, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d015      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fabd 	bl	8000f88 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fab9 	bl	8000f88 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0ab      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ee      	beq.n	8001a12 <HAL_RCC_OscConfig+0x37e>
 8001a34:	e014      	b.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff faa7 	bl	8000f88 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff faa3 	bl	8000f88 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e095      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8081 	beq.w	8001b7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d061      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d146      	bne.n	8001b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa77 	bl	8000f88 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff fa73 	bl	8000f88 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e067      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	492d      	ldr	r1, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a19      	ldr	r1, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa47 	bl	8000f88 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff fa43 	bl	8000f88 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e037      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x46a>
 8001b1c:	e02f      	b.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa30 	bl	8000f88 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff fa2c 	bl	8000f88 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e020      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x498>
 8001b4a:	e018      	b.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42420060 	.word	0x42420060

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d0      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4965      	ldr	r1, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d040      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e073      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4936      	ldr	r1, [pc, #216]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f980 	bl	8000f88 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f97c 	bl	8000f88 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e053      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d210      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1cc>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f8de 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08004af8 	.word	0x08004af8
 8001d60:	2000000c 	.word	0x2000000c
 8001d64:	20000010 	.word	0x20000010

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b490      	push	{r4, r7}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d70:	1d3c      	adds	r4, r7, #4
 8001d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d78:	f240 2301 	movw	r3, #513	; 0x201
 8001d7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x40>
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0x46>
 8001da6:	e02d      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001daa:	623b      	str	r3, [r7, #32]
      break;
 8001dac:	e02d      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	0c9b      	lsrs	r3, r3, #18
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dba:	4413      	add	r3, r2
 8001dbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c5b      	lsrs	r3, r3, #17
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dda:	4413      	add	r3, r2
 8001ddc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001de0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de6:	fb02 f203 	mul.w	r2, r2, r3
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	623b      	str	r3, [r7, #32]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e06:	623b      	str	r3, [r7, #32]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc90      	pop	{r4, r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	08004adc 	.word	0x08004adc
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	003d0900 	.word	0x003d0900

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	2000000c 	.word	0x2000000c

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff2 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08004b08 	.word	0x08004b08

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0adb      	lsrs	r3, r3, #11
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08004b08 	.word	0x08004b08

08001e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <RCC_Delay+0x34>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <RCC_Delay+0x38>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0a5b      	lsrs	r3, r3, #9
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ea8:	bf00      	nop
  }
  while (Delay --);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	60fa      	str	r2, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f9      	bne.n	8001ea8 <RCC_Delay+0x1c>
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	10624dd3 	.word	0x10624dd3

08001ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e041      	b.n	8001f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fed8 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3304      	adds	r3, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f000 faf4 	bl	80024f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e041      	b.n	8001ffc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f839 	bl	8002004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 faa5 	bl	80024f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e041      	b.n	80020ac <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f839 	bl	80020b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f000 fa4d 	bl	80024f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80020dc:	2302      	movs	r3, #2
 80020de:	e082      	b.n	80021e6 <HAL_TIM_IC_ConfigChannel+0x120>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11b      	bne.n	8002126 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f000 fbe3 	bl	80028c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020c 	bic.w	r2, r2, #12
 8002110:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6999      	ldr	r1, [r3, #24]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	619a      	str	r2, [r3, #24]
 8002124:	e05a      	b.n	80021dc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d11c      	bne.n	8002166 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f000 fc4c 	bl	80029d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800214e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6999      	ldr	r1, [r3, #24]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	021a      	lsls	r2, r3, #8
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	619a      	str	r2, [r3, #24]
 8002164:	e03a      	b.n	80021dc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f000 fc97 	bl	8002aae <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 020c 	bic.w	r2, r2, #12
 800218e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69d9      	ldr	r1, [r3, #28]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	61da      	str	r2, [r3, #28]
 80021a2:	e01b      	b.n	80021dc <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f000 fcb6 	bl	8002b24 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69d9      	ldr	r1, [r3, #28]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	021a      	lsls	r2, r3, #8
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002206:	2302      	movs	r3, #2
 8002208:	e0ac      	b.n	8002364 <HAL_TIM_PWM_ConfigChannel+0x174>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	f200 809f 	bhi.w	8002358 <HAL_TIM_PWM_ConfigChannel+0x168>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002255 	.word	0x08002255
 8002224:	08002359 	.word	0x08002359
 8002228:	08002359 	.word	0x08002359
 800222c:	08002359 	.word	0x08002359
 8002230:	08002295 	.word	0x08002295
 8002234:	08002359 	.word	0x08002359
 8002238:	08002359 	.word	0x08002359
 800223c:	08002359 	.word	0x08002359
 8002240:	080022d7 	.word	0x080022d7
 8002244:	08002359 	.word	0x08002359
 8002248:	08002359 	.word	0x08002359
 800224c:	08002359 	.word	0x08002359
 8002250:	08002317 	.word	0x08002317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f9ac 	bl	80025b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0208 	orr.w	r2, r2, #8
 800226e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0204 	bic.w	r2, r2, #4
 800227e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6999      	ldr	r1, [r3, #24]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	619a      	str	r2, [r3, #24]
      break;
 8002292:	e062      	b.n	800235a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f9f2 	bl	8002684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6999      	ldr	r1, [r3, #24]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	021a      	lsls	r2, r3, #8
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	619a      	str	r2, [r3, #24]
      break;
 80022d4:	e041      	b.n	800235a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fa3b 	bl	8002758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0208 	orr.w	r2, r2, #8
 80022f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0204 	bic.w	r2, r2, #4
 8002300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69d9      	ldr	r1, [r3, #28]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	61da      	str	r2, [r3, #28]
      break;
 8002314:	e021      	b.n	800235a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fa85 	bl	800282c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69d9      	ldr	r1, [r3, #28]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	021a      	lsls	r2, r3, #8
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	61da      	str	r2, [r3, #28]
      break;
 8002356:	e000      	b.n	800235a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x18>
 8002380:	2302      	movs	r3, #2
 8002382:	e0b3      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x180>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023bc:	d03e      	beq.n	800243c <HAL_TIM_ConfigClockSource+0xd0>
 80023be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c2:	f200 8087 	bhi.w	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ca:	f000 8085 	beq.w	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d2:	d87f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023d4:	2b70      	cmp	r3, #112	; 0x70
 80023d6:	d01a      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xa2>
 80023d8:	2b70      	cmp	r3, #112	; 0x70
 80023da:	d87b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d050      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x116>
 80023e0:	2b60      	cmp	r3, #96	; 0x60
 80023e2:	d877      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023e4:	2b50      	cmp	r3, #80	; 0x50
 80023e6:	d03c      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0xf6>
 80023e8:	2b50      	cmp	r3, #80	; 0x50
 80023ea:	d873      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d058      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x136>
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d86f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023f4:	2b30      	cmp	r3, #48	; 0x30
 80023f6:	d064      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x156>
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d86b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d060      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x156>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d867      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05c      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x156>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d05a      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800240c:	e062      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f000 fbd7 	bl	8002bd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002430:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]
      break;
 800243a:	e04e      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f000 fbc0 	bl	8002bd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245e:	609a      	str	r2, [r3, #8]
      break;
 8002460:	e03b      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fa84 	bl	800297c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2150      	movs	r1, #80	; 0x50
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb8e 	bl	8002b9c <TIM_ITRx_SetConfig>
      break;
 8002480:	e02b      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	461a      	mov	r2, r3
 8002490:	f000 fade 	bl	8002a50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2160      	movs	r1, #96	; 0x60
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fb7e 	bl	8002b9c <TIM_ITRx_SetConfig>
      break;
 80024a0:	e01b      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f000 fa64 	bl	800297c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fb6e 	bl	8002b9c <TIM_ITRx_SetConfig>
      break;
 80024c0:	e00b      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f000 fb65 	bl	8002b9c <TIM_ITRx_SetConfig>
        break;
 80024d2:	e002      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024d4:	bf00      	nop
 80024d6:	e000      	b.n	80024da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a29      	ldr	r2, [pc, #164]	; (80025ac <TIM_Base_SetConfig+0xb8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00b      	beq.n	8002524 <TIM_Base_SetConfig+0x30>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002512:	d007      	beq.n	8002524 <TIM_Base_SetConfig+0x30>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <TIM_Base_SetConfig+0xbc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d003      	beq.n	8002524 <TIM_Base_SetConfig+0x30>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <TIM_Base_SetConfig+0xc0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <TIM_Base_SetConfig+0xb8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <TIM_Base_SetConfig+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0x62>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <TIM_Base_SetConfig+0xbc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0x62>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <TIM_Base_SetConfig+0xc0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <TIM_Base_SetConfig+0xb8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	615a      	str	r2, [r3, #20]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800

080025b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 0302 	bic.w	r3, r3, #2
 8002600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <TIM_OC1_SetConfig+0xc8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10c      	bne.n	800262e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0308 	bic.w	r3, r3, #8
 800261a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <TIM_OC1_SetConfig+0xc8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d111      	bne.n	800265a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800263c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	621a      	str	r2, [r3, #32]
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40012c00 	.word	0x40012c00

08002684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f023 0210 	bic.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f023 0320 	bic.w	r3, r3, #32
 80026ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <TIM_OC2_SetConfig+0xd0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10d      	bne.n	8002700 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a14      	ldr	r2, [pc, #80]	; (8002754 <TIM_OC2_SetConfig+0xd0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d113      	bne.n	8002730 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	621a      	str	r2, [r3, #32]
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40012c00 	.word	0x40012c00

08002758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <TIM_OC3_SetConfig+0xd0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10d      	bne.n	80027d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <TIM_OC3_SetConfig+0xd0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d113      	bne.n	8002802 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	621a      	str	r2, [r3, #32]
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40012c00 	.word	0x40012c00

0800282c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800285a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	031b      	lsls	r3, r3, #12
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <TIM_OC4_SetConfig+0x98>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d109      	bne.n	80028a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40012c00 	.word	0x40012c00

080028c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <TIM_TI1_SetConfig+0xa8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_TI1_SetConfig+0x46>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d007      	beq.n	800290e <TIM_TI1_SetConfig+0x46>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <TIM_TI1_SetConfig+0xac>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_TI1_SetConfig+0x46>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <TIM_TI1_SetConfig+0xb0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <TIM_TI1_SetConfig+0x4a>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <TIM_TI1_SetConfig+0x4c>
 8002912:	2300      	movs	r3, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e003      	b.n	8002932 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	b2db      	uxtb	r3, r3
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f023 030a 	bic.w	r3, r3, #10
 800294c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 030a 	and.w	r3, r3, #10
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400
 8002978:	40000800 	.word	0x40000800

0800297c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0201 	bic.w	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 030a 	bic.w	r3, r3, #10
 80029b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0210 	bic.w	r2, r3, #16
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	031b      	lsls	r3, r3, #12
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 0210 	bic.w	r2, r3, #16
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	031b      	lsls	r3, r3, #12
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	621a      	str	r2, [r3, #32]
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	031b      	lsls	r3, r3, #12
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	031b      	lsls	r3, r3, #12
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f043 0307 	orr.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	609a      	str	r2, [r3, #8]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	021a      	lsls	r2, r3, #8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	609a      	str	r2, [r3, #8]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e046      	b.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d009      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10c      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800

08002ccc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e03d      	b.n	8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e03f      	b.n	8002e00 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fe f833 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fbe4 	bl	8003580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d130      	bne.n	8002e84 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_UART_Transmit_IT+0x26>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e029      	b.n	8002e86 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Transmit_IT+0x38>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e022      	b.n	8002e86 <HAL_UART_Transmit_IT+0x7e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2221      	movs	r2, #33	; 0x21
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d11d      	bne.n	8002ee6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_UART_Receive_IT+0x26>
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e016      	b.n	8002ee8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Receive_IT+0x38>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e00f      	b.n	8002ee8 <HAL_UART_Receive_IT+0x58>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9c5 	bl	800326c <UART_Start_Receive_IT>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	e000      	b.n	8002ee8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x52>
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa76 	bl	800342c <UART_Receive_IT>
      return;
 8002f40:	e17b      	b.n	800323a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80b1 	beq.w	80030ac <HAL_UART_IRQHandler+0x1bc>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_UART_IRQHandler+0x70>
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a6 	beq.w	80030ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_UART_IRQHandler+0x90>
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_UART_IRQHandler+0xb0>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0202 	orr.w	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xd0>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00f      	beq.n	8002fea <HAL_UART_IRQHandler+0xfa>
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_UART_IRQHandler+0xee>
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0208 	orr.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 811e 	beq.w	8003230 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_UART_IRQHandler+0x11e>
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa0f 	bl	800342c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <HAL_UART_IRQHandler+0x146>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d031      	beq.n	800309a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f951 	bl	80032de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d023      	beq.n	8003092 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003058:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	2b00      	cmp	r3, #0
 8003060:	d013      	beq.n	800308a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	4a76      	ldr	r2, [pc, #472]	; (8003240 <HAL_UART_IRQHandler+0x350>)
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f8dc 	bl	800122c <HAL_DMA_Abort_IT>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003084:	4610      	mov	r0, r2
 8003086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e00e      	b.n	80030a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8da 	bl	8003244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e00a      	b.n	80030a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8d6 	bl	8003244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	e006      	b.n	80030a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8d2 	bl	8003244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030a6:	e0c3      	b.n	8003230 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	bf00      	nop
    return;
 80030aa:	e0c1      	b.n	8003230 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 80a1 	bne.w	80031f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 809b 	beq.w	80031f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8095 	beq.w	80031f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d04e      	beq.n	8003190 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80030fc:	8a3b      	ldrh	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8098 	beq.w	8003234 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003108:	8a3a      	ldrh	r2, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	f080 8092 	bcs.w	8003234 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8a3a      	ldrh	r2, [r7, #16]
 8003114:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b20      	cmp	r3, #32
 800311e:	d02b      	beq.n	8003178 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0210 	bic.w	r2, r2, #16
 800316c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f81f 	bl	80011b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003180:	b29b      	uxth	r3, r3
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	b29b      	uxth	r3, r3
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f864 	bl	8003256 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800318e:	e051      	b.n	8003234 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d047      	beq.n	8003238 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80031a8:	8a7b      	ldrh	r3, [r7, #18]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0210 	bic.w	r2, r2, #16
 80031ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ec:	8a7b      	ldrh	r3, [r7, #18]
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f830 	bl	8003256 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031f6:	e01f      	b.n	8003238 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_UART_IRQHandler+0x324>
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8a6 	bl	800335e <UART_Transmit_IT>
    return;
 8003212:	e012      	b.n	800323a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <HAL_UART_IRQHandler+0x34a>
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f8e7 	bl	80033fc <UART_EndTransmit_IT>
    return;
 800322e:	e004      	b.n	800323a <HAL_UART_IRQHandler+0x34a>
    return;
 8003230:	bf00      	nop
 8003232:	e002      	b.n	800323a <HAL_UART_IRQHandler+0x34a>
      return;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <HAL_UART_IRQHandler+0x34a>
      return;
 8003238:	bf00      	nop
  }
}
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	08003337 	.word	0x08003337

08003244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	88fa      	ldrh	r2, [r7, #6]
 800328a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2222      	movs	r2, #34	; 0x22
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0210 	bic.w	r2, r2, #16
 800331c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff77 	bl	8003244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b21      	cmp	r3, #33	; 0x21
 8003370:	d13e      	bne.n	80033f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	d114      	bne.n	80033a6 <UART_Transmit_IT+0x48>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d110      	bne.n	80033a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	1c9a      	adds	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	e008      	b.n	80033b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6211      	str	r1, [r2, #32]
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e000      	b.n	80033f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
  }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003412:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd f9bf 	bl	80007a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b22      	cmp	r3, #34	; 0x22
 800343e:	f040 8099 	bne.w	8003574 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d117      	bne.n	800347c <UART_Receive_IT+0x50>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d113      	bne.n	800347c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346a:	b29a      	uxth	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
 800347a:	e026      	b.n	80034ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d007      	beq.n	80034a0 <UART_Receive_IT+0x74>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <UART_Receive_IT+0x82>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	e008      	b.n	80034c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4619      	mov	r1, r3
 80034d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d148      	bne.n	8003570 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0220 	bic.w	r2, r2, #32
 80034ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	2b01      	cmp	r3, #1
 800351c:	d123      	bne.n	8003566 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0210 	bic.w	r2, r2, #16
 8003532:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b10      	cmp	r3, #16
 8003540:	d10a      	bne.n	8003558 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fe79 	bl	8003256 <HAL_UARTEx_RxEventCallback>
 8003564:	e002      	b.n	800356c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd f94e 	bl	8000808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e002      	b.n	8003576 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035ba:	f023 030c 	bic.w	r3, r3, #12
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <UART_SetConfig+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d103      	bne.n	80035f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7fe fc3c 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	e002      	b.n	80035f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe fc24 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80035f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009a      	lsls	r2, r3, #2
 8003600:	441a      	add	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <UART_SetConfig+0x118>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	0119      	lsls	r1, r3, #4
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009a      	lsls	r2, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fbb2 f2f3 	udiv	r2, r2, r3
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <UART_SetConfig+0x118>)
 800362e:	fba3 0302 	umull	r0, r3, r3, r2
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	2064      	movs	r0, #100	; 0x64
 8003636:	fb00 f303 	mul.w	r3, r0, r3
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	3332      	adds	r3, #50	; 0x32
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <UART_SetConfig+0x118>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364c:	4419      	add	r1, r3
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009a      	lsls	r2, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fbb2 f2f3 	udiv	r2, r2, r3
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <UART_SetConfig+0x118>)
 8003666:	fba3 0302 	umull	r0, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2064      	movs	r0, #100	; 0x64
 800366e:	fb00 f303 	mul.w	r3, r0, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	3332      	adds	r3, #50	; 0x32
 8003678:	4a07      	ldr	r2, [pc, #28]	; (8003698 <UART_SetConfig+0x118>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	440a      	add	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40013800 	.word	0x40013800
 8003698:	51eb851f 	.word	0x51eb851f

0800369c <__errno>:
 800369c:	4b01      	ldr	r3, [pc, #4]	; (80036a4 <__errno+0x8>)
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000018 	.word	0x20000018

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	2600      	movs	r6, #0
 80036ac:	4d0c      	ldr	r5, [pc, #48]	; (80036e0 <__libc_init_array+0x38>)
 80036ae:	4c0d      	ldr	r4, [pc, #52]	; (80036e4 <__libc_init_array+0x3c>)
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	42a6      	cmp	r6, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	f001 f91e 	bl	80048f8 <_init>
 80036bc:	2600      	movs	r6, #0
 80036be:	4d0a      	ldr	r5, [pc, #40]	; (80036e8 <__libc_init_array+0x40>)
 80036c0:	4c0a      	ldr	r4, [pc, #40]	; (80036ec <__libc_init_array+0x44>)
 80036c2:	1b64      	subs	r4, r4, r5
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d0:	4798      	blx	r3
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036da:	4798      	blx	r3
 80036dc:	3601      	adds	r6, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	08004cc0 	.word	0x08004cc0
 80036e4:	08004cc0 	.word	0x08004cc0
 80036e8:	08004cc0 	.word	0x08004cc0
 80036ec:	08004cc4 	.word	0x08004cc4

080036f0 <memset>:
 80036f0:	4603      	mov	r3, r0
 80036f2:	4402      	add	r2, r0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	f803 1b01 	strb.w	r1, [r3], #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <siscanf>:
 8003700:	b40e      	push	{r1, r2, r3}
 8003702:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003706:	b530      	push	{r4, r5, lr}
 8003708:	b09c      	sub	sp, #112	; 0x70
 800370a:	ac1f      	add	r4, sp, #124	; 0x7c
 800370c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003710:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003714:	9002      	str	r0, [sp, #8]
 8003716:	9006      	str	r0, [sp, #24]
 8003718:	f7fc fd22 	bl	8000160 <strlen>
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <siscanf+0x4c>)
 800371e:	9003      	str	r0, [sp, #12]
 8003720:	930b      	str	r3, [sp, #44]	; 0x2c
 8003722:	2300      	movs	r3, #0
 8003724:	930f      	str	r3, [sp, #60]	; 0x3c
 8003726:	9314      	str	r3, [sp, #80]	; 0x50
 8003728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800372c:	9007      	str	r0, [sp, #28]
 800372e:	4808      	ldr	r0, [pc, #32]	; (8003750 <siscanf+0x50>)
 8003730:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003734:	462a      	mov	r2, r5
 8003736:	4623      	mov	r3, r4
 8003738:	a902      	add	r1, sp, #8
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	9401      	str	r4, [sp, #4]
 800373e:	f000 f9e1 	bl	8003b04 <__ssvfiscanf_r>
 8003742:	b01c      	add	sp, #112	; 0x70
 8003744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003748:	b003      	add	sp, #12
 800374a:	4770      	bx	lr
 800374c:	08003755 	.word	0x08003755
 8003750:	20000018 	.word	0x20000018

08003754 <__seofread>:
 8003754:	2000      	movs	r0, #0
 8003756:	4770      	bx	lr

08003758 <_vsiprintf_r>:
 8003758:	b500      	push	{lr}
 800375a:	b09b      	sub	sp, #108	; 0x6c
 800375c:	9100      	str	r1, [sp, #0]
 800375e:	9104      	str	r1, [sp, #16]
 8003760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003764:	9105      	str	r1, [sp, #20]
 8003766:	9102      	str	r1, [sp, #8]
 8003768:	4905      	ldr	r1, [pc, #20]	; (8003780 <_vsiprintf_r+0x28>)
 800376a:	9103      	str	r1, [sp, #12]
 800376c:	4669      	mov	r1, sp
 800376e:	f000 f86f 	bl	8003850 <_svfiprintf_r>
 8003772:	2200      	movs	r2, #0
 8003774:	9b00      	ldr	r3, [sp, #0]
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	b01b      	add	sp, #108	; 0x6c
 800377a:	f85d fb04 	ldr.w	pc, [sp], #4
 800377e:	bf00      	nop
 8003780:	ffff0208 	.word	0xffff0208

08003784 <vsiprintf>:
 8003784:	4613      	mov	r3, r2
 8003786:	460a      	mov	r2, r1
 8003788:	4601      	mov	r1, r0
 800378a:	4802      	ldr	r0, [pc, #8]	; (8003794 <vsiprintf+0x10>)
 800378c:	6800      	ldr	r0, [r0, #0]
 800378e:	f7ff bfe3 	b.w	8003758 <_vsiprintf_r>
 8003792:	bf00      	nop
 8003794:	20000018 	.word	0x20000018

08003798 <__ssputs_r>:
 8003798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	688e      	ldr	r6, [r1, #8]
 800379e:	4682      	mov	sl, r0
 80037a0:	429e      	cmp	r6, r3
 80037a2:	460c      	mov	r4, r1
 80037a4:	4690      	mov	r8, r2
 80037a6:	461f      	mov	r7, r3
 80037a8:	d838      	bhi.n	800381c <__ssputs_r+0x84>
 80037aa:	898a      	ldrh	r2, [r1, #12]
 80037ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037b0:	d032      	beq.n	8003818 <__ssputs_r+0x80>
 80037b2:	6825      	ldr	r5, [r4, #0]
 80037b4:	6909      	ldr	r1, [r1, #16]
 80037b6:	3301      	adds	r3, #1
 80037b8:	eba5 0901 	sub.w	r9, r5, r1
 80037bc:	6965      	ldr	r5, [r4, #20]
 80037be:	444b      	add	r3, r9
 80037c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037c8:	106d      	asrs	r5, r5, #1
 80037ca:	429d      	cmp	r5, r3
 80037cc:	bf38      	it	cc
 80037ce:	461d      	movcc	r5, r3
 80037d0:	0553      	lsls	r3, r2, #21
 80037d2:	d531      	bpl.n	8003838 <__ssputs_r+0xa0>
 80037d4:	4629      	mov	r1, r5
 80037d6:	f000 ffeb 	bl	80047b0 <_malloc_r>
 80037da:	4606      	mov	r6, r0
 80037dc:	b950      	cbnz	r0, 80037f4 <__ssputs_r+0x5c>
 80037de:	230c      	movs	r3, #12
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f8ca 3000 	str.w	r3, [sl]
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f4:	464a      	mov	r2, r9
 80037f6:	6921      	ldr	r1, [r4, #16]
 80037f8:	f000 ff66 	bl	80046c8 <memcpy>
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003806:	81a3      	strh	r3, [r4, #12]
 8003808:	6126      	str	r6, [r4, #16]
 800380a:	444e      	add	r6, r9
 800380c:	6026      	str	r6, [r4, #0]
 800380e:	463e      	mov	r6, r7
 8003810:	6165      	str	r5, [r4, #20]
 8003812:	eba5 0509 	sub.w	r5, r5, r9
 8003816:	60a5      	str	r5, [r4, #8]
 8003818:	42be      	cmp	r6, r7
 800381a:	d900      	bls.n	800381e <__ssputs_r+0x86>
 800381c:	463e      	mov	r6, r7
 800381e:	4632      	mov	r2, r6
 8003820:	4641      	mov	r1, r8
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	f000 ff5e 	bl	80046e4 <memmove>
 8003828:	68a3      	ldr	r3, [r4, #8]
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	1b9b      	subs	r3, r3, r6
 800382e:	4432      	add	r2, r6
 8003830:	2000      	movs	r0, #0
 8003832:	60a3      	str	r3, [r4, #8]
 8003834:	6022      	str	r2, [r4, #0]
 8003836:	e7db      	b.n	80037f0 <__ssputs_r+0x58>
 8003838:	462a      	mov	r2, r5
 800383a:	f001 f813 	bl	8004864 <_realloc_r>
 800383e:	4606      	mov	r6, r0
 8003840:	2800      	cmp	r0, #0
 8003842:	d1e1      	bne.n	8003808 <__ssputs_r+0x70>
 8003844:	4650      	mov	r0, sl
 8003846:	6921      	ldr	r1, [r4, #16]
 8003848:	f000 ff66 	bl	8004718 <_free_r>
 800384c:	e7c7      	b.n	80037de <__ssputs_r+0x46>
	...

08003850 <_svfiprintf_r>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	4698      	mov	r8, r3
 8003856:	898b      	ldrh	r3, [r1, #12]
 8003858:	4607      	mov	r7, r0
 800385a:	061b      	lsls	r3, r3, #24
 800385c:	460d      	mov	r5, r1
 800385e:	4614      	mov	r4, r2
 8003860:	b09d      	sub	sp, #116	; 0x74
 8003862:	d50e      	bpl.n	8003882 <_svfiprintf_r+0x32>
 8003864:	690b      	ldr	r3, [r1, #16]
 8003866:	b963      	cbnz	r3, 8003882 <_svfiprintf_r+0x32>
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	f000 ffa1 	bl	80047b0 <_malloc_r>
 800386e:	6028      	str	r0, [r5, #0]
 8003870:	6128      	str	r0, [r5, #16]
 8003872:	b920      	cbnz	r0, 800387e <_svfiprintf_r+0x2e>
 8003874:	230c      	movs	r3, #12
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	e0d1      	b.n	8003a22 <_svfiprintf_r+0x1d2>
 800387e:	2340      	movs	r3, #64	; 0x40
 8003880:	616b      	str	r3, [r5, #20]
 8003882:	2300      	movs	r3, #0
 8003884:	9309      	str	r3, [sp, #36]	; 0x24
 8003886:	2320      	movs	r3, #32
 8003888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800388c:	2330      	movs	r3, #48	; 0x30
 800388e:	f04f 0901 	mov.w	r9, #1
 8003892:	f8cd 800c 	str.w	r8, [sp, #12]
 8003896:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a3c <_svfiprintf_r+0x1ec>
 800389a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800389e:	4623      	mov	r3, r4
 80038a0:	469a      	mov	sl, r3
 80038a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038a6:	b10a      	cbz	r2, 80038ac <_svfiprintf_r+0x5c>
 80038a8:	2a25      	cmp	r2, #37	; 0x25
 80038aa:	d1f9      	bne.n	80038a0 <_svfiprintf_r+0x50>
 80038ac:	ebba 0b04 	subs.w	fp, sl, r4
 80038b0:	d00b      	beq.n	80038ca <_svfiprintf_r+0x7a>
 80038b2:	465b      	mov	r3, fp
 80038b4:	4622      	mov	r2, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	4638      	mov	r0, r7
 80038ba:	f7ff ff6d 	bl	8003798 <__ssputs_r>
 80038be:	3001      	adds	r0, #1
 80038c0:	f000 80aa 	beq.w	8003a18 <_svfiprintf_r+0x1c8>
 80038c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038c6:	445a      	add	r2, fp
 80038c8:	9209      	str	r2, [sp, #36]	; 0x24
 80038ca:	f89a 3000 	ldrb.w	r3, [sl]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80a2 	beq.w	8003a18 <_svfiprintf_r+0x1c8>
 80038d4:	2300      	movs	r3, #0
 80038d6:	f04f 32ff 	mov.w	r2, #4294967295
 80038da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038de:	f10a 0a01 	add.w	sl, sl, #1
 80038e2:	9304      	str	r3, [sp, #16]
 80038e4:	9307      	str	r3, [sp, #28]
 80038e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038ea:	931a      	str	r3, [sp, #104]	; 0x68
 80038ec:	4654      	mov	r4, sl
 80038ee:	2205      	movs	r2, #5
 80038f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f4:	4851      	ldr	r0, [pc, #324]	; (8003a3c <_svfiprintf_r+0x1ec>)
 80038f6:	f000 fed9 	bl	80046ac <memchr>
 80038fa:	9a04      	ldr	r2, [sp, #16]
 80038fc:	b9d8      	cbnz	r0, 8003936 <_svfiprintf_r+0xe6>
 80038fe:	06d0      	lsls	r0, r2, #27
 8003900:	bf44      	itt	mi
 8003902:	2320      	movmi	r3, #32
 8003904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003908:	0711      	lsls	r1, r2, #28
 800390a:	bf44      	itt	mi
 800390c:	232b      	movmi	r3, #43	; 0x2b
 800390e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003912:	f89a 3000 	ldrb.w	r3, [sl]
 8003916:	2b2a      	cmp	r3, #42	; 0x2a
 8003918:	d015      	beq.n	8003946 <_svfiprintf_r+0xf6>
 800391a:	4654      	mov	r4, sl
 800391c:	2000      	movs	r0, #0
 800391e:	f04f 0c0a 	mov.w	ip, #10
 8003922:	9a07      	ldr	r2, [sp, #28]
 8003924:	4621      	mov	r1, r4
 8003926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800392a:	3b30      	subs	r3, #48	; 0x30
 800392c:	2b09      	cmp	r3, #9
 800392e:	d94e      	bls.n	80039ce <_svfiprintf_r+0x17e>
 8003930:	b1b0      	cbz	r0, 8003960 <_svfiprintf_r+0x110>
 8003932:	9207      	str	r2, [sp, #28]
 8003934:	e014      	b.n	8003960 <_svfiprintf_r+0x110>
 8003936:	eba0 0308 	sub.w	r3, r0, r8
 800393a:	fa09 f303 	lsl.w	r3, r9, r3
 800393e:	4313      	orrs	r3, r2
 8003940:	46a2      	mov	sl, r4
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	e7d2      	b.n	80038ec <_svfiprintf_r+0x9c>
 8003946:	9b03      	ldr	r3, [sp, #12]
 8003948:	1d19      	adds	r1, r3, #4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	9103      	str	r1, [sp, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	bfbb      	ittet	lt
 8003952:	425b      	neglt	r3, r3
 8003954:	f042 0202 	orrlt.w	r2, r2, #2
 8003958:	9307      	strge	r3, [sp, #28]
 800395a:	9307      	strlt	r3, [sp, #28]
 800395c:	bfb8      	it	lt
 800395e:	9204      	strlt	r2, [sp, #16]
 8003960:	7823      	ldrb	r3, [r4, #0]
 8003962:	2b2e      	cmp	r3, #46	; 0x2e
 8003964:	d10c      	bne.n	8003980 <_svfiprintf_r+0x130>
 8003966:	7863      	ldrb	r3, [r4, #1]
 8003968:	2b2a      	cmp	r3, #42	; 0x2a
 800396a:	d135      	bne.n	80039d8 <_svfiprintf_r+0x188>
 800396c:	9b03      	ldr	r3, [sp, #12]
 800396e:	3402      	adds	r4, #2
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	9203      	str	r2, [sp, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfb8      	it	lt
 800397a:	f04f 33ff 	movlt.w	r3, #4294967295
 800397e:	9305      	str	r3, [sp, #20]
 8003980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a4c <_svfiprintf_r+0x1fc>
 8003984:	2203      	movs	r2, #3
 8003986:	4650      	mov	r0, sl
 8003988:	7821      	ldrb	r1, [r4, #0]
 800398a:	f000 fe8f 	bl	80046ac <memchr>
 800398e:	b140      	cbz	r0, 80039a2 <_svfiprintf_r+0x152>
 8003990:	2340      	movs	r3, #64	; 0x40
 8003992:	eba0 000a 	sub.w	r0, r0, sl
 8003996:	fa03 f000 	lsl.w	r0, r3, r0
 800399a:	9b04      	ldr	r3, [sp, #16]
 800399c:	3401      	adds	r4, #1
 800399e:	4303      	orrs	r3, r0
 80039a0:	9304      	str	r3, [sp, #16]
 80039a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a6:	2206      	movs	r2, #6
 80039a8:	4825      	ldr	r0, [pc, #148]	; (8003a40 <_svfiprintf_r+0x1f0>)
 80039aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039ae:	f000 fe7d 	bl	80046ac <memchr>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d038      	beq.n	8003a28 <_svfiprintf_r+0x1d8>
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <_svfiprintf_r+0x1f4>)
 80039b8:	bb1b      	cbnz	r3, 8003a02 <_svfiprintf_r+0x1b2>
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	3307      	adds	r3, #7
 80039be:	f023 0307 	bic.w	r3, r3, #7
 80039c2:	3308      	adds	r3, #8
 80039c4:	9303      	str	r3, [sp, #12]
 80039c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039c8:	4433      	add	r3, r6
 80039ca:	9309      	str	r3, [sp, #36]	; 0x24
 80039cc:	e767      	b.n	800389e <_svfiprintf_r+0x4e>
 80039ce:	460c      	mov	r4, r1
 80039d0:	2001      	movs	r0, #1
 80039d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80039d6:	e7a5      	b.n	8003924 <_svfiprintf_r+0xd4>
 80039d8:	2300      	movs	r3, #0
 80039da:	f04f 0c0a 	mov.w	ip, #10
 80039de:	4619      	mov	r1, r3
 80039e0:	3401      	adds	r4, #1
 80039e2:	9305      	str	r3, [sp, #20]
 80039e4:	4620      	mov	r0, r4
 80039e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039ea:	3a30      	subs	r2, #48	; 0x30
 80039ec:	2a09      	cmp	r2, #9
 80039ee:	d903      	bls.n	80039f8 <_svfiprintf_r+0x1a8>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0c5      	beq.n	8003980 <_svfiprintf_r+0x130>
 80039f4:	9105      	str	r1, [sp, #20]
 80039f6:	e7c3      	b.n	8003980 <_svfiprintf_r+0x130>
 80039f8:	4604      	mov	r4, r0
 80039fa:	2301      	movs	r3, #1
 80039fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a00:	e7f0      	b.n	80039e4 <_svfiprintf_r+0x194>
 8003a02:	ab03      	add	r3, sp, #12
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	462a      	mov	r2, r5
 8003a08:	4638      	mov	r0, r7
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <_svfiprintf_r+0x1f8>)
 8003a0c:	a904      	add	r1, sp, #16
 8003a0e:	f3af 8000 	nop.w
 8003a12:	1c42      	adds	r2, r0, #1
 8003a14:	4606      	mov	r6, r0
 8003a16:	d1d6      	bne.n	80039c6 <_svfiprintf_r+0x176>
 8003a18:	89ab      	ldrh	r3, [r5, #12]
 8003a1a:	065b      	lsls	r3, r3, #25
 8003a1c:	f53f af2c 	bmi.w	8003878 <_svfiprintf_r+0x28>
 8003a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a22:	b01d      	add	sp, #116	; 0x74
 8003a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a28:	ab03      	add	r3, sp, #12
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	462a      	mov	r2, r5
 8003a2e:	4638      	mov	r0, r7
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <_svfiprintf_r+0x1f8>)
 8003a32:	a904      	add	r1, sp, #16
 8003a34:	f000 fa50 	bl	8003ed8 <_printf_i>
 8003a38:	e7eb      	b.n	8003a12 <_svfiprintf_r+0x1c2>
 8003a3a:	bf00      	nop
 8003a3c:	08004b10 	.word	0x08004b10
 8003a40:	08004b1a 	.word	0x08004b1a
 8003a44:	00000000 	.word	0x00000000
 8003a48:	08003799 	.word	0x08003799
 8003a4c:	08004b16 	.word	0x08004b16

08003a50 <_sungetc_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	1c4b      	adds	r3, r1, #1
 8003a54:	4614      	mov	r4, r2
 8003a56:	d103      	bne.n	8003a60 <_sungetc_r+0x10>
 8003a58:	f04f 35ff 	mov.w	r5, #4294967295
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	8993      	ldrh	r3, [r2, #12]
 8003a62:	b2cd      	uxtb	r5, r1
 8003a64:	f023 0320 	bic.w	r3, r3, #32
 8003a68:	8193      	strh	r3, [r2, #12]
 8003a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a6c:	6852      	ldr	r2, [r2, #4]
 8003a6e:	b18b      	cbz	r3, 8003a94 <_sungetc_r+0x44>
 8003a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a72:	4293      	cmp	r3, r2
 8003a74:	dd08      	ble.n	8003a88 <_sungetc_r+0x38>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	6022      	str	r2, [r4, #0]
 8003a7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	3301      	adds	r3, #1
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	e7e9      	b.n	8003a5c <_sungetc_r+0xc>
 8003a88:	4621      	mov	r1, r4
 8003a8a:	f000 fdd5 	bl	8004638 <__submore>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d0f1      	beq.n	8003a76 <_sungetc_r+0x26>
 8003a92:	e7e1      	b.n	8003a58 <_sungetc_r+0x8>
 8003a94:	6921      	ldr	r1, [r4, #16]
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	b151      	cbz	r1, 8003ab0 <_sungetc_r+0x60>
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	d208      	bcs.n	8003ab0 <_sungetc_r+0x60>
 8003a9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003aa2:	42a9      	cmp	r1, r5
 8003aa4:	d104      	bne.n	8003ab0 <_sungetc_r+0x60>
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	3201      	adds	r2, #1
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	6062      	str	r2, [r4, #4]
 8003aae:	e7d5      	b.n	8003a5c <_sungetc_r+0xc>
 8003ab0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8003aba:	2303      	movs	r3, #3
 8003abc:	63a3      	str	r3, [r4, #56]	; 0x38
 8003abe:	4623      	mov	r3, r4
 8003ac0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e7dc      	b.n	8003a84 <_sungetc_r+0x34>

08003aca <__ssrefill_r>:
 8003aca:	b510      	push	{r4, lr}
 8003acc:	460c      	mov	r4, r1
 8003ace:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003ad0:	b169      	cbz	r1, 8003aee <__ssrefill_r+0x24>
 8003ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	d001      	beq.n	8003ade <__ssrefill_r+0x14>
 8003ada:	f000 fe1d 	bl	8004718 <_free_r>
 8003ade:	2000      	movs	r0, #0
 8003ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	b113      	cbz	r3, 8003aee <__ssrefill_r+0x24>
 8003ae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	6063      	str	r3, [r4, #4]
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	f043 0320 	orr.w	r3, r3, #32
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	e7f3      	b.n	8003aec <__ssrefill_r+0x22>

08003b04 <__ssvfiscanf_r>:
 8003b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b08:	460c      	mov	r4, r1
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003b12:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003b16:	49b3      	ldr	r1, [pc, #716]	; (8003de4 <__ssvfiscanf_r+0x2e0>)
 8003b18:	f10d 0804 	add.w	r8, sp, #4
 8003b1c:	91a0      	str	r1, [sp, #640]	; 0x280
 8003b1e:	49b2      	ldr	r1, [pc, #712]	; (8003de8 <__ssvfiscanf_r+0x2e4>)
 8003b20:	4fb2      	ldr	r7, [pc, #712]	; (8003dec <__ssvfiscanf_r+0x2e8>)
 8003b22:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8003df0 <__ssvfiscanf_r+0x2ec>
 8003b26:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003b2a:	91a1      	str	r1, [sp, #644]	; 0x284
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f892 a000 	ldrb.w	sl, [r2]
 8003b32:	f1ba 0f00 	cmp.w	sl, #0
 8003b36:	f000 8153 	beq.w	8003de0 <__ssvfiscanf_r+0x2dc>
 8003b3a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8003b3e:	1c55      	adds	r5, r2, #1
 8003b40:	f013 0308 	ands.w	r3, r3, #8
 8003b44:	d019      	beq.n	8003b7a <__ssvfiscanf_r+0x76>
 8003b46:	6863      	ldr	r3, [r4, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dd0f      	ble.n	8003b6c <__ssvfiscanf_r+0x68>
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	781a      	ldrb	r2, [r3, #0]
 8003b50:	5cba      	ldrb	r2, [r7, r2]
 8003b52:	0712      	lsls	r2, r2, #28
 8003b54:	d401      	bmi.n	8003b5a <__ssvfiscanf_r+0x56>
 8003b56:	462a      	mov	r2, r5
 8003b58:	e7e9      	b.n	8003b2e <__ssvfiscanf_r+0x2a>
 8003b5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	3201      	adds	r2, #1
 8003b60:	9245      	str	r2, [sp, #276]	; 0x114
 8003b62:	6862      	ldr	r2, [r4, #4]
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	3a01      	subs	r2, #1
 8003b68:	6062      	str	r2, [r4, #4]
 8003b6a:	e7ec      	b.n	8003b46 <__ssvfiscanf_r+0x42>
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4630      	mov	r0, r6
 8003b70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b72:	4798      	blx	r3
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d0e9      	beq.n	8003b4c <__ssvfiscanf_r+0x48>
 8003b78:	e7ed      	b.n	8003b56 <__ssvfiscanf_r+0x52>
 8003b7a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003b7e:	f040 8086 	bne.w	8003c8e <__ssvfiscanf_r+0x18a>
 8003b82:	9341      	str	r3, [sp, #260]	; 0x104
 8003b84:	9343      	str	r3, [sp, #268]	; 0x10c
 8003b86:	7853      	ldrb	r3, [r2, #1]
 8003b88:	2b2a      	cmp	r3, #42	; 0x2a
 8003b8a:	bf04      	itt	eq
 8003b8c:	2310      	moveq	r3, #16
 8003b8e:	1c95      	addeq	r5, r2, #2
 8003b90:	f04f 020a 	mov.w	r2, #10
 8003b94:	bf08      	it	eq
 8003b96:	9341      	streq	r3, [sp, #260]	; 0x104
 8003b98:	46ab      	mov	fp, r5
 8003b9a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003b9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	d91d      	bls.n	8003be2 <__ssvfiscanf_r+0xde>
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	4891      	ldr	r0, [pc, #580]	; (8003df0 <__ssvfiscanf_r+0x2ec>)
 8003baa:	f000 fd7f 	bl	80046ac <memchr>
 8003bae:	b140      	cbz	r0, 8003bc2 <__ssvfiscanf_r+0xbe>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	465d      	mov	r5, fp
 8003bb4:	eba0 0009 	sub.w	r0, r0, r9
 8003bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8003bbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bbe:	4318      	orrs	r0, r3
 8003bc0:	9041      	str	r0, [sp, #260]	; 0x104
 8003bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bc6:	2b78      	cmp	r3, #120	; 0x78
 8003bc8:	d806      	bhi.n	8003bd8 <__ssvfiscanf_r+0xd4>
 8003bca:	2b57      	cmp	r3, #87	; 0x57
 8003bcc:	d810      	bhi.n	8003bf0 <__ssvfiscanf_r+0xec>
 8003bce:	2b25      	cmp	r3, #37	; 0x25
 8003bd0:	d05d      	beq.n	8003c8e <__ssvfiscanf_r+0x18a>
 8003bd2:	d857      	bhi.n	8003c84 <__ssvfiscanf_r+0x180>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d075      	beq.n	8003cc4 <__ssvfiscanf_r+0x1c0>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	9347      	str	r3, [sp, #284]	; 0x11c
 8003bdc:	230a      	movs	r3, #10
 8003bde:	9342      	str	r3, [sp, #264]	; 0x108
 8003be0:	e082      	b.n	8003ce8 <__ssvfiscanf_r+0x1e4>
 8003be2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003be4:	465d      	mov	r5, fp
 8003be6:	fb02 1303 	mla	r3, r2, r3, r1
 8003bea:	3b30      	subs	r3, #48	; 0x30
 8003bec:	9343      	str	r3, [sp, #268]	; 0x10c
 8003bee:	e7d3      	b.n	8003b98 <__ssvfiscanf_r+0x94>
 8003bf0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003bf4:	2a20      	cmp	r2, #32
 8003bf6:	d8ef      	bhi.n	8003bd8 <__ssvfiscanf_r+0xd4>
 8003bf8:	a101      	add	r1, pc, #4	; (adr r1, 8003c00 <__ssvfiscanf_r+0xfc>)
 8003bfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003cd3 	.word	0x08003cd3
 8003c04:	08003bd9 	.word	0x08003bd9
 8003c08:	08003bd9 	.word	0x08003bd9
 8003c0c:	08003d31 	.word	0x08003d31
 8003c10:	08003bd9 	.word	0x08003bd9
 8003c14:	08003bd9 	.word	0x08003bd9
 8003c18:	08003bd9 	.word	0x08003bd9
 8003c1c:	08003bd9 	.word	0x08003bd9
 8003c20:	08003bd9 	.word	0x08003bd9
 8003c24:	08003bd9 	.word	0x08003bd9
 8003c28:	08003bd9 	.word	0x08003bd9
 8003c2c:	08003d47 	.word	0x08003d47
 8003c30:	08003d1d 	.word	0x08003d1d
 8003c34:	08003c8b 	.word	0x08003c8b
 8003c38:	08003c8b 	.word	0x08003c8b
 8003c3c:	08003c8b 	.word	0x08003c8b
 8003c40:	08003bd9 	.word	0x08003bd9
 8003c44:	08003d21 	.word	0x08003d21
 8003c48:	08003bd9 	.word	0x08003bd9
 8003c4c:	08003bd9 	.word	0x08003bd9
 8003c50:	08003bd9 	.word	0x08003bd9
 8003c54:	08003bd9 	.word	0x08003bd9
 8003c58:	08003d57 	.word	0x08003d57
 8003c5c:	08003d29 	.word	0x08003d29
 8003c60:	08003ccb 	.word	0x08003ccb
 8003c64:	08003bd9 	.word	0x08003bd9
 8003c68:	08003bd9 	.word	0x08003bd9
 8003c6c:	08003d53 	.word	0x08003d53
 8003c70:	08003bd9 	.word	0x08003bd9
 8003c74:	08003d1d 	.word	0x08003d1d
 8003c78:	08003bd9 	.word	0x08003bd9
 8003c7c:	08003bd9 	.word	0x08003bd9
 8003c80:	08003cd3 	.word	0x08003cd3
 8003c84:	3b45      	subs	r3, #69	; 0x45
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d8a6      	bhi.n	8003bd8 <__ssvfiscanf_r+0xd4>
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	e02b      	b.n	8003ce6 <__ssvfiscanf_r+0x1e2>
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	dd0d      	ble.n	8003cb0 <__ssvfiscanf_r+0x1ac>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	4552      	cmp	r2, sl
 8003c9a:	f040 80a1 	bne.w	8003de0 <__ssvfiscanf_r+0x2dc>
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	6862      	ldr	r2, [r4, #4]
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	3301      	adds	r3, #1
 8003caa:	6062      	str	r2, [r4, #4]
 8003cac:	9345      	str	r3, [sp, #276]	; 0x114
 8003cae:	e752      	b.n	8003b56 <__ssvfiscanf_r+0x52>
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003cb6:	4798      	blx	r3
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d0eb      	beq.n	8003c94 <__ssvfiscanf_r+0x190>
 8003cbc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	f040 8084 	bne.w	8003dcc <__ssvfiscanf_r+0x2c8>
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	e086      	b.n	8003dd8 <__ssvfiscanf_r+0x2d4>
 8003cca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	9241      	str	r2, [sp, #260]	; 0x104
 8003cd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd8:	9241      	str	r2, [sp, #260]	; 0x104
 8003cda:	2210      	movs	r2, #16
 8003cdc:	2b6f      	cmp	r3, #111	; 0x6f
 8003cde:	bf34      	ite	cc
 8003ce0:	2303      	movcc	r3, #3
 8003ce2:	2304      	movcs	r3, #4
 8003ce4:	9242      	str	r2, [sp, #264]	; 0x108
 8003ce6:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dd41      	ble.n	8003d72 <__ssvfiscanf_r+0x26e>
 8003cee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cf0:	0659      	lsls	r1, r3, #25
 8003cf2:	d404      	bmi.n	8003cfe <__ssvfiscanf_r+0x1fa>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	5cba      	ldrb	r2, [r7, r2]
 8003cfa:	0712      	lsls	r2, r2, #28
 8003cfc:	d440      	bmi.n	8003d80 <__ssvfiscanf_r+0x27c>
 8003cfe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	dc4f      	bgt.n	8003da4 <__ssvfiscanf_r+0x2a0>
 8003d04:	466b      	mov	r3, sp
 8003d06:	4622      	mov	r2, r4
 8003d08:	4630      	mov	r0, r6
 8003d0a:	a941      	add	r1, sp, #260	; 0x104
 8003d0c:	f000 fa0a 	bl	8004124 <_scanf_chars>
 8003d10:	2801      	cmp	r0, #1
 8003d12:	d065      	beq.n	8003de0 <__ssvfiscanf_r+0x2dc>
 8003d14:	2802      	cmp	r0, #2
 8003d16:	f47f af1e 	bne.w	8003b56 <__ssvfiscanf_r+0x52>
 8003d1a:	e7cf      	b.n	8003cbc <__ssvfiscanf_r+0x1b8>
 8003d1c:	220a      	movs	r2, #10
 8003d1e:	e7dd      	b.n	8003cdc <__ssvfiscanf_r+0x1d8>
 8003d20:	2300      	movs	r3, #0
 8003d22:	9342      	str	r3, [sp, #264]	; 0x108
 8003d24:	2303      	movs	r3, #3
 8003d26:	e7de      	b.n	8003ce6 <__ssvfiscanf_r+0x1e2>
 8003d28:	2308      	movs	r3, #8
 8003d2a:	9342      	str	r3, [sp, #264]	; 0x108
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	e7da      	b.n	8003ce6 <__ssvfiscanf_r+0x1e2>
 8003d30:	4629      	mov	r1, r5
 8003d32:	4640      	mov	r0, r8
 8003d34:	f000 fb40 	bl	80043b8 <__sccl>
 8003d38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d40:	9341      	str	r3, [sp, #260]	; 0x104
 8003d42:	2301      	movs	r3, #1
 8003d44:	e7cf      	b.n	8003ce6 <__ssvfiscanf_r+0x1e2>
 8003d46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4c:	9341      	str	r3, [sp, #260]	; 0x104
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e7c9      	b.n	8003ce6 <__ssvfiscanf_r+0x1e2>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e7c7      	b.n	8003ce6 <__ssvfiscanf_r+0x1e2>
 8003d56:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003d58:	06c3      	lsls	r3, r0, #27
 8003d5a:	f53f aefc 	bmi.w	8003b56 <__ssvfiscanf_r+0x52>
 8003d5e:	9b00      	ldr	r3, [sp, #0]
 8003d60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d62:	1d19      	adds	r1, r3, #4
 8003d64:	9100      	str	r1, [sp, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	07c0      	lsls	r0, r0, #31
 8003d6a:	bf4c      	ite	mi
 8003d6c:	801a      	strhmi	r2, [r3, #0]
 8003d6e:	601a      	strpl	r2, [r3, #0]
 8003d70:	e6f1      	b.n	8003b56 <__ssvfiscanf_r+0x52>
 8003d72:	4621      	mov	r1, r4
 8003d74:	4630      	mov	r0, r6
 8003d76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d78:	4798      	blx	r3
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d0b7      	beq.n	8003cee <__ssvfiscanf_r+0x1ea>
 8003d7e:	e79d      	b.n	8003cbc <__ssvfiscanf_r+0x1b8>
 8003d80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d82:	3201      	adds	r2, #1
 8003d84:	9245      	str	r2, [sp, #276]	; 0x114
 8003d86:	6862      	ldr	r2, [r4, #4]
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	6062      	str	r2, [r4, #4]
 8003d8e:	dd02      	ble.n	8003d96 <__ssvfiscanf_r+0x292>
 8003d90:	3301      	adds	r3, #1
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	e7ae      	b.n	8003cf4 <__ssvfiscanf_r+0x1f0>
 8003d96:	4621      	mov	r1, r4
 8003d98:	4630      	mov	r0, r6
 8003d9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d9c:	4798      	blx	r3
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d0a8      	beq.n	8003cf4 <__ssvfiscanf_r+0x1f0>
 8003da2:	e78b      	b.n	8003cbc <__ssvfiscanf_r+0x1b8>
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	dc06      	bgt.n	8003db6 <__ssvfiscanf_r+0x2b2>
 8003da8:	466b      	mov	r3, sp
 8003daa:	4622      	mov	r2, r4
 8003dac:	4630      	mov	r0, r6
 8003dae:	a941      	add	r1, sp, #260	; 0x104
 8003db0:	f000 fa10 	bl	80041d4 <_scanf_i>
 8003db4:	e7ac      	b.n	8003d10 <__ssvfiscanf_r+0x20c>
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <__ssvfiscanf_r+0x2f0>)
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f43f aecc 	beq.w	8003b56 <__ssvfiscanf_r+0x52>
 8003dbe:	466b      	mov	r3, sp
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	a941      	add	r1, sp, #260	; 0x104
 8003dc6:	f3af 8000 	nop.w
 8003dca:	e7a1      	b.n	8003d10 <__ssvfiscanf_r+0x20c>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003dd2:	bf18      	it	ne
 8003dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8003dd8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003de2:	e7f9      	b.n	8003dd8 <__ssvfiscanf_r+0x2d4>
 8003de4:	08003a51 	.word	0x08003a51
 8003de8:	08003acb 	.word	0x08003acb
 8003dec:	08004b5f 	.word	0x08004b5f
 8003df0:	08004b16 	.word	0x08004b16
 8003df4:	00000000 	.word	0x00000000

08003df8 <_printf_common>:
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	4699      	mov	r9, r3
 8003e00:	688a      	ldr	r2, [r1, #8]
 8003e02:	690b      	ldr	r3, [r1, #16]
 8003e04:	4607      	mov	r7, r0
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bfb8      	it	lt
 8003e0a:	4613      	movlt	r3, r2
 8003e0c:	6033      	str	r3, [r6, #0]
 8003e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e12:	460c      	mov	r4, r1
 8003e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e18:	b10a      	cbz	r2, 8003e1e <_printf_common+0x26>
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	0699      	lsls	r1, r3, #26
 8003e22:	bf42      	ittt	mi
 8003e24:	6833      	ldrmi	r3, [r6, #0]
 8003e26:	3302      	addmi	r3, #2
 8003e28:	6033      	strmi	r3, [r6, #0]
 8003e2a:	6825      	ldr	r5, [r4, #0]
 8003e2c:	f015 0506 	ands.w	r5, r5, #6
 8003e30:	d106      	bne.n	8003e40 <_printf_common+0x48>
 8003e32:	f104 0a19 	add.w	sl, r4, #25
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	6832      	ldr	r2, [r6, #0]
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	dc28      	bgt.n	8003e92 <_printf_common+0x9a>
 8003e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e44:	1e13      	subs	r3, r2, #0
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	0692      	lsls	r2, r2, #26
 8003e4e:	d42d      	bmi.n	8003eac <_printf_common+0xb4>
 8003e50:	4649      	mov	r1, r9
 8003e52:	4638      	mov	r0, r7
 8003e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e58:	47c0      	blx	r8
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d020      	beq.n	8003ea0 <_printf_common+0xa8>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	68e5      	ldr	r5, [r4, #12]
 8003e62:	f003 0306 	and.w	r3, r3, #6
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	bf18      	it	ne
 8003e6a:	2500      	movne	r5, #0
 8003e6c:	6832      	ldr	r2, [r6, #0]
 8003e6e:	f04f 0600 	mov.w	r6, #0
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	bf08      	it	eq
 8003e76:	1aad      	subeq	r5, r5, r2
 8003e78:	6922      	ldr	r2, [r4, #16]
 8003e7a:	bf08      	it	eq
 8003e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bfc4      	itt	gt
 8003e84:	1a9b      	subgt	r3, r3, r2
 8003e86:	18ed      	addgt	r5, r5, r3
 8003e88:	341a      	adds	r4, #26
 8003e8a:	42b5      	cmp	r5, r6
 8003e8c:	d11a      	bne.n	8003ec4 <_printf_common+0xcc>
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e008      	b.n	8003ea4 <_printf_common+0xac>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4652      	mov	r2, sl
 8003e96:	4649      	mov	r1, r9
 8003e98:	4638      	mov	r0, r7
 8003e9a:	47c0      	blx	r8
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d103      	bne.n	8003ea8 <_printf_common+0xb0>
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	e7c4      	b.n	8003e36 <_printf_common+0x3e>
 8003eac:	2030      	movs	r0, #48	; 0x30
 8003eae:	18e1      	adds	r1, r4, r3
 8003eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eba:	4422      	add	r2, r4
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ec2:	e7c5      	b.n	8003e50 <_printf_common+0x58>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	47c0      	blx	r8
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0e6      	beq.n	8003ea0 <_printf_common+0xa8>
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7d9      	b.n	8003e8a <_printf_common+0x92>
	...

08003ed8 <_printf_i>:
 8003ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	7e27      	ldrb	r7, [r4, #24]
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	2f78      	cmp	r7, #120	; 0x78
 8003ee4:	4680      	mov	r8, r0
 8003ee6:	469a      	mov	sl, r3
 8003ee8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eee:	d807      	bhi.n	8003f00 <_printf_i+0x28>
 8003ef0:	2f62      	cmp	r7, #98	; 0x62
 8003ef2:	d80a      	bhi.n	8003f0a <_printf_i+0x32>
 8003ef4:	2f00      	cmp	r7, #0
 8003ef6:	f000 80d9 	beq.w	80040ac <_printf_i+0x1d4>
 8003efa:	2f58      	cmp	r7, #88	; 0x58
 8003efc:	f000 80a4 	beq.w	8004048 <_printf_i+0x170>
 8003f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f08:	e03a      	b.n	8003f80 <_printf_i+0xa8>
 8003f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f0e:	2b15      	cmp	r3, #21
 8003f10:	d8f6      	bhi.n	8003f00 <_printf_i+0x28>
 8003f12:	a001      	add	r0, pc, #4	; (adr r0, 8003f18 <_printf_i+0x40>)
 8003f14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f18:	08003f71 	.word	0x08003f71
 8003f1c:	08003f85 	.word	0x08003f85
 8003f20:	08003f01 	.word	0x08003f01
 8003f24:	08003f01 	.word	0x08003f01
 8003f28:	08003f01 	.word	0x08003f01
 8003f2c:	08003f01 	.word	0x08003f01
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	08003f01 	.word	0x08003f01
 8003f38:	08003f01 	.word	0x08003f01
 8003f3c:	08003f01 	.word	0x08003f01
 8003f40:	08003f01 	.word	0x08003f01
 8003f44:	08004093 	.word	0x08004093
 8003f48:	08003fb5 	.word	0x08003fb5
 8003f4c:	08004075 	.word	0x08004075
 8003f50:	08003f01 	.word	0x08003f01
 8003f54:	08003f01 	.word	0x08003f01
 8003f58:	080040b5 	.word	0x080040b5
 8003f5c:	08003f01 	.word	0x08003f01
 8003f60:	08003fb5 	.word	0x08003fb5
 8003f64:	08003f01 	.word	0x08003f01
 8003f68:	08003f01 	.word	0x08003f01
 8003f6c:	0800407d 	.word	0x0800407d
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	600a      	str	r2, [r1, #0]
 8003f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0a4      	b.n	80040ce <_printf_i+0x1f6>
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	6808      	ldr	r0, [r1, #0]
 8003f88:	062e      	lsls	r6, r5, #24
 8003f8a:	f100 0304 	add.w	r3, r0, #4
 8003f8e:	d50a      	bpl.n	8003fa6 <_printf_i+0xce>
 8003f90:	6805      	ldr	r5, [r0, #0]
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	da03      	bge.n	8003fa0 <_printf_i+0xc8>
 8003f98:	232d      	movs	r3, #45	; 0x2d
 8003f9a:	426d      	negs	r5, r5
 8003f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa0:	230a      	movs	r3, #10
 8003fa2:	485e      	ldr	r0, [pc, #376]	; (800411c <_printf_i+0x244>)
 8003fa4:	e019      	b.n	8003fda <_printf_i+0x102>
 8003fa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003faa:	6805      	ldr	r5, [r0, #0]
 8003fac:	600b      	str	r3, [r1, #0]
 8003fae:	bf18      	it	ne
 8003fb0:	b22d      	sxthne	r5, r5
 8003fb2:	e7ef      	b.n	8003f94 <_printf_i+0xbc>
 8003fb4:	680b      	ldr	r3, [r1, #0]
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	1d18      	adds	r0, r3, #4
 8003fba:	6008      	str	r0, [r1, #0]
 8003fbc:	0628      	lsls	r0, r5, #24
 8003fbe:	d501      	bpl.n	8003fc4 <_printf_i+0xec>
 8003fc0:	681d      	ldr	r5, [r3, #0]
 8003fc2:	e002      	b.n	8003fca <_printf_i+0xf2>
 8003fc4:	0669      	lsls	r1, r5, #25
 8003fc6:	d5fb      	bpl.n	8003fc0 <_printf_i+0xe8>
 8003fc8:	881d      	ldrh	r5, [r3, #0]
 8003fca:	2f6f      	cmp	r7, #111	; 0x6f
 8003fcc:	bf0c      	ite	eq
 8003fce:	2308      	moveq	r3, #8
 8003fd0:	230a      	movne	r3, #10
 8003fd2:	4852      	ldr	r0, [pc, #328]	; (800411c <_printf_i+0x244>)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fda:	6866      	ldr	r6, [r4, #4]
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	bfa8      	it	ge
 8003fe0:	6821      	ldrge	r1, [r4, #0]
 8003fe2:	60a6      	str	r6, [r4, #8]
 8003fe4:	bfa4      	itt	ge
 8003fe6:	f021 0104 	bicge.w	r1, r1, #4
 8003fea:	6021      	strge	r1, [r4, #0]
 8003fec:	b90d      	cbnz	r5, 8003ff2 <_printf_i+0x11a>
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d04d      	beq.n	800408e <_printf_i+0x1b6>
 8003ff2:	4616      	mov	r6, r2
 8003ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffc:	5dc7      	ldrb	r7, [r0, r7]
 8003ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004002:	462f      	mov	r7, r5
 8004004:	42bb      	cmp	r3, r7
 8004006:	460d      	mov	r5, r1
 8004008:	d9f4      	bls.n	8003ff4 <_printf_i+0x11c>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x14e>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07df      	lsls	r7, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x14e>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	4299      	cmp	r1, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	; 0x30
 800401e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004026:	1b92      	subs	r2, r2, r6
 8004028:	6122      	str	r2, [r4, #16]
 800402a:	464b      	mov	r3, r9
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	aa03      	add	r2, sp, #12
 8004036:	f7ff fedf 	bl	8003df8 <_printf_common>
 800403a:	3001      	adds	r0, #1
 800403c:	d14c      	bne.n	80040d8 <_printf_i+0x200>
 800403e:	f04f 30ff 	mov.w	r0, #4294967295
 8004042:	b004      	add	sp, #16
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	4834      	ldr	r0, [pc, #208]	; (800411c <_printf_i+0x244>)
 800404a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800404e:	680e      	ldr	r6, [r1, #0]
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	f856 5b04 	ldr.w	r5, [r6], #4
 8004056:	061f      	lsls	r7, r3, #24
 8004058:	600e      	str	r6, [r1, #0]
 800405a:	d514      	bpl.n	8004086 <_printf_i+0x1ae>
 800405c:	07d9      	lsls	r1, r3, #31
 800405e:	bf44      	itt	mi
 8004060:	f043 0320 	orrmi.w	r3, r3, #32
 8004064:	6023      	strmi	r3, [r4, #0]
 8004066:	b91d      	cbnz	r5, 8004070 <_printf_i+0x198>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	2310      	movs	r3, #16
 8004072:	e7af      	b.n	8003fd4 <_printf_i+0xfc>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	f043 0320 	orr.w	r3, r3, #32
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	2378      	movs	r3, #120	; 0x78
 800407e:	4828      	ldr	r0, [pc, #160]	; (8004120 <_printf_i+0x248>)
 8004080:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004084:	e7e3      	b.n	800404e <_printf_i+0x176>
 8004086:	065e      	lsls	r6, r3, #25
 8004088:	bf48      	it	mi
 800408a:	b2ad      	uxthmi	r5, r5
 800408c:	e7e6      	b.n	800405c <_printf_i+0x184>
 800408e:	4616      	mov	r6, r2
 8004090:	e7bb      	b.n	800400a <_printf_i+0x132>
 8004092:	680b      	ldr	r3, [r1, #0]
 8004094:	6826      	ldr	r6, [r4, #0]
 8004096:	1d1d      	adds	r5, r3, #4
 8004098:	6960      	ldr	r0, [r4, #20]
 800409a:	600d      	str	r5, [r1, #0]
 800409c:	0635      	lsls	r5, r6, #24
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	d501      	bpl.n	80040a6 <_printf_i+0x1ce>
 80040a2:	6018      	str	r0, [r3, #0]
 80040a4:	e002      	b.n	80040ac <_printf_i+0x1d4>
 80040a6:	0671      	lsls	r1, r6, #25
 80040a8:	d5fb      	bpl.n	80040a2 <_printf_i+0x1ca>
 80040aa:	8018      	strh	r0, [r3, #0]
 80040ac:	2300      	movs	r3, #0
 80040ae:	4616      	mov	r6, r2
 80040b0:	6123      	str	r3, [r4, #16]
 80040b2:	e7ba      	b.n	800402a <_printf_i+0x152>
 80040b4:	680b      	ldr	r3, [r1, #0]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	600a      	str	r2, [r1, #0]
 80040ba:	681e      	ldr	r6, [r3, #0]
 80040bc:	2100      	movs	r1, #0
 80040be:	4630      	mov	r0, r6
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	f000 faf3 	bl	80046ac <memchr>
 80040c6:	b108      	cbz	r0, 80040cc <_printf_i+0x1f4>
 80040c8:	1b80      	subs	r0, r0, r6
 80040ca:	6060      	str	r0, [r4, #4]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	6123      	str	r3, [r4, #16]
 80040d0:	2300      	movs	r3, #0
 80040d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d6:	e7a8      	b.n	800402a <_printf_i+0x152>
 80040d8:	4632      	mov	r2, r6
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	47d0      	blx	sl
 80040e2:	3001      	adds	r0, #1
 80040e4:	d0ab      	beq.n	800403e <_printf_i+0x166>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	079b      	lsls	r3, r3, #30
 80040ea:	d413      	bmi.n	8004114 <_printf_i+0x23c>
 80040ec:	68e0      	ldr	r0, [r4, #12]
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	4298      	cmp	r0, r3
 80040f2:	bfb8      	it	lt
 80040f4:	4618      	movlt	r0, r3
 80040f6:	e7a4      	b.n	8004042 <_printf_i+0x16a>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4632      	mov	r2, r6
 80040fc:	4649      	mov	r1, r9
 80040fe:	4640      	mov	r0, r8
 8004100:	47d0      	blx	sl
 8004102:	3001      	adds	r0, #1
 8004104:	d09b      	beq.n	800403e <_printf_i+0x166>
 8004106:	3501      	adds	r5, #1
 8004108:	68e3      	ldr	r3, [r4, #12]
 800410a:	9903      	ldr	r1, [sp, #12]
 800410c:	1a5b      	subs	r3, r3, r1
 800410e:	42ab      	cmp	r3, r5
 8004110:	dcf2      	bgt.n	80040f8 <_printf_i+0x220>
 8004112:	e7eb      	b.n	80040ec <_printf_i+0x214>
 8004114:	2500      	movs	r5, #0
 8004116:	f104 0619 	add.w	r6, r4, #25
 800411a:	e7f5      	b.n	8004108 <_printf_i+0x230>
 800411c:	08004b21 	.word	0x08004b21
 8004120:	08004b32 	.word	0x08004b32

08004124 <_scanf_chars>:
 8004124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004128:	4615      	mov	r5, r2
 800412a:	688a      	ldr	r2, [r1, #8]
 800412c:	4680      	mov	r8, r0
 800412e:	460c      	mov	r4, r1
 8004130:	b932      	cbnz	r2, 8004140 <_scanf_chars+0x1c>
 8004132:	698a      	ldr	r2, [r1, #24]
 8004134:	2a00      	cmp	r2, #0
 8004136:	bf0c      	ite	eq
 8004138:	2201      	moveq	r2, #1
 800413a:	f04f 32ff 	movne.w	r2, #4294967295
 800413e:	608a      	str	r2, [r1, #8]
 8004140:	2700      	movs	r7, #0
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80041d0 <_scanf_chars+0xac>
 8004148:	06d1      	lsls	r1, r2, #27
 800414a:	bf5f      	itttt	pl
 800414c:	681a      	ldrpl	r2, [r3, #0]
 800414e:	1d11      	addpl	r1, r2, #4
 8004150:	6019      	strpl	r1, [r3, #0]
 8004152:	6816      	ldrpl	r6, [r2, #0]
 8004154:	69a0      	ldr	r0, [r4, #24]
 8004156:	b188      	cbz	r0, 800417c <_scanf_chars+0x58>
 8004158:	2801      	cmp	r0, #1
 800415a:	d107      	bne.n	800416c <_scanf_chars+0x48>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	6963      	ldr	r3, [r4, #20]
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	b953      	cbnz	r3, 800417c <_scanf_chars+0x58>
 8004166:	bb27      	cbnz	r7, 80041b2 <_scanf_chars+0x8e>
 8004168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416c:	2802      	cmp	r0, #2
 800416e:	d120      	bne.n	80041b2 <_scanf_chars+0x8e>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	d41a      	bmi.n	80041b2 <_scanf_chars+0x8e>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	3701      	adds	r7, #1
 8004180:	06da      	lsls	r2, r3, #27
 8004182:	bf5e      	ittt	pl
 8004184:	682b      	ldrpl	r3, [r5, #0]
 8004186:	781b      	ldrbpl	r3, [r3, #0]
 8004188:	f806 3b01 	strbpl.w	r3, [r6], #1
 800418c:	682a      	ldr	r2, [r5, #0]
 800418e:	686b      	ldr	r3, [r5, #4]
 8004190:	3201      	adds	r2, #1
 8004192:	602a      	str	r2, [r5, #0]
 8004194:	68a2      	ldr	r2, [r4, #8]
 8004196:	3b01      	subs	r3, #1
 8004198:	3a01      	subs	r2, #1
 800419a:	606b      	str	r3, [r5, #4]
 800419c:	60a2      	str	r2, [r4, #8]
 800419e:	b142      	cbz	r2, 80041b2 <_scanf_chars+0x8e>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	dcd7      	bgt.n	8004154 <_scanf_chars+0x30>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4640      	mov	r0, r8
 80041a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041ac:	4798      	blx	r3
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0d0      	beq.n	8004154 <_scanf_chars+0x30>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	f013 0310 	ands.w	r3, r3, #16
 80041b8:	d105      	bne.n	80041c6 <_scanf_chars+0xa2>
 80041ba:	68e2      	ldr	r2, [r4, #12]
 80041bc:	3201      	adds	r2, #1
 80041be:	60e2      	str	r2, [r4, #12]
 80041c0:	69a2      	ldr	r2, [r4, #24]
 80041c2:	b102      	cbz	r2, 80041c6 <_scanf_chars+0xa2>
 80041c4:	7033      	strb	r3, [r6, #0]
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	2000      	movs	r0, #0
 80041ca:	441f      	add	r7, r3
 80041cc:	6127      	str	r7, [r4, #16]
 80041ce:	e7cb      	b.n	8004168 <_scanf_chars+0x44>
 80041d0:	08004b5f 	.word	0x08004b5f

080041d4 <_scanf_i>:
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	460c      	mov	r4, r1
 80041da:	4698      	mov	r8, r3
 80041dc:	4b72      	ldr	r3, [pc, #456]	; (80043a8 <_scanf_i+0x1d4>)
 80041de:	b087      	sub	sp, #28
 80041e0:	4682      	mov	sl, r0
 80041e2:	4616      	mov	r6, r2
 80041e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041ee:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <_scanf_i+0x1d8>)
 80041f0:	69a1      	ldr	r1, [r4, #24]
 80041f2:	4a6f      	ldr	r2, [pc, #444]	; (80043b0 <_scanf_i+0x1dc>)
 80041f4:	4627      	mov	r7, r4
 80041f6:	2903      	cmp	r1, #3
 80041f8:	bf18      	it	ne
 80041fa:	461a      	movne	r2, r3
 80041fc:	68a3      	ldr	r3, [r4, #8]
 80041fe:	9201      	str	r2, [sp, #4]
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004206:	bf81      	itttt	hi
 8004208:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800420c:	eb03 0905 	addhi.w	r9, r3, r5
 8004210:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004214:	60a3      	strhi	r3, [r4, #8]
 8004216:	f857 3b1c 	ldr.w	r3, [r7], #28
 800421a:	bf98      	it	ls
 800421c:	f04f 0900 	movls.w	r9, #0
 8004220:	463d      	mov	r5, r7
 8004222:	f04f 0b00 	mov.w	fp, #0
 8004226:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	6831      	ldr	r1, [r6, #0]
 800422e:	ab03      	add	r3, sp, #12
 8004230:	2202      	movs	r2, #2
 8004232:	7809      	ldrb	r1, [r1, #0]
 8004234:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004238:	f000 fa38 	bl	80046ac <memchr>
 800423c:	b328      	cbz	r0, 800428a <_scanf_i+0xb6>
 800423e:	f1bb 0f01 	cmp.w	fp, #1
 8004242:	d159      	bne.n	80042f8 <_scanf_i+0x124>
 8004244:	6862      	ldr	r2, [r4, #4]
 8004246:	b92a      	cbnz	r2, 8004254 <_scanf_i+0x80>
 8004248:	2308      	movs	r3, #8
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	6063      	str	r3, [r4, #4]
 800424e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004252:	6022      	str	r2, [r4, #0]
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800425a:	6022      	str	r2, [r4, #0]
 800425c:	68a2      	ldr	r2, [r4, #8]
 800425e:	1e51      	subs	r1, r2, #1
 8004260:	60a1      	str	r1, [r4, #8]
 8004262:	b192      	cbz	r2, 800428a <_scanf_i+0xb6>
 8004264:	6832      	ldr	r2, [r6, #0]
 8004266:	1c51      	adds	r1, r2, #1
 8004268:	6031      	str	r1, [r6, #0]
 800426a:	7812      	ldrb	r2, [r2, #0]
 800426c:	f805 2b01 	strb.w	r2, [r5], #1
 8004270:	6872      	ldr	r2, [r6, #4]
 8004272:	3a01      	subs	r2, #1
 8004274:	2a00      	cmp	r2, #0
 8004276:	6072      	str	r2, [r6, #4]
 8004278:	dc07      	bgt.n	800428a <_scanf_i+0xb6>
 800427a:	4631      	mov	r1, r6
 800427c:	4650      	mov	r0, sl
 800427e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004282:	4790      	blx	r2
 8004284:	2800      	cmp	r0, #0
 8004286:	f040 8085 	bne.w	8004394 <_scanf_i+0x1c0>
 800428a:	f10b 0b01 	add.w	fp, fp, #1
 800428e:	f1bb 0f03 	cmp.w	fp, #3
 8004292:	d1cb      	bne.n	800422c <_scanf_i+0x58>
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	b90b      	cbnz	r3, 800429c <_scanf_i+0xc8>
 8004298:	230a      	movs	r3, #10
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	4945      	ldr	r1, [pc, #276]	; (80043b4 <_scanf_i+0x1e0>)
 80042a0:	6960      	ldr	r0, [r4, #20]
 80042a2:	1ac9      	subs	r1, r1, r3
 80042a4:	f000 f888 	bl	80043b8 <__sccl>
 80042a8:	f04f 0b00 	mov.w	fp, #0
 80042ac:	68a3      	ldr	r3, [r4, #8]
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03d      	beq.n	8004330 <_scanf_i+0x15c>
 80042b4:	6831      	ldr	r1, [r6, #0]
 80042b6:	6960      	ldr	r0, [r4, #20]
 80042b8:	f891 c000 	ldrb.w	ip, [r1]
 80042bc:	f810 000c 	ldrb.w	r0, [r0, ip]
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d035      	beq.n	8004330 <_scanf_i+0x15c>
 80042c4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80042c8:	d124      	bne.n	8004314 <_scanf_i+0x140>
 80042ca:	0510      	lsls	r0, r2, #20
 80042cc:	d522      	bpl.n	8004314 <_scanf_i+0x140>
 80042ce:	f10b 0b01 	add.w	fp, fp, #1
 80042d2:	f1b9 0f00 	cmp.w	r9, #0
 80042d6:	d003      	beq.n	80042e0 <_scanf_i+0x10c>
 80042d8:	3301      	adds	r3, #1
 80042da:	f109 39ff 	add.w	r9, r9, #4294967295
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	6873      	ldr	r3, [r6, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	6073      	str	r3, [r6, #4]
 80042e8:	dd1b      	ble.n	8004322 <_scanf_i+0x14e>
 80042ea:	6833      	ldr	r3, [r6, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	68a3      	ldr	r3, [r4, #8]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60a3      	str	r3, [r4, #8]
 80042f6:	e7d9      	b.n	80042ac <_scanf_i+0xd8>
 80042f8:	f1bb 0f02 	cmp.w	fp, #2
 80042fc:	d1ae      	bne.n	800425c <_scanf_i+0x88>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004304:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004308:	d1bf      	bne.n	800428a <_scanf_i+0xb6>
 800430a:	2310      	movs	r3, #16
 800430c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	e7a2      	b.n	800425a <_scanf_i+0x86>
 8004314:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004318:	6022      	str	r2, [r4, #0]
 800431a:	780b      	ldrb	r3, [r1, #0]
 800431c:	f805 3b01 	strb.w	r3, [r5], #1
 8004320:	e7de      	b.n	80042e0 <_scanf_i+0x10c>
 8004322:	4631      	mov	r1, r6
 8004324:	4650      	mov	r0, sl
 8004326:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800432a:	4798      	blx	r3
 800432c:	2800      	cmp	r0, #0
 800432e:	d0df      	beq.n	80042f0 <_scanf_i+0x11c>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	05d9      	lsls	r1, r3, #23
 8004334:	d50d      	bpl.n	8004352 <_scanf_i+0x17e>
 8004336:	42bd      	cmp	r5, r7
 8004338:	d909      	bls.n	800434e <_scanf_i+0x17a>
 800433a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800433e:	4632      	mov	r2, r6
 8004340:	4650      	mov	r0, sl
 8004342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004346:	f105 39ff 	add.w	r9, r5, #4294967295
 800434a:	4798      	blx	r3
 800434c:	464d      	mov	r5, r9
 800434e:	42bd      	cmp	r5, r7
 8004350:	d028      	beq.n	80043a4 <_scanf_i+0x1d0>
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	f012 0210 	ands.w	r2, r2, #16
 8004358:	d113      	bne.n	8004382 <_scanf_i+0x1ae>
 800435a:	702a      	strb	r2, [r5, #0]
 800435c:	4639      	mov	r1, r7
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	4650      	mov	r0, sl
 8004362:	9e01      	ldr	r6, [sp, #4]
 8004364:	47b0      	blx	r6
 8004366:	f8d8 3000 	ldr.w	r3, [r8]
 800436a:	6821      	ldr	r1, [r4, #0]
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	f8c8 2000 	str.w	r2, [r8]
 8004372:	f011 0f20 	tst.w	r1, #32
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	d00f      	beq.n	800439a <_scanf_i+0x1c6>
 800437a:	6018      	str	r0, [r3, #0]
 800437c:	68e3      	ldr	r3, [r4, #12]
 800437e:	3301      	adds	r3, #1
 8004380:	60e3      	str	r3, [r4, #12]
 8004382:	2000      	movs	r0, #0
 8004384:	1bed      	subs	r5, r5, r7
 8004386:	44ab      	add	fp, r5
 8004388:	6925      	ldr	r5, [r4, #16]
 800438a:	445d      	add	r5, fp
 800438c:	6125      	str	r5, [r4, #16]
 800438e:	b007      	add	sp, #28
 8004390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004394:	f04f 0b00 	mov.w	fp, #0
 8004398:	e7ca      	b.n	8004330 <_scanf_i+0x15c>
 800439a:	07ca      	lsls	r2, r1, #31
 800439c:	bf4c      	ite	mi
 800439e:	8018      	strhmi	r0, [r3, #0]
 80043a0:	6018      	strpl	r0, [r3, #0]
 80043a2:	e7eb      	b.n	800437c <_scanf_i+0x1a8>
 80043a4:	2001      	movs	r0, #1
 80043a6:	e7f2      	b.n	800438e <_scanf_i+0x1ba>
 80043a8:	08004aec 	.word	0x08004aec
 80043ac:	08004635 	.word	0x08004635
 80043b0:	08004539 	.word	0x08004539
 80043b4:	08004b5c 	.word	0x08004b5c

080043b8 <__sccl>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	780b      	ldrb	r3, [r1, #0]
 80043bc:	4604      	mov	r4, r0
 80043be:	2b5e      	cmp	r3, #94	; 0x5e
 80043c0:	bf13      	iteet	ne
 80043c2:	2200      	movne	r2, #0
 80043c4:	2201      	moveq	r2, #1
 80043c6:	784b      	ldrbeq	r3, [r1, #1]
 80043c8:	1c48      	addne	r0, r1, #1
 80043ca:	bf08      	it	eq
 80043cc:	1c88      	addeq	r0, r1, #2
 80043ce:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80043d2:	1e61      	subs	r1, r4, #1
 80043d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80043d8:	42a9      	cmp	r1, r5
 80043da:	d1fb      	bne.n	80043d4 <__sccl+0x1c>
 80043dc:	b90b      	cbnz	r3, 80043e2 <__sccl+0x2a>
 80043de:	3801      	subs	r0, #1
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	f082 0101 	eor.w	r1, r2, #1
 80043e6:	54e1      	strb	r1, [r4, r3]
 80043e8:	1c42      	adds	r2, r0, #1
 80043ea:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80043ee:	4610      	mov	r0, r2
 80043f0:	2d2d      	cmp	r5, #45	; 0x2d
 80043f2:	f102 36ff 	add.w	r6, r2, #4294967295
 80043f6:	d006      	beq.n	8004406 <__sccl+0x4e>
 80043f8:	2d5d      	cmp	r5, #93	; 0x5d
 80043fa:	d0f1      	beq.n	80043e0 <__sccl+0x28>
 80043fc:	b90d      	cbnz	r5, 8004402 <__sccl+0x4a>
 80043fe:	4630      	mov	r0, r6
 8004400:	e7ee      	b.n	80043e0 <__sccl+0x28>
 8004402:	462b      	mov	r3, r5
 8004404:	e7ef      	b.n	80043e6 <__sccl+0x2e>
 8004406:	7816      	ldrb	r6, [r2, #0]
 8004408:	2e5d      	cmp	r6, #93	; 0x5d
 800440a:	d0fa      	beq.n	8004402 <__sccl+0x4a>
 800440c:	42b3      	cmp	r3, r6
 800440e:	dcf8      	bgt.n	8004402 <__sccl+0x4a>
 8004410:	4618      	mov	r0, r3
 8004412:	3001      	adds	r0, #1
 8004414:	4286      	cmp	r6, r0
 8004416:	5421      	strb	r1, [r4, r0]
 8004418:	dcfb      	bgt.n	8004412 <__sccl+0x5a>
 800441a:	43d8      	mvns	r0, r3
 800441c:	4430      	add	r0, r6
 800441e:	42b3      	cmp	r3, r6
 8004420:	bfa8      	it	ge
 8004422:	2000      	movge	r0, #0
 8004424:	1c5d      	adds	r5, r3, #1
 8004426:	182b      	adds	r3, r5, r0
 8004428:	3202      	adds	r2, #2
 800442a:	e7de      	b.n	80043ea <__sccl+0x32>

0800442c <_strtol_l.isra.0>:
 800442c:	2b01      	cmp	r3, #1
 800442e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004432:	4686      	mov	lr, r0
 8004434:	d001      	beq.n	800443a <_strtol_l.isra.0+0xe>
 8004436:	2b24      	cmp	r3, #36	; 0x24
 8004438:	d906      	bls.n	8004448 <_strtol_l.isra.0+0x1c>
 800443a:	f7ff f92f 	bl	800369c <__errno>
 800443e:	2316      	movs	r3, #22
 8004440:	6003      	str	r3, [r0, #0]
 8004442:	2000      	movs	r0, #0
 8004444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004448:	468c      	mov	ip, r1
 800444a:	4e3a      	ldr	r6, [pc, #232]	; (8004534 <_strtol_l.isra.0+0x108>)
 800444c:	4660      	mov	r0, ip
 800444e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004452:	5da5      	ldrb	r5, [r4, r6]
 8004454:	f015 0508 	ands.w	r5, r5, #8
 8004458:	d1f8      	bne.n	800444c <_strtol_l.isra.0+0x20>
 800445a:	2c2d      	cmp	r4, #45	; 0x2d
 800445c:	d133      	bne.n	80044c6 <_strtol_l.isra.0+0x9a>
 800445e:	f04f 0801 	mov.w	r8, #1
 8004462:	f89c 4000 	ldrb.w	r4, [ip]
 8004466:	f100 0c02 	add.w	ip, r0, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d05d      	beq.n	800452a <_strtol_l.isra.0+0xfe>
 800446e:	2b10      	cmp	r3, #16
 8004470:	d10c      	bne.n	800448c <_strtol_l.isra.0+0x60>
 8004472:	2c30      	cmp	r4, #48	; 0x30
 8004474:	d10a      	bne.n	800448c <_strtol_l.isra.0+0x60>
 8004476:	f89c 0000 	ldrb.w	r0, [ip]
 800447a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800447e:	2858      	cmp	r0, #88	; 0x58
 8004480:	d14e      	bne.n	8004520 <_strtol_l.isra.0+0xf4>
 8004482:	2310      	movs	r3, #16
 8004484:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004488:	f10c 0c02 	add.w	ip, ip, #2
 800448c:	2500      	movs	r5, #0
 800448e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004492:	3f01      	subs	r7, #1
 8004494:	fbb7 f9f3 	udiv	r9, r7, r3
 8004498:	4628      	mov	r0, r5
 800449a:	fb03 7a19 	mls	sl, r3, r9, r7
 800449e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80044a2:	2e09      	cmp	r6, #9
 80044a4:	d818      	bhi.n	80044d8 <_strtol_l.isra.0+0xac>
 80044a6:	4634      	mov	r4, r6
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	dd24      	ble.n	80044f6 <_strtol_l.isra.0+0xca>
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	db1f      	blt.n	80044f0 <_strtol_l.isra.0+0xc4>
 80044b0:	4581      	cmp	r9, r0
 80044b2:	d31d      	bcc.n	80044f0 <_strtol_l.isra.0+0xc4>
 80044b4:	d101      	bne.n	80044ba <_strtol_l.isra.0+0x8e>
 80044b6:	45a2      	cmp	sl, r4
 80044b8:	db1a      	blt.n	80044f0 <_strtol_l.isra.0+0xc4>
 80044ba:	2501      	movs	r5, #1
 80044bc:	fb00 4003 	mla	r0, r0, r3, r4
 80044c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80044c4:	e7eb      	b.n	800449e <_strtol_l.isra.0+0x72>
 80044c6:	2c2b      	cmp	r4, #43	; 0x2b
 80044c8:	bf08      	it	eq
 80044ca:	f89c 4000 	ldrbeq.w	r4, [ip]
 80044ce:	46a8      	mov	r8, r5
 80044d0:	bf08      	it	eq
 80044d2:	f100 0c02 	addeq.w	ip, r0, #2
 80044d6:	e7c8      	b.n	800446a <_strtol_l.isra.0+0x3e>
 80044d8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80044dc:	2e19      	cmp	r6, #25
 80044de:	d801      	bhi.n	80044e4 <_strtol_l.isra.0+0xb8>
 80044e0:	3c37      	subs	r4, #55	; 0x37
 80044e2:	e7e1      	b.n	80044a8 <_strtol_l.isra.0+0x7c>
 80044e4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80044e8:	2e19      	cmp	r6, #25
 80044ea:	d804      	bhi.n	80044f6 <_strtol_l.isra.0+0xca>
 80044ec:	3c57      	subs	r4, #87	; 0x57
 80044ee:	e7db      	b.n	80044a8 <_strtol_l.isra.0+0x7c>
 80044f0:	f04f 35ff 	mov.w	r5, #4294967295
 80044f4:	e7e4      	b.n	80044c0 <_strtol_l.isra.0+0x94>
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	da08      	bge.n	800450c <_strtol_l.isra.0+0xe0>
 80044fa:	2322      	movs	r3, #34	; 0x22
 80044fc:	4638      	mov	r0, r7
 80044fe:	f8ce 3000 	str.w	r3, [lr]
 8004502:	2a00      	cmp	r2, #0
 8004504:	d09e      	beq.n	8004444 <_strtol_l.isra.0+0x18>
 8004506:	f10c 31ff 	add.w	r1, ip, #4294967295
 800450a:	e007      	b.n	800451c <_strtol_l.isra.0+0xf0>
 800450c:	f1b8 0f00 	cmp.w	r8, #0
 8004510:	d000      	beq.n	8004514 <_strtol_l.isra.0+0xe8>
 8004512:	4240      	negs	r0, r0
 8004514:	2a00      	cmp	r2, #0
 8004516:	d095      	beq.n	8004444 <_strtol_l.isra.0+0x18>
 8004518:	2d00      	cmp	r5, #0
 800451a:	d1f4      	bne.n	8004506 <_strtol_l.isra.0+0xda>
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	e791      	b.n	8004444 <_strtol_l.isra.0+0x18>
 8004520:	2430      	movs	r4, #48	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1b2      	bne.n	800448c <_strtol_l.isra.0+0x60>
 8004526:	2308      	movs	r3, #8
 8004528:	e7b0      	b.n	800448c <_strtol_l.isra.0+0x60>
 800452a:	2c30      	cmp	r4, #48	; 0x30
 800452c:	d0a3      	beq.n	8004476 <_strtol_l.isra.0+0x4a>
 800452e:	230a      	movs	r3, #10
 8004530:	e7ac      	b.n	800448c <_strtol_l.isra.0+0x60>
 8004532:	bf00      	nop
 8004534:	08004b5f 	.word	0x08004b5f

08004538 <_strtol_r>:
 8004538:	f7ff bf78 	b.w	800442c <_strtol_l.isra.0>

0800453c <_strtoul_l.isra.0>:
 800453c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004540:	468c      	mov	ip, r1
 8004542:	4686      	mov	lr, r0
 8004544:	4e3a      	ldr	r6, [pc, #232]	; (8004630 <_strtoul_l.isra.0+0xf4>)
 8004546:	4660      	mov	r0, ip
 8004548:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800454c:	5da5      	ldrb	r5, [r4, r6]
 800454e:	f015 0508 	ands.w	r5, r5, #8
 8004552:	d1f8      	bne.n	8004546 <_strtoul_l.isra.0+0xa>
 8004554:	2c2d      	cmp	r4, #45	; 0x2d
 8004556:	d134      	bne.n	80045c2 <_strtoul_l.isra.0+0x86>
 8004558:	f04f 0801 	mov.w	r8, #1
 800455c:	f89c 4000 	ldrb.w	r4, [ip]
 8004560:	f100 0c02 	add.w	ip, r0, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05e      	beq.n	8004626 <_strtoul_l.isra.0+0xea>
 8004568:	2b10      	cmp	r3, #16
 800456a:	d10c      	bne.n	8004586 <_strtoul_l.isra.0+0x4a>
 800456c:	2c30      	cmp	r4, #48	; 0x30
 800456e:	d10a      	bne.n	8004586 <_strtoul_l.isra.0+0x4a>
 8004570:	f89c 0000 	ldrb.w	r0, [ip]
 8004574:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004578:	2858      	cmp	r0, #88	; 0x58
 800457a:	d14f      	bne.n	800461c <_strtoul_l.isra.0+0xe0>
 800457c:	2310      	movs	r3, #16
 800457e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004582:	f10c 0c02 	add.w	ip, ip, #2
 8004586:	f04f 37ff 	mov.w	r7, #4294967295
 800458a:	fbb7 f7f3 	udiv	r7, r7, r3
 800458e:	2500      	movs	r5, #0
 8004590:	fb03 f907 	mul.w	r9, r3, r7
 8004594:	4628      	mov	r0, r5
 8004596:	ea6f 0909 	mvn.w	r9, r9
 800459a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800459e:	2e09      	cmp	r6, #9
 80045a0:	d818      	bhi.n	80045d4 <_strtoul_l.isra.0+0x98>
 80045a2:	4634      	mov	r4, r6
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	dd24      	ble.n	80045f2 <_strtoul_l.isra.0+0xb6>
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	db1f      	blt.n	80045ec <_strtoul_l.isra.0+0xb0>
 80045ac:	4287      	cmp	r7, r0
 80045ae:	d31d      	bcc.n	80045ec <_strtoul_l.isra.0+0xb0>
 80045b0:	d101      	bne.n	80045b6 <_strtoul_l.isra.0+0x7a>
 80045b2:	45a1      	cmp	r9, r4
 80045b4:	db1a      	blt.n	80045ec <_strtoul_l.isra.0+0xb0>
 80045b6:	2501      	movs	r5, #1
 80045b8:	fb00 4003 	mla	r0, r0, r3, r4
 80045bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80045c0:	e7eb      	b.n	800459a <_strtoul_l.isra.0+0x5e>
 80045c2:	2c2b      	cmp	r4, #43	; 0x2b
 80045c4:	bf08      	it	eq
 80045c6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80045ca:	46a8      	mov	r8, r5
 80045cc:	bf08      	it	eq
 80045ce:	f100 0c02 	addeq.w	ip, r0, #2
 80045d2:	e7c7      	b.n	8004564 <_strtoul_l.isra.0+0x28>
 80045d4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80045d8:	2e19      	cmp	r6, #25
 80045da:	d801      	bhi.n	80045e0 <_strtoul_l.isra.0+0xa4>
 80045dc:	3c37      	subs	r4, #55	; 0x37
 80045de:	e7e1      	b.n	80045a4 <_strtoul_l.isra.0+0x68>
 80045e0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80045e4:	2e19      	cmp	r6, #25
 80045e6:	d804      	bhi.n	80045f2 <_strtoul_l.isra.0+0xb6>
 80045e8:	3c57      	subs	r4, #87	; 0x57
 80045ea:	e7db      	b.n	80045a4 <_strtoul_l.isra.0+0x68>
 80045ec:	f04f 35ff 	mov.w	r5, #4294967295
 80045f0:	e7e4      	b.n	80045bc <_strtoul_l.isra.0+0x80>
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	da07      	bge.n	8004606 <_strtoul_l.isra.0+0xca>
 80045f6:	2322      	movs	r3, #34	; 0x22
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	f8ce 3000 	str.w	r3, [lr]
 8004600:	b942      	cbnz	r2, 8004614 <_strtoul_l.isra.0+0xd8>
 8004602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004606:	f1b8 0f00 	cmp.w	r8, #0
 800460a:	d000      	beq.n	800460e <_strtoul_l.isra.0+0xd2>
 800460c:	4240      	negs	r0, r0
 800460e:	2a00      	cmp	r2, #0
 8004610:	d0f7      	beq.n	8004602 <_strtoul_l.isra.0+0xc6>
 8004612:	b10d      	cbz	r5, 8004618 <_strtoul_l.isra.0+0xdc>
 8004614:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	e7f2      	b.n	8004602 <_strtoul_l.isra.0+0xc6>
 800461c:	2430      	movs	r4, #48	; 0x30
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1b1      	bne.n	8004586 <_strtoul_l.isra.0+0x4a>
 8004622:	2308      	movs	r3, #8
 8004624:	e7af      	b.n	8004586 <_strtoul_l.isra.0+0x4a>
 8004626:	2c30      	cmp	r4, #48	; 0x30
 8004628:	d0a2      	beq.n	8004570 <_strtoul_l.isra.0+0x34>
 800462a:	230a      	movs	r3, #10
 800462c:	e7ab      	b.n	8004586 <_strtoul_l.isra.0+0x4a>
 800462e:	bf00      	nop
 8004630:	08004b5f 	.word	0x08004b5f

08004634 <_strtoul_r>:
 8004634:	f7ff bf82 	b.w	800453c <_strtoul_l.isra.0>

08004638 <__submore>:
 8004638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463c:	460c      	mov	r4, r1
 800463e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004644:	4299      	cmp	r1, r3
 8004646:	d11b      	bne.n	8004680 <__submore+0x48>
 8004648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800464c:	f000 f8b0 	bl	80047b0 <_malloc_r>
 8004650:	b918      	cbnz	r0, 800465a <__submore+0x22>
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004660:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004664:	6360      	str	r0, [r4, #52]	; 0x34
 8004666:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800466a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800466e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004672:	7043      	strb	r3, [r0, #1]
 8004674:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004678:	7003      	strb	r3, [r0, #0]
 800467a:	6020      	str	r0, [r4, #0]
 800467c:	2000      	movs	r0, #0
 800467e:	e7ea      	b.n	8004656 <__submore+0x1e>
 8004680:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004682:	0077      	lsls	r7, r6, #1
 8004684:	463a      	mov	r2, r7
 8004686:	f000 f8ed 	bl	8004864 <_realloc_r>
 800468a:	4605      	mov	r5, r0
 800468c:	2800      	cmp	r0, #0
 800468e:	d0e0      	beq.n	8004652 <__submore+0x1a>
 8004690:	eb00 0806 	add.w	r8, r0, r6
 8004694:	4601      	mov	r1, r0
 8004696:	4632      	mov	r2, r6
 8004698:	4640      	mov	r0, r8
 800469a:	f000 f815 	bl	80046c8 <memcpy>
 800469e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80046a2:	f8c4 8000 	str.w	r8, [r4]
 80046a6:	e7e9      	b.n	800467c <__submore+0x44>

080046a8 <__retarget_lock_acquire_recursive>:
 80046a8:	4770      	bx	lr

080046aa <__retarget_lock_release_recursive>:
 80046aa:	4770      	bx	lr

080046ac <memchr>:
 80046ac:	4603      	mov	r3, r0
 80046ae:	b510      	push	{r4, lr}
 80046b0:	b2c9      	uxtb	r1, r1
 80046b2:	4402      	add	r2, r0
 80046b4:	4293      	cmp	r3, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	d101      	bne.n	80046be <memchr+0x12>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e003      	b.n	80046c6 <memchr+0x1a>
 80046be:	7804      	ldrb	r4, [r0, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	428c      	cmp	r4, r1
 80046c4:	d1f6      	bne.n	80046b4 <memchr+0x8>
 80046c6:	bd10      	pop	{r4, pc}

080046c8 <memcpy>:
 80046c8:	440a      	add	r2, r1
 80046ca:	4291      	cmp	r1, r2
 80046cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	4770      	bx	lr
 80046d4:	b510      	push	{r4, lr}
 80046d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046da:	4291      	cmp	r1, r2
 80046dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e0:	d1f9      	bne.n	80046d6 <memcpy+0xe>
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <memmove>:
 80046e4:	4288      	cmp	r0, r1
 80046e6:	b510      	push	{r4, lr}
 80046e8:	eb01 0402 	add.w	r4, r1, r2
 80046ec:	d902      	bls.n	80046f4 <memmove+0x10>
 80046ee:	4284      	cmp	r4, r0
 80046f0:	4623      	mov	r3, r4
 80046f2:	d807      	bhi.n	8004704 <memmove+0x20>
 80046f4:	1e43      	subs	r3, r0, #1
 80046f6:	42a1      	cmp	r1, r4
 80046f8:	d008      	beq.n	800470c <memmove+0x28>
 80046fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004702:	e7f8      	b.n	80046f6 <memmove+0x12>
 8004704:	4601      	mov	r1, r0
 8004706:	4402      	add	r2, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	d100      	bne.n	800470e <memmove+0x2a>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004716:	e7f7      	b.n	8004708 <memmove+0x24>

08004718 <_free_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4605      	mov	r5, r0
 800471c:	2900      	cmp	r1, #0
 800471e:	d043      	beq.n	80047a8 <_free_r+0x90>
 8004720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004724:	1f0c      	subs	r4, r1, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bfb8      	it	lt
 800472a:	18e4      	addlt	r4, r4, r3
 800472c:	f000 f8d0 	bl	80048d0 <__malloc_lock>
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <_free_r+0x94>)
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	4610      	mov	r0, r2
 8004736:	b933      	cbnz	r3, 8004746 <_free_r+0x2e>
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6014      	str	r4, [r2, #0]
 800473c:	4628      	mov	r0, r5
 800473e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004742:	f000 b8cb 	b.w	80048dc <__malloc_unlock>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d90a      	bls.n	8004760 <_free_r+0x48>
 800474a:	6821      	ldr	r1, [r4, #0]
 800474c:	1862      	adds	r2, r4, r1
 800474e:	4293      	cmp	r3, r2
 8004750:	bf01      	itttt	eq
 8004752:	681a      	ldreq	r2, [r3, #0]
 8004754:	685b      	ldreq	r3, [r3, #4]
 8004756:	1852      	addeq	r2, r2, r1
 8004758:	6022      	streq	r2, [r4, #0]
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6004      	str	r4, [r0, #0]
 800475e:	e7ed      	b.n	800473c <_free_r+0x24>
 8004760:	461a      	mov	r2, r3
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	b10b      	cbz	r3, 800476a <_free_r+0x52>
 8004766:	42a3      	cmp	r3, r4
 8004768:	d9fa      	bls.n	8004760 <_free_r+0x48>
 800476a:	6811      	ldr	r1, [r2, #0]
 800476c:	1850      	adds	r0, r2, r1
 800476e:	42a0      	cmp	r0, r4
 8004770:	d10b      	bne.n	800478a <_free_r+0x72>
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	4401      	add	r1, r0
 8004776:	1850      	adds	r0, r2, r1
 8004778:	4283      	cmp	r3, r0
 800477a:	6011      	str	r1, [r2, #0]
 800477c:	d1de      	bne.n	800473c <_free_r+0x24>
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4401      	add	r1, r0
 8004784:	6011      	str	r1, [r2, #0]
 8004786:	6053      	str	r3, [r2, #4]
 8004788:	e7d8      	b.n	800473c <_free_r+0x24>
 800478a:	d902      	bls.n	8004792 <_free_r+0x7a>
 800478c:	230c      	movs	r3, #12
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	e7d4      	b.n	800473c <_free_r+0x24>
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1821      	adds	r1, r4, r0
 8004796:	428b      	cmp	r3, r1
 8004798:	bf01      	itttt	eq
 800479a:	6819      	ldreq	r1, [r3, #0]
 800479c:	685b      	ldreq	r3, [r3, #4]
 800479e:	1809      	addeq	r1, r1, r0
 80047a0:	6021      	streq	r1, [r4, #0]
 80047a2:	6063      	str	r3, [r4, #4]
 80047a4:	6054      	str	r4, [r2, #4]
 80047a6:	e7c9      	b.n	800473c <_free_r+0x24>
 80047a8:	bd38      	pop	{r3, r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	200000bc 	.word	0x200000bc

080047b0 <_malloc_r>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	1ccd      	adds	r5, r1, #3
 80047b4:	f025 0503 	bic.w	r5, r5, #3
 80047b8:	3508      	adds	r5, #8
 80047ba:	2d0c      	cmp	r5, #12
 80047bc:	bf38      	it	cc
 80047be:	250c      	movcc	r5, #12
 80047c0:	2d00      	cmp	r5, #0
 80047c2:	4606      	mov	r6, r0
 80047c4:	db01      	blt.n	80047ca <_malloc_r+0x1a>
 80047c6:	42a9      	cmp	r1, r5
 80047c8:	d903      	bls.n	80047d2 <_malloc_r+0x22>
 80047ca:	230c      	movs	r3, #12
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	2000      	movs	r0, #0
 80047d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d2:	f000 f87d 	bl	80048d0 <__malloc_lock>
 80047d6:	4921      	ldr	r1, [pc, #132]	; (800485c <_malloc_r+0xac>)
 80047d8:	680a      	ldr	r2, [r1, #0]
 80047da:	4614      	mov	r4, r2
 80047dc:	b99c      	cbnz	r4, 8004806 <_malloc_r+0x56>
 80047de:	4f20      	ldr	r7, [pc, #128]	; (8004860 <_malloc_r+0xb0>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b923      	cbnz	r3, 80047ee <_malloc_r+0x3e>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4630      	mov	r0, r6
 80047e8:	f000 f862 	bl	80048b0 <_sbrk_r>
 80047ec:	6038      	str	r0, [r7, #0]
 80047ee:	4629      	mov	r1, r5
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f85d 	bl	80048b0 <_sbrk_r>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d123      	bne.n	8004842 <_malloc_r+0x92>
 80047fa:	230c      	movs	r3, #12
 80047fc:	4630      	mov	r0, r6
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	f000 f86c 	bl	80048dc <__malloc_unlock>
 8004804:	e7e3      	b.n	80047ce <_malloc_r+0x1e>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	1b5b      	subs	r3, r3, r5
 800480a:	d417      	bmi.n	800483c <_malloc_r+0x8c>
 800480c:	2b0b      	cmp	r3, #11
 800480e:	d903      	bls.n	8004818 <_malloc_r+0x68>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	441c      	add	r4, r3
 8004814:	6025      	str	r5, [r4, #0]
 8004816:	e004      	b.n	8004822 <_malloc_r+0x72>
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	42a2      	cmp	r2, r4
 800481c:	bf0c      	ite	eq
 800481e:	600b      	streq	r3, [r1, #0]
 8004820:	6053      	strne	r3, [r2, #4]
 8004822:	4630      	mov	r0, r6
 8004824:	f000 f85a 	bl	80048dc <__malloc_unlock>
 8004828:	f104 000b 	add.w	r0, r4, #11
 800482c:	1d23      	adds	r3, r4, #4
 800482e:	f020 0007 	bic.w	r0, r0, #7
 8004832:	1ac2      	subs	r2, r0, r3
 8004834:	d0cc      	beq.n	80047d0 <_malloc_r+0x20>
 8004836:	1a1b      	subs	r3, r3, r0
 8004838:	50a3      	str	r3, [r4, r2]
 800483a:	e7c9      	b.n	80047d0 <_malloc_r+0x20>
 800483c:	4622      	mov	r2, r4
 800483e:	6864      	ldr	r4, [r4, #4]
 8004840:	e7cc      	b.n	80047dc <_malloc_r+0x2c>
 8004842:	1cc4      	adds	r4, r0, #3
 8004844:	f024 0403 	bic.w	r4, r4, #3
 8004848:	42a0      	cmp	r0, r4
 800484a:	d0e3      	beq.n	8004814 <_malloc_r+0x64>
 800484c:	1a21      	subs	r1, r4, r0
 800484e:	4630      	mov	r0, r6
 8004850:	f000 f82e 	bl	80048b0 <_sbrk_r>
 8004854:	3001      	adds	r0, #1
 8004856:	d1dd      	bne.n	8004814 <_malloc_r+0x64>
 8004858:	e7cf      	b.n	80047fa <_malloc_r+0x4a>
 800485a:	bf00      	nop
 800485c:	200000bc 	.word	0x200000bc
 8004860:	200000c0 	.word	0x200000c0

08004864 <_realloc_r>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	4607      	mov	r7, r0
 8004868:	4614      	mov	r4, r2
 800486a:	460e      	mov	r6, r1
 800486c:	b921      	cbnz	r1, 8004878 <_realloc_r+0x14>
 800486e:	4611      	mov	r1, r2
 8004870:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004874:	f7ff bf9c 	b.w	80047b0 <_malloc_r>
 8004878:	b922      	cbnz	r2, 8004884 <_realloc_r+0x20>
 800487a:	f7ff ff4d 	bl	8004718 <_free_r>
 800487e:	4625      	mov	r5, r4
 8004880:	4628      	mov	r0, r5
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004884:	f000 f830 	bl	80048e8 <_malloc_usable_size_r>
 8004888:	42a0      	cmp	r0, r4
 800488a:	d20f      	bcs.n	80048ac <_realloc_r+0x48>
 800488c:	4621      	mov	r1, r4
 800488e:	4638      	mov	r0, r7
 8004890:	f7ff ff8e 	bl	80047b0 <_malloc_r>
 8004894:	4605      	mov	r5, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d0f2      	beq.n	8004880 <_realloc_r+0x1c>
 800489a:	4631      	mov	r1, r6
 800489c:	4622      	mov	r2, r4
 800489e:	f7ff ff13 	bl	80046c8 <memcpy>
 80048a2:	4631      	mov	r1, r6
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ff37 	bl	8004718 <_free_r>
 80048aa:	e7e9      	b.n	8004880 <_realloc_r+0x1c>
 80048ac:	4635      	mov	r5, r6
 80048ae:	e7e7      	b.n	8004880 <_realloc_r+0x1c>

080048b0 <_sbrk_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	2300      	movs	r3, #0
 80048b4:	4d05      	ldr	r5, [pc, #20]	; (80048cc <_sbrk_r+0x1c>)
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fc f8a6 	bl	8000a0c <_sbrk>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_sbrk_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_sbrk_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000a28 	.word	0x20000a28

080048d0 <__malloc_lock>:
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <__malloc_lock+0x8>)
 80048d2:	f7ff bee9 	b.w	80046a8 <__retarget_lock_acquire_recursive>
 80048d6:	bf00      	nop
 80048d8:	20000a30 	.word	0x20000a30

080048dc <__malloc_unlock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_unlock+0x8>)
 80048de:	f7ff bee4 	b.w	80046aa <__retarget_lock_release_recursive>
 80048e2:	bf00      	nop
 80048e4:	20000a30 	.word	0x20000a30

080048e8 <_malloc_usable_size_r>:
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f18      	subs	r0, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfbc      	itt	lt
 80048f2:	580b      	ldrlt	r3, [r1, r0]
 80048f4:	18c0      	addlt	r0, r0, r3
 80048f6:	4770      	bx	lr

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
