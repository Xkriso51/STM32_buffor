
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d38  08006d38  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d38  08006d38  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  2000007c  08006dbc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d24  08006dbc  00020d24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dedb  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257f  00000000  00000000  0002df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186dc  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000effa  00000000  00000000  0004a65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba8e  00000000  00000000  00059656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e50e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  000e5138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080066d8 	.word	0x080066d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080066d8 	.word	0x080066d8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <MX_DMA_Init+0x38>)
 8000178:	695b      	ldr	r3, [r3, #20]
 800017a:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <MX_DMA_Init+0x38>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6153      	str	r3, [r2, #20]
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <MX_DMA_Init+0x38>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2100      	movs	r1, #0
 8000192:	200c      	movs	r0, #12
 8000194:	f001 fc8b 	bl	8001aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000198:	200c      	movs	r0, #12
 800019a:	f001 fca4 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000

080001ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b2:	f107 0310 	add.w	r3, r7, #16
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c0:	4b41      	ldr	r3, [pc, #260]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a40      	ldr	r2, [pc, #256]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001c6:	f043 0310 	orr.w	r3, r3, #16
 80001ca:	6193      	str	r3, [r2, #24]
 80001cc:	4b3e      	ldr	r3, [pc, #248]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	f003 0310 	and.w	r3, r3, #16
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d8:	4b3b      	ldr	r3, [pc, #236]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a3a      	ldr	r2, [pc, #232]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b38      	ldr	r3, [pc, #224]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b35      	ldr	r3, [pc, #212]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a34      	ldr	r2, [pc, #208]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b32      	ldr	r3, [pc, #200]	; (80002c8 <MX_GPIO_Init+0x11c>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000208:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <MX_GPIO_Init+0x11c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a2e      	ldr	r2, [pc, #184]	; (80002c8 <MX_GPIO_Init+0x11c>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b2c      	ldr	r3, [pc, #176]	; (80002c8 <MX_GPIO_Init+0x11c>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	603b      	str	r3, [r7, #0]
 800021e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 8000220:	2200      	movs	r2, #0
 8000222:	219e      	movs	r1, #158	; 0x9e
 8000224:	4829      	ldr	r0, [pc, #164]	; (80002cc <MX_GPIO_Init+0x120>)
 8000226:	f002 f89b 	bl	8002360 <HAL_GPIO_WritePin>
                          |DIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2120      	movs	r1, #32
 800022e:	4828      	ldr	r0, [pc, #160]	; (80002d0 <MX_GPIO_Init+0x124>)
 8000230:	f002 f896 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023a:	4826      	ldr	r0, [pc, #152]	; (80002d4 <MX_GPIO_Init+0x128>)
 800023c:	f002 f890 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <MX_GPIO_Init+0x12c>)
 8000248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024a:	2300      	movs	r3, #0
 800024c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	4619      	mov	r1, r3
 8000254:	481d      	ldr	r0, [pc, #116]	; (80002cc <MX_GPIO_Init+0x120>)
 8000256:	f001 feff 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 800025a:	239e      	movs	r3, #158	; 0x9e
 800025c:	613b      	str	r3, [r7, #16]
                          |DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	2301      	movs	r3, #1
 8000260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	2302      	movs	r3, #2
 8000268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	4619      	mov	r1, r3
 8000270:	4816      	ldr	r0, [pc, #88]	; (80002cc <MX_GPIO_Init+0x120>)
 8000272:	f001 fef1 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000276:	2320      	movs	r3, #32
 8000278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	2302      	movs	r3, #2
 8000284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	4619      	mov	r1, r3
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <MX_GPIO_Init+0x124>)
 800028e:	f001 fee3 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	2301      	movs	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a0:	2302      	movs	r3, #2
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a4:	f107 0310 	add.w	r3, r7, #16
 80002a8:	4619      	mov	r1, r3
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <MX_GPIO_Init+0x128>)
 80002ac:	f001 fed4 	bl	8002058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2100      	movs	r1, #0
 80002b4:	2028      	movs	r0, #40	; 0x28
 80002b6:	f001 fbfa 	bl	8001aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002ba:	2028      	movs	r0, #40	; 0x28
 80002bc:	f001 fc13 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010800 	.word	0x40010800
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	10110000 	.word	0x10110000

080002dc <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <get_char+0x48>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <get_char+0x4c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d013      	beq.n	8000316 <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <get_char+0x4c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <get_char+0x50>)
 80002f4:	5cd3      	ldrb	r3, [r2, r3]
 80002f6:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <get_char+0x4c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3301      	adds	r3, #1
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <get_char+0x4c>)
 8000300:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <get_char+0x4c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800030a:	db02      	blt.n	8000312 <get_char+0x36>
			busyRX=0;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <get_char+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	e000      	b.n	8000318 <get_char+0x3c>
	}
	else{
		return 0;
 8000316:	2300      	movs	r3, #0
	}
}
 8000318:	4618      	mov	r0, r3
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	200000a0 	.word	0x200000a0
 8000328:	200000a4 	.word	0x200000a4
 800032c:	20000538 	.word	0x20000538

08000330 <fsend>:
void fsend(char* format, ...){
 8000330:	b40f      	push	{r0, r1, r2, r3}
 8000332:	b580      	push	{r7, lr}
 8000334:	b0a4      	sub	sp, #144	; 0x90
 8000336:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 8000338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800033c:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs, format, arglist);
 800033e:	f107 030c 	add.w	r3, r7, #12
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000348:	4618      	mov	r0, r3
 800034a:	f005 f90b 	bl	8005564 <vsiprintf>
	va_end(arglist);
	pid = emptyTX;
 800034e:	4b2f      	ldr	r3, [pc, #188]	; (800040c <fsend+0xdc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800035a:	e016      	b.n	800038a <fsend+0x5a>
		Buf_TX[pid] = tmp_rs[i];
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	f107 010c 	add.w	r1, r7, #12
 8000362:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000366:	440a      	add	r2, r1
 8000368:	7811      	ldrb	r1, [r2, #0]
 800036a:	4a29      	ldr	r2, [pc, #164]	; (8000410 <fsend+0xe0>)
 800036c:	54d1      	strb	r1, [r2, r3]
		pid++;
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3301      	adds	r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
		if(pid >= BUF_TX_LEN){
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037a:	db01      	blt.n	8000380 <fsend+0x50>
			pid = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 8000380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000384:	3301      	adds	r3, #1
 8000386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff fee6 	bl	8000160 <strlen>
 8000394:	4602      	mov	r2, r0
 8000396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800039a:	429a      	cmp	r2, r3
 800039c:	d8de      	bhi.n	800035c <fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
}
 80003a0:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <fsend+0xdc>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <fsend+0xe4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d122      	bne.n	80003f4 <fsend+0xc4>
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <fsend+0xe8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b8:	2b80      	cmp	r3, #128	; 0x80
 80003ba:	d11b      	bne.n	80003f4 <fsend+0xc4>
		emptyTX = pid;
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <fsend+0xdc>)
 80003c0:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <fsend+0xe4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <fsend+0xe0>)
 80003c8:	5cd3      	ldrb	r3, [r2, r3]
 80003ca:	70fb      	strb	r3, [r7, #3]
		busyTX++;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <fsend+0xe4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <fsend+0xe4>)
 80003d4:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <fsend+0xe4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	db02      	blt.n	80003e6 <fsend+0xb6>
			busyTX = 0;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <fsend+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80003e6:	1cfb      	adds	r3, r7, #3
 80003e8:	2201      	movs	r2, #1
 80003ea:	4619      	mov	r1, r3
 80003ec:	480a      	ldr	r0, [pc, #40]	; (8000418 <fsend+0xe8>)
 80003ee:	f004 fbfb 	bl	8004be8 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80003f2:	e002      	b.n	80003fa <fsend+0xca>
	}
	else{
		emptyTX = pid;
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	4a05      	ldr	r2, [pc, #20]	; (800040c <fsend+0xdc>)
 80003f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003fa:	b662      	cpsie	i
}
 80003fc:	bf00      	nop
	}
	__enable_irq();
}
 80003fe:	bf00      	nop
 8000400:	3790      	adds	r7, #144	; 0x90
 8000402:	46bd      	mov	sp, r7
 8000404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000408:	b004      	add	sp, #16
 800040a:	4770      	bx	lr
 800040c:	20000098 	.word	0x20000098
 8000410:	200000d8 	.word	0x200000d8
 8000414:	2000009c 	.word	0x2000009c
 8000418:	20000ccc 	.word	0x20000ccc

0800041c <wypelnienie>:

void wypelnienie(int wartosc, uint32_t period){
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]

		for (int i=23; i>=0; i--)
 8000426:	2317      	movs	r3, #23
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e025      	b.n	8000478 <wypelnienie+0x5c>
		{
			if (wartosc&(1<<i))
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	fa42 f303 	asr.w	r3, r2, r3
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00e      	beq.n	800045a <wypelnienie+0x3e>
			{
				pwmData[i] = 6*(period/10);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <wypelnienie+0x70>)
 8000440:	fba2 2303 	umull	r2, r3, r2, r3
 8000444:	08da      	lsrs	r2, r3, #3
 8000446:	4613      	mov	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	4619      	mov	r1, r3
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <wypelnienie+0x74>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000458:	e00b      	b.n	8000472 <wypelnienie+0x56>
			}
			else pwmData[i] = 3*(period/10);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <wypelnienie+0x70>)
 800045e:	fba2 2303 	umull	r2, r3, r2, r3
 8000462:	08da      	lsrs	r2, r3, #3
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	441a      	add	r2, r3
 800046a:	4909      	ldr	r1, [pc, #36]	; (8000490 <wypelnienie+0x74>)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i=23; i>=0; i--)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3b01      	subs	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dad6      	bge.n	800042c <wypelnienie+0x10>
		}
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	cccccccd 	.word	0xcccccccd
 8000490:	200004d8 	.word	0x200004d8

08000494 <doner>:
void doner(char *ord){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	4866      	ldr	r0, [pc, #408]	; (8000638 <doner+0x1a4>)
 80004a0:	f7ff fe54 	bl	800014c <strcmp>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d106      	bne.n	80004b8 <doner+0x24>

		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi %d.\r\n",Difference);
 80004aa:	4b64      	ldr	r3, [pc, #400]	; (800063c <doner+0x1a8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4619      	mov	r1, r3
 80004b0:	4863      	ldr	r0, [pc, #396]	; (8000640 <doner+0x1ac>)
 80004b2:	f7ff ff3d 	bl	8000330 <fsend>
	}
	else{
		fsend("WRCMD\r\n");
	}

}
 80004b6:	e0bb      	b.n	8000630 <doner+0x19c>
	else if(strcmp("FCHKH;", ord) == 0){
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4862      	ldr	r0, [pc, #392]	; (8000644 <doner+0x1b0>)
 80004bc:	f7ff fe46 	bl	800014c <strcmp>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d106      	bne.n	80004d4 <doner+0x40>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi %d.\r\n",PWM_pulses_count);
 80004c6:	4b60      	ldr	r3, [pc, #384]	; (8000648 <doner+0x1b4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4619      	mov	r1, r3
 80004cc:	485f      	ldr	r0, [pc, #380]	; (800064c <doner+0x1b8>)
 80004ce:	f7ff ff2f 	bl	8000330 <fsend>
}
 80004d2:	e0ad      	b.n	8000630 <doner+0x19c>
	else if(strcmp("FSTART;", ord) == 0){
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	485e      	ldr	r0, [pc, #376]	; (8000650 <doner+0x1bc>)
 80004d8:	f7ff fe38 	bl	800014c <strcmp>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d12e      	bne.n	8000540 <doner+0xac>
		fsend("Rozpoczeto wysylanie impulsow \r\n");
 80004e2:	485c      	ldr	r0, [pc, #368]	; (8000654 <doner+0x1c0>)
 80004e4:	f7ff ff24 	bl	8000330 <fsend>
		seconds_passed=0;
 80004e8:	4b5b      	ldr	r3, [pc, #364]	; (8000658 <doner+0x1c4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
		period = 63*(1000000/(czest*1000));
 80004ee:	4b5b      	ldr	r3, [pc, #364]	; (800065c <doner+0x1c8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	4a59      	ldr	r2, [pc, #356]	; (8000660 <doner+0x1cc>)
 80004fc:	fb92 f2f3 	sdiv	r2, r2, r3
 8000500:	4613      	mov	r3, r2
 8000502:	019b      	lsls	r3, r3, #6
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	461a      	mov	r2, r3
 8000508:	4b56      	ldr	r3, [pc, #344]	; (8000664 <doner+0x1d0>)
 800050a:	601a      	str	r2, [r3, #0]
		htim1.Init.Period = period;
 800050c:	4b55      	ldr	r3, [pc, #340]	; (8000664 <doner+0x1d0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a55      	ldr	r2, [pc, #340]	; (8000668 <doner+0x1d4>)
 8000512:	60d3      	str	r3, [r2, #12]
		wypelnienie(wart,period);
 8000514:	4b55      	ldr	r3, [pc, #340]	; (800066c <doner+0x1d8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a52      	ldr	r2, [pc, #328]	; (8000664 <doner+0x1d0>)
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff7c 	bl	800041c <wypelnienie>
		HAL_TIM_Base_Start_IT(&htim3);
 8000524:	4852      	ldr	r0, [pc, #328]	; (8000670 <doner+0x1dc>)
 8000526:	f002 fbbf 	bl	8002ca8 <HAL_TIM_Base_Start_IT>
		 HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	4851      	ldr	r0, [pc, #324]	; (8000674 <doner+0x1e0>)
 800052e:	f003 f835 	bl	800359c <HAL_TIM_IC_Start_IT>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
 8000532:	2318      	movs	r3, #24
 8000534:	4a50      	ldr	r2, [pc, #320]	; (8000678 <doner+0x1e4>)
 8000536:	2100      	movs	r1, #0
 8000538:	484b      	ldr	r0, [pc, #300]	; (8000668 <doner+0x1d4>)
 800053a:	f002 fd7f 	bl	800303c <HAL_TIM_PWM_Start_DMA>
}
 800053e:	e077      	b.n	8000630 <doner+0x19c>
	else if(strcmp("FSTAT;", ord) == 0){
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	484e      	ldr	r0, [pc, #312]	; (800067c <doner+0x1e8>)
 8000544:	f7ff fe02 	bl	800014c <strcmp>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d109      	bne.n	8000562 <doner+0xce>
		fsend("Wypelnienie %d Czas %d Czestotliwosc %d\r\n",wart,czas,czest);
 800054e:	4b47      	ldr	r3, [pc, #284]	; (800066c <doner+0x1d8>)
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <doner+0x1ec>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b41      	ldr	r3, [pc, #260]	; (800065c <doner+0x1c8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	484a      	ldr	r0, [pc, #296]	; (8000684 <doner+0x1f0>)
 800055c:	f7ff fee8 	bl	8000330 <fsend>
}
 8000560:	e066      	b.n	8000630 <doner+0x19c>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 8000562:	4a47      	ldr	r2, [pc, #284]	; (8000680 <doner+0x1ec>)
 8000564:	4948      	ldr	r1, [pc, #288]	; (8000688 <doner+0x1f4>)
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f004 ffba 	bl	80054e0 <siscanf>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d006      	beq.n	8000580 <doner+0xec>
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	4845      	ldr	r0, [pc, #276]	; (800068c <doner+0x1f8>)
 8000576:	f7ff fde9 	bl	800014c <strcmp>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d112      	bne.n	80005a6 <doner+0x112>
		if(czas>=0 && czas<=20){
 8000580:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <doner+0x1ec>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db0a      	blt.n	800059e <doner+0x10a>
 8000588:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <doner+0x1ec>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b14      	cmp	r3, #20
 800058e:	dc06      	bgt.n	800059e <doner+0x10a>
			fsend("„Ustawiono czas na %d sekund.\r\n",czas);
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <doner+0x1ec>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	483e      	ldr	r0, [pc, #248]	; (8000690 <doner+0x1fc>)
 8000598:	f7ff feca 	bl	8000330 <fsend>
		if(czas>=0 && czas<=20){
 800059c:	e048      	b.n	8000630 <doner+0x19c>
			fsend("WRNUM\r\n");
 800059e:	483d      	ldr	r0, [pc, #244]	; (8000694 <doner+0x200>)
 80005a0:	f7ff fec6 	bl	8000330 <fsend>
		if(czas>=0 && czas<=20){
 80005a4:	e044      	b.n	8000630 <doner+0x19c>
	else if(sscanf(ord, "FFILL%d;", &wart) == 1 || strcmp("FFIL;", ord) == 0){
 80005a6:	4a31      	ldr	r2, [pc, #196]	; (800066c <doner+0x1d8>)
 80005a8:	493b      	ldr	r1, [pc, #236]	; (8000698 <doner+0x204>)
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f004 ff98 	bl	80054e0 <siscanf>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d006      	beq.n	80005c4 <doner+0x130>
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4838      	ldr	r0, [pc, #224]	; (800069c <doner+0x208>)
 80005ba:	f7ff fdc7 	bl	800014c <strcmp>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10e      	bne.n	80005e2 <doner+0x14e>
		if(wart>=0 && wart<= 4294967295){
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <doner+0x1d8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db06      	blt.n	80005da <doner+0x146>
			fsend("„Ustawiono wypelnienie na %d .\r\n",wart);
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <doner+0x1d8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4833      	ldr	r0, [pc, #204]	; (80006a0 <doner+0x20c>)
 80005d4:	f7ff feac 	bl	8000330 <fsend>
		if(wart>=0 && wart<= 4294967295){
 80005d8:	e02a      	b.n	8000630 <doner+0x19c>
			fsend("WRNUM\r\n");
 80005da:	482e      	ldr	r0, [pc, #184]	; (8000694 <doner+0x200>)
 80005dc:	f7ff fea8 	bl	8000330 <fsend>
		if(wart>=0 && wart<= 4294967295){
 80005e0:	e026      	b.n	8000630 <doner+0x19c>
	else if(sscanf(ord, "FSET%d;", &czest) == 1 || strcmp("FSET;", ord) == 0){
 80005e2:	4a1e      	ldr	r2, [pc, #120]	; (800065c <doner+0x1c8>)
 80005e4:	492f      	ldr	r1, [pc, #188]	; (80006a4 <doner+0x210>)
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f004 ff7a 	bl	80054e0 <siscanf>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d006      	beq.n	8000600 <doner+0x16c>
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	482c      	ldr	r0, [pc, #176]	; (80006a8 <doner+0x214>)
 80005f6:	f7ff fda9 	bl	800014c <strcmp>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d113      	bne.n	8000628 <doner+0x194>
		if(czest>=10 && czest<=1000){
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <doner+0x1c8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b09      	cmp	r3, #9
 8000606:	dd0b      	ble.n	8000620 <doner+0x18c>
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <doner+0x1c8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000610:	dc06      	bgt.n	8000620 <doner+0x18c>
					fsend("„Ustawiono czestotliwosc na %d kH.\r\n",czest);
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <doner+0x1c8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	4824      	ldr	r0, [pc, #144]	; (80006ac <doner+0x218>)
 800061a:	f7ff fe89 	bl	8000330 <fsend>
		if(czest>=10 && czest<=1000){
 800061e:	e007      	b.n	8000630 <doner+0x19c>
					fsend("WRNUM\r\n");
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <doner+0x200>)
 8000622:	f7ff fe85 	bl	8000330 <fsend>
		if(czest>=10 && czest<=1000){
 8000626:	e003      	b.n	8000630 <doner+0x19c>
		fsend("WRCMD\r\n");
 8000628:	4821      	ldr	r0, [pc, #132]	; (80006b0 <doner+0x21c>)
 800062a:	f7ff fe81 	bl	8000330 <fsend>
}
 800062e:	e7ff      	b.n	8000630 <doner+0x19c>
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	080066f0 	.word	0x080066f0
 800063c:	200000bc 	.word	0x200000bc
 8000640:	080066f8 	.word	0x080066f8
 8000644:	0800673c 	.word	0x0800673c
 8000648:	200000c0 	.word	0x200000c0
 800064c:	08006744 	.word	0x08006744
 8000650:	0800677c 	.word	0x0800677c
 8000654:	08006784 	.word	0x08006784
 8000658:	200000c4 	.word	0x200000c4
 800065c:	20000008 	.word	0x20000008
 8000660:	000f4240 	.word	0x000f4240
 8000664:	200000c8 	.word	0x200000c8
 8000668:	20000c3c 	.word	0x20000c3c
 800066c:	20000004 	.word	0x20000004
 8000670:	20000bf4 	.word	0x20000bf4
 8000674:	20000c84 	.word	0x20000c84
 8000678:	200004d8 	.word	0x200004d8
 800067c:	080067a8 	.word	0x080067a8
 8000680:	20000000 	.word	0x20000000
 8000684:	080067b0 	.word	0x080067b0
 8000688:	080067dc 	.word	0x080067dc
 800068c:	080067e8 	.word	0x080067e8
 8000690:	080067f0 	.word	0x080067f0
 8000694:	08006814 	.word	0x08006814
 8000698:	0800681c 	.word	0x0800681c
 800069c:	08006828 	.word	0x08006828
 80006a0:	08006830 	.word	0x08006830
 80006a4:	08006854 	.word	0x08006854
 80006a8:	0800685c 	.word	0x0800685c
 80006ac:	08006864 	.word	0x08006864
 80006b0:	0800688c 	.word	0x0800688c

080006b4 <checksum>:

int checksum(char *buffer){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	int suma = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
	int i;
	char userSum[2];
	userSum[0]=buffer[strlen(buffer)-3];
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fd4d 	bl	8000160 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	3b03      	subs	r3, #3
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	723b      	strb	r3, [r7, #8]
	userSum[1]=buffer[strlen(buffer)-2];
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff fd44 	bl	8000160 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	3b02      	subs	r3, #2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	727b      	strb	r3, [r7, #9]

	for(i = 0;i<strlen(buffer)-4;i++){
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	e00a      	b.n	8000700 <checksum+0x4c>
		suma=suma+buffer[i];
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]
	for(i = 0;i<strlen(buffer)-4;i++){
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff fd2d 	bl	8000160 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	1f1a      	subs	r2, r3, #4
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8ec      	bhi.n	80006ea <checksum+0x36>
	}
	int mod=suma%256;
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	425a      	negs	r2, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	bf58      	it	pl
 800071a:	4253      	negpl	r3, r2
 800071c:	617b      	str	r3, [r7, #20]
	long temp;
	int j=0;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
	while (mod != 0){
 8000722:	e024      	b.n	800076e <checksum+0xba>
		temp = mod % 16;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	425a      	negs	r2, r3
 8000728:	f003 030f 	and.w	r3, r3, #15
 800072c:	f002 020f 	and.w	r2, r2, #15
 8000730:	bf58      	it	pl
 8000732:	4253      	negpl	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
		if (temp < 10)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b09      	cmp	r3, #9
 800073a:	dc09      	bgt.n	8000750 <checksum+0x9c>
			hex[j++] = 48 + temp;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	1c59      	adds	r1, r3, #1
 8000744:	6139      	str	r1, [r7, #16]
 8000746:	3230      	adds	r2, #48	; 0x30
 8000748:	b2d1      	uxtb	r1, r2
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <checksum+0xe4>)
 800074c:	54d1      	strb	r1, [r2, r3]
 800074e:	e008      	b.n	8000762 <checksum+0xae>
		else
		    hex[j++] = 55 + temp;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	1c59      	adds	r1, r3, #1
 8000758:	6139      	str	r1, [r7, #16]
 800075a:	3237      	adds	r2, #55	; 0x37
 800075c:	b2d1      	uxtb	r1, r2
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <checksum+0xe4>)
 8000760:	54d1      	strb	r1, [r2, r3]
		mod = mod / 16;
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	da00      	bge.n	800076a <checksum+0xb6>
 8000768:	330f      	adds	r3, #15
 800076a:	111b      	asrs	r3, r3, #4
 800076c:	617b      	str	r3, [r7, #20]
	while (mod != 0){
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1d7      	bne.n	8000724 <checksum+0x70>
	}

	if(hex[1]==userSum[0] && hex[0]==userSum[1])
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <checksum+0xe4>)
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	7a3b      	ldrb	r3, [r7, #8]
 800077a:	429a      	cmp	r2, r3
 800077c:	d106      	bne.n	800078c <checksum+0xd8>
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <checksum+0xe4>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	7a7b      	ldrb	r3, [r7, #9]
 8000784:	429a      	cmp	r2, r3
 8000786:	d101      	bne.n	800078c <checksum+0xd8>
	{
		return 1;
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <checksum+0xda>
	}
	else
	{
		return 0;
 800078c:	2300      	movs	r3, #0
	}

}
 800078e:	4618      	mov	r0, r3
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000940 	.word	0x20000940

0800079c <get_line>:
void get_line(){
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
	char temp = get_char();
 80007a2:	f7ff fd9b 	bl	80002dc <get_char>
 80007a6:	4603      	mov	r3, r0
 80007a8:	70fb      	strb	r3, [r7, #3]
	bfr[pidx]=temp;
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <get_line+0x13c>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	4a4a      	ldr	r2, [pc, #296]	; (80008dc <get_line+0x140>)
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	5453      	strb	r3, [r2, r1]
	pidx++;
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <get_line+0x13c>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	3301      	adds	r3, #1
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <get_line+0x13c>)
 80007c4:	801a      	strh	r2, [r3, #0]
	if(temp == 0x05){
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b05      	cmp	r3, #5
 80007ca:	d10c      	bne.n	80007e6 <get_line+0x4a>
		pidx=0;
 80007cc:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <get_line+0x13c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	801a      	strh	r2, [r3, #0]
		memset(&bfr[0],0,sizeof(bfr));
 80007d2:	f240 1205 	movw	r2, #261	; 0x105
 80007d6:	2100      	movs	r1, #0
 80007d8:	4840      	ldr	r0, [pc, #256]	; (80008dc <get_line+0x140>)
 80007da:	f004 fe79 	bl	80054d0 <memset>
		fstate = listen;
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <get_line+0x144>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
			fsend("\r\n");
		}
		pidx=0;
	}

}
 80007e4:	e073      	b.n	80008ce <get_line+0x132>
	else if(pidx > 261){
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <get_line+0x13c>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80007f0:	d303      	bcc.n	80007fa <get_line+0x5e>
		pidx=0;
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <get_line+0x13c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	801a      	strh	r2, [r3, #0]
}
 80007f8:	e069      	b.n	80008ce <get_line+0x132>
	else if(temp == 0x04 && fstate == listen){
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d166      	bne.n	80008ce <get_line+0x132>
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <get_line+0x144>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d162      	bne.n	80008ce <get_line+0x132>
		fstate = notlisten;
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <get_line+0x144>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
		if(strlen(bfr)>4){
 800080e:	4833      	ldr	r0, [pc, #204]	; (80008dc <get_line+0x140>)
 8000810:	f7ff fca6 	bl	8000160 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	2b04      	cmp	r3, #4
 8000818:	d950      	bls.n	80008bc <get_line+0x120>
			fsend(bfr);
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <get_line+0x140>)
 800081c:	f7ff fd88 	bl	8000330 <fsend>
			fsend("\r\n");
 8000820:	4830      	ldr	r0, [pc, #192]	; (80008e4 <get_line+0x148>)
 8000822:	f7ff fd85 	bl	8000330 <fsend>
			int poi=0;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
			if(checksum(bfr)==1){
 800082a:	482c      	ldr	r0, [pc, #176]	; (80008dc <get_line+0x140>)
 800082c:	f7ff ff42 	bl	80006b4 <checksum>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d135      	bne.n	80008a2 <get_line+0x106>
				for(int i=1;i<=pidx;i++){
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e02a      	b.n	8000892 <get_line+0xf6>
					if(bfr[i] == ';'){
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <get_line+0x140>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b3b      	cmp	r3, #59	; 0x3b
 8000846:	d121      	bne.n	800088c <get_line+0xf0>
						memset(&order[0],0,sizeof(order));
 8000848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084c:	2100      	movs	r1, #0
 800084e:	4826      	ldr	r0, [pc, #152]	; (80008e8 <get_line+0x14c>)
 8000850:	f004 fe3e 	bl	80054d0 <memset>
						ordpidx=0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
						while(poi<=i){
 8000858:	e00e      	b.n	8000878 <get_line+0xdc>
							order[ordpidx]=bfr[poi];
 800085a:	4a20      	ldr	r2, [pc, #128]	; (80008dc <get_line+0x140>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4413      	add	r3, r2
 8000860:	7819      	ldrb	r1, [r3, #0]
 8000862:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <get_line+0x14c>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	460a      	mov	r2, r1
 800086a:	701a      	strb	r2, [r3, #0]
							ordpidx++;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
							poi++;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3301      	adds	r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
						while(poi<=i){
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	ddec      	ble.n	800085a <get_line+0xbe>
						ordpidx=i+1;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
						doner(order);
 8000886:	4818      	ldr	r0, [pc, #96]	; (80008e8 <get_line+0x14c>)
 8000888:	f7ff fe04 	bl	8000494 <doner>
				for(int i=1;i<=pidx;i++){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <get_line+0x13c>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b29b      	uxth	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4293      	cmp	r3, r2
 800089e:	ddcd      	ble.n	800083c <get_line+0xa0>
 80008a0:	e012      	b.n	80008c8 <get_line+0x12c>
				fsend("WRCHS%c%c",hex[1],hex[0]);
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <get_line+0x150>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <get_line+0x150>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4810      	ldr	r0, [pc, #64]	; (80008f0 <get_line+0x154>)
 80008b0:	f7ff fd3e 	bl	8000330 <fsend>
				fsend("\r\n");
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <get_line+0x148>)
 80008b6:	f7ff fd3b 	bl	8000330 <fsend>
 80008ba:	e005      	b.n	80008c8 <get_line+0x12c>
			fsend("WRFRM");
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <get_line+0x158>)
 80008be:	f7ff fd37 	bl	8000330 <fsend>
			fsend("\r\n");
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <get_line+0x148>)
 80008c4:	f7ff fd34 	bl	8000330 <fsend>
		pidx=0;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <get_line+0x13c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	801a      	strh	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	20000838 	.word	0x20000838
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	08006894 	.word	0x08006894
 80008e8:	20000738 	.word	0x20000738
 80008ec:	20000940 	.word	0x20000940
 80008f0:	08006898 	.word	0x08006898
 80008f4:	080068a4 	.word	0x080068a4

080008f8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <HAL_UART_TxCpltCallback+0x58>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d11e      	bne.n	8000946 <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_UART_TxCpltCallback+0x5c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_UART_TxCpltCallback+0x60>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d018      	beq.n	8000946 <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_UART_TxCpltCallback+0x60>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_TxCpltCallback+0x64>)
 800091a:	5cd3      	ldrb	r3, [r2, r3]
 800091c:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_TxCpltCallback+0x60>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <HAL_UART_TxCpltCallback+0x60>)
 8000926:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_UART_TxCpltCallback+0x60>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000930:	db02      	blt.n	8000938 <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_UART_TxCpltCallback+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000938:	f107 030f 	add.w	r3, r7, #15
 800093c:	2201      	movs	r2, #1
 800093e:	4619      	mov	r1, r3
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <HAL_UART_TxCpltCallback+0x58>)
 8000942:	f004 f951 	bl	8004be8 <HAL_UART_Transmit_IT>
		}
	}
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000ccc 	.word	0x20000ccc
 8000954:	20000098 	.word	0x20000098
 8000958:	2000009c 	.word	0x2000009c
 800095c:	200000d8 	.word	0x200000d8

08000960 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_UART_RxCpltCallback+0x44>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d115      	bne.n	800099c <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 8000978:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000982:	db02      	blt.n	800098a <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_UART_RxCpltCallback+0x4c>)
 8000990:	4413      	add	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	4619      	mov	r1, r3
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <HAL_UART_RxCpltCallback+0x44>)
 8000998:	f004 f96a 	bl	8004c70 <HAL_UART_Receive_IT>
	}
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000ccc 	.word	0x20000ccc
 80009a8:	200000a0 	.word	0x200000a0
 80009ac:	20000538 	.word	0x20000538

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 ff42 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f876 	bl	8000aa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 80009bc:	2108      	movs	r1, #8
 80009be:	482d      	ldr	r0, [pc, #180]	; (8000a74 <main+0xc4>)
 80009c0:	f000 f936 	bl	8000c30 <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 80009c4:	2104      	movs	r1, #4
 80009c6:	482b      	ldr	r0, [pc, #172]	; (8000a74 <main+0xc4>)
 80009c8:	f000 f946 	bl	8000c58 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 80009cc:	2102      	movs	r1, #2
 80009ce:	4829      	ldr	r0, [pc, #164]	; (8000a74 <main+0xc4>)
 80009d0:	f000 f956 	bl	8000c80 <LCD_setDC>
      LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4827      	ldr	r0, [pc, #156]	; (8000a74 <main+0xc4>)
 80009d8:	f000 f966 	bl	8000ca8 <LCD_setDIN>
      LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 80009dc:	2110      	movs	r1, #16
 80009de:	4825      	ldr	r0, [pc, #148]	; (8000a74 <main+0xc4>)
 80009e0:	f000 f976 	bl	8000cd0 <LCD_setCLK>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fbe2 	bl	80001ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 fe92 	bl	8001710 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009ec:	f000 fba0 	bl	8001130 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009f0:	f000 fc3e 	bl	8001270 <MX_TIM2_Init>
  MX_TIM4_Init();
 80009f4:	f000 fd20 	bl	8001438 <MX_TIM4_Init>
  MX_DMA_Init();
 80009f8:	f7ff fbba 	bl	8000170 <MX_DMA_Init>
  MX_TIM3_Init();
 80009fc:	f000 fca8 	bl	8001350 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000a00:	f000 f9fe 	bl	8000e00 <LCD_init>
  fsend("Hello user\r\n");
 8000a04:	481c      	ldr	r0, [pc, #112]	; (8000a78 <main+0xc8>)
 8000a06:	f7ff fc93 	bl	8000330 <fsend>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //PWM dla ekranu
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	481b      	ldr	r0, [pc, #108]	; (8000a7c <main+0xcc>)
 8000a0e:	f002 fa73 	bl	8002ef8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 100);
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <main+0xcc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34

  	  LCD_print("Miernik", 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <main+0xd0>)
 8000a20:	f000 fa66 	bl	8000ef0 <LCD_print>
  	  LCD_print("Czestotliwosci", 0, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2100      	movs	r1, #0
 8000a28:	4816      	ldr	r0, [pc, #88]	; (8000a84 <main+0xd4>)
 8000a2a:	f000 fa61 	bl	8000ef0 <LCD_print>
  	  LCD_print("Autor", 0, 2);
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2100      	movs	r1, #0
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <main+0xd8>)
 8000a34:	f000 fa5c 	bl	8000ef0 <LCD_print>
  	  LCD_print("Krzysztof", 0, 3);
 8000a38:	2203      	movs	r2, #3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <main+0xdc>)
 8000a3e:	f000 fa57 	bl	8000ef0 <LCD_print>
  	  LCD_print("Olejniczak", 0, 4);
 8000a42:	2204      	movs	r2, #4
 8000a44:	2100      	movs	r1, #0
 8000a46:	4812      	ldr	r0, [pc, #72]	; (8000a90 <main+0xe0>)
 8000a48:	f000 fa52 	bl	8000ef0 <LCD_print>
  	  LCD_print("", 0, 5);
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <main+0xe4>)
 8000a52:	f000 fa4d 	bl	8000ef0 <LCD_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	490f      	ldr	r1, [pc, #60]	; (8000a98 <main+0xe8>)
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <main+0xec>)
 8000a5c:	f004 f908 	bl	8004c70 <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <main+0xf0>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <main+0xf4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d0f9      	beq.n	8000a60 <main+0xb0>
		  get_line();
 8000a6c:	f7ff fe96 	bl	800079c <get_line>
	  if(busyRX!=emptyRX){
 8000a70:	e7f6      	b.n	8000a60 <main+0xb0>
 8000a72:	bf00      	nop
 8000a74:	40011000 	.word	0x40011000
 8000a78:	080068ac 	.word	0x080068ac
 8000a7c:	20000bac 	.word	0x20000bac
 8000a80:	080068bc 	.word	0x080068bc
 8000a84:	080068c4 	.word	0x080068c4
 8000a88:	080068d4 	.word	0x080068d4
 8000a8c:	080068dc 	.word	0x080068dc
 8000a90:	080068e8 	.word	0x080068e8
 8000a94:	080068f4 	.word	0x080068f4
 8000a98:	20000538 	.word	0x20000538
 8000a9c:	20000ccc 	.word	0x20000ccc
 8000aa0:	200000a4 	.word	0x200000a4
 8000aa4:	200000a0 	.word	0x200000a0

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 fd0a 	bl	80054d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ace:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ae6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fc6f 	bl	80023d4 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000afc:	f000 f894 	bl	8000c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 feda 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b26:	f000 f87f 	bl	8000c28 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3740      	adds	r7, #64	; 0x40
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d116      	bne.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x40>
		seconds_passed += 1;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b4e:	6013      	str	r3, [r2, #0]
		if(seconds_passed>=10)
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	d90d      	bls.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b5c:	f002 fc08 	bl	8003370 <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000b60:	2100      	movs	r1, #0
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b64:	f002 fe20 	bl	80037a8 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b6a:	f002 f8ef 	bl	8002d4c <HAL_TIM_Base_Stop_IT>
			fsend("Przesylanie zakonczone\r\n");
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b70:	f7ff fbde 	bl	8000330 <fsend>
		}
	}

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40000400 	.word	0x40000400
 8000b80:	200000c4 	.word	0x200000c4
 8000b84:	20000c3c 	.word	0x20000c3c
 8000b88:	20000c84 	.word	0x20000c84
 8000b8c:	20000bf4 	.word	0x20000bf4
 8000b90:	080068f8 	.word	0x080068f8

08000b94 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d132      	bne.n	8000c0c <HAL_TIM_IC_CaptureCallback+0x78>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7f1b      	ldrb	r3, [r3, #28]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12e      	bne.n	8000c0c <HAL_TIM_IC_CaptureCallback+0x78>
		PWM_pulses_count += 1; //count number of consecutive impulses increased with every detected rising edge of PWM signal
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bb6:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured == 0){
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10a      	bne.n	8000bd6 <HAL_TIM_IC_CaptureCallback+0x42>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f003 fa0e 	bl	8003fe4 <HAL_TIM_ReadCapturedValue>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000bcc:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0;
		}


	}
}
 8000bd4:	e01a      	b.n	8000c0c <HAL_TIM_IC_CaptureCallback+0x78>
		}else if(Is_First_Captured){
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d016      	beq.n	8000c0c <HAL_TIM_IC_CaptureCallback+0x78>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f003 f9ff 	bl	8003fe4 <HAL_TIM_ReadCapturedValue>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000bea:	6013      	str	r3, [r2, #0]
			if(IC_Value2 > IC_Value1){
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d906      	bls.n	8000c06 <HAL_TIM_IC_CaptureCallback+0x72>
				Difference = IC_Value2 - IC_Value1;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000c04:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000c0 	.word	0x200000c0
 8000c18:	200000b0 	.word	0x200000b0
 8000c1c:	200000b4 	.word	0x200000b4
 8000c20:	200000b8 	.word	0x200000b8
 8000c24:	200000bc 	.word	0x200000bc

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x4>
	...

08000c30 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <LCD_setRST+0x24>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <LCD_setRST+0x24>)
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	8093      	strh	r3, [r2, #4]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000944 	.word	0x20000944

08000c58 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <LCD_setCE+0x24>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <LCD_setCE+0x24>)
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	8193      	strh	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000944 	.word	0x20000944

08000c80 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <LCD_setDC+0x24>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <LCD_setDC+0x24>)
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	8293      	strh	r3, [r2, #20]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000944 	.word	0x20000944

08000ca8 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <LCD_setDIN+0x24>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <LCD_setDIN+0x24>)
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	8393      	strh	r3, [r2, #28]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000944 	.word	0x20000944

08000cd0 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000cdc:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <LCD_setCLK+0x24>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <LCD_setCLK+0x24>)
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000944 	.word	0x20000944

08000cf8 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e026      	b.n	8000d56 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <LCD_send+0x70>)
 8000d0a:	6998      	ldr	r0, [r3, #24]
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <LCD_send+0x70>)
 8000d0e:	8b99      	ldrh	r1, [r3, #28]
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f1c3 0307 	rsb	r3, r3, #7
 8000d18:	fa42 f303 	asr.w	r3, r2, r3
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f001 fb18 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <LCD_send+0x70>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <LCD_send+0x70>)
 8000d36:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fb10 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <LCD_send+0x70>)
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <LCD_send+0x70>)
 8000d46:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fb08 	bl	8002360 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	3301      	adds	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d9d5      	bls.n	8000d08 <LCD_send+0x10>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000944 	.word	0x20000944

08000d6c <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11c      	bne.n	8000dbc <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <LCD_write+0x90>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <LCD_write+0x90>)
 8000d88:	8a91      	ldrh	r1, [r2, #20]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fae7 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <LCD_write+0x90>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <LCD_write+0x90>)
 8000d98:	8991      	ldrh	r1, [r2, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fadf 	bl	8002360 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffa7 	bl	8000cf8 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <LCD_write+0x90>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <LCD_write+0x90>)
 8000db0:	8991      	ldrh	r1, [r2, #12]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fad3 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000dba:	e01b      	b.n	8000df4 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <LCD_write+0x90>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LCD_write+0x90>)
 8000dc2:	8a91      	ldrh	r1, [r2, #20]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 faca 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <LCD_write+0x90>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LCD_write+0x90>)
 8000dd2:	8991      	ldrh	r1, [r2, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fac2 	bl	8002360 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff8a 	bl	8000cf8 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <LCD_write+0x90>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <LCD_write+0x90>)
 8000dea:	8991      	ldrh	r1, [r2, #12]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fab6 	bl	8002360 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000944 	.word	0x20000944

08000e00 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <LCD_init+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <LCD_init+0x64>)
 8000e0a:	8891      	ldrh	r1, [r2, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 faa6 	bl	8002360 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <LCD_init+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <LCD_init+0x64>)
 8000e1a:	8891      	ldrh	r1, [r2, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fa9e 	bl	8002360 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000e24:	2100      	movs	r1, #0
 8000e26:	2021      	movs	r0, #33	; 0x21
 8000e28:	f7ff ffa0 	bl	8000d6c <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	20b8      	movs	r0, #184	; 0xb8
 8000e30:	f7ff ff9c 	bl	8000d6c <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000e34:	2100      	movs	r1, #0
 8000e36:	2004      	movs	r0, #4
 8000e38:	f7ff ff98 	bl	8000d6c <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2014      	movs	r0, #20
 8000e40:	f7ff ff94 	bl	8000d6c <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000e44:	2100      	movs	r1, #0
 8000e46:	2020      	movs	r0, #32
 8000e48:	f7ff ff90 	bl	8000d6c <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200c      	movs	r0, #12
 8000e50:	f7ff ff8c 	bl	8000d6c <LCD_write>
  LCD_clrScr();
 8000e54:	f000 f86c 	bl	8000f30 <LCD_clrScr>
  lcd.inverttext = false;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <LCD_init+0x68>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000944 	.word	0x20000944
 8000e68:	2000096c 	.word	0x2000096c

08000e6c <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	e02d      	b.n	8000ed8 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <LCD_putChar+0x7c>)
 8000e7e:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d010      	beq.n	8000eae <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f1a3 0220 	sub.w	r2, r3, #32
 8000e92:	4916      	ldr	r1, [pc, #88]	; (8000eec <LCD_putChar+0x80>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	18ca      	adds	r2, r1, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff60 	bl	8000d6c <LCD_write>
 8000eac:	e011      	b.n	8000ed2 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f1a3 0220 	sub.w	r2, r3, #32
 8000eb4:	490d      	ldr	r1, [pc, #52]	; (8000eec <LCD_putChar+0x80>)
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	18ca      	adds	r2, r1, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff4d 	bl	8000d6c <LCD_write>
  for(int i = 0; i < 6; i++){
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	ddce      	ble.n	8000e7c <LCD_putChar+0x10>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000096c 	.word	0x2000096c
 8000eec:	08006930 	.word	0x08006930

08000ef0 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8000f00:	78ba      	ldrb	r2, [r7, #2]
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f830 	bl	8000f6c <LCD_goXY>
  while(*str){
 8000f0c:	e006      	b.n	8000f1c <LCD_print+0x2c>
    LCD_putChar(*str++);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffa8 	bl	8000e6c <LCD_putChar>
  while(*str){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f4      	bne.n	8000f0e <LCD_print+0x1e>
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e00b      	b.n	8000f54 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff14 	bl	8000d6c <LCD_write>
    lcd.buffer[i] = 0;
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <LCD_clrScr+0x38>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000f5a:	dbef      	blt.n	8000f3c <LCD_clrScr+0xc>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000096c 	.word	0x2000096c

08000f6c <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fef0 	bl	8000d6c <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fee8 	bl	8000d6c <LCD_write>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a14      	ldr	r2, [pc, #80]	; (8001000 <HAL_MspInit+0x5c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_MspInit+0x5c>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_MspInit+0x5c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_MspInit+0x5c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_MspInit+0x60>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_MspInit+0x60>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104e:	f000 fc3b 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Channel2_IRQHandler+0x10>)
 800105e:	f000 fec7 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000b68 	.word	0x20000b68

0800106c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM2_IRQHandler+0x10>)
 8001072:	f002 fc41 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000c84 	.word	0x20000c84

08001080 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM3_IRQHandler+0x10>)
 8001086:	f002 fc37 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000bf4 	.word	0x20000bf4

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f003 fe19 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000ccc 	.word	0x20000ccc

080010a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b0:	f001 f96e 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f004 f9c8 	bl	800547c <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20005000 	.word	0x20005000
 8001118:	00000400 	.word	0x00000400
 800111c:	200000cc 	.word	0x200000cc
 8001120:	20000d28 	.word	0x20000d28

08001124 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	; 0x58
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f004 f9b1 	bl	80054d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <MX_TIM1_Init+0x138>)
 8001170:	4a3e      	ldr	r2, [pc, #248]	; (800126c <MX_TIM1_Init+0x13c>)
 8001172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <MX_TIM1_Init+0x138>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <MX_TIM1_Init+0x138>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6399;
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <MX_TIM1_Init+0x138>)
 8001182:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <MX_TIM1_Init+0x138>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <MX_TIM1_Init+0x138>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <MX_TIM1_Init+0x138>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800119a:	4833      	ldr	r0, [pc, #204]	; (8001268 <MX_TIM1_Init+0x138>)
 800119c:	f001 fd34 	bl	8002c08 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011a6:	f7ff fd3f 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b4:	4619      	mov	r1, r3
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <MX_TIM1_Init+0x138>)
 80011b8:	f002 fe50 	bl	8003e5c <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011c2:	f7ff fd31 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c6:	4828      	ldr	r0, [pc, #160]	; (8001268 <MX_TIM1_Init+0x138>)
 80011c8:	f001 fe46 	bl	8002e58 <HAL_TIM_PWM_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011d2:	f7ff fd29 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e2:	4619      	mov	r1, r3
 80011e4:	4820      	ldr	r0, [pc, #128]	; (8001268 <MX_TIM1_Init+0x138>)
 80011e6:	f003 fbf1 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011f0:	f7ff fd1a 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 31;
 80011f8:	231f      	movs	r3, #31
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_TIM1_Init+0x138>)
 800121a:	f002 fd61 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001224:	f7ff fd00 	bl	8000c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM1_Init+0x138>)
 800124c:	f003 fc1c 	bl	8004a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001256:	f7ff fce7 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM1_Init+0x138>)
 800125c:	f000 fa02 	bl	8001664 <HAL_TIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	; 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000c3c 	.word	0x20000c3c
 800126c:	40012c00 	.word	0x40012c00

08001270 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_TIM2_Init+0xdc>)
 800129c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM2_Init+0xdc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_TIM2_Init+0xdc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_TIM2_Init+0xdc>)
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_TIM2_Init+0xdc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_TIM2_Init+0xdc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c2:	4822      	ldr	r0, [pc, #136]	; (800134c <MX_TIM2_Init+0xdc>)
 80012c4:	f001 fca0 	bl	8002c08 <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80012ce:	f7ff fcab 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4619      	mov	r1, r3
 80012de:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_TIM2_Init+0xdc>)
 80012e0:	f002 fdbc 	bl	8003e5c <HAL_TIM_ConfigClockSource>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012ea:	f7ff fc9d 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_TIM2_Init+0xdc>)
 80012f0:	f002 f8fc 	bl	80034ec <HAL_TIM_IC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012fa:	f7ff fc95 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_TIM2_Init+0xdc>)
 800130e:	f003 fb5d 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001318:	f7ff fc86 	bl	8000c28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM2_Init+0xdc>)
 8001334:	f002 fc40 	bl	8003bb8 <HAL_TIM_IC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800133e:	f7ff fc73 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000c84 	.word	0x20000c84

08001350 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <MX_TIM3_Init+0xe0>)
 8001382:	4a2c      	ldr	r2, [pc, #176]	; (8001434 <MX_TIM3_Init+0xe4>)
 8001384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_TIM3_Init+0xe0>)
 8001388:	f242 720f 	movw	r2, #9999	; 0x270f
 800138c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_TIM3_Init+0xe0>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_TIM3_Init+0xe0>)
 8001396:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800139a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_TIM3_Init+0xe0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_TIM3_Init+0xe0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a8:	4821      	ldr	r0, [pc, #132]	; (8001430 <MX_TIM3_Init+0xe0>)
 80013aa:	f001 fc2d 	bl	8002c08 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013b4:	f7ff fc38 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <MX_TIM3_Init+0xe0>)
 80013c6:	f002 fd49 	bl	8003e5c <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013d0:	f7ff fc2a 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013d4:	4816      	ldr	r0, [pc, #88]	; (8001430 <MX_TIM3_Init+0xe0>)
 80013d6:	f001 fce7 	bl	8002da8 <HAL_TIM_OC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013e0:	f7ff fc22 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4619      	mov	r1, r3
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <MX_TIM3_Init+0xe0>)
 80013f4:	f003 faea 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013fe:	f7ff fc13 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM3_Init+0xe0>)
 800141a:	f002 fb75 	bl	8003b08 <HAL_TIM_OC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001424:	f7ff fc00 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000bf4 	.word	0x20000bf4
 8001434:	40000400 	.word	0x40000400

08001438 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_TIM4_Init+0xa8>)
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <MX_TIM4_Init+0xac>)
 800145e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_TIM4_Init+0xa8>)
 8001462:	2247      	movs	r2, #71	; 0x47
 8001464:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_TIM4_Init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_TIM4_Init+0xa8>)
 800146e:	2263      	movs	r2, #99	; 0x63
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_TIM4_Init+0xa8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_TIM4_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MX_TIM4_Init+0xa8>)
 8001480:	f001 fcea 	bl	8002e58 <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800148a:	f7ff fbcd 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	4619      	mov	r1, r3
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <MX_TIM4_Init+0xa8>)
 800149e:	f003 fa95 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80014a8:	f7ff fbbe 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ac:	2360      	movs	r3, #96	; 0x60
 80014ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM4_Init+0xa8>)
 80014c4:	f002 fc0c 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014ce:	f7ff fbab 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014d2:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM4_Init+0xa8>)
 80014d4:	f000 f8c6 	bl	8001664 <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000bac 	.word	0x20000bac
 80014e4:	40000800 	.word	0x40000800

080014e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a43      	ldr	r2, [pc, #268]	; (8001610 <HAL_TIM_Base_MspInit+0x128>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d134      	bne.n	8001572 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a41      	ldr	r2, [pc, #260]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 800150e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001520:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001522:	4a3e      	ldr	r2, [pc, #248]	; (800161c <HAL_TIM_Base_MspInit+0x134>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001528:	2210      	movs	r2, #16
 800152a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001538:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 800153a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001546:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001554:	4830      	ldr	r0, [pc, #192]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001556:	f000 fae1 	bl	8001b1c <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8001560:	f7ff fb62 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a2c      	ldr	r2, [pc, #176]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
 800156a:	4a2b      	ldr	r2, [pc, #172]	; (8001618 <HAL_TIM_Base_MspInit+0x130>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001570:	e04a      	b.n	8001608 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157a:	d12c      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	4a24      	ldr	r2, [pc, #144]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	61d3      	str	r3, [r2, #28]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4619      	mov	r1, r3
 80015be:	4818      	ldr	r0, [pc, #96]	; (8001620 <HAL_TIM_Base_MspInit+0x138>)
 80015c0:	f000 fd4a 	bl	8002058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	201c      	movs	r0, #28
 80015ca:	f000 fa70 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ce:	201c      	movs	r0, #28
 80015d0:	f000 fa89 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 80015d4:	e018      	b.n	8001608 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM3)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_TIM_Base_MspInit+0x13c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d113      	bne.n	8001608 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_Base_MspInit+0x12c>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	201d      	movs	r0, #29
 80015fe:	f000 fa56 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001602:	201d      	movs	r0, #29
 8001604:	f000 fa6f 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40012c00 	.word	0x40012c00
 8001614:	40021000 	.word	0x40021000
 8001618:	20000b68 	.word	0x20000b68
 800161c:	4002001c 	.word	0x4002001c
 8001620:	40010800 	.word	0x40010800
 8001624:	40000400 	.word	0x40000400

08001628 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_TIM_PWM_MspInit+0x34>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10b      	bne.n	8001652 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_TIM_PWM_MspInit+0x38>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_TIM_PWM_MspInit+0x38>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_TIM_PWM_MspInit+0x38>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40000800 	.word	0x40000800
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_TIM_MspPostInit+0x98>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d119      	bne.n	80016b8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_TIM_MspPostInit+0x9c>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_TIM_MspPostInit+0x9c>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_TIM_MspPostInit+0x9c>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <HAL_TIM_MspPostInit+0xa0>)
 80016b2:	f000 fcd1 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016b6:	e01c      	b.n	80016f2 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_TIM_MspPostInit+0xa4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d117      	bne.n	80016f2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_TIM_MspPostInit+0x9c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_TIM_MspPostInit+0x9c>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6193      	str	r3, [r2, #24]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_TIM_MspPostInit+0x9c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <HAL_TIM_MspPostInit+0xa8>)
 80016ee:	f000 fcb3 	bl	8002058 <HAL_GPIO_Init>
}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800
 8001708:	40000800 	.word	0x40000800
 800170c:	40010c00 	.word	0x40010c00

08001710 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f003 fa01 	bl	8004b4e <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f7ff fa69 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000ccc 	.word	0x20000ccc
 8001760:	40004400 	.word	0x40004400

08001764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x80>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d12b      	bne.n	80017dc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0x84>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x84>)
 800178a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178e:	61d3      	str	r3, [r2, #28]
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0x84>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_UART_MspInit+0x84>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x84>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_UART_MspInit+0x84>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017b4:	230c      	movs	r3, #12
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017c8:	f000 fc46 	bl	8002058 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2026      	movs	r0, #38	; 0x26
 80017d2:	f000 f96c 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d6:	2026      	movs	r0, #38	; 0x26
 80017d8:	f000 f985 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800

080017f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001816:	f7ff fc85 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f003 fe35 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff f8c7 	bl	80009b0 <main>
  bx lr
 8001822:	4770      	bx	lr
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800182c:	08006d40 	.word	0x08006d40
  ldr r2, =_sbss
 8001830:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001834:	20000d24 	.word	0x20000d24

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f923 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fba4 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f93b 	bl	8001b02 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f903 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000014 	.word	0x20000014
 80018c4:	20000010 	.word	0x20000010

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000014 	.word	0x20000014
 80018e8:	20000d10 	.word	0x20000d10

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000d10 	.word	0x20000d10

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4906      	ldr	r1, [pc, #24]	; (8001998 <__NVIC_EnableIRQ+0x34>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff2d 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff42 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e043      	b.n	8001bba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_DMA_Init+0xa8>)
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <HAL_DMA_Init+0xac>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_DMA_Init+0xb0>)
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	bffdfff8 	.word	0xbffdfff8
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Start_IT+0x20>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e04a      	b.n	8001c86 <HAL_DMA_Start_IT+0xb6>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d13a      	bne.n	8001c78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2202      	movs	r2, #2
 8001c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f9e8 	bl	8001ffc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 020e 	orr.w	r2, r2, #14
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e00f      	b.n	8001c66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0204 	bic.w	r2, r2, #4
 8001c54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 020a 	orr.w	r2, r2, #10
 8001c64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e005      	b.n	8001c84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d008      	beq.n	8001cb6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e020      	b.n	8001cf8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020e 	bic.w	r2, r2, #14
 8001cc4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d005      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e051      	b.n	8001dca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 020e 	bic.w	r2, r2, #14
 8001d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_DMA_Abort_IT+0xd0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d029      	beq.n	8001da4 <HAL_DMA_Abort_IT+0xa0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_DMA_Abort_IT+0xd4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d022      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x9c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_DMA_Abort_IT+0xd8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01a      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x96>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_DMA_Abort_IT+0xdc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d012      	beq.n	8001d94 <HAL_DMA_Abort_IT+0x90>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_DMA_Abort_IT+0xe0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00a      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x8a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_DMA_Abort_IT+0xe4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d102      	bne.n	8001d88 <HAL_DMA_Abort_IT+0x84>
 8001d82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d86:	e00e      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8c:	e00b      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d92:	e008      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d98:	e005      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9e:	e002      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001da0:	2310      	movs	r3, #16
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001da4:	2301      	movs	r3, #1
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_DMA_Abort_IT+0xe8>)
 8001da8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
    } 
  }
  return status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020008 	.word	0x40020008
 8001dd8:	4002001c 	.word	0x4002001c
 8001ddc:	40020030 	.word	0x40020030
 8001de0:	40020044 	.word	0x40020044
 8001de4:	40020058 	.word	0x40020058
 8001de8:	4002006c 	.word	0x4002006c
 8001dec:	40020000 	.word	0x40020000

08001df0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d04f      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xc8>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d04a      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a66      	ldr	r2, [pc, #408]	; (8001fe0 <HAL_DMA_IRQHandler+0x1f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d029      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xae>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a65      	ldr	r2, [pc, #404]	; (8001fe4 <HAL_DMA_IRQHandler+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xaa>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_DMA_IRQHandler+0x1f8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xa4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a62      	ldr	r2, [pc, #392]	; (8001fec <HAL_DMA_IRQHandler+0x1fc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x9e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a60      	ldr	r2, [pc, #384]	; (8001ff0 <HAL_DMA_IRQHandler+0x200>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00a      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x98>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a5f      	ldr	r2, [pc, #380]	; (8001ff4 <HAL_DMA_IRQHandler+0x204>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d102      	bne.n	8001e82 <HAL_DMA_IRQHandler+0x92>
 8001e7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e80:	e00e      	b.n	8001ea0 <HAL_DMA_IRQHandler+0xb0>
 8001e82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e86:	e00b      	b.n	8001ea0 <HAL_DMA_IRQHandler+0xb0>
 8001e88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e8c:	e008      	b.n	8001ea0 <HAL_DMA_IRQHandler+0xb0>
 8001e8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e92:	e005      	b.n	8001ea0 <HAL_DMA_IRQHandler+0xb0>
 8001e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e98:	e002      	b.n	8001ea0 <HAL_DMA_IRQHandler+0xb0>
 8001e9a:	2340      	movs	r3, #64	; 0x40
 8001e9c:	e000      	b.n	8001ea0 <HAL_DMA_IRQHandler+0xb0>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <HAL_DMA_IRQHandler+0x208>)
 8001ea2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8094 	beq.w	8001fd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb6:	e08e      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d056      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x186>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d051      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020a 	bic.w	r2, r2, #10
 8001eee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a38      	ldr	r2, [pc, #224]	; (8001fe0 <HAL_DMA_IRQHandler+0x1f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d029      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x166>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a37      	ldr	r2, [pc, #220]	; (8001fe4 <HAL_DMA_IRQHandler+0x1f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x162>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a35      	ldr	r2, [pc, #212]	; (8001fe8 <HAL_DMA_IRQHandler+0x1f8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01a      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x15c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <HAL_DMA_IRQHandler+0x1fc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d012      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x156>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a32      	ldr	r2, [pc, #200]	; (8001ff0 <HAL_DMA_IRQHandler+0x200>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x150>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <HAL_DMA_IRQHandler+0x204>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d102      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x14a>
 8001f34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f38:	e00e      	b.n	8001f58 <HAL_DMA_IRQHandler+0x168>
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3e:	e00b      	b.n	8001f58 <HAL_DMA_IRQHandler+0x168>
 8001f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f44:	e008      	b.n	8001f58 <HAL_DMA_IRQHandler+0x168>
 8001f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4a:	e005      	b.n	8001f58 <HAL_DMA_IRQHandler+0x168>
 8001f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f50:	e002      	b.n	8001f58 <HAL_DMA_IRQHandler+0x168>
 8001f52:	2320      	movs	r3, #32
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_IRQHandler+0x168>
 8001f56:	2302      	movs	r3, #2
 8001f58:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_DMA_IRQHandler+0x208>)
 8001f5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d034      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f74:	e02f      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d028      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x1e8>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 020e 	bic.w	r2, r2, #14
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
    }
  }
  return;
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
}
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40020008 	.word	0x40020008
 8001fe4:	4002001c 	.word	0x4002001c
 8001fe8:	40020030 	.word	0x40020030
 8001fec:	40020044 	.word	0x40020044
 8001ff0:	40020058 	.word	0x40020058
 8001ff4:	4002006c 	.word	0x4002006c
 8001ff8:	40020000 	.word	0x40020000

08001ffc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b10      	cmp	r3, #16
 8002028:	d108      	bne.n	800203c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800203a:	e007      	b.n	800204c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b08b      	sub	sp, #44	; 0x2c
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e169      	b.n	8002340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800206c:	2201      	movs	r2, #1
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8158 	bne.w	800233a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a9a      	ldr	r2, [pc, #616]	; (80022f8 <HAL_GPIO_Init+0x2a0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d05e      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 8002094:	4a98      	ldr	r2, [pc, #608]	; (80022f8 <HAL_GPIO_Init+0x2a0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d875      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 800209a:	4a98      	ldr	r2, [pc, #608]	; (80022fc <HAL_GPIO_Init+0x2a4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d058      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020a0:	4a96      	ldr	r2, [pc, #600]	; (80022fc <HAL_GPIO_Init+0x2a4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d86f      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020a6:	4a96      	ldr	r2, [pc, #600]	; (8002300 <HAL_GPIO_Init+0x2a8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d052      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020ac:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x2a8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d869      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020b2:	4a94      	ldr	r2, [pc, #592]	; (8002304 <HAL_GPIO_Init+0x2ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04c      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020b8:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x2ac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d863      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020be:	4a92      	ldr	r2, [pc, #584]	; (8002308 <HAL_GPIO_Init+0x2b0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d046      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020c4:	4a90      	ldr	r2, [pc, #576]	; (8002308 <HAL_GPIO_Init+0x2b0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d85d      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d82a      	bhi.n	8002124 <HAL_GPIO_Init+0xcc>
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d859      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <HAL_GPIO_Init+0x80>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	08002153 	.word	0x08002153
 80020dc:	0800212d 	.word	0x0800212d
 80020e0:	0800213f 	.word	0x0800213f
 80020e4:	08002181 	.word	0x08002181
 80020e8:	08002187 	.word	0x08002187
 80020ec:	08002187 	.word	0x08002187
 80020f0:	08002187 	.word	0x08002187
 80020f4:	08002187 	.word	0x08002187
 80020f8:	08002187 	.word	0x08002187
 80020fc:	08002187 	.word	0x08002187
 8002100:	08002187 	.word	0x08002187
 8002104:	08002187 	.word	0x08002187
 8002108:	08002187 	.word	0x08002187
 800210c:	08002187 	.word	0x08002187
 8002110:	08002187 	.word	0x08002187
 8002114:	08002187 	.word	0x08002187
 8002118:	08002187 	.word	0x08002187
 800211c:	08002135 	.word	0x08002135
 8002120:	08002149 	.word	0x08002149
 8002124:	4a79      	ldr	r2, [pc, #484]	; (800230c <HAL_GPIO_Init+0x2b4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212a:	e02c      	b.n	8002186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e029      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e024      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	3308      	adds	r3, #8
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e01f      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	330c      	adds	r3, #12
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e01a      	b.n	8002188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215a:	2304      	movs	r3, #4
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e013      	b.n	8002188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	611a      	str	r2, [r3, #16]
          break;
 8002172:	e009      	b.n	8002188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002174:	2308      	movs	r3, #8
 8002176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
          break;
 800217e:	e003      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x130>
          break;
 8002186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d801      	bhi.n	8002192 <HAL_GPIO_Init+0x13a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_Init+0x13e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d802      	bhi.n	80021a4 <HAL_GPIO_Init+0x14c>
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x152>
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3b08      	subs	r3, #8
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	210f      	movs	r1, #15
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	6a39      	ldr	r1, [r7, #32]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80b1 	beq.w	800233a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d8:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a4c      	ldr	r2, [pc, #304]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_GPIO_Init+0x2bc>)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_GPIO_Init+0x2c0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x1ec>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <HAL_GPIO_Init+0x2c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1e8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_GPIO_Init+0x2c8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <HAL_GPIO_Init+0x2cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1e0>
 8002234:	2303      	movs	r3, #3
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002238:	2304      	movs	r3, #4
 800223a:	e004      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 800223c:	2302      	movs	r3, #2
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002244:	2300      	movs	r3, #0
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	f002 0203 	and.w	r2, r2, #3
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	4093      	lsls	r3, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002256:	492f      	ldr	r1, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x2bc>)
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	492c      	ldr	r1, [pc, #176]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	4928      	ldr	r1, [pc, #160]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	491e      	ldr	r1, [pc, #120]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4914      	ldr	r1, [pc, #80]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d021      	beq.n	800232c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	490e      	ldr	r1, [pc, #56]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e021      	b.n	800233a <HAL_GPIO_Init+0x2e2>
 80022f6:	bf00      	nop
 80022f8:	10320000 	.word	0x10320000
 80022fc:	10310000 	.word	0x10310000
 8002300:	10220000 	.word	0x10220000
 8002304:	10210000 	.word	0x10210000
 8002308:	10120000 	.word	0x10120000
 800230c:	10110000 	.word	0x10110000
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000
 8002318:	40010800 	.word	0x40010800
 800231c:	40010c00 	.word	0x40010c00
 8002320:	40011000 	.word	0x40011000
 8002324:	40011400 	.word	0x40011400
 8002328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_GPIO_Init+0x304>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	43db      	mvns	r3, r3
 8002334:	4909      	ldr	r1, [pc, #36]	; (800235c <HAL_GPIO_Init+0x304>)
 8002336:	4013      	ands	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3301      	adds	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f ae8e 	bne.w	800206c <HAL_GPIO_Init+0x14>
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	372c      	adds	r7, #44	; 0x2c
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f806 	bl	80023c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e26c      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8087 	beq.w	8002502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d00c      	beq.n	800241a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002400:	4b8f      	ldr	r3, [pc, #572]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d112      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
 800240c:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06c      	beq.n	8002500 <HAL_RCC_OscConfig+0x12c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d168      	bne.n	8002500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e246      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x76>
 800243c:	4b80      	ldr	r3, [pc, #512]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a7f      	ldr	r2, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e02e      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0xbc>
 8002476:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 8002490:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fa1c 	bl	80018ec <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fa18 	bl	80018ec <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1fa      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe4>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fa08 	bl	80018ec <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fa04 	bl	80018ec <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1e6      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x10c>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1ba      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4939      	ldr	r1, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff f9bd 	bl	80018ec <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff f9b9 	bl	80018ec <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e19b      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f99c 	bl	80018ec <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff f998 	bl	80018ec <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e17a      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03a      	beq.n	8002658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff f97c 	bl	80018ec <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f978 	bl	80018ec <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e15a      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 fad8 	bl	8002bcc <RCC_Delay>
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7ff f962 	bl	80018ec <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	e00f      	b.n	800264c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff f95e 	bl	80018ec <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d908      	bls.n	800264c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e140      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	42420000 	.word	0x42420000
 8002648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e9      	bne.n	800262c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a6 	beq.w	80027b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b91      	ldr	r3, [pc, #580]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7ff f91f 	bl	80018ec <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7ff f91b 	bl	80018ec <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0fd      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026d8:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e02d      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x334>
 80026ee:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a75      	ldr	r2, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a72      	ldr	r2, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	e01c      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x356>
 8002710:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a6c      	ldr	r2, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a69      	ldr	r2, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a66      	ldr	r2, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff f8cf 	bl	80018ec <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff f8cb 	bl	80018ec <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0ab      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ee      	beq.n	8002752 <HAL_RCC_OscConfig+0x37e>
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7ff f8b9 	bl	80018ec <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff f8b5 	bl	80018ec <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e095      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8081 	beq.w	80028be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d061      	beq.n	800288c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d146      	bne.n	800285e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff f889 	bl	80018ec <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7ff f885 	bl	80018ec <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e067      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f0:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d108      	bne.n	8002818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	492d      	ldr	r1, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a19      	ldr	r1, [r3, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	430b      	orrs	r3, r1
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff f859 	bl	80018ec <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7ff f855 	bl	80018ec <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e037      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
 800285c:	e02f      	b.n	80028be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff f842 	bl	80018ec <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff f83e 	bl	80018ec <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e020      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x498>
 800288a:	e018      	b.n	80028be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420060 	.word	0x42420060

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4965      	ldr	r1, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800293a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d040      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e073      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe ff92 	bl	80018ec <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe ff8e 	bl	80018ec <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e053      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d210      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fef0 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08006b70 	.word	0x08006b70
 8002aa0:	2000000c 	.word	0x2000000c
 8002aa4:	20000010 	.word	0x20000010

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b490      	push	{r4, r7}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ab0:	1d3c      	adds	r4, r7, #4
 8002ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ab8:	f240 2301 	movw	r3, #513	; 0x201
 8002abc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x46>
 8002ae6:	e02d      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aea:	623b      	str	r3, [r7, #32]
      break;
 8002aec:	e02d      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002afa:	4413      	add	r3, r2
 8002afc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c5b      	lsrs	r3, r3, #17
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b26:	fb02 f203 	mul.w	r2, r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e004      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	623b      	str	r3, [r7, #32]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b46:	623b      	str	r3, [r7, #32]
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc90      	pop	{r4, r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	08006914 	.word	0x08006914
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	003d0900 	.word	0x003d0900

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	2000000c 	.word	0x2000000c

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b80:	f7ff fff2 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08006b80 	.word	0x08006b80

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba8:	f7ff ffde 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0adb      	lsrs	r3, r3, #11
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08006b80 	.word	0x08006b80

08002bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <RCC_Delay+0x34>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <RCC_Delay+0x38>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	0a5b      	lsrs	r3, r3, #9
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002be8:	bf00      	nop
  }
  while (Delay --);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	60fa      	str	r2, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f9      	bne.n	8002be8 <RCC_Delay+0x1c>
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	2000000c 	.word	0x2000000c
 8002c04:	10624dd3 	.word	0x10624dd3

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e041      	b.n	8002c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fc5a 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f001 fb0e 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d001      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e03a      	b.n	8002d36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_TIM_Base_Start_IT+0x98>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x58>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d009      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x58>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x58>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d010      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	e007      	b.n	8002d34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800

08002d4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a1a      	ldr	r2, [r3, #32]
 8002d6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <HAL_TIM_Base_Stop_IT+0x48>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	f240 4344 	movw	r3, #1092	; 0x444
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_Base_Stop_IT+0x48>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e041      	b.n	8002e3e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f839 	bl	8002e46 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f001 fa3e 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e041      	b.n	8002eee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe fbd2 	bl	8001628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f001 f9e6 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x24>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e022      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d109      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e015      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIM_PWM_Start+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e008      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e05e      	b.n	8003028 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x82>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f78:	e013      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Start+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start+0xa2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f98:	e003      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 fce9 	bl	8004982 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_TIM_PWM_Start+0x138>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d107      	bne.n	8002fca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_TIM_PWM_Start+0x138>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIM_PWM_Start+0x13c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_TIM_PWM_Start+0x140>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d111      	bne.n	8003016 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d010      	beq.n	8003026 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	e007      	b.n	8003026 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800

0800303c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_TIM_PWM_Start_DMA+0x28>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e022      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x6e>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d109      	bne.n	800307e <HAL_TIM_PWM_Start_DMA+0x42>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e015      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x6e>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e008      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x6e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	e14e      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start_DMA+0x90>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e022      	b.n	8003112 <HAL_TIM_PWM_Start_DMA+0xd6>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start_DMA+0xaa>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e015      	b.n	8003112 <HAL_TIM_PWM_Start_DMA+0xd6>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start_DMA+0xc4>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d024      	beq.n	8003160 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start_DMA+0xea>
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e114      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d104      	bne.n	8003136 <HAL_TIM_PWM_Start_DMA+0xfa>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003134:	e016      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b04      	cmp	r3, #4
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start_DMA+0x10a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003144:	e00e      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start_DMA+0x11a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	e006      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800315e:	e001      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0f5      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	f200 80ae 	bhi.w	80032c8 <HAL_TIM_PWM_Start_DMA+0x28c>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_PWM_Start_DMA+0x138>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080032c9 	.word	0x080032c9
 800317c:	080032c9 	.word	0x080032c9
 8003180:	080032c9 	.word	0x080032c9
 8003184:	080031f1 	.word	0x080031f1
 8003188:	080032c9 	.word	0x080032c9
 800318c:	080032c9 	.word	0x080032c9
 8003190:	080032c9 	.word	0x080032c9
 8003194:	08003239 	.word	0x08003239
 8003198:	080032c9 	.word	0x080032c9
 800319c:	080032c9 	.word	0x080032c9
 80031a0:	080032c9 	.word	0x080032c9
 80031a4:	08003281 	.word	0x08003281
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	4a6a      	ldr	r2, [pc, #424]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	4a69      	ldr	r2, [pc, #420]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	4a68      	ldr	r2, [pc, #416]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 80031be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3334      	adds	r3, #52	; 0x34
 80031cc:	461a      	mov	r2, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	f7fe fcfe 	bl	8001bd0 <HAL_DMA_Start_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0b8      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ec:	60da      	str	r2, [r3, #12]
      break;
 80031ee:	e06c      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	4a57      	ldr	r2, [pc, #348]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	461a      	mov	r2, r3
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	f7fe fcda 	bl	8001bd0 <HAL_DMA_Start_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e094      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003234:	60da      	str	r2, [r3, #12]
      break;
 8003236:	e048      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a46      	ldr	r2, [pc, #280]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a45      	ldr	r2, [pc, #276]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4a44      	ldr	r2, [pc, #272]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 800324e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	333c      	adds	r3, #60	; 0x3c
 800325c:	461a      	mov	r2, r3
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	f7fe fcb6 	bl	8001bd0 <HAL_DMA_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e070      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	60da      	str	r2, [r3, #12]
      break;
 800327e:	e024      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003296:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3340      	adds	r3, #64	; 0x40
 80032a4:	461a      	mov	r2, r3
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	f7fe fc92 	bl	8001bd0 <HAL_DMA_Start_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04c      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c4:	60da      	str	r2, [r3, #12]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80032c8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fb55 	bl	8004982 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x328>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x328>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x2de>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d009      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x2de>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x2de>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d010      	beq.n	800334e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	e007      	b.n	800334e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08004159 	.word	0x08004159
 800335c:	08004201 	.word	0x08004201
 8003360:	080040c7 	.word	0x080040c7
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800

08003370 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d855      	bhi.n	800342c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033bd 	.word	0x080033bd
 800338c:	0800342d 	.word	0x0800342d
 8003390:	0800342d 	.word	0x0800342d
 8003394:	0800342d 	.word	0x0800342d
 8003398:	080033d9 	.word	0x080033d9
 800339c:	0800342d 	.word	0x0800342d
 80033a0:	0800342d 	.word	0x0800342d
 80033a4:	0800342d 	.word	0x0800342d
 80033a8:	080033f5 	.word	0x080033f5
 80033ac:	0800342d 	.word	0x0800342d
 80033b0:	0800342d 	.word	0x0800342d
 80033b4:	0800342d 	.word	0x0800342d
 80033b8:	08003411 	.word	0x08003411
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fc97 	bl	8001d04 <HAL_DMA_Abort_IT>
      break;
 80033d6:	e02a      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fc89 	bl	8001d04 <HAL_DMA_Abort_IT>
      break;
 80033f2:	e01c      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003402:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fc7b 	bl	8001d04 <HAL_DMA_Abort_IT>
      break;
 800340e:	e00e      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800341e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fc6d 	bl	8001d04 <HAL_DMA_Abort_IT>
      break;
 800342a:	e000      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800342c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f001 faa3 	bl	8004982 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d117      	bne.n	8003476 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	f240 4344 	movw	r3, #1092	; 0x444
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	f240 4344 	movw	r3, #1092	; 0x444
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Stop_DMA+0x146>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b4:	e013      	b.n	80034de <HAL_TIM_PWM_Stop_DMA+0x16e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0x156>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	e00b      	b.n	80034de <HAL_TIM_PWM_Stop_DMA+0x16e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Stop_DMA+0x166>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d4:	e003      	b.n	80034de <HAL_TIM_PWM_Stop_DMA+0x16e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40012c00 	.word	0x40012c00

080034ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f839 	bl	800358a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fe9c 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_IC_Start_IT+0x1a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e013      	b.n	80035de <HAL_TIM_IC_Start_IT+0x42>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_IC_Start_IT+0x2a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e00b      	b.n	80035de <HAL_TIM_IC_Start_IT+0x42>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_IC_Start_IT+0x3a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	e003      	b.n	80035de <HAL_TIM_IC_Start_IT+0x42>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_TIM_IC_Start_IT+0x54>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e013      	b.n	8003618 <HAL_TIM_IC_Start_IT+0x7c>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d104      	bne.n	8003600 <HAL_TIM_IC_Start_IT+0x64>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e00b      	b.n	8003618 <HAL_TIM_IC_Start_IT+0x7c>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b08      	cmp	r3, #8
 8003604:	d104      	bne.n	8003610 <HAL_TIM_IC_Start_IT+0x74>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e003      	b.n	8003618 <HAL_TIM_IC_Start_IT+0x7c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003616:	b2db      	uxtb	r3, r3
 8003618:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003620:	7bbb      	ldrb	r3, [r7, #14]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0b3      	b.n	8003792 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_TIM_IC_Start_IT+0x9e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	e013      	b.n	8003662 <HAL_TIM_IC_Start_IT+0xc6>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d104      	bne.n	800364a <HAL_TIM_IC_Start_IT+0xae>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003648:	e00b      	b.n	8003662 <HAL_TIM_IC_Start_IT+0xc6>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d104      	bne.n	800365a <HAL_TIM_IC_Start_IT+0xbe>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	e003      	b.n	8003662 <HAL_TIM_IC_Start_IT+0xc6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <HAL_TIM_IC_Start_IT+0xd6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003670:	e013      	b.n	800369a <HAL_TIM_IC_Start_IT+0xfe>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d104      	bne.n	8003682 <HAL_TIM_IC_Start_IT+0xe6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003680:	e00b      	b.n	800369a <HAL_TIM_IC_Start_IT+0xfe>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d104      	bne.n	8003692 <HAL_TIM_IC_Start_IT+0xf6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	e003      	b.n	800369a <HAL_TIM_IC_Start_IT+0xfe>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d841      	bhi.n	8003724 <HAL_TIM_IC_Start_IT+0x188>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <HAL_TIM_IC_Start_IT+0x10c>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	08003725 	.word	0x08003725
 80036b0:	08003725 	.word	0x08003725
 80036b4:	08003725 	.word	0x08003725
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	08003725 	.word	0x08003725
 80036c0:	08003725 	.word	0x08003725
 80036c4:	08003725 	.word	0x08003725
 80036c8:	08003701 	.word	0x08003701
 80036cc:	08003725 	.word	0x08003725
 80036d0:	08003725 	.word	0x08003725
 80036d4:	08003725 	.word	0x08003725
 80036d8:	08003713 	.word	0x08003713
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0202 	orr.w	r2, r2, #2
 80036ea:	60da      	str	r2, [r3, #12]
      break;
 80036ec:	e01b      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0204 	orr.w	r2, r2, #4
 80036fc:	60da      	str	r2, [r3, #12]
      break;
 80036fe:	e012      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0208 	orr.w	r2, r2, #8
 800370e:	60da      	str	r2, [r3, #12]
      break;
 8003710:	e009      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0210 	orr.w	r2, r2, #16
 8003720:	60da      	str	r2, [r3, #12]
      break;
 8003722:	e000      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003724:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f001 f927 	bl	8004982 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIM_IC_Start_IT+0x200>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_TIM_IC_Start_IT+0x1c0>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d009      	beq.n	800375c <HAL_TIM_IC_Start_IT+0x1c0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_TIM_IC_Start_IT+0x204>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_TIM_IC_Start_IT+0x1c0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <HAL_TIM_IC_Start_IT+0x208>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d010      	beq.n	8003790 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	e007      	b.n	8003790 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800

080037a8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d841      	bhi.n	800383c <HAL_TIM_IC_Stop_IT+0x94>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <HAL_TIM_IC_Stop_IT+0x18>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	0800383d 	.word	0x0800383d
 80037c8:	0800383d 	.word	0x0800383d
 80037cc:	0800383d 	.word	0x0800383d
 80037d0:	08003807 	.word	0x08003807
 80037d4:	0800383d 	.word	0x0800383d
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	0800383d 	.word	0x0800383d
 80037e0:	08003819 	.word	0x08003819
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	0800382b 	.word	0x0800382b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0202 	bic.w	r2, r2, #2
 8003802:	60da      	str	r2, [r3, #12]
      break;
 8003804:	e01b      	b.n	800383e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0204 	bic.w	r2, r2, #4
 8003814:	60da      	str	r2, [r3, #12]
      break;
 8003816:	e012      	b.n	800383e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0208 	bic.w	r2, r2, #8
 8003826:	60da      	str	r2, [r3, #12]
      break;
 8003828:	e009      	b.n	800383e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0210 	bic.w	r2, r2, #16
 8003838:	60da      	str	r2, [r3, #12]
      break;
 800383a:	e000      	b.n	800383e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800383c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f001 f89b 	bl	8004982 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	f241 1311 	movw	r3, #4369	; 0x1111
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10f      	bne.n	800387c <HAL_TIM_IC_Stop_IT+0xd4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	f240 4344 	movw	r3, #1092	; 0x444
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_TIM_IC_Stop_IT+0xd4>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_TIM_IC_Stop_IT+0xe4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388a:	e013      	b.n	80038b4 <HAL_TIM_IC_Stop_IT+0x10c>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d104      	bne.n	800389c <HAL_TIM_IC_Stop_IT+0xf4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389a:	e00b      	b.n	80038b4 <HAL_TIM_IC_Stop_IT+0x10c>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d104      	bne.n	80038ac <HAL_TIM_IC_Stop_IT+0x104>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038aa:	e003      	b.n	80038b4 <HAL_TIM_IC_Stop_IT+0x10c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <HAL_TIM_IC_Stop_IT+0x11c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c2:	e013      	b.n	80038ec <HAL_TIM_IC_Stop_IT+0x144>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d104      	bne.n	80038d4 <HAL_TIM_IC_Stop_IT+0x12c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d2:	e00b      	b.n	80038ec <HAL_TIM_IC_Stop_IT+0x144>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d104      	bne.n	80038e4 <HAL_TIM_IC_Stop_IT+0x13c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e2:	e003      	b.n	80038ec <HAL_TIM_IC_Stop_IT+0x144>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop

080038f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd f92a 	bl	8000b94 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fb92 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fb98 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0204 	mvn.w	r2, #4
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd f900 	bl	8000b94 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb68 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb6e 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d122      	bne.n	80039fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d11b      	bne.n	80039fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0208 	mvn.w	r2, #8
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2204      	movs	r2, #4
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd f8d6 	bl	8000b94 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fb3e 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fb44 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d122      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d11b      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0210 	mvn.w	r2, #16
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2208      	movs	r2, #8
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd f8ac 	bl	8000b94 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fb14 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb1a 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0201 	mvn.w	r2, #1
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd f85c 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b80      	cmp	r3, #128	; 0x80
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f001 f84a 	bl	8004b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fae7 	bl	80040a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0220 	mvn.w	r2, #32
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f001 f815 	bl	8004b2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e046      	b.n	8003bb0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d839      	bhi.n	8003ba4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003ba5 	.word	0x08003ba5
 8003b40:	08003ba5 	.word	0x08003ba5
 8003b44:	08003ba5 	.word	0x08003ba5
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003ba5 	.word	0x08003ba5
 8003b50:	08003ba5 	.word	0x08003ba5
 8003b54:	08003ba5 	.word	0x08003ba5
 8003b58:	08003b89 	.word	0x08003b89
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003ba5 	.word	0x08003ba5
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003b97 	.word	0x08003b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fbda 	bl	800432c <TIM_OC1_SetConfig>
      break;
 8003b78:	e015      	b.n	8003ba6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fc39 	bl	80043f8 <TIM_OC2_SetConfig>
      break;
 8003b86:	e00e      	b.n	8003ba6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fc9c 	bl	80044cc <TIM_OC3_SetConfig>
      break;
 8003b94:	e007      	b.n	8003ba6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fcff 	bl	80045a0 <TIM_OC4_SetConfig>
      break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e082      	b.n	8003cd8 <HAL_TIM_IC_ConfigChannel+0x120>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f000 fd24 	bl	800463c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 020c 	bic.w	r2, r2, #12
 8003c02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6999      	ldr	r1, [r3, #24]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	619a      	str	r2, [r3, #24]
 8003c16:	e05a      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d11c      	bne.n	8003c58 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f000 fd8d 	bl	800474c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6999      	ldr	r1, [r3, #24]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	619a      	str	r2, [r3, #24]
 8003c56:	e03a      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11b      	bne.n	8003c96 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f000 fdd8 	bl	8004822 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 020c 	bic.w	r2, r2, #12
 8003c80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
 8003c94:	e01b      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f000 fdf7 	bl	8004898 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cb8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	021a      	lsls	r2, r3, #8
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0ac      	b.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	f200 809f 	bhi.w	8003e48 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08003e49 	.word	0x08003e49
 8003d18:	08003e49 	.word	0x08003e49
 8003d1c:	08003e49 	.word	0x08003e49
 8003d20:	08003d85 	.word	0x08003d85
 8003d24:	08003e49 	.word	0x08003e49
 8003d28:	08003e49 	.word	0x08003e49
 8003d2c:	08003e49 	.word	0x08003e49
 8003d30:	08003dc7 	.word	0x08003dc7
 8003d34:	08003e49 	.word	0x08003e49
 8003d38:	08003e49 	.word	0x08003e49
 8003d3c:	08003e49 	.word	0x08003e49
 8003d40:	08003e07 	.word	0x08003e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 faee 	bl	800432c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0204 	bic.w	r2, r2, #4
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	619a      	str	r2, [r3, #24]
      break;
 8003d82:	e062      	b.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb34 	bl	80043f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	021a      	lsls	r2, r3, #8
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	619a      	str	r2, [r3, #24]
      break;
 8003dc4:	e041      	b.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fb7d 	bl	80044cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0208 	orr.w	r2, r2, #8
 8003de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0204 	bic.w	r2, r2, #4
 8003df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	61da      	str	r2, [r3, #28]
      break;
 8003e04:	e021      	b.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fbc7 	bl	80045a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69d9      	ldr	r1, [r3, #28]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	021a      	lsls	r2, r3, #8
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	61da      	str	r2, [r3, #28]
      break;
 8003e46:	e000      	b.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIM_ConfigClockSource+0x18>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0b3      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x180>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eac:	d03e      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0xd0>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	f200 8087 	bhi.w	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eba:	f000 8085 	beq.w	8003fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d87f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	d01a      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xa2>
 8003ec8:	2b70      	cmp	r3, #112	; 0x70
 8003eca:	d87b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ecc:	2b60      	cmp	r3, #96	; 0x60
 8003ece:	d050      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x116>
 8003ed0:	2b60      	cmp	r3, #96	; 0x60
 8003ed2:	d877      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ed4:	2b50      	cmp	r3, #80	; 0x50
 8003ed6:	d03c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xf6>
 8003ed8:	2b50      	cmp	r3, #80	; 0x50
 8003eda:	d873      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d058      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x136>
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d86f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ee4:	2b30      	cmp	r3, #48	; 0x30
 8003ee6:	d064      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ee8:	2b30      	cmp	r3, #48	; 0x30
 8003eea:	d86b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d060      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d867      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d05c      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d05a      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003efc:	e062      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f000 fd19 	bl	8004944 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	609a      	str	r2, [r3, #8]
      break;
 8003f2a:	e04e      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f000 fd02 	bl	8004944 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f4e:	609a      	str	r2, [r3, #8]
      break;
 8003f50:	e03b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 fbc6 	bl	80046f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2150      	movs	r1, #80	; 0x50
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fcd0 	bl	8004910 <TIM_ITRx_SetConfig>
      break;
 8003f70:	e02b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 fc20 	bl	80047c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2160      	movs	r1, #96	; 0x60
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fcc0 	bl	8004910 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e01b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fba6 	bl	80046f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2140      	movs	r1, #64	; 0x40
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fcb0 	bl	8004910 <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e00b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fca7 	bl	8004910 <TIM_ITRx_SetConfig>
        break;
 8003fc2:	e002      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d831      	bhi.n	800405c <HAL_TIM_ReadCapturedValue+0x78>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004035 	.word	0x08004035
 8004004:	0800405d 	.word	0x0800405d
 8004008:	0800405d 	.word	0x0800405d
 800400c:	0800405d 	.word	0x0800405d
 8004010:	0800403f 	.word	0x0800403f
 8004014:	0800405d 	.word	0x0800405d
 8004018:	0800405d 	.word	0x0800405d
 800401c:	0800405d 	.word	0x0800405d
 8004020:	08004049 	.word	0x08004049
 8004024:	0800405d 	.word	0x0800405d
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800405d 	.word	0x0800405d
 8004030:	08004053 	.word	0x08004053
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	60fb      	str	r3, [r7, #12]

      break;
 800403c:	e00f      	b.n	800405e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	60fb      	str	r3, [r7, #12]

      break;
 8004046:	e00a      	b.n	800405e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	60fb      	str	r3, [r7, #12]

      break;
 8004050:	e005      	b.n	800405e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	60fb      	str	r3, [r7, #12]

      break;
 800405a:	e000      	b.n	800405e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800405c:	bf00      	nop
  }

  return tmpreg;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop

0800406c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d107      	bne.n	80040ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	e02a      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2202      	movs	r2, #2
 80040fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004106:	e01d      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d107      	bne.n	8004122 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2204      	movs	r2, #4
 8004116:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	e010      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2208      	movs	r2, #8
 8004130:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413a:	e003      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ffb5 	bl	80040b4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d10b      	bne.n	8004188 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d136      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004186:	e031      	b.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d10b      	bne.n	80041aa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d125      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a8:	e020      	b.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d10b      	bne.n	80041cc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2204      	movs	r2, #4
 80041b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d114      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ca:	e00f      	b.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10a      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2208      	movs	r2, #8
 80041da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff ff46 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d103      	bne.n	8004220 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	771a      	strb	r2, [r3, #28]
 800421e:	e019      	b.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d103      	bne.n	8004232 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2202      	movs	r2, #2
 800422e:	771a      	strb	r2, [r3, #28]
 8004230:	e010      	b.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d103      	bne.n	8004244 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2204      	movs	r2, #4
 8004240:	771a      	strb	r2, [r3, #28]
 8004242:	e007      	b.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d102      	bne.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2208      	movs	r2, #8
 8004252:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff ff1b 	bl	8004090 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a29      	ldr	r2, [pc, #164]	; (8004320 <TIM_Base_SetConfig+0xb8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00b      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d007      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a26      	ldr	r2, [pc, #152]	; (8004324 <TIM_Base_SetConfig+0xbc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a25      	ldr	r2, [pc, #148]	; (8004328 <TIM_Base_SetConfig+0xc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d108      	bne.n	80042aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <TIM_Base_SetConfig+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <TIM_Base_SetConfig+0xbc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a18      	ldr	r2, [pc, #96]	; (8004328 <TIM_Base_SetConfig+0xc0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a07      	ldr	r2, [pc, #28]	; (8004320 <TIM_Base_SetConfig+0xb8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800

0800432c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0201 	bic.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <TIM_OC1_SetConfig+0xc8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d10c      	bne.n	80043a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0308 	bic.w	r3, r3, #8
 800438e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <TIM_OC1_SetConfig+0xc8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00

080043f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0210 	bic.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <TIM_OC2_SetConfig+0xd0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10d      	bne.n	8004474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800445e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <TIM_OC2_SetConfig+0xd0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d113      	bne.n	80044a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00

080044cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <TIM_OC3_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10d      	bne.n	8004546 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <TIM_OC3_SetConfig+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d113      	bne.n	8004576 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40012c00 	.word	0x40012c00

080045a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <TIM_OC4_SetConfig+0x98>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00

0800463c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <TIM_TI1_SetConfig+0xa8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_TI1_SetConfig+0x46>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d007      	beq.n	8004682 <TIM_TI1_SetConfig+0x46>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <TIM_TI1_SetConfig+0xac>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_TI1_SetConfig+0x46>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <TIM_TI1_SetConfig+0xb0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d101      	bne.n	8004686 <TIM_TI1_SetConfig+0x4a>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <TIM_TI1_SetConfig+0x4c>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e003      	b.n	80046a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f023 030a 	bic.w	r3, r3, #10
 80046c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 030a 	and.w	r3, r3, #10
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800

080046f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f023 0201 	bic.w	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 030a 	bic.w	r3, r3, #10
 800472c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0210 	bic.w	r2, r3, #16
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	031b      	lsls	r3, r3, #12
 8004790:	b29b      	uxth	r3, r3
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f023 0210 	bic.w	r2, r3, #16
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004800:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004822:	b480      	push	{r7}
 8004824:	b087      	sub	sp, #28
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	b2db      	uxtb	r3, r3
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004872:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	031b      	lsls	r3, r3, #12
 80048dc:	b29b      	uxth	r3, r3
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	031b      	lsls	r3, r3, #12
 80048f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	f043 0307 	orr.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	609a      	str	r2, [r3, #8]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	021a      	lsls	r2, r3, #8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	431a      	orrs	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004982:	b480      	push	{r7}
 8004984:	b087      	sub	sp, #28
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	2201      	movs	r2, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	401a      	ands	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e046      	b.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d009      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10c      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800

08004a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e03d      	b.n	8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e03f      	b.n	8004be0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fc fdf5 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2224      	movs	r2, #36	; 0x24
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fbe4 	bl	8005360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d130      	bne.n	8004c64 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_UART_Transmit_IT+0x26>
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e029      	b.n	8004c66 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit_IT+0x38>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e022      	b.n	8004c66 <HAL_UART_Transmit_IT+0x7e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2221      	movs	r2, #33	; 0x21
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c5e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d11d      	bne.n	8004cc6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_UART_Receive_IT+0x26>
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e016      	b.n	8004cc8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Receive_IT+0x38>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e00f      	b.n	8004cc8 <HAL_UART_Receive_IT+0x58>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f9c5 	bl	800504c <UART_Start_Receive_IT>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	e000      	b.n	8004cc8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_UART_IRQHandler+0x52>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa76 	bl	800520c <UART_Receive_IT>
      return;
 8004d20:	e17b      	b.n	800501a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80b1 	beq.w	8004e8c <HAL_UART_IRQHandler+0x1bc>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_UART_IRQHandler+0x70>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a6 	beq.w	8004e8c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_UART_IRQHandler+0x90>
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f043 0201 	orr.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_UART_IRQHandler+0xb0>
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f043 0202 	orr.w	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_UART_IRQHandler+0xd0>
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f043 0204 	orr.w	r2, r3, #4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00f      	beq.n	8004dca <HAL_UART_IRQHandler+0xfa>
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_UART_IRQHandler+0xee>
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f043 0208 	orr.w	r2, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 811e 	beq.w	8005010 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_UART_IRQHandler+0x11e>
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa0f 	bl	800520c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <HAL_UART_IRQHandler+0x146>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d031      	beq.n	8004e7a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f951 	bl	80050be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d023      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d013      	beq.n	8004e6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	4a76      	ldr	r2, [pc, #472]	; (8005020 <HAL_UART_IRQHandler+0x350>)
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fc ff58 	bl	8001d04 <HAL_DMA_Abort_IT>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	e00e      	b.n	8004e88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8da 	bl	8005024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	e00a      	b.n	8004e88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f8d6 	bl	8005024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	e006      	b.n	8004e88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8d2 	bl	8005024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e86:	e0c3      	b.n	8005010 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	bf00      	nop
    return;
 8004e8a:	e0c1      	b.n	8005010 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	f040 80a1 	bne.w	8004fd8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 809b 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8095 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04e      	beq.n	8004f70 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004edc:	8a3b      	ldrh	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8098 	beq.w	8005014 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ee8:	8a3a      	ldrh	r2, [r7, #16]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	f080 8092 	bcs.w	8005014 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8a3a      	ldrh	r2, [r7, #16]
 8004ef4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d02b      	beq.n	8004f58 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f0e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0210 	bic.w	r2, r2, #16
 8004f4c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fc fe9b 	bl	8001c8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f864 	bl	8005036 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f6e:	e051      	b.n	8005014 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d047      	beq.n	8005018 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004f88:	8a7b      	ldrh	r3, [r7, #18]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d044      	beq.n	8005018 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f9c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0210 	bic.w	r2, r2, #16
 8004fca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fcc:	8a7b      	ldrh	r3, [r7, #18]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f830 	bl	8005036 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fd6:	e01f      	b.n	8005018 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x324>
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8a6 	bl	800513e <UART_Transmit_IT>
    return;
 8004ff2:	e012      	b.n	800501a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <HAL_UART_IRQHandler+0x34a>
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8e7 	bl	80051dc <UART_EndTransmit_IT>
    return;
 800500e:	e004      	b.n	800501a <HAL_UART_IRQHandler+0x34a>
    return;
 8005010:	bf00      	nop
 8005012:	e002      	b.n	800501a <HAL_UART_IRQHandler+0x34a>
      return;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_UART_IRQHandler+0x34a>
      return;
 8005018:	bf00      	nop
  }
}
 800501a:	3728      	adds	r7, #40	; 0x28
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	08005117 	.word	0x08005117

08005024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2222      	movs	r2, #34	; 0x22
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005090:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0220 	orr.w	r2, r2, #32
 80050b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0210 	bic.w	r2, r2, #16
 80050fc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff77 	bl	8005024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b21      	cmp	r3, #33	; 0x21
 8005150:	d13e      	bne.n	80051d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d114      	bne.n	8005186 <UART_Transmit_IT+0x48>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e008      	b.n	8005198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6211      	str	r1, [r2, #32]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fb fb7b 	bl	80008f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b22      	cmp	r3, #34	; 0x22
 800521e:	f040 8099 	bne.w	8005354 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	d117      	bne.n	800525c <UART_Receive_IT+0x50>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d113      	bne.n	800525c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	b29a      	uxth	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
 800525a:	e026      	b.n	80052aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	d007      	beq.n	8005280 <UART_Receive_IT+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <UART_Receive_IT+0x82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e008      	b.n	80052a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	b2da      	uxtb	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d148      	bne.n	8005350 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d123      	bne.n	8005346 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0210 	bic.w	r2, r2, #16
 8005312:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d10a      	bne.n	8005338 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe79 	bl	8005036 <HAL_UARTEx_RxEventCallback>
 8005344:	e002      	b.n	800534c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fb fb0a 	bl	8000960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e002      	b.n	8005356 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800539a:	f023 030c 	bic.w	r3, r3, #12
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	430b      	orrs	r3, r1
 80053a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <UART_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fd fbec 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	e002      	b.n	80053d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fd fbd4 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80053d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009a      	lsls	r2, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <UART_SetConfig+0x118>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	0119      	lsls	r1, r3, #4
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009a      	lsls	r2, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	fbb2 f2f3 	udiv	r2, r2, r3
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <UART_SetConfig+0x118>)
 800540e:	fba3 0302 	umull	r0, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2064      	movs	r0, #100	; 0x64
 8005416:	fb00 f303 	mul.w	r3, r0, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	3332      	adds	r3, #50	; 0x32
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <UART_SetConfig+0x118>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542c:	4419      	add	r1, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009a      	lsls	r2, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	fbb2 f2f3 	udiv	r2, r2, r3
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <UART_SetConfig+0x118>)
 8005446:	fba3 0302 	umull	r0, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2064      	movs	r0, #100	; 0x64
 800544e:	fb00 f303 	mul.w	r3, r0, r3
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	3332      	adds	r3, #50	; 0x32
 8005458:	4a07      	ldr	r2, [pc, #28]	; (8005478 <UART_SetConfig+0x118>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	440a      	add	r2, r1
 800546a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40013800 	.word	0x40013800
 8005478:	51eb851f 	.word	0x51eb851f

0800547c <__errno>:
 800547c:	4b01      	ldr	r3, [pc, #4]	; (8005484 <__errno+0x8>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000018 	.word	0x20000018

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	2600      	movs	r6, #0
 800548c:	4d0c      	ldr	r5, [pc, #48]	; (80054c0 <__libc_init_array+0x38>)
 800548e:	4c0d      	ldr	r4, [pc, #52]	; (80054c4 <__libc_init_array+0x3c>)
 8005490:	1b64      	subs	r4, r4, r5
 8005492:	10a4      	asrs	r4, r4, #2
 8005494:	42a6      	cmp	r6, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	f001 f91e 	bl	80066d8 <_init>
 800549c:	2600      	movs	r6, #0
 800549e:	4d0a      	ldr	r5, [pc, #40]	; (80054c8 <__libc_init_array+0x40>)
 80054a0:	4c0a      	ldr	r4, [pc, #40]	; (80054cc <__libc_init_array+0x44>)
 80054a2:	1b64      	subs	r4, r4, r5
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	42a6      	cmp	r6, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b0:	4798      	blx	r3
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ba:	4798      	blx	r3
 80054bc:	3601      	adds	r6, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	08006d38 	.word	0x08006d38
 80054c4:	08006d38 	.word	0x08006d38
 80054c8:	08006d38 	.word	0x08006d38
 80054cc:	08006d3c 	.word	0x08006d3c

080054d0 <memset>:
 80054d0:	4603      	mov	r3, r0
 80054d2:	4402      	add	r2, r0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d100      	bne.n	80054da <memset+0xa>
 80054d8:	4770      	bx	lr
 80054da:	f803 1b01 	strb.w	r1, [r3], #1
 80054de:	e7f9      	b.n	80054d4 <memset+0x4>

080054e0 <siscanf>:
 80054e0:	b40e      	push	{r1, r2, r3}
 80054e2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80054e6:	b530      	push	{r4, r5, lr}
 80054e8:	b09c      	sub	sp, #112	; 0x70
 80054ea:	ac1f      	add	r4, sp, #124	; 0x7c
 80054ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80054f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80054f4:	9002      	str	r0, [sp, #8]
 80054f6:	9006      	str	r0, [sp, #24]
 80054f8:	f7fa fe32 	bl	8000160 <strlen>
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <siscanf+0x4c>)
 80054fe:	9003      	str	r0, [sp, #12]
 8005500:	930b      	str	r3, [sp, #44]	; 0x2c
 8005502:	2300      	movs	r3, #0
 8005504:	930f      	str	r3, [sp, #60]	; 0x3c
 8005506:	9314      	str	r3, [sp, #80]	; 0x50
 8005508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800550c:	9007      	str	r0, [sp, #28]
 800550e:	4808      	ldr	r0, [pc, #32]	; (8005530 <siscanf+0x50>)
 8005510:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005514:	462a      	mov	r2, r5
 8005516:	4623      	mov	r3, r4
 8005518:	a902      	add	r1, sp, #8
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	9401      	str	r4, [sp, #4]
 800551e:	f000 f9e1 	bl	80058e4 <__ssvfiscanf_r>
 8005522:	b01c      	add	sp, #112	; 0x70
 8005524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005528:	b003      	add	sp, #12
 800552a:	4770      	bx	lr
 800552c:	08005535 	.word	0x08005535
 8005530:	20000018 	.word	0x20000018

08005534 <__seofread>:
 8005534:	2000      	movs	r0, #0
 8005536:	4770      	bx	lr

08005538 <_vsiprintf_r>:
 8005538:	b500      	push	{lr}
 800553a:	b09b      	sub	sp, #108	; 0x6c
 800553c:	9100      	str	r1, [sp, #0]
 800553e:	9104      	str	r1, [sp, #16]
 8005540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	9102      	str	r1, [sp, #8]
 8005548:	4905      	ldr	r1, [pc, #20]	; (8005560 <_vsiprintf_r+0x28>)
 800554a:	9103      	str	r1, [sp, #12]
 800554c:	4669      	mov	r1, sp
 800554e:	f000 f86f 	bl	8005630 <_svfiprintf_r>
 8005552:	2200      	movs	r2, #0
 8005554:	9b00      	ldr	r3, [sp, #0]
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	b01b      	add	sp, #108	; 0x6c
 800555a:	f85d fb04 	ldr.w	pc, [sp], #4
 800555e:	bf00      	nop
 8005560:	ffff0208 	.word	0xffff0208

08005564 <vsiprintf>:
 8005564:	4613      	mov	r3, r2
 8005566:	460a      	mov	r2, r1
 8005568:	4601      	mov	r1, r0
 800556a:	4802      	ldr	r0, [pc, #8]	; (8005574 <vsiprintf+0x10>)
 800556c:	6800      	ldr	r0, [r0, #0]
 800556e:	f7ff bfe3 	b.w	8005538 <_vsiprintf_r>
 8005572:	bf00      	nop
 8005574:	20000018 	.word	0x20000018

08005578 <__ssputs_r>:
 8005578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	688e      	ldr	r6, [r1, #8]
 800557e:	4682      	mov	sl, r0
 8005580:	429e      	cmp	r6, r3
 8005582:	460c      	mov	r4, r1
 8005584:	4690      	mov	r8, r2
 8005586:	461f      	mov	r7, r3
 8005588:	d838      	bhi.n	80055fc <__ssputs_r+0x84>
 800558a:	898a      	ldrh	r2, [r1, #12]
 800558c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005590:	d032      	beq.n	80055f8 <__ssputs_r+0x80>
 8005592:	6825      	ldr	r5, [r4, #0]
 8005594:	6909      	ldr	r1, [r1, #16]
 8005596:	3301      	adds	r3, #1
 8005598:	eba5 0901 	sub.w	r9, r5, r1
 800559c:	6965      	ldr	r5, [r4, #20]
 800559e:	444b      	add	r3, r9
 80055a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055a8:	106d      	asrs	r5, r5, #1
 80055aa:	429d      	cmp	r5, r3
 80055ac:	bf38      	it	cc
 80055ae:	461d      	movcc	r5, r3
 80055b0:	0553      	lsls	r3, r2, #21
 80055b2:	d531      	bpl.n	8005618 <__ssputs_r+0xa0>
 80055b4:	4629      	mov	r1, r5
 80055b6:	f000 ffeb 	bl	8006590 <_malloc_r>
 80055ba:	4606      	mov	r6, r0
 80055bc:	b950      	cbnz	r0, 80055d4 <__ssputs_r+0x5c>
 80055be:	230c      	movs	r3, #12
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	f8ca 3000 	str.w	r3, [sl]
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d4:	464a      	mov	r2, r9
 80055d6:	6921      	ldr	r1, [r4, #16]
 80055d8:	f000 ff66 	bl	80064a8 <memcpy>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	6126      	str	r6, [r4, #16]
 80055ea:	444e      	add	r6, r9
 80055ec:	6026      	str	r6, [r4, #0]
 80055ee:	463e      	mov	r6, r7
 80055f0:	6165      	str	r5, [r4, #20]
 80055f2:	eba5 0509 	sub.w	r5, r5, r9
 80055f6:	60a5      	str	r5, [r4, #8]
 80055f8:	42be      	cmp	r6, r7
 80055fa:	d900      	bls.n	80055fe <__ssputs_r+0x86>
 80055fc:	463e      	mov	r6, r7
 80055fe:	4632      	mov	r2, r6
 8005600:	4641      	mov	r1, r8
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	f000 ff5e 	bl	80064c4 <memmove>
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	1b9b      	subs	r3, r3, r6
 800560e:	4432      	add	r2, r6
 8005610:	2000      	movs	r0, #0
 8005612:	60a3      	str	r3, [r4, #8]
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	e7db      	b.n	80055d0 <__ssputs_r+0x58>
 8005618:	462a      	mov	r2, r5
 800561a:	f001 f813 	bl	8006644 <_realloc_r>
 800561e:	4606      	mov	r6, r0
 8005620:	2800      	cmp	r0, #0
 8005622:	d1e1      	bne.n	80055e8 <__ssputs_r+0x70>
 8005624:	4650      	mov	r0, sl
 8005626:	6921      	ldr	r1, [r4, #16]
 8005628:	f000 ff66 	bl	80064f8 <_free_r>
 800562c:	e7c7      	b.n	80055be <__ssputs_r+0x46>
	...

08005630 <_svfiprintf_r>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	4698      	mov	r8, r3
 8005636:	898b      	ldrh	r3, [r1, #12]
 8005638:	4607      	mov	r7, r0
 800563a:	061b      	lsls	r3, r3, #24
 800563c:	460d      	mov	r5, r1
 800563e:	4614      	mov	r4, r2
 8005640:	b09d      	sub	sp, #116	; 0x74
 8005642:	d50e      	bpl.n	8005662 <_svfiprintf_r+0x32>
 8005644:	690b      	ldr	r3, [r1, #16]
 8005646:	b963      	cbnz	r3, 8005662 <_svfiprintf_r+0x32>
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	f000 ffa1 	bl	8006590 <_malloc_r>
 800564e:	6028      	str	r0, [r5, #0]
 8005650:	6128      	str	r0, [r5, #16]
 8005652:	b920      	cbnz	r0, 800565e <_svfiprintf_r+0x2e>
 8005654:	230c      	movs	r3, #12
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	e0d1      	b.n	8005802 <_svfiprintf_r+0x1d2>
 800565e:	2340      	movs	r3, #64	; 0x40
 8005660:	616b      	str	r3, [r5, #20]
 8005662:	2300      	movs	r3, #0
 8005664:	9309      	str	r3, [sp, #36]	; 0x24
 8005666:	2320      	movs	r3, #32
 8005668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800566c:	2330      	movs	r3, #48	; 0x30
 800566e:	f04f 0901 	mov.w	r9, #1
 8005672:	f8cd 800c 	str.w	r8, [sp, #12]
 8005676:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800581c <_svfiprintf_r+0x1ec>
 800567a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567e:	4623      	mov	r3, r4
 8005680:	469a      	mov	sl, r3
 8005682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005686:	b10a      	cbz	r2, 800568c <_svfiprintf_r+0x5c>
 8005688:	2a25      	cmp	r2, #37	; 0x25
 800568a:	d1f9      	bne.n	8005680 <_svfiprintf_r+0x50>
 800568c:	ebba 0b04 	subs.w	fp, sl, r4
 8005690:	d00b      	beq.n	80056aa <_svfiprintf_r+0x7a>
 8005692:	465b      	mov	r3, fp
 8005694:	4622      	mov	r2, r4
 8005696:	4629      	mov	r1, r5
 8005698:	4638      	mov	r0, r7
 800569a:	f7ff ff6d 	bl	8005578 <__ssputs_r>
 800569e:	3001      	adds	r0, #1
 80056a0:	f000 80aa 	beq.w	80057f8 <_svfiprintf_r+0x1c8>
 80056a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a6:	445a      	add	r2, fp
 80056a8:	9209      	str	r2, [sp, #36]	; 0x24
 80056aa:	f89a 3000 	ldrb.w	r3, [sl]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80a2 	beq.w	80057f8 <_svfiprintf_r+0x1c8>
 80056b4:	2300      	movs	r3, #0
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056be:	f10a 0a01 	add.w	sl, sl, #1
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	9307      	str	r3, [sp, #28]
 80056c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ca:	931a      	str	r3, [sp, #104]	; 0x68
 80056cc:	4654      	mov	r4, sl
 80056ce:	2205      	movs	r2, #5
 80056d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d4:	4851      	ldr	r0, [pc, #324]	; (800581c <_svfiprintf_r+0x1ec>)
 80056d6:	f000 fed9 	bl	800648c <memchr>
 80056da:	9a04      	ldr	r2, [sp, #16]
 80056dc:	b9d8      	cbnz	r0, 8005716 <_svfiprintf_r+0xe6>
 80056de:	06d0      	lsls	r0, r2, #27
 80056e0:	bf44      	itt	mi
 80056e2:	2320      	movmi	r3, #32
 80056e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e8:	0711      	lsls	r1, r2, #28
 80056ea:	bf44      	itt	mi
 80056ec:	232b      	movmi	r3, #43	; 0x2b
 80056ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f2:	f89a 3000 	ldrb.w	r3, [sl]
 80056f6:	2b2a      	cmp	r3, #42	; 0x2a
 80056f8:	d015      	beq.n	8005726 <_svfiprintf_r+0xf6>
 80056fa:	4654      	mov	r4, sl
 80056fc:	2000      	movs	r0, #0
 80056fe:	f04f 0c0a 	mov.w	ip, #10
 8005702:	9a07      	ldr	r2, [sp, #28]
 8005704:	4621      	mov	r1, r4
 8005706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800570a:	3b30      	subs	r3, #48	; 0x30
 800570c:	2b09      	cmp	r3, #9
 800570e:	d94e      	bls.n	80057ae <_svfiprintf_r+0x17e>
 8005710:	b1b0      	cbz	r0, 8005740 <_svfiprintf_r+0x110>
 8005712:	9207      	str	r2, [sp, #28]
 8005714:	e014      	b.n	8005740 <_svfiprintf_r+0x110>
 8005716:	eba0 0308 	sub.w	r3, r0, r8
 800571a:	fa09 f303 	lsl.w	r3, r9, r3
 800571e:	4313      	orrs	r3, r2
 8005720:	46a2      	mov	sl, r4
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	e7d2      	b.n	80056cc <_svfiprintf_r+0x9c>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	1d19      	adds	r1, r3, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	9103      	str	r1, [sp, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	bfbb      	ittet	lt
 8005732:	425b      	neglt	r3, r3
 8005734:	f042 0202 	orrlt.w	r2, r2, #2
 8005738:	9307      	strge	r3, [sp, #28]
 800573a:	9307      	strlt	r3, [sp, #28]
 800573c:	bfb8      	it	lt
 800573e:	9204      	strlt	r2, [sp, #16]
 8005740:	7823      	ldrb	r3, [r4, #0]
 8005742:	2b2e      	cmp	r3, #46	; 0x2e
 8005744:	d10c      	bne.n	8005760 <_svfiprintf_r+0x130>
 8005746:	7863      	ldrb	r3, [r4, #1]
 8005748:	2b2a      	cmp	r3, #42	; 0x2a
 800574a:	d135      	bne.n	80057b8 <_svfiprintf_r+0x188>
 800574c:	9b03      	ldr	r3, [sp, #12]
 800574e:	3402      	adds	r4, #2
 8005750:	1d1a      	adds	r2, r3, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	9203      	str	r2, [sp, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfb8      	it	lt
 800575a:	f04f 33ff 	movlt.w	r3, #4294967295
 800575e:	9305      	str	r3, [sp, #20]
 8005760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800582c <_svfiprintf_r+0x1fc>
 8005764:	2203      	movs	r2, #3
 8005766:	4650      	mov	r0, sl
 8005768:	7821      	ldrb	r1, [r4, #0]
 800576a:	f000 fe8f 	bl	800648c <memchr>
 800576e:	b140      	cbz	r0, 8005782 <_svfiprintf_r+0x152>
 8005770:	2340      	movs	r3, #64	; 0x40
 8005772:	eba0 000a 	sub.w	r0, r0, sl
 8005776:	fa03 f000 	lsl.w	r0, r3, r0
 800577a:	9b04      	ldr	r3, [sp, #16]
 800577c:	3401      	adds	r4, #1
 800577e:	4303      	orrs	r3, r0
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005786:	2206      	movs	r2, #6
 8005788:	4825      	ldr	r0, [pc, #148]	; (8005820 <_svfiprintf_r+0x1f0>)
 800578a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800578e:	f000 fe7d 	bl	800648c <memchr>
 8005792:	2800      	cmp	r0, #0
 8005794:	d038      	beq.n	8005808 <_svfiprintf_r+0x1d8>
 8005796:	4b23      	ldr	r3, [pc, #140]	; (8005824 <_svfiprintf_r+0x1f4>)
 8005798:	bb1b      	cbnz	r3, 80057e2 <_svfiprintf_r+0x1b2>
 800579a:	9b03      	ldr	r3, [sp, #12]
 800579c:	3307      	adds	r3, #7
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	3308      	adds	r3, #8
 80057a4:	9303      	str	r3, [sp, #12]
 80057a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a8:	4433      	add	r3, r6
 80057aa:	9309      	str	r3, [sp, #36]	; 0x24
 80057ac:	e767      	b.n	800567e <_svfiprintf_r+0x4e>
 80057ae:	460c      	mov	r4, r1
 80057b0:	2001      	movs	r0, #1
 80057b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057b6:	e7a5      	b.n	8005704 <_svfiprintf_r+0xd4>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f04f 0c0a 	mov.w	ip, #10
 80057be:	4619      	mov	r1, r3
 80057c0:	3401      	adds	r4, #1
 80057c2:	9305      	str	r3, [sp, #20]
 80057c4:	4620      	mov	r0, r4
 80057c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ca:	3a30      	subs	r2, #48	; 0x30
 80057cc:	2a09      	cmp	r2, #9
 80057ce:	d903      	bls.n	80057d8 <_svfiprintf_r+0x1a8>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0c5      	beq.n	8005760 <_svfiprintf_r+0x130>
 80057d4:	9105      	str	r1, [sp, #20]
 80057d6:	e7c3      	b.n	8005760 <_svfiprintf_r+0x130>
 80057d8:	4604      	mov	r4, r0
 80057da:	2301      	movs	r3, #1
 80057dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80057e0:	e7f0      	b.n	80057c4 <_svfiprintf_r+0x194>
 80057e2:	ab03      	add	r3, sp, #12
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4638      	mov	r0, r7
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <_svfiprintf_r+0x1f8>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	f3af 8000 	nop.w
 80057f2:	1c42      	adds	r2, r0, #1
 80057f4:	4606      	mov	r6, r0
 80057f6:	d1d6      	bne.n	80057a6 <_svfiprintf_r+0x176>
 80057f8:	89ab      	ldrh	r3, [r5, #12]
 80057fa:	065b      	lsls	r3, r3, #25
 80057fc:	f53f af2c 	bmi.w	8005658 <_svfiprintf_r+0x28>
 8005800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005802:	b01d      	add	sp, #116	; 0x74
 8005804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005808:	ab03      	add	r3, sp, #12
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	462a      	mov	r2, r5
 800580e:	4638      	mov	r0, r7
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <_svfiprintf_r+0x1f8>)
 8005812:	a904      	add	r1, sp, #16
 8005814:	f000 fa50 	bl	8005cb8 <_printf_i>
 8005818:	e7eb      	b.n	80057f2 <_svfiprintf_r+0x1c2>
 800581a:	bf00      	nop
 800581c:	08006b88 	.word	0x08006b88
 8005820:	08006b92 	.word	0x08006b92
 8005824:	00000000 	.word	0x00000000
 8005828:	08005579 	.word	0x08005579
 800582c:	08006b8e 	.word	0x08006b8e

08005830 <_sungetc_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	1c4b      	adds	r3, r1, #1
 8005834:	4614      	mov	r4, r2
 8005836:	d103      	bne.n	8005840 <_sungetc_r+0x10>
 8005838:	f04f 35ff 	mov.w	r5, #4294967295
 800583c:	4628      	mov	r0, r5
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	8993      	ldrh	r3, [r2, #12]
 8005842:	b2cd      	uxtb	r5, r1
 8005844:	f023 0320 	bic.w	r3, r3, #32
 8005848:	8193      	strh	r3, [r2, #12]
 800584a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800584c:	6852      	ldr	r2, [r2, #4]
 800584e:	b18b      	cbz	r3, 8005874 <_sungetc_r+0x44>
 8005850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005852:	4293      	cmp	r3, r2
 8005854:	dd08      	ble.n	8005868 <_sungetc_r+0x38>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	6022      	str	r2, [r4, #0]
 800585c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	e7e9      	b.n	800583c <_sungetc_r+0xc>
 8005868:	4621      	mov	r1, r4
 800586a:	f000 fdd5 	bl	8006418 <__submore>
 800586e:	2800      	cmp	r0, #0
 8005870:	d0f1      	beq.n	8005856 <_sungetc_r+0x26>
 8005872:	e7e1      	b.n	8005838 <_sungetc_r+0x8>
 8005874:	6921      	ldr	r1, [r4, #16]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	b151      	cbz	r1, 8005890 <_sungetc_r+0x60>
 800587a:	4299      	cmp	r1, r3
 800587c:	d208      	bcs.n	8005890 <_sungetc_r+0x60>
 800587e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005882:	42a9      	cmp	r1, r5
 8005884:	d104      	bne.n	8005890 <_sungetc_r+0x60>
 8005886:	3b01      	subs	r3, #1
 8005888:	3201      	adds	r2, #1
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	6062      	str	r2, [r4, #4]
 800588e:	e7d5      	b.n	800583c <_sungetc_r+0xc>
 8005890:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005898:	6363      	str	r3, [r4, #52]	; 0x34
 800589a:	2303      	movs	r3, #3
 800589c:	63a3      	str	r3, [r4, #56]	; 0x38
 800589e:	4623      	mov	r3, r4
 80058a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	2301      	movs	r3, #1
 80058a8:	e7dc      	b.n	8005864 <_sungetc_r+0x34>

080058aa <__ssrefill_r>:
 80058aa:	b510      	push	{r4, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058b0:	b169      	cbz	r1, 80058ce <__ssrefill_r+0x24>
 80058b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d001      	beq.n	80058be <__ssrefill_r+0x14>
 80058ba:	f000 fe1d 	bl	80064f8 <_free_r>
 80058be:	2000      	movs	r0, #0
 80058c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058c2:	6360      	str	r0, [r4, #52]	; 0x34
 80058c4:	6063      	str	r3, [r4, #4]
 80058c6:	b113      	cbz	r3, 80058ce <__ssrefill_r+0x24>
 80058c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	2300      	movs	r3, #0
 80058d8:	6063      	str	r3, [r4, #4]
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	f043 0320 	orr.w	r3, r3, #32
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	e7f3      	b.n	80058cc <__ssrefill_r+0x22>

080058e4 <__ssvfiscanf_r>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	2100      	movs	r1, #0
 80058ec:	4606      	mov	r6, r0
 80058ee:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80058f2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80058f6:	49b3      	ldr	r1, [pc, #716]	; (8005bc4 <__ssvfiscanf_r+0x2e0>)
 80058f8:	f10d 0804 	add.w	r8, sp, #4
 80058fc:	91a0      	str	r1, [sp, #640]	; 0x280
 80058fe:	49b2      	ldr	r1, [pc, #712]	; (8005bc8 <__ssvfiscanf_r+0x2e4>)
 8005900:	4fb2      	ldr	r7, [pc, #712]	; (8005bcc <__ssvfiscanf_r+0x2e8>)
 8005902:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8005bd0 <__ssvfiscanf_r+0x2ec>
 8005906:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800590a:	91a1      	str	r1, [sp, #644]	; 0x284
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	f892 a000 	ldrb.w	sl, [r2]
 8005912:	f1ba 0f00 	cmp.w	sl, #0
 8005916:	f000 8153 	beq.w	8005bc0 <__ssvfiscanf_r+0x2dc>
 800591a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800591e:	1c55      	adds	r5, r2, #1
 8005920:	f013 0308 	ands.w	r3, r3, #8
 8005924:	d019      	beq.n	800595a <__ssvfiscanf_r+0x76>
 8005926:	6863      	ldr	r3, [r4, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	dd0f      	ble.n	800594c <__ssvfiscanf_r+0x68>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	5cba      	ldrb	r2, [r7, r2]
 8005932:	0712      	lsls	r2, r2, #28
 8005934:	d401      	bmi.n	800593a <__ssvfiscanf_r+0x56>
 8005936:	462a      	mov	r2, r5
 8005938:	e7e9      	b.n	800590e <__ssvfiscanf_r+0x2a>
 800593a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800593c:	3301      	adds	r3, #1
 800593e:	3201      	adds	r2, #1
 8005940:	9245      	str	r2, [sp, #276]	; 0x114
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	3a01      	subs	r2, #1
 8005948:	6062      	str	r2, [r4, #4]
 800594a:	e7ec      	b.n	8005926 <__ssvfiscanf_r+0x42>
 800594c:	4621      	mov	r1, r4
 800594e:	4630      	mov	r0, r6
 8005950:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005952:	4798      	blx	r3
 8005954:	2800      	cmp	r0, #0
 8005956:	d0e9      	beq.n	800592c <__ssvfiscanf_r+0x48>
 8005958:	e7ed      	b.n	8005936 <__ssvfiscanf_r+0x52>
 800595a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800595e:	f040 8086 	bne.w	8005a6e <__ssvfiscanf_r+0x18a>
 8005962:	9341      	str	r3, [sp, #260]	; 0x104
 8005964:	9343      	str	r3, [sp, #268]	; 0x10c
 8005966:	7853      	ldrb	r3, [r2, #1]
 8005968:	2b2a      	cmp	r3, #42	; 0x2a
 800596a:	bf04      	itt	eq
 800596c:	2310      	moveq	r3, #16
 800596e:	1c95      	addeq	r5, r2, #2
 8005970:	f04f 020a 	mov.w	r2, #10
 8005974:	bf08      	it	eq
 8005976:	9341      	streq	r3, [sp, #260]	; 0x104
 8005978:	46ab      	mov	fp, r5
 800597a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800597e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005982:	2b09      	cmp	r3, #9
 8005984:	d91d      	bls.n	80059c2 <__ssvfiscanf_r+0xde>
 8005986:	2203      	movs	r2, #3
 8005988:	4891      	ldr	r0, [pc, #580]	; (8005bd0 <__ssvfiscanf_r+0x2ec>)
 800598a:	f000 fd7f 	bl	800648c <memchr>
 800598e:	b140      	cbz	r0, 80059a2 <__ssvfiscanf_r+0xbe>
 8005990:	2301      	movs	r3, #1
 8005992:	465d      	mov	r5, fp
 8005994:	eba0 0009 	sub.w	r0, r0, r9
 8005998:	fa03 f000 	lsl.w	r0, r3, r0
 800599c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800599e:	4318      	orrs	r0, r3
 80059a0:	9041      	str	r0, [sp, #260]	; 0x104
 80059a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059a6:	2b78      	cmp	r3, #120	; 0x78
 80059a8:	d806      	bhi.n	80059b8 <__ssvfiscanf_r+0xd4>
 80059aa:	2b57      	cmp	r3, #87	; 0x57
 80059ac:	d810      	bhi.n	80059d0 <__ssvfiscanf_r+0xec>
 80059ae:	2b25      	cmp	r3, #37	; 0x25
 80059b0:	d05d      	beq.n	8005a6e <__ssvfiscanf_r+0x18a>
 80059b2:	d857      	bhi.n	8005a64 <__ssvfiscanf_r+0x180>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d075      	beq.n	8005aa4 <__ssvfiscanf_r+0x1c0>
 80059b8:	2303      	movs	r3, #3
 80059ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80059bc:	230a      	movs	r3, #10
 80059be:	9342      	str	r3, [sp, #264]	; 0x108
 80059c0:	e082      	b.n	8005ac8 <__ssvfiscanf_r+0x1e4>
 80059c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80059c4:	465d      	mov	r5, fp
 80059c6:	fb02 1303 	mla	r3, r2, r3, r1
 80059ca:	3b30      	subs	r3, #48	; 0x30
 80059cc:	9343      	str	r3, [sp, #268]	; 0x10c
 80059ce:	e7d3      	b.n	8005978 <__ssvfiscanf_r+0x94>
 80059d0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80059d4:	2a20      	cmp	r2, #32
 80059d6:	d8ef      	bhi.n	80059b8 <__ssvfiscanf_r+0xd4>
 80059d8:	a101      	add	r1, pc, #4	; (adr r1, 80059e0 <__ssvfiscanf_r+0xfc>)
 80059da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005ab3 	.word	0x08005ab3
 80059e4:	080059b9 	.word	0x080059b9
 80059e8:	080059b9 	.word	0x080059b9
 80059ec:	08005b11 	.word	0x08005b11
 80059f0:	080059b9 	.word	0x080059b9
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	080059b9 	.word	0x080059b9
 8005a00:	080059b9 	.word	0x080059b9
 8005a04:	080059b9 	.word	0x080059b9
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	08005b27 	.word	0x08005b27
 8005a10:	08005afd 	.word	0x08005afd
 8005a14:	08005a6b 	.word	0x08005a6b
 8005a18:	08005a6b 	.word	0x08005a6b
 8005a1c:	08005a6b 	.word	0x08005a6b
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005b01 	.word	0x08005b01
 8005a28:	080059b9 	.word	0x080059b9
 8005a2c:	080059b9 	.word	0x080059b9
 8005a30:	080059b9 	.word	0x080059b9
 8005a34:	080059b9 	.word	0x080059b9
 8005a38:	08005b37 	.word	0x08005b37
 8005a3c:	08005b09 	.word	0x08005b09
 8005a40:	08005aab 	.word	0x08005aab
 8005a44:	080059b9 	.word	0x080059b9
 8005a48:	080059b9 	.word	0x080059b9
 8005a4c:	08005b33 	.word	0x08005b33
 8005a50:	080059b9 	.word	0x080059b9
 8005a54:	08005afd 	.word	0x08005afd
 8005a58:	080059b9 	.word	0x080059b9
 8005a5c:	080059b9 	.word	0x080059b9
 8005a60:	08005ab3 	.word	0x08005ab3
 8005a64:	3b45      	subs	r3, #69	; 0x45
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d8a6      	bhi.n	80059b8 <__ssvfiscanf_r+0xd4>
 8005a6a:	2305      	movs	r3, #5
 8005a6c:	e02b      	b.n	8005ac6 <__ssvfiscanf_r+0x1e2>
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dd0d      	ble.n	8005a90 <__ssvfiscanf_r+0x1ac>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	4552      	cmp	r2, sl
 8005a7a:	f040 80a1 	bne.w	8005bc0 <__ssvfiscanf_r+0x2dc>
 8005a7e:	3301      	adds	r3, #1
 8005a80:	6862      	ldr	r2, [r4, #4]
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a86:	3a01      	subs	r2, #1
 8005a88:	3301      	adds	r3, #1
 8005a8a:	6062      	str	r2, [r4, #4]
 8005a8c:	9345      	str	r3, [sp, #276]	; 0x114
 8005a8e:	e752      	b.n	8005936 <__ssvfiscanf_r+0x52>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4630      	mov	r0, r6
 8005a94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a96:	4798      	blx	r3
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d0eb      	beq.n	8005a74 <__ssvfiscanf_r+0x190>
 8005a9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f040 8084 	bne.w	8005bac <__ssvfiscanf_r+0x2c8>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e086      	b.n	8005bb8 <__ssvfiscanf_r+0x2d4>
 8005aaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005aac:	f042 0220 	orr.w	r2, r2, #32
 8005ab0:	9241      	str	r2, [sp, #260]	; 0x104
 8005ab2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab8:	9241      	str	r2, [sp, #260]	; 0x104
 8005aba:	2210      	movs	r2, #16
 8005abc:	2b6f      	cmp	r3, #111	; 0x6f
 8005abe:	bf34      	ite	cc
 8005ac0:	2303      	movcc	r3, #3
 8005ac2:	2304      	movcs	r3, #4
 8005ac4:	9242      	str	r2, [sp, #264]	; 0x108
 8005ac6:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	dd41      	ble.n	8005b52 <__ssvfiscanf_r+0x26e>
 8005ace:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ad0:	0659      	lsls	r1, r3, #25
 8005ad2:	d404      	bmi.n	8005ade <__ssvfiscanf_r+0x1fa>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	5cba      	ldrb	r2, [r7, r2]
 8005ada:	0712      	lsls	r2, r2, #28
 8005adc:	d440      	bmi.n	8005b60 <__ssvfiscanf_r+0x27c>
 8005ade:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	dc4f      	bgt.n	8005b84 <__ssvfiscanf_r+0x2a0>
 8005ae4:	466b      	mov	r3, sp
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4630      	mov	r0, r6
 8005aea:	a941      	add	r1, sp, #260	; 0x104
 8005aec:	f000 fa0a 	bl	8005f04 <_scanf_chars>
 8005af0:	2801      	cmp	r0, #1
 8005af2:	d065      	beq.n	8005bc0 <__ssvfiscanf_r+0x2dc>
 8005af4:	2802      	cmp	r0, #2
 8005af6:	f47f af1e 	bne.w	8005936 <__ssvfiscanf_r+0x52>
 8005afa:	e7cf      	b.n	8005a9c <__ssvfiscanf_r+0x1b8>
 8005afc:	220a      	movs	r2, #10
 8005afe:	e7dd      	b.n	8005abc <__ssvfiscanf_r+0x1d8>
 8005b00:	2300      	movs	r3, #0
 8005b02:	9342      	str	r3, [sp, #264]	; 0x108
 8005b04:	2303      	movs	r3, #3
 8005b06:	e7de      	b.n	8005ac6 <__ssvfiscanf_r+0x1e2>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	9342      	str	r3, [sp, #264]	; 0x108
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	e7da      	b.n	8005ac6 <__ssvfiscanf_r+0x1e2>
 8005b10:	4629      	mov	r1, r5
 8005b12:	4640      	mov	r0, r8
 8005b14:	f000 fb40 	bl	8006198 <__sccl>
 8005b18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b20:	9341      	str	r3, [sp, #260]	; 0x104
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7cf      	b.n	8005ac6 <__ssvfiscanf_r+0x1e2>
 8005b26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2c:	9341      	str	r3, [sp, #260]	; 0x104
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e7c9      	b.n	8005ac6 <__ssvfiscanf_r+0x1e2>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e7c7      	b.n	8005ac6 <__ssvfiscanf_r+0x1e2>
 8005b36:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005b38:	06c3      	lsls	r3, r0, #27
 8005b3a:	f53f aefc 	bmi.w	8005936 <__ssvfiscanf_r+0x52>
 8005b3e:	9b00      	ldr	r3, [sp, #0]
 8005b40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b42:	1d19      	adds	r1, r3, #4
 8005b44:	9100      	str	r1, [sp, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	07c0      	lsls	r0, r0, #31
 8005b4a:	bf4c      	ite	mi
 8005b4c:	801a      	strhmi	r2, [r3, #0]
 8005b4e:	601a      	strpl	r2, [r3, #0]
 8005b50:	e6f1      	b.n	8005936 <__ssvfiscanf_r+0x52>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4630      	mov	r0, r6
 8005b56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b58:	4798      	blx	r3
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0b7      	beq.n	8005ace <__ssvfiscanf_r+0x1ea>
 8005b5e:	e79d      	b.n	8005a9c <__ssvfiscanf_r+0x1b8>
 8005b60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b62:	3201      	adds	r2, #1
 8005b64:	9245      	str	r2, [sp, #276]	; 0x114
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	3a01      	subs	r2, #1
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	6062      	str	r2, [r4, #4]
 8005b6e:	dd02      	ble.n	8005b76 <__ssvfiscanf_r+0x292>
 8005b70:	3301      	adds	r3, #1
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	e7ae      	b.n	8005ad4 <__ssvfiscanf_r+0x1f0>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4630      	mov	r0, r6
 8005b7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b7c:	4798      	blx	r3
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0a8      	beq.n	8005ad4 <__ssvfiscanf_r+0x1f0>
 8005b82:	e78b      	b.n	8005a9c <__ssvfiscanf_r+0x1b8>
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	dc06      	bgt.n	8005b96 <__ssvfiscanf_r+0x2b2>
 8005b88:	466b      	mov	r3, sp
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	a941      	add	r1, sp, #260	; 0x104
 8005b90:	f000 fa10 	bl	8005fb4 <_scanf_i>
 8005b94:	e7ac      	b.n	8005af0 <__ssvfiscanf_r+0x20c>
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <__ssvfiscanf_r+0x2f0>)
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f43f aecc 	beq.w	8005936 <__ssvfiscanf_r+0x52>
 8005b9e:	466b      	mov	r3, sp
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	a941      	add	r1, sp, #260	; 0x104
 8005ba6:	f3af 8000 	nop.w
 8005baa:	e7a1      	b.n	8005af0 <__ssvfiscanf_r+0x20c>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bb2:	bf18      	it	ne
 8005bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8005bb8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005bc2:	e7f9      	b.n	8005bb8 <__ssvfiscanf_r+0x2d4>
 8005bc4:	08005831 	.word	0x08005831
 8005bc8:	080058ab 	.word	0x080058ab
 8005bcc:	08006bd7 	.word	0x08006bd7
 8005bd0:	08006b8e 	.word	0x08006b8e
 8005bd4:	00000000 	.word	0x00000000

08005bd8 <_printf_common>:
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	4616      	mov	r6, r2
 8005bde:	4699      	mov	r9, r3
 8005be0:	688a      	ldr	r2, [r1, #8]
 8005be2:	690b      	ldr	r3, [r1, #16]
 8005be4:	4607      	mov	r7, r0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	bfb8      	it	lt
 8005bea:	4613      	movlt	r3, r2
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf8:	b10a      	cbz	r2, 8005bfe <_printf_common+0x26>
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	0699      	lsls	r1, r3, #26
 8005c02:	bf42      	ittt	mi
 8005c04:	6833      	ldrmi	r3, [r6, #0]
 8005c06:	3302      	addmi	r3, #2
 8005c08:	6033      	strmi	r3, [r6, #0]
 8005c0a:	6825      	ldr	r5, [r4, #0]
 8005c0c:	f015 0506 	ands.w	r5, r5, #6
 8005c10:	d106      	bne.n	8005c20 <_printf_common+0x48>
 8005c12:	f104 0a19 	add.w	sl, r4, #25
 8005c16:	68e3      	ldr	r3, [r4, #12]
 8005c18:	6832      	ldr	r2, [r6, #0]
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	42ab      	cmp	r3, r5
 8005c1e:	dc28      	bgt.n	8005c72 <_printf_common+0x9a>
 8005c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c24:	1e13      	subs	r3, r2, #0
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	bf18      	it	ne
 8005c2a:	2301      	movne	r3, #1
 8005c2c:	0692      	lsls	r2, r2, #26
 8005c2e:	d42d      	bmi.n	8005c8c <_printf_common+0xb4>
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c38:	47c0      	blx	r8
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d020      	beq.n	8005c80 <_printf_common+0xa8>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	68e5      	ldr	r5, [r4, #12]
 8005c42:	f003 0306 	and.w	r3, r3, #6
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	bf18      	it	ne
 8005c4a:	2500      	movne	r5, #0
 8005c4c:	6832      	ldr	r2, [r6, #0]
 8005c4e:	f04f 0600 	mov.w	r6, #0
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	bf08      	it	eq
 8005c56:	1aad      	subeq	r5, r5, r2
 8005c58:	6922      	ldr	r2, [r4, #16]
 8005c5a:	bf08      	it	eq
 8005c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c60:	4293      	cmp	r3, r2
 8005c62:	bfc4      	itt	gt
 8005c64:	1a9b      	subgt	r3, r3, r2
 8005c66:	18ed      	addgt	r5, r5, r3
 8005c68:	341a      	adds	r4, #26
 8005c6a:	42b5      	cmp	r5, r6
 8005c6c:	d11a      	bne.n	8005ca4 <_printf_common+0xcc>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e008      	b.n	8005c84 <_printf_common+0xac>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4652      	mov	r2, sl
 8005c76:	4649      	mov	r1, r9
 8005c78:	4638      	mov	r0, r7
 8005c7a:	47c0      	blx	r8
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d103      	bne.n	8005c88 <_printf_common+0xb0>
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	3501      	adds	r5, #1
 8005c8a:	e7c4      	b.n	8005c16 <_printf_common+0x3e>
 8005c8c:	2030      	movs	r0, #48	; 0x30
 8005c8e:	18e1      	adds	r1, r4, r3
 8005c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c9a:	4422      	add	r2, r4
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca2:	e7c5      	b.n	8005c30 <_printf_common+0x58>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4638      	mov	r0, r7
 8005cac:	47c0      	blx	r8
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d0e6      	beq.n	8005c80 <_printf_common+0xa8>
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7d9      	b.n	8005c6a <_printf_common+0x92>
	...

08005cb8 <_printf_i>:
 8005cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	7e27      	ldrb	r7, [r4, #24]
 8005cc0:	4691      	mov	r9, r2
 8005cc2:	2f78      	cmp	r7, #120	; 0x78
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	469a      	mov	sl, r3
 8005cc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cce:	d807      	bhi.n	8005ce0 <_printf_i+0x28>
 8005cd0:	2f62      	cmp	r7, #98	; 0x62
 8005cd2:	d80a      	bhi.n	8005cea <_printf_i+0x32>
 8005cd4:	2f00      	cmp	r7, #0
 8005cd6:	f000 80d9 	beq.w	8005e8c <_printf_i+0x1d4>
 8005cda:	2f58      	cmp	r7, #88	; 0x58
 8005cdc:	f000 80a4 	beq.w	8005e28 <_printf_i+0x170>
 8005ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce8:	e03a      	b.n	8005d60 <_printf_i+0xa8>
 8005cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cee:	2b15      	cmp	r3, #21
 8005cf0:	d8f6      	bhi.n	8005ce0 <_printf_i+0x28>
 8005cf2:	a001      	add	r0, pc, #4	; (adr r0, 8005cf8 <_printf_i+0x40>)
 8005cf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d65 	.word	0x08005d65
 8005d00:	08005ce1 	.word	0x08005ce1
 8005d04:	08005ce1 	.word	0x08005ce1
 8005d08:	08005ce1 	.word	0x08005ce1
 8005d0c:	08005ce1 	.word	0x08005ce1
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005ce1 	.word	0x08005ce1
 8005d18:	08005ce1 	.word	0x08005ce1
 8005d1c:	08005ce1 	.word	0x08005ce1
 8005d20:	08005ce1 	.word	0x08005ce1
 8005d24:	08005e73 	.word	0x08005e73
 8005d28:	08005d95 	.word	0x08005d95
 8005d2c:	08005e55 	.word	0x08005e55
 8005d30:	08005ce1 	.word	0x08005ce1
 8005d34:	08005ce1 	.word	0x08005ce1
 8005d38:	08005e95 	.word	0x08005e95
 8005d3c:	08005ce1 	.word	0x08005ce1
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005ce1 	.word	0x08005ce1
 8005d48:	08005ce1 	.word	0x08005ce1
 8005d4c:	08005e5d 	.word	0x08005e5d
 8005d50:	680b      	ldr	r3, [r1, #0]
 8005d52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	600a      	str	r2, [r1, #0]
 8005d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0a4      	b.n	8005eae <_printf_i+0x1f6>
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	6808      	ldr	r0, [r1, #0]
 8005d68:	062e      	lsls	r6, r5, #24
 8005d6a:	f100 0304 	add.w	r3, r0, #4
 8005d6e:	d50a      	bpl.n	8005d86 <_printf_i+0xce>
 8005d70:	6805      	ldr	r5, [r0, #0]
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	da03      	bge.n	8005d80 <_printf_i+0xc8>
 8005d78:	232d      	movs	r3, #45	; 0x2d
 8005d7a:	426d      	negs	r5, r5
 8005d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d80:	230a      	movs	r3, #10
 8005d82:	485e      	ldr	r0, [pc, #376]	; (8005efc <_printf_i+0x244>)
 8005d84:	e019      	b.n	8005dba <_printf_i+0x102>
 8005d86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d8a:	6805      	ldr	r5, [r0, #0]
 8005d8c:	600b      	str	r3, [r1, #0]
 8005d8e:	bf18      	it	ne
 8005d90:	b22d      	sxthne	r5, r5
 8005d92:	e7ef      	b.n	8005d74 <_printf_i+0xbc>
 8005d94:	680b      	ldr	r3, [r1, #0]
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	1d18      	adds	r0, r3, #4
 8005d9a:	6008      	str	r0, [r1, #0]
 8005d9c:	0628      	lsls	r0, r5, #24
 8005d9e:	d501      	bpl.n	8005da4 <_printf_i+0xec>
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	e002      	b.n	8005daa <_printf_i+0xf2>
 8005da4:	0669      	lsls	r1, r5, #25
 8005da6:	d5fb      	bpl.n	8005da0 <_printf_i+0xe8>
 8005da8:	881d      	ldrh	r5, [r3, #0]
 8005daa:	2f6f      	cmp	r7, #111	; 0x6f
 8005dac:	bf0c      	ite	eq
 8005dae:	2308      	moveq	r3, #8
 8005db0:	230a      	movne	r3, #10
 8005db2:	4852      	ldr	r0, [pc, #328]	; (8005efc <_printf_i+0x244>)
 8005db4:	2100      	movs	r1, #0
 8005db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dba:	6866      	ldr	r6, [r4, #4]
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	bfa8      	it	ge
 8005dc0:	6821      	ldrge	r1, [r4, #0]
 8005dc2:	60a6      	str	r6, [r4, #8]
 8005dc4:	bfa4      	itt	ge
 8005dc6:	f021 0104 	bicge.w	r1, r1, #4
 8005dca:	6021      	strge	r1, [r4, #0]
 8005dcc:	b90d      	cbnz	r5, 8005dd2 <_printf_i+0x11a>
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d04d      	beq.n	8005e6e <_printf_i+0x1b6>
 8005dd2:	4616      	mov	r6, r2
 8005dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8005ddc:	5dc7      	ldrb	r7, [r0, r7]
 8005dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005de2:	462f      	mov	r7, r5
 8005de4:	42bb      	cmp	r3, r7
 8005de6:	460d      	mov	r5, r1
 8005de8:	d9f4      	bls.n	8005dd4 <_printf_i+0x11c>
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d10b      	bne.n	8005e06 <_printf_i+0x14e>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	07df      	lsls	r7, r3, #31
 8005df2:	d508      	bpl.n	8005e06 <_printf_i+0x14e>
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	6861      	ldr	r1, [r4, #4]
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	bfde      	ittt	le
 8005dfc:	2330      	movle	r3, #48	; 0x30
 8005dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e06:	1b92      	subs	r2, r2, r6
 8005e08:	6122      	str	r2, [r4, #16]
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4640      	mov	r0, r8
 8005e10:	f8cd a000 	str.w	sl, [sp]
 8005e14:	aa03      	add	r2, sp, #12
 8005e16:	f7ff fedf 	bl	8005bd8 <_printf_common>
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d14c      	bne.n	8005eb8 <_printf_i+0x200>
 8005e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e22:	b004      	add	sp, #16
 8005e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e28:	4834      	ldr	r0, [pc, #208]	; (8005efc <_printf_i+0x244>)
 8005e2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e2e:	680e      	ldr	r6, [r1, #0]
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e36:	061f      	lsls	r7, r3, #24
 8005e38:	600e      	str	r6, [r1, #0]
 8005e3a:	d514      	bpl.n	8005e66 <_printf_i+0x1ae>
 8005e3c:	07d9      	lsls	r1, r3, #31
 8005e3e:	bf44      	itt	mi
 8005e40:	f043 0320 	orrmi.w	r3, r3, #32
 8005e44:	6023      	strmi	r3, [r4, #0]
 8005e46:	b91d      	cbnz	r5, 8005e50 <_printf_i+0x198>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f023 0320 	bic.w	r3, r3, #32
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	2310      	movs	r3, #16
 8005e52:	e7af      	b.n	8005db4 <_printf_i+0xfc>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	f043 0320 	orr.w	r3, r3, #32
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	2378      	movs	r3, #120	; 0x78
 8005e5e:	4828      	ldr	r0, [pc, #160]	; (8005f00 <_printf_i+0x248>)
 8005e60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e64:	e7e3      	b.n	8005e2e <_printf_i+0x176>
 8005e66:	065e      	lsls	r6, r3, #25
 8005e68:	bf48      	it	mi
 8005e6a:	b2ad      	uxthmi	r5, r5
 8005e6c:	e7e6      	b.n	8005e3c <_printf_i+0x184>
 8005e6e:	4616      	mov	r6, r2
 8005e70:	e7bb      	b.n	8005dea <_printf_i+0x132>
 8005e72:	680b      	ldr	r3, [r1, #0]
 8005e74:	6826      	ldr	r6, [r4, #0]
 8005e76:	1d1d      	adds	r5, r3, #4
 8005e78:	6960      	ldr	r0, [r4, #20]
 8005e7a:	600d      	str	r5, [r1, #0]
 8005e7c:	0635      	lsls	r5, r6, #24
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	d501      	bpl.n	8005e86 <_printf_i+0x1ce>
 8005e82:	6018      	str	r0, [r3, #0]
 8005e84:	e002      	b.n	8005e8c <_printf_i+0x1d4>
 8005e86:	0671      	lsls	r1, r6, #25
 8005e88:	d5fb      	bpl.n	8005e82 <_printf_i+0x1ca>
 8005e8a:	8018      	strh	r0, [r3, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4616      	mov	r6, r2
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	e7ba      	b.n	8005e0a <_printf_i+0x152>
 8005e94:	680b      	ldr	r3, [r1, #0]
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	600a      	str	r2, [r1, #0]
 8005e9a:	681e      	ldr	r6, [r3, #0]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	6862      	ldr	r2, [r4, #4]
 8005ea2:	f000 faf3 	bl	800648c <memchr>
 8005ea6:	b108      	cbz	r0, 8005eac <_printf_i+0x1f4>
 8005ea8:	1b80      	subs	r0, r0, r6
 8005eaa:	6060      	str	r0, [r4, #4]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	6123      	str	r3, [r4, #16]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb6:	e7a8      	b.n	8005e0a <_printf_i+0x152>
 8005eb8:	4632      	mov	r2, r6
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	47d0      	blx	sl
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0ab      	beq.n	8005e1e <_printf_i+0x166>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	079b      	lsls	r3, r3, #30
 8005eca:	d413      	bmi.n	8005ef4 <_printf_i+0x23c>
 8005ecc:	68e0      	ldr	r0, [r4, #12]
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	4298      	cmp	r0, r3
 8005ed2:	bfb8      	it	lt
 8005ed4:	4618      	movlt	r0, r3
 8005ed6:	e7a4      	b.n	8005e22 <_printf_i+0x16a>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4632      	mov	r2, r6
 8005edc:	4649      	mov	r1, r9
 8005ede:	4640      	mov	r0, r8
 8005ee0:	47d0      	blx	sl
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d09b      	beq.n	8005e1e <_printf_i+0x166>
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	68e3      	ldr	r3, [r4, #12]
 8005eea:	9903      	ldr	r1, [sp, #12]
 8005eec:	1a5b      	subs	r3, r3, r1
 8005eee:	42ab      	cmp	r3, r5
 8005ef0:	dcf2      	bgt.n	8005ed8 <_printf_i+0x220>
 8005ef2:	e7eb      	b.n	8005ecc <_printf_i+0x214>
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	f104 0619 	add.w	r6, r4, #25
 8005efa:	e7f5      	b.n	8005ee8 <_printf_i+0x230>
 8005efc:	08006b99 	.word	0x08006b99
 8005f00:	08006baa 	.word	0x08006baa

08005f04 <_scanf_chars>:
 8005f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f08:	4615      	mov	r5, r2
 8005f0a:	688a      	ldr	r2, [r1, #8]
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	b932      	cbnz	r2, 8005f20 <_scanf_chars+0x1c>
 8005f12:	698a      	ldr	r2, [r1, #24]
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2201      	moveq	r2, #1
 8005f1a:	f04f 32ff 	movne.w	r2, #4294967295
 8005f1e:	608a      	str	r2, [r1, #8]
 8005f20:	2700      	movs	r7, #0
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005fb0 <_scanf_chars+0xac>
 8005f28:	06d1      	lsls	r1, r2, #27
 8005f2a:	bf5f      	itttt	pl
 8005f2c:	681a      	ldrpl	r2, [r3, #0]
 8005f2e:	1d11      	addpl	r1, r2, #4
 8005f30:	6019      	strpl	r1, [r3, #0]
 8005f32:	6816      	ldrpl	r6, [r2, #0]
 8005f34:	69a0      	ldr	r0, [r4, #24]
 8005f36:	b188      	cbz	r0, 8005f5c <_scanf_chars+0x58>
 8005f38:	2801      	cmp	r0, #1
 8005f3a:	d107      	bne.n	8005f4c <_scanf_chars+0x48>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	6963      	ldr	r3, [r4, #20]
 8005f42:	5c9b      	ldrb	r3, [r3, r2]
 8005f44:	b953      	cbnz	r3, 8005f5c <_scanf_chars+0x58>
 8005f46:	bb27      	cbnz	r7, 8005f92 <_scanf_chars+0x8e>
 8005f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f4c:	2802      	cmp	r0, #2
 8005f4e:	d120      	bne.n	8005f92 <_scanf_chars+0x8e>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005f58:	071b      	lsls	r3, r3, #28
 8005f5a:	d41a      	bmi.n	8005f92 <_scanf_chars+0x8e>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	3701      	adds	r7, #1
 8005f60:	06da      	lsls	r2, r3, #27
 8005f62:	bf5e      	ittt	pl
 8005f64:	682b      	ldrpl	r3, [r5, #0]
 8005f66:	781b      	ldrbpl	r3, [r3, #0]
 8005f68:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005f6c:	682a      	ldr	r2, [r5, #0]
 8005f6e:	686b      	ldr	r3, [r5, #4]
 8005f70:	3201      	adds	r2, #1
 8005f72:	602a      	str	r2, [r5, #0]
 8005f74:	68a2      	ldr	r2, [r4, #8]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	3a01      	subs	r2, #1
 8005f7a:	606b      	str	r3, [r5, #4]
 8005f7c:	60a2      	str	r2, [r4, #8]
 8005f7e:	b142      	cbz	r2, 8005f92 <_scanf_chars+0x8e>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dcd7      	bgt.n	8005f34 <_scanf_chars+0x30>
 8005f84:	4629      	mov	r1, r5
 8005f86:	4640      	mov	r0, r8
 8005f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f8c:	4798      	blx	r3
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d0d0      	beq.n	8005f34 <_scanf_chars+0x30>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f013 0310 	ands.w	r3, r3, #16
 8005f98:	d105      	bne.n	8005fa6 <_scanf_chars+0xa2>
 8005f9a:	68e2      	ldr	r2, [r4, #12]
 8005f9c:	3201      	adds	r2, #1
 8005f9e:	60e2      	str	r2, [r4, #12]
 8005fa0:	69a2      	ldr	r2, [r4, #24]
 8005fa2:	b102      	cbz	r2, 8005fa6 <_scanf_chars+0xa2>
 8005fa4:	7033      	strb	r3, [r6, #0]
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	2000      	movs	r0, #0
 8005faa:	441f      	add	r7, r3
 8005fac:	6127      	str	r7, [r4, #16]
 8005fae:	e7cb      	b.n	8005f48 <_scanf_chars+0x44>
 8005fb0:	08006bd7 	.word	0x08006bd7

08005fb4 <_scanf_i>:
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	460c      	mov	r4, r1
 8005fba:	4698      	mov	r8, r3
 8005fbc:	4b72      	ldr	r3, [pc, #456]	; (8006188 <_scanf_i+0x1d4>)
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fc8:	ab03      	add	r3, sp, #12
 8005fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005fce:	4b6f      	ldr	r3, [pc, #444]	; (800618c <_scanf_i+0x1d8>)
 8005fd0:	69a1      	ldr	r1, [r4, #24]
 8005fd2:	4a6f      	ldr	r2, [pc, #444]	; (8006190 <_scanf_i+0x1dc>)
 8005fd4:	4627      	mov	r7, r4
 8005fd6:	2903      	cmp	r1, #3
 8005fd8:	bf18      	it	ne
 8005fda:	461a      	movne	r2, r3
 8005fdc:	68a3      	ldr	r3, [r4, #8]
 8005fde:	9201      	str	r2, [sp, #4]
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005fe6:	bf81      	itttt	hi
 8005fe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005fec:	eb03 0905 	addhi.w	r9, r3, r5
 8005ff0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ff4:	60a3      	strhi	r3, [r4, #8]
 8005ff6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005ffa:	bf98      	it	ls
 8005ffc:	f04f 0900 	movls.w	r9, #0
 8006000:	463d      	mov	r5, r7
 8006002:	f04f 0b00 	mov.w	fp, #0
 8006006:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	6831      	ldr	r1, [r6, #0]
 800600e:	ab03      	add	r3, sp, #12
 8006010:	2202      	movs	r2, #2
 8006012:	7809      	ldrb	r1, [r1, #0]
 8006014:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006018:	f000 fa38 	bl	800648c <memchr>
 800601c:	b328      	cbz	r0, 800606a <_scanf_i+0xb6>
 800601e:	f1bb 0f01 	cmp.w	fp, #1
 8006022:	d159      	bne.n	80060d8 <_scanf_i+0x124>
 8006024:	6862      	ldr	r2, [r4, #4]
 8006026:	b92a      	cbnz	r2, 8006034 <_scanf_i+0x80>
 8006028:	2308      	movs	r3, #8
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	6063      	str	r3, [r4, #4]
 800602e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006032:	6022      	str	r2, [r4, #0]
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800603a:	6022      	str	r2, [r4, #0]
 800603c:	68a2      	ldr	r2, [r4, #8]
 800603e:	1e51      	subs	r1, r2, #1
 8006040:	60a1      	str	r1, [r4, #8]
 8006042:	b192      	cbz	r2, 800606a <_scanf_i+0xb6>
 8006044:	6832      	ldr	r2, [r6, #0]
 8006046:	1c51      	adds	r1, r2, #1
 8006048:	6031      	str	r1, [r6, #0]
 800604a:	7812      	ldrb	r2, [r2, #0]
 800604c:	f805 2b01 	strb.w	r2, [r5], #1
 8006050:	6872      	ldr	r2, [r6, #4]
 8006052:	3a01      	subs	r2, #1
 8006054:	2a00      	cmp	r2, #0
 8006056:	6072      	str	r2, [r6, #4]
 8006058:	dc07      	bgt.n	800606a <_scanf_i+0xb6>
 800605a:	4631      	mov	r1, r6
 800605c:	4650      	mov	r0, sl
 800605e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006062:	4790      	blx	r2
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 8085 	bne.w	8006174 <_scanf_i+0x1c0>
 800606a:	f10b 0b01 	add.w	fp, fp, #1
 800606e:	f1bb 0f03 	cmp.w	fp, #3
 8006072:	d1cb      	bne.n	800600c <_scanf_i+0x58>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	b90b      	cbnz	r3, 800607c <_scanf_i+0xc8>
 8006078:	230a      	movs	r3, #10
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	4945      	ldr	r1, [pc, #276]	; (8006194 <_scanf_i+0x1e0>)
 8006080:	6960      	ldr	r0, [r4, #20]
 8006082:	1ac9      	subs	r1, r1, r3
 8006084:	f000 f888 	bl	8006198 <__sccl>
 8006088:	f04f 0b00 	mov.w	fp, #0
 800608c:	68a3      	ldr	r3, [r4, #8]
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d03d      	beq.n	8006110 <_scanf_i+0x15c>
 8006094:	6831      	ldr	r1, [r6, #0]
 8006096:	6960      	ldr	r0, [r4, #20]
 8006098:	f891 c000 	ldrb.w	ip, [r1]
 800609c:	f810 000c 	ldrb.w	r0, [r0, ip]
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d035      	beq.n	8006110 <_scanf_i+0x15c>
 80060a4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80060a8:	d124      	bne.n	80060f4 <_scanf_i+0x140>
 80060aa:	0510      	lsls	r0, r2, #20
 80060ac:	d522      	bpl.n	80060f4 <_scanf_i+0x140>
 80060ae:	f10b 0b01 	add.w	fp, fp, #1
 80060b2:	f1b9 0f00 	cmp.w	r9, #0
 80060b6:	d003      	beq.n	80060c0 <_scanf_i+0x10c>
 80060b8:	3301      	adds	r3, #1
 80060ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80060be:	60a3      	str	r3, [r4, #8]
 80060c0:	6873      	ldr	r3, [r6, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	6073      	str	r3, [r6, #4]
 80060c8:	dd1b      	ble.n	8006102 <_scanf_i+0x14e>
 80060ca:	6833      	ldr	r3, [r6, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	6033      	str	r3, [r6, #0]
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	60a3      	str	r3, [r4, #8]
 80060d6:	e7d9      	b.n	800608c <_scanf_i+0xd8>
 80060d8:	f1bb 0f02 	cmp.w	fp, #2
 80060dc:	d1ae      	bne.n	800603c <_scanf_i+0x88>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80060e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80060e8:	d1bf      	bne.n	800606a <_scanf_i+0xb6>
 80060ea:	2310      	movs	r3, #16
 80060ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	e7a2      	b.n	800603a <_scanf_i+0x86>
 80060f4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80060f8:	6022      	str	r2, [r4, #0]
 80060fa:	780b      	ldrb	r3, [r1, #0]
 80060fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006100:	e7de      	b.n	80060c0 <_scanf_i+0x10c>
 8006102:	4631      	mov	r1, r6
 8006104:	4650      	mov	r0, sl
 8006106:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800610a:	4798      	blx	r3
 800610c:	2800      	cmp	r0, #0
 800610e:	d0df      	beq.n	80060d0 <_scanf_i+0x11c>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	05d9      	lsls	r1, r3, #23
 8006114:	d50d      	bpl.n	8006132 <_scanf_i+0x17e>
 8006116:	42bd      	cmp	r5, r7
 8006118:	d909      	bls.n	800612e <_scanf_i+0x17a>
 800611a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800611e:	4632      	mov	r2, r6
 8006120:	4650      	mov	r0, sl
 8006122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006126:	f105 39ff 	add.w	r9, r5, #4294967295
 800612a:	4798      	blx	r3
 800612c:	464d      	mov	r5, r9
 800612e:	42bd      	cmp	r5, r7
 8006130:	d028      	beq.n	8006184 <_scanf_i+0x1d0>
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	f012 0210 	ands.w	r2, r2, #16
 8006138:	d113      	bne.n	8006162 <_scanf_i+0x1ae>
 800613a:	702a      	strb	r2, [r5, #0]
 800613c:	4639      	mov	r1, r7
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	4650      	mov	r0, sl
 8006142:	9e01      	ldr	r6, [sp, #4]
 8006144:	47b0      	blx	r6
 8006146:	f8d8 3000 	ldr.w	r3, [r8]
 800614a:	6821      	ldr	r1, [r4, #0]
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	f8c8 2000 	str.w	r2, [r8]
 8006152:	f011 0f20 	tst.w	r1, #32
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	d00f      	beq.n	800617a <_scanf_i+0x1c6>
 800615a:	6018      	str	r0, [r3, #0]
 800615c:	68e3      	ldr	r3, [r4, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60e3      	str	r3, [r4, #12]
 8006162:	2000      	movs	r0, #0
 8006164:	1bed      	subs	r5, r5, r7
 8006166:	44ab      	add	fp, r5
 8006168:	6925      	ldr	r5, [r4, #16]
 800616a:	445d      	add	r5, fp
 800616c:	6125      	str	r5, [r4, #16]
 800616e:	b007      	add	sp, #28
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	f04f 0b00 	mov.w	fp, #0
 8006178:	e7ca      	b.n	8006110 <_scanf_i+0x15c>
 800617a:	07ca      	lsls	r2, r1, #31
 800617c:	bf4c      	ite	mi
 800617e:	8018      	strhmi	r0, [r3, #0]
 8006180:	6018      	strpl	r0, [r3, #0]
 8006182:	e7eb      	b.n	800615c <_scanf_i+0x1a8>
 8006184:	2001      	movs	r0, #1
 8006186:	e7f2      	b.n	800616e <_scanf_i+0x1ba>
 8006188:	08006924 	.word	0x08006924
 800618c:	08006415 	.word	0x08006415
 8006190:	08006319 	.word	0x08006319
 8006194:	08006bd4 	.word	0x08006bd4

08006198 <__sccl>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	780b      	ldrb	r3, [r1, #0]
 800619c:	4604      	mov	r4, r0
 800619e:	2b5e      	cmp	r3, #94	; 0x5e
 80061a0:	bf13      	iteet	ne
 80061a2:	2200      	movne	r2, #0
 80061a4:	2201      	moveq	r2, #1
 80061a6:	784b      	ldrbeq	r3, [r1, #1]
 80061a8:	1c48      	addne	r0, r1, #1
 80061aa:	bf08      	it	eq
 80061ac:	1c88      	addeq	r0, r1, #2
 80061ae:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80061b2:	1e61      	subs	r1, r4, #1
 80061b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80061b8:	42a9      	cmp	r1, r5
 80061ba:	d1fb      	bne.n	80061b4 <__sccl+0x1c>
 80061bc:	b90b      	cbnz	r3, 80061c2 <__sccl+0x2a>
 80061be:	3801      	subs	r0, #1
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	f082 0101 	eor.w	r1, r2, #1
 80061c6:	54e1      	strb	r1, [r4, r3]
 80061c8:	1c42      	adds	r2, r0, #1
 80061ca:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80061ce:	4610      	mov	r0, r2
 80061d0:	2d2d      	cmp	r5, #45	; 0x2d
 80061d2:	f102 36ff 	add.w	r6, r2, #4294967295
 80061d6:	d006      	beq.n	80061e6 <__sccl+0x4e>
 80061d8:	2d5d      	cmp	r5, #93	; 0x5d
 80061da:	d0f1      	beq.n	80061c0 <__sccl+0x28>
 80061dc:	b90d      	cbnz	r5, 80061e2 <__sccl+0x4a>
 80061de:	4630      	mov	r0, r6
 80061e0:	e7ee      	b.n	80061c0 <__sccl+0x28>
 80061e2:	462b      	mov	r3, r5
 80061e4:	e7ef      	b.n	80061c6 <__sccl+0x2e>
 80061e6:	7816      	ldrb	r6, [r2, #0]
 80061e8:	2e5d      	cmp	r6, #93	; 0x5d
 80061ea:	d0fa      	beq.n	80061e2 <__sccl+0x4a>
 80061ec:	42b3      	cmp	r3, r6
 80061ee:	dcf8      	bgt.n	80061e2 <__sccl+0x4a>
 80061f0:	4618      	mov	r0, r3
 80061f2:	3001      	adds	r0, #1
 80061f4:	4286      	cmp	r6, r0
 80061f6:	5421      	strb	r1, [r4, r0]
 80061f8:	dcfb      	bgt.n	80061f2 <__sccl+0x5a>
 80061fa:	43d8      	mvns	r0, r3
 80061fc:	4430      	add	r0, r6
 80061fe:	42b3      	cmp	r3, r6
 8006200:	bfa8      	it	ge
 8006202:	2000      	movge	r0, #0
 8006204:	1c5d      	adds	r5, r3, #1
 8006206:	182b      	adds	r3, r5, r0
 8006208:	3202      	adds	r2, #2
 800620a:	e7de      	b.n	80061ca <__sccl+0x32>

0800620c <_strtol_l.isra.0>:
 800620c:	2b01      	cmp	r3, #1
 800620e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006212:	4686      	mov	lr, r0
 8006214:	d001      	beq.n	800621a <_strtol_l.isra.0+0xe>
 8006216:	2b24      	cmp	r3, #36	; 0x24
 8006218:	d906      	bls.n	8006228 <_strtol_l.isra.0+0x1c>
 800621a:	f7ff f92f 	bl	800547c <__errno>
 800621e:	2316      	movs	r3, #22
 8006220:	6003      	str	r3, [r0, #0]
 8006222:	2000      	movs	r0, #0
 8006224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006228:	468c      	mov	ip, r1
 800622a:	4e3a      	ldr	r6, [pc, #232]	; (8006314 <_strtol_l.isra.0+0x108>)
 800622c:	4660      	mov	r0, ip
 800622e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006232:	5da5      	ldrb	r5, [r4, r6]
 8006234:	f015 0508 	ands.w	r5, r5, #8
 8006238:	d1f8      	bne.n	800622c <_strtol_l.isra.0+0x20>
 800623a:	2c2d      	cmp	r4, #45	; 0x2d
 800623c:	d133      	bne.n	80062a6 <_strtol_l.isra.0+0x9a>
 800623e:	f04f 0801 	mov.w	r8, #1
 8006242:	f89c 4000 	ldrb.w	r4, [ip]
 8006246:	f100 0c02 	add.w	ip, r0, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d05d      	beq.n	800630a <_strtol_l.isra.0+0xfe>
 800624e:	2b10      	cmp	r3, #16
 8006250:	d10c      	bne.n	800626c <_strtol_l.isra.0+0x60>
 8006252:	2c30      	cmp	r4, #48	; 0x30
 8006254:	d10a      	bne.n	800626c <_strtol_l.isra.0+0x60>
 8006256:	f89c 0000 	ldrb.w	r0, [ip]
 800625a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800625e:	2858      	cmp	r0, #88	; 0x58
 8006260:	d14e      	bne.n	8006300 <_strtol_l.isra.0+0xf4>
 8006262:	2310      	movs	r3, #16
 8006264:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006268:	f10c 0c02 	add.w	ip, ip, #2
 800626c:	2500      	movs	r5, #0
 800626e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006272:	3f01      	subs	r7, #1
 8006274:	fbb7 f9f3 	udiv	r9, r7, r3
 8006278:	4628      	mov	r0, r5
 800627a:	fb03 7a19 	mls	sl, r3, r9, r7
 800627e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006282:	2e09      	cmp	r6, #9
 8006284:	d818      	bhi.n	80062b8 <_strtol_l.isra.0+0xac>
 8006286:	4634      	mov	r4, r6
 8006288:	42a3      	cmp	r3, r4
 800628a:	dd24      	ble.n	80062d6 <_strtol_l.isra.0+0xca>
 800628c:	2d00      	cmp	r5, #0
 800628e:	db1f      	blt.n	80062d0 <_strtol_l.isra.0+0xc4>
 8006290:	4581      	cmp	r9, r0
 8006292:	d31d      	bcc.n	80062d0 <_strtol_l.isra.0+0xc4>
 8006294:	d101      	bne.n	800629a <_strtol_l.isra.0+0x8e>
 8006296:	45a2      	cmp	sl, r4
 8006298:	db1a      	blt.n	80062d0 <_strtol_l.isra.0+0xc4>
 800629a:	2501      	movs	r5, #1
 800629c:	fb00 4003 	mla	r0, r0, r3, r4
 80062a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80062a4:	e7eb      	b.n	800627e <_strtol_l.isra.0+0x72>
 80062a6:	2c2b      	cmp	r4, #43	; 0x2b
 80062a8:	bf08      	it	eq
 80062aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80062ae:	46a8      	mov	r8, r5
 80062b0:	bf08      	it	eq
 80062b2:	f100 0c02 	addeq.w	ip, r0, #2
 80062b6:	e7c8      	b.n	800624a <_strtol_l.isra.0+0x3e>
 80062b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80062bc:	2e19      	cmp	r6, #25
 80062be:	d801      	bhi.n	80062c4 <_strtol_l.isra.0+0xb8>
 80062c0:	3c37      	subs	r4, #55	; 0x37
 80062c2:	e7e1      	b.n	8006288 <_strtol_l.isra.0+0x7c>
 80062c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80062c8:	2e19      	cmp	r6, #25
 80062ca:	d804      	bhi.n	80062d6 <_strtol_l.isra.0+0xca>
 80062cc:	3c57      	subs	r4, #87	; 0x57
 80062ce:	e7db      	b.n	8006288 <_strtol_l.isra.0+0x7c>
 80062d0:	f04f 35ff 	mov.w	r5, #4294967295
 80062d4:	e7e4      	b.n	80062a0 <_strtol_l.isra.0+0x94>
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	da08      	bge.n	80062ec <_strtol_l.isra.0+0xe0>
 80062da:	2322      	movs	r3, #34	; 0x22
 80062dc:	4638      	mov	r0, r7
 80062de:	f8ce 3000 	str.w	r3, [lr]
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	d09e      	beq.n	8006224 <_strtol_l.isra.0+0x18>
 80062e6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80062ea:	e007      	b.n	80062fc <_strtol_l.isra.0+0xf0>
 80062ec:	f1b8 0f00 	cmp.w	r8, #0
 80062f0:	d000      	beq.n	80062f4 <_strtol_l.isra.0+0xe8>
 80062f2:	4240      	negs	r0, r0
 80062f4:	2a00      	cmp	r2, #0
 80062f6:	d095      	beq.n	8006224 <_strtol_l.isra.0+0x18>
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	d1f4      	bne.n	80062e6 <_strtol_l.isra.0+0xda>
 80062fc:	6011      	str	r1, [r2, #0]
 80062fe:	e791      	b.n	8006224 <_strtol_l.isra.0+0x18>
 8006300:	2430      	movs	r4, #48	; 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1b2      	bne.n	800626c <_strtol_l.isra.0+0x60>
 8006306:	2308      	movs	r3, #8
 8006308:	e7b0      	b.n	800626c <_strtol_l.isra.0+0x60>
 800630a:	2c30      	cmp	r4, #48	; 0x30
 800630c:	d0a3      	beq.n	8006256 <_strtol_l.isra.0+0x4a>
 800630e:	230a      	movs	r3, #10
 8006310:	e7ac      	b.n	800626c <_strtol_l.isra.0+0x60>
 8006312:	bf00      	nop
 8006314:	08006bd7 	.word	0x08006bd7

08006318 <_strtol_r>:
 8006318:	f7ff bf78 	b.w	800620c <_strtol_l.isra.0>

0800631c <_strtoul_l.isra.0>:
 800631c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006320:	468c      	mov	ip, r1
 8006322:	4686      	mov	lr, r0
 8006324:	4e3a      	ldr	r6, [pc, #232]	; (8006410 <_strtoul_l.isra.0+0xf4>)
 8006326:	4660      	mov	r0, ip
 8006328:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800632c:	5da5      	ldrb	r5, [r4, r6]
 800632e:	f015 0508 	ands.w	r5, r5, #8
 8006332:	d1f8      	bne.n	8006326 <_strtoul_l.isra.0+0xa>
 8006334:	2c2d      	cmp	r4, #45	; 0x2d
 8006336:	d134      	bne.n	80063a2 <_strtoul_l.isra.0+0x86>
 8006338:	f04f 0801 	mov.w	r8, #1
 800633c:	f89c 4000 	ldrb.w	r4, [ip]
 8006340:	f100 0c02 	add.w	ip, r0, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d05e      	beq.n	8006406 <_strtoul_l.isra.0+0xea>
 8006348:	2b10      	cmp	r3, #16
 800634a:	d10c      	bne.n	8006366 <_strtoul_l.isra.0+0x4a>
 800634c:	2c30      	cmp	r4, #48	; 0x30
 800634e:	d10a      	bne.n	8006366 <_strtoul_l.isra.0+0x4a>
 8006350:	f89c 0000 	ldrb.w	r0, [ip]
 8006354:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006358:	2858      	cmp	r0, #88	; 0x58
 800635a:	d14f      	bne.n	80063fc <_strtoul_l.isra.0+0xe0>
 800635c:	2310      	movs	r3, #16
 800635e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006362:	f10c 0c02 	add.w	ip, ip, #2
 8006366:	f04f 37ff 	mov.w	r7, #4294967295
 800636a:	fbb7 f7f3 	udiv	r7, r7, r3
 800636e:	2500      	movs	r5, #0
 8006370:	fb03 f907 	mul.w	r9, r3, r7
 8006374:	4628      	mov	r0, r5
 8006376:	ea6f 0909 	mvn.w	r9, r9
 800637a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800637e:	2e09      	cmp	r6, #9
 8006380:	d818      	bhi.n	80063b4 <_strtoul_l.isra.0+0x98>
 8006382:	4634      	mov	r4, r6
 8006384:	42a3      	cmp	r3, r4
 8006386:	dd24      	ble.n	80063d2 <_strtoul_l.isra.0+0xb6>
 8006388:	2d00      	cmp	r5, #0
 800638a:	db1f      	blt.n	80063cc <_strtoul_l.isra.0+0xb0>
 800638c:	4287      	cmp	r7, r0
 800638e:	d31d      	bcc.n	80063cc <_strtoul_l.isra.0+0xb0>
 8006390:	d101      	bne.n	8006396 <_strtoul_l.isra.0+0x7a>
 8006392:	45a1      	cmp	r9, r4
 8006394:	db1a      	blt.n	80063cc <_strtoul_l.isra.0+0xb0>
 8006396:	2501      	movs	r5, #1
 8006398:	fb00 4003 	mla	r0, r0, r3, r4
 800639c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80063a0:	e7eb      	b.n	800637a <_strtoul_l.isra.0+0x5e>
 80063a2:	2c2b      	cmp	r4, #43	; 0x2b
 80063a4:	bf08      	it	eq
 80063a6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80063aa:	46a8      	mov	r8, r5
 80063ac:	bf08      	it	eq
 80063ae:	f100 0c02 	addeq.w	ip, r0, #2
 80063b2:	e7c7      	b.n	8006344 <_strtoul_l.isra.0+0x28>
 80063b4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80063b8:	2e19      	cmp	r6, #25
 80063ba:	d801      	bhi.n	80063c0 <_strtoul_l.isra.0+0xa4>
 80063bc:	3c37      	subs	r4, #55	; 0x37
 80063be:	e7e1      	b.n	8006384 <_strtoul_l.isra.0+0x68>
 80063c0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80063c4:	2e19      	cmp	r6, #25
 80063c6:	d804      	bhi.n	80063d2 <_strtoul_l.isra.0+0xb6>
 80063c8:	3c57      	subs	r4, #87	; 0x57
 80063ca:	e7db      	b.n	8006384 <_strtoul_l.isra.0+0x68>
 80063cc:	f04f 35ff 	mov.w	r5, #4294967295
 80063d0:	e7e4      	b.n	800639c <_strtoul_l.isra.0+0x80>
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	da07      	bge.n	80063e6 <_strtoul_l.isra.0+0xca>
 80063d6:	2322      	movs	r3, #34	; 0x22
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	f8ce 3000 	str.w	r3, [lr]
 80063e0:	b942      	cbnz	r2, 80063f4 <_strtoul_l.isra.0+0xd8>
 80063e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	d000      	beq.n	80063ee <_strtoul_l.isra.0+0xd2>
 80063ec:	4240      	negs	r0, r0
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	d0f7      	beq.n	80063e2 <_strtoul_l.isra.0+0xc6>
 80063f2:	b10d      	cbz	r5, 80063f8 <_strtoul_l.isra.0+0xdc>
 80063f4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80063f8:	6011      	str	r1, [r2, #0]
 80063fa:	e7f2      	b.n	80063e2 <_strtoul_l.isra.0+0xc6>
 80063fc:	2430      	movs	r4, #48	; 0x30
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1b1      	bne.n	8006366 <_strtoul_l.isra.0+0x4a>
 8006402:	2308      	movs	r3, #8
 8006404:	e7af      	b.n	8006366 <_strtoul_l.isra.0+0x4a>
 8006406:	2c30      	cmp	r4, #48	; 0x30
 8006408:	d0a2      	beq.n	8006350 <_strtoul_l.isra.0+0x34>
 800640a:	230a      	movs	r3, #10
 800640c:	e7ab      	b.n	8006366 <_strtoul_l.isra.0+0x4a>
 800640e:	bf00      	nop
 8006410:	08006bd7 	.word	0x08006bd7

08006414 <_strtoul_r>:
 8006414:	f7ff bf82 	b.w	800631c <_strtoul_l.isra.0>

08006418 <__submore>:
 8006418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006424:	4299      	cmp	r1, r3
 8006426:	d11b      	bne.n	8006460 <__submore+0x48>
 8006428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800642c:	f000 f8b0 	bl	8006590 <_malloc_r>
 8006430:	b918      	cbnz	r0, 800643a <__submore+0x22>
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800643a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800643e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006440:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006444:	6360      	str	r0, [r4, #52]	; 0x34
 8006446:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800644a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800644e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006452:	7043      	strb	r3, [r0, #1]
 8006454:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006458:	7003      	strb	r3, [r0, #0]
 800645a:	6020      	str	r0, [r4, #0]
 800645c:	2000      	movs	r0, #0
 800645e:	e7ea      	b.n	8006436 <__submore+0x1e>
 8006460:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006462:	0077      	lsls	r7, r6, #1
 8006464:	463a      	mov	r2, r7
 8006466:	f000 f8ed 	bl	8006644 <_realloc_r>
 800646a:	4605      	mov	r5, r0
 800646c:	2800      	cmp	r0, #0
 800646e:	d0e0      	beq.n	8006432 <__submore+0x1a>
 8006470:	eb00 0806 	add.w	r8, r0, r6
 8006474:	4601      	mov	r1, r0
 8006476:	4632      	mov	r2, r6
 8006478:	4640      	mov	r0, r8
 800647a:	f000 f815 	bl	80064a8 <memcpy>
 800647e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006482:	f8c4 8000 	str.w	r8, [r4]
 8006486:	e7e9      	b.n	800645c <__submore+0x44>

08006488 <__retarget_lock_acquire_recursive>:
 8006488:	4770      	bx	lr

0800648a <__retarget_lock_release_recursive>:
 800648a:	4770      	bx	lr

0800648c <memchr>:
 800648c:	4603      	mov	r3, r0
 800648e:	b510      	push	{r4, lr}
 8006490:	b2c9      	uxtb	r1, r1
 8006492:	4402      	add	r2, r0
 8006494:	4293      	cmp	r3, r2
 8006496:	4618      	mov	r0, r3
 8006498:	d101      	bne.n	800649e <memchr+0x12>
 800649a:	2000      	movs	r0, #0
 800649c:	e003      	b.n	80064a6 <memchr+0x1a>
 800649e:	7804      	ldrb	r4, [r0, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	428c      	cmp	r4, r1
 80064a4:	d1f6      	bne.n	8006494 <memchr+0x8>
 80064a6:	bd10      	pop	{r4, pc}

080064a8 <memcpy>:
 80064a8:	440a      	add	r2, r1
 80064aa:	4291      	cmp	r1, r2
 80064ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80064b0:	d100      	bne.n	80064b4 <memcpy+0xc>
 80064b2:	4770      	bx	lr
 80064b4:	b510      	push	{r4, lr}
 80064b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ba:	4291      	cmp	r1, r2
 80064bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064c0:	d1f9      	bne.n	80064b6 <memcpy+0xe>
 80064c2:	bd10      	pop	{r4, pc}

080064c4 <memmove>:
 80064c4:	4288      	cmp	r0, r1
 80064c6:	b510      	push	{r4, lr}
 80064c8:	eb01 0402 	add.w	r4, r1, r2
 80064cc:	d902      	bls.n	80064d4 <memmove+0x10>
 80064ce:	4284      	cmp	r4, r0
 80064d0:	4623      	mov	r3, r4
 80064d2:	d807      	bhi.n	80064e4 <memmove+0x20>
 80064d4:	1e43      	subs	r3, r0, #1
 80064d6:	42a1      	cmp	r1, r4
 80064d8:	d008      	beq.n	80064ec <memmove+0x28>
 80064da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064e2:	e7f8      	b.n	80064d6 <memmove+0x12>
 80064e4:	4601      	mov	r1, r0
 80064e6:	4402      	add	r2, r0
 80064e8:	428a      	cmp	r2, r1
 80064ea:	d100      	bne.n	80064ee <memmove+0x2a>
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064f6:	e7f7      	b.n	80064e8 <memmove+0x24>

080064f8 <_free_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4605      	mov	r5, r0
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d043      	beq.n	8006588 <_free_r+0x90>
 8006500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006504:	1f0c      	subs	r4, r1, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfb8      	it	lt
 800650a:	18e4      	addlt	r4, r4, r3
 800650c:	f000 f8d0 	bl	80066b0 <__malloc_lock>
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <_free_r+0x94>)
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	4610      	mov	r0, r2
 8006516:	b933      	cbnz	r3, 8006526 <_free_r+0x2e>
 8006518:	6063      	str	r3, [r4, #4]
 800651a:	6014      	str	r4, [r2, #0]
 800651c:	4628      	mov	r0, r5
 800651e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006522:	f000 b8cb 	b.w	80066bc <__malloc_unlock>
 8006526:	42a3      	cmp	r3, r4
 8006528:	d90a      	bls.n	8006540 <_free_r+0x48>
 800652a:	6821      	ldr	r1, [r4, #0]
 800652c:	1862      	adds	r2, r4, r1
 800652e:	4293      	cmp	r3, r2
 8006530:	bf01      	itttt	eq
 8006532:	681a      	ldreq	r2, [r3, #0]
 8006534:	685b      	ldreq	r3, [r3, #4]
 8006536:	1852      	addeq	r2, r2, r1
 8006538:	6022      	streq	r2, [r4, #0]
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	e7ed      	b.n	800651c <_free_r+0x24>
 8006540:	461a      	mov	r2, r3
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	b10b      	cbz	r3, 800654a <_free_r+0x52>
 8006546:	42a3      	cmp	r3, r4
 8006548:	d9fa      	bls.n	8006540 <_free_r+0x48>
 800654a:	6811      	ldr	r1, [r2, #0]
 800654c:	1850      	adds	r0, r2, r1
 800654e:	42a0      	cmp	r0, r4
 8006550:	d10b      	bne.n	800656a <_free_r+0x72>
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	4401      	add	r1, r0
 8006556:	1850      	adds	r0, r2, r1
 8006558:	4283      	cmp	r3, r0
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	d1de      	bne.n	800651c <_free_r+0x24>
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4401      	add	r1, r0
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	6053      	str	r3, [r2, #4]
 8006568:	e7d8      	b.n	800651c <_free_r+0x24>
 800656a:	d902      	bls.n	8006572 <_free_r+0x7a>
 800656c:	230c      	movs	r3, #12
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	e7d4      	b.n	800651c <_free_r+0x24>
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1821      	adds	r1, r4, r0
 8006576:	428b      	cmp	r3, r1
 8006578:	bf01      	itttt	eq
 800657a:	6819      	ldreq	r1, [r3, #0]
 800657c:	685b      	ldreq	r3, [r3, #4]
 800657e:	1809      	addeq	r1, r1, r0
 8006580:	6021      	streq	r1, [r4, #0]
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6054      	str	r4, [r2, #4]
 8006586:	e7c9      	b.n	800651c <_free_r+0x24>
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	200000d0 	.word	0x200000d0

08006590 <_malloc_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	1ccd      	adds	r5, r1, #3
 8006594:	f025 0503 	bic.w	r5, r5, #3
 8006598:	3508      	adds	r5, #8
 800659a:	2d0c      	cmp	r5, #12
 800659c:	bf38      	it	cc
 800659e:	250c      	movcc	r5, #12
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	4606      	mov	r6, r0
 80065a4:	db01      	blt.n	80065aa <_malloc_r+0x1a>
 80065a6:	42a9      	cmp	r1, r5
 80065a8:	d903      	bls.n	80065b2 <_malloc_r+0x22>
 80065aa:	230c      	movs	r3, #12
 80065ac:	6033      	str	r3, [r6, #0]
 80065ae:	2000      	movs	r0, #0
 80065b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b2:	f000 f87d 	bl	80066b0 <__malloc_lock>
 80065b6:	4921      	ldr	r1, [pc, #132]	; (800663c <_malloc_r+0xac>)
 80065b8:	680a      	ldr	r2, [r1, #0]
 80065ba:	4614      	mov	r4, r2
 80065bc:	b99c      	cbnz	r4, 80065e6 <_malloc_r+0x56>
 80065be:	4f20      	ldr	r7, [pc, #128]	; (8006640 <_malloc_r+0xb0>)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	b923      	cbnz	r3, 80065ce <_malloc_r+0x3e>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4630      	mov	r0, r6
 80065c8:	f000 f862 	bl	8006690 <_sbrk_r>
 80065cc:	6038      	str	r0, [r7, #0]
 80065ce:	4629      	mov	r1, r5
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 f85d 	bl	8006690 <_sbrk_r>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d123      	bne.n	8006622 <_malloc_r+0x92>
 80065da:	230c      	movs	r3, #12
 80065dc:	4630      	mov	r0, r6
 80065de:	6033      	str	r3, [r6, #0]
 80065e0:	f000 f86c 	bl	80066bc <__malloc_unlock>
 80065e4:	e7e3      	b.n	80065ae <_malloc_r+0x1e>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	1b5b      	subs	r3, r3, r5
 80065ea:	d417      	bmi.n	800661c <_malloc_r+0x8c>
 80065ec:	2b0b      	cmp	r3, #11
 80065ee:	d903      	bls.n	80065f8 <_malloc_r+0x68>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	441c      	add	r4, r3
 80065f4:	6025      	str	r5, [r4, #0]
 80065f6:	e004      	b.n	8006602 <_malloc_r+0x72>
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	42a2      	cmp	r2, r4
 80065fc:	bf0c      	ite	eq
 80065fe:	600b      	streq	r3, [r1, #0]
 8006600:	6053      	strne	r3, [r2, #4]
 8006602:	4630      	mov	r0, r6
 8006604:	f000 f85a 	bl	80066bc <__malloc_unlock>
 8006608:	f104 000b 	add.w	r0, r4, #11
 800660c:	1d23      	adds	r3, r4, #4
 800660e:	f020 0007 	bic.w	r0, r0, #7
 8006612:	1ac2      	subs	r2, r0, r3
 8006614:	d0cc      	beq.n	80065b0 <_malloc_r+0x20>
 8006616:	1a1b      	subs	r3, r3, r0
 8006618:	50a3      	str	r3, [r4, r2]
 800661a:	e7c9      	b.n	80065b0 <_malloc_r+0x20>
 800661c:	4622      	mov	r2, r4
 800661e:	6864      	ldr	r4, [r4, #4]
 8006620:	e7cc      	b.n	80065bc <_malloc_r+0x2c>
 8006622:	1cc4      	adds	r4, r0, #3
 8006624:	f024 0403 	bic.w	r4, r4, #3
 8006628:	42a0      	cmp	r0, r4
 800662a:	d0e3      	beq.n	80065f4 <_malloc_r+0x64>
 800662c:	1a21      	subs	r1, r4, r0
 800662e:	4630      	mov	r0, r6
 8006630:	f000 f82e 	bl	8006690 <_sbrk_r>
 8006634:	3001      	adds	r0, #1
 8006636:	d1dd      	bne.n	80065f4 <_malloc_r+0x64>
 8006638:	e7cf      	b.n	80065da <_malloc_r+0x4a>
 800663a:	bf00      	nop
 800663c:	200000d0 	.word	0x200000d0
 8006640:	200000d4 	.word	0x200000d4

08006644 <_realloc_r>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	4607      	mov	r7, r0
 8006648:	4614      	mov	r4, r2
 800664a:	460e      	mov	r6, r1
 800664c:	b921      	cbnz	r1, 8006658 <_realloc_r+0x14>
 800664e:	4611      	mov	r1, r2
 8006650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006654:	f7ff bf9c 	b.w	8006590 <_malloc_r>
 8006658:	b922      	cbnz	r2, 8006664 <_realloc_r+0x20>
 800665a:	f7ff ff4d 	bl	80064f8 <_free_r>
 800665e:	4625      	mov	r5, r4
 8006660:	4628      	mov	r0, r5
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006664:	f000 f830 	bl	80066c8 <_malloc_usable_size_r>
 8006668:	42a0      	cmp	r0, r4
 800666a:	d20f      	bcs.n	800668c <_realloc_r+0x48>
 800666c:	4621      	mov	r1, r4
 800666e:	4638      	mov	r0, r7
 8006670:	f7ff ff8e 	bl	8006590 <_malloc_r>
 8006674:	4605      	mov	r5, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	d0f2      	beq.n	8006660 <_realloc_r+0x1c>
 800667a:	4631      	mov	r1, r6
 800667c:	4622      	mov	r2, r4
 800667e:	f7ff ff13 	bl	80064a8 <memcpy>
 8006682:	4631      	mov	r1, r6
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff ff37 	bl	80064f8 <_free_r>
 800668a:	e7e9      	b.n	8006660 <_realloc_r+0x1c>
 800668c:	4635      	mov	r5, r6
 800668e:	e7e7      	b.n	8006660 <_realloc_r+0x1c>

08006690 <_sbrk_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	2300      	movs	r3, #0
 8006694:	4d05      	ldr	r5, [pc, #20]	; (80066ac <_sbrk_r+0x1c>)
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	f7fa fd0c 	bl	80010b8 <_sbrk>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d102      	bne.n	80066aa <_sbrk_r+0x1a>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b103      	cbz	r3, 80066aa <_sbrk_r+0x1a>
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
 80066ac:	20000d14 	.word	0x20000d14

080066b0 <__malloc_lock>:
 80066b0:	4801      	ldr	r0, [pc, #4]	; (80066b8 <__malloc_lock+0x8>)
 80066b2:	f7ff bee9 	b.w	8006488 <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	20000d1c 	.word	0x20000d1c

080066bc <__malloc_unlock>:
 80066bc:	4801      	ldr	r0, [pc, #4]	; (80066c4 <__malloc_unlock+0x8>)
 80066be:	f7ff bee4 	b.w	800648a <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	20000d1c 	.word	0x20000d1c

080066c8 <_malloc_usable_size_r>:
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f18      	subs	r0, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfbc      	itt	lt
 80066d2:	580b      	ldrlt	r3, [r1, r0]
 80066d4:	18c0      	addlt	r0, r0, r3
 80066d6:	4770      	bx	lr

080066d8 <_init>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr

080066e4 <_fini>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr
