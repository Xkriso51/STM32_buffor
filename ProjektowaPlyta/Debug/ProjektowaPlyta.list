
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ec  080071ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080071ec  080071ec  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071ec  080071ec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080071f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff8  20000080  08007274  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  08007274  00021078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0e1  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a9  00000000  00000000  0002e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00030738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ee  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f14b  00000000  00000000  0004a91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbb0  00000000  00000000  00059a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  000e566c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b88 	.word	0x08006b88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08006b88 	.word	0x08006b88

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000176:	4b14      	ldr	r3, [pc, #80]	; (80001c8 <MX_DMA_Init+0x58>)
 8000178:	695b      	ldr	r3, [r3, #20]
 800017a:	4a13      	ldr	r2, [pc, #76]	; (80001c8 <MX_DMA_Init+0x58>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6153      	str	r3, [r2, #20]
 8000182:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <MX_DMA_Init+0x58>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2100      	movs	r1, #0
 8000192:	200c      	movs	r0, #12
 8000194:	f001 fdcf 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000198:	200c      	movs	r0, #12
 800019a:	f001 fde8 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2100      	movs	r1, #0
 80001a2:	200f      	movs	r0, #15
 80001a4:	f001 fdc7 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80001a8:	200f      	movs	r0, #15
 80001aa:	f001 fde0 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2100      	movs	r1, #0
 80001b2:	2011      	movs	r0, #17
 80001b4:	f001 fdbf 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001b8:	2011      	movs	r0, #17
 80001ba:	f001 fdd8 	bl	8001d6e <HAL_NVIC_EnableIRQ>

}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40021000 	.word	0x40021000

080001cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e0:	4b41      	ldr	r3, [pc, #260]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a40      	ldr	r2, [pc, #256]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6193      	str	r3, [r2, #24]
 80001ec:	4b3e      	ldr	r3, [pc, #248]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f003 0310 	and.w	r3, r3, #16
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f8:	4b3b      	ldr	r3, [pc, #236]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a3a      	ldr	r2, [pc, #232]	; (80002e8 <MX_GPIO_Init+0x11c>)
 80001fe:	f043 0320 	orr.w	r3, r3, #32
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b38      	ldr	r3, [pc, #224]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f003 0320 	and.w	r3, r3, #32
 800020c:	60bb      	str	r3, [r7, #8]
 800020e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000210:	4b35      	ldr	r3, [pc, #212]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a34      	ldr	r2, [pc, #208]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <MX_GPIO_Init+0x11c>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0304 	and.w	r3, r3, #4
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000228:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <MX_GPIO_Init+0x11c>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <MX_GPIO_Init+0x11c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	6193      	str	r3, [r2, #24]
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_GPIO_Init+0x11c>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	f003 0308 	and.w	r3, r3, #8
 800023c:	603b      	str	r3, [r7, #0]
 800023e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 8000240:	2200      	movs	r2, #0
 8000242:	219e      	movs	r1, #158	; 0x9e
 8000244:	4829      	ldr	r0, [pc, #164]	; (80002ec <MX_GPIO_Init+0x120>)
 8000246:	f002 f9cf 	bl	80025e8 <HAL_GPIO_WritePin>
                          |DIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	4828      	ldr	r0, [pc, #160]	; (80002f0 <MX_GPIO_Init+0x124>)
 8000250:	f002 f9ca 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800025a:	4826      	ldr	r0, [pc, #152]	; (80002f4 <MX_GPIO_Init+0x128>)
 800025c:	f002 f9c4 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <MX_GPIO_Init+0x12c>)
 8000268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800026e:	f107 0310 	add.w	r3, r7, #16
 8000272:	4619      	mov	r1, r3
 8000274:	481d      	ldr	r0, [pc, #116]	; (80002ec <MX_GPIO_Init+0x120>)
 8000276:	f002 f833 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RST_Pin|CLK_Pin
 800027a:	239e      	movs	r3, #158	; 0x9e
 800027c:	613b      	str	r3, [r7, #16]
                          |DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027e:	2301      	movs	r3, #1
 8000280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	2302      	movs	r3, #2
 8000288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	4619      	mov	r1, r3
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <MX_GPIO_Init+0x120>)
 8000292:	f002 f825 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000296:	2320      	movs	r3, #32
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	4619      	mov	r1, r3
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <MX_GPIO_Init+0x124>)
 80002ae:	f002 f817 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <MX_GPIO_Init+0x128>)
 80002cc:	f002 f808 	bl	80022e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2100      	movs	r1, #0
 80002d4:	2028      	movs	r0, #40	; 0x28
 80002d6:	f001 fd2e 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f001 fd47 	bl	8001d6e <HAL_NVIC_EnableIRQ>

}
 80002e0:	bf00      	nop
 80002e2:	3720      	adds	r7, #32
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40011000 	.word	0x40011000
 80002f0:	40010800 	.word	0x40010800
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	10110000 	.word	0x10110000

080002fc <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <get_char+0x48>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <get_char+0x4c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	429a      	cmp	r2, r3
 800030c:	d013      	beq.n	8000336 <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <get_char+0x4c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <get_char+0x50>)
 8000314:	5cd3      	ldrb	r3, [r2, r3]
 8000316:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <get_char+0x4c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <get_char+0x4c>)
 8000320:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <get_char+0x4c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800032a:	db02      	blt.n	8000332 <get_char+0x36>
			busyRX=0;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <get_char+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	e000      	b.n	8000338 <get_char+0x3c>
	}
	else{
		return 0;
 8000336:	2300      	movs	r3, #0
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000a4 	.word	0x200000a4
 8000348:	200000a8 	.word	0x200000a8
 800034c:	200004e8 	.word	0x200004e8

08000350 <checkSum>:
int checkSum(char *buffer)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	int suma = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
	int dlugosc = strlen(buffer);
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f7ff feff 	bl	8000160 <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	60fb      	str	r3, [r7, #12]
	int i;
	for(i = 0; i<dlugosc-1; i++){
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
 800036a:	e00a      	b.n	8000382 <checkSum+0x32>
			suma=suma+buffer[i];
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	4413      	add	r3, r2
 800037a:	617b      	str	r3, [r7, #20]
	for(i = 0; i<dlugosc-1; i++){
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	3301      	adds	r3, #1
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3b01      	subs	r3, #1
 8000386:	693a      	ldr	r2, [r7, #16]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbef      	blt.n	800036c <checkSum+0x1c>
		}
	return suma%256;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	425a      	negs	r2, r3
 8000390:	b2db      	uxtb	r3, r3
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	bf58      	it	pl
 8000396:	4253      	negpl	r3, r2
}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <fmessage>:
void fmessage(char msg[], char dst[]){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	int ctrlSumMsg = checkSum(msg);
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ffd0 	bl	8000350 <checkSum>
 80003b0:	60f8      	str	r0, [r7, #12]
	sprintf(dst, "%c%s%02X%c\r\n",EOT,msg,ctrlSumMsg,ENQ);
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <fmessage+0x34>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <fmessage+0x38>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4905      	ldr	r1, [pc, #20]	; (80003dc <fmessage+0x3c>)
 80003c6:	6838      	ldr	r0, [r7, #0]
 80003c8:	f005 fadc 	bl	8005984 <siprintf>
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	2000000d 	.word	0x2000000d
 80003d8:	2000000c 	.word	0x2000000c
 80003dc:	08006ba0 	.word	0x08006ba0

080003e0 <fsend>:
void fsend(char* format, ...){
 80003e0:	b40f      	push	{r0, r1, r2, r3}
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b0c4      	sub	sp, #272	; 0x110
 80003e6:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 80003e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80003ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	vsprintf(tmp_rs, format, arglist);
 80003f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80003f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80003f8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80003fc:	4618      	mov	r0, r3
 80003fe:	f005 fb23 	bl	8005a48 <vsiprintf>
	va_end(arglist);
	char fmsg[128]={0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	3304      	adds	r3, #4
 800040a:	227c      	movs	r2, #124	; 0x7c
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f005 fab0 	bl	8005974 <memset>
	fmessage(tmp_rs, fmsg);
 8000414:	1d3a      	adds	r2, r7, #4
 8000416:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ffbf 	bl	80003a0 <fmessage>
	pid = emptyTX;
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <fsend+0x110>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	for(i = 0; i < strlen(fmsg); i++){
 800042a:	2300      	movs	r3, #0
 800042c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000430:	e01a      	b.n	8000468 <fsend+0x88>
		Buf_TX[pid] = fmsg[i];
 8000432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000436:	1d39      	adds	r1, r7, #4
 8000438:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800043c:	440a      	add	r2, r1
 800043e:	7811      	ldrb	r1, [r2, #0]
 8000440:	4a2c      	ldr	r2, [pc, #176]	; (80004f4 <fsend+0x114>)
 8000442:	54d1      	strb	r1, [r2, r3]
		pid++;
 8000444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000448:	3301      	adds	r3, #1
 800044a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		if(pid >= BUF_TX_LEN){
 800044e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000456:	db02      	blt.n	800045e <fsend+0x7e>
			pid = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	for(i = 0; i < strlen(fmsg); i++){
 800045e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000462:	3301      	adds	r3, #1
 8000464:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff fe78 	bl	8000160 <strlen>
 8000470:	4602      	mov	r2, r0
 8000472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000476:	429a      	cmp	r2, r3
 8000478:	d8db      	bhi.n	8000432 <fsend+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
}
 800047c:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <fsend+0x110>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <fsend+0x118>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	429a      	cmp	r2, r3
 8000488:	d124      	bne.n	80004d4 <fsend+0xf4>
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <fsend+0x11c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000494:	2b80      	cmp	r3, #128	; 0x80
 8000496:	d11d      	bne.n	80004d4 <fsend+0xf4>
		emptyTX = pid;
 8000498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <fsend+0x110>)
 800049e:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <fsend+0x118>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <fsend+0x114>)
 80004a6:	5cd2      	ldrb	r2, [r2, r3]
 80004a8:	1cfb      	adds	r3, r7, #3
 80004aa:	701a      	strb	r2, [r3, #0]
		busyTX++;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <fsend+0x118>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <fsend+0x118>)
 80004b4:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <fsend+0x118>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004be:	db02      	blt.n	80004c6 <fsend+0xe6>
			busyTX = 0;
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <fsend+0x118>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <fsend+0x11c>)
 80004ce:	f004 fdc3 	bl	8005058 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80004d2:	e003      	b.n	80004dc <fsend+0xfc>
	}
	else{
		emptyTX = pid;
 80004d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <fsend+0x110>)
 80004da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004dc:	b662      	cpsie	i
}
 80004de:	bf00      	nop
	}
	__enable_irq();
}
 80004e0:	bf00      	nop
 80004e2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80004e6:	46bd      	mov	sp, r7
 80004e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004ec:	b004      	add	sp, #16
 80004ee:	4770      	bx	lr
 80004f0:	2000009c 	.word	0x2000009c
 80004f4:	200000d8 	.word	0x200000d8
 80004f8:	200000a0 	.word	0x200000a0
 80004fc:	20001020 	.word	0x20001020

08000500 <wypelnienie>:

void wypelnienie(int wartosc, uint32_t period){
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]

	for(int i = 0; i<=3; i++){
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e018      	b.n	8000542 <wypelnienie+0x42>
		if(wartosc>period){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	d20a      	bcs.n	800052e <wypelnienie+0x2e>
			pwmData[i]=period;
 8000518:	490e      	ldr	r1, [pc, #56]	; (8000554 <wypelnienie+0x54>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			wartosc = wartosc/period;
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	e006      	b.n	800053c <wypelnienie+0x3c>
		}
		else{
			pwmData[i] = wartosc;
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4908      	ldr	r1, [pc, #32]	; (8000554 <wypelnienie+0x54>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			i=3;
 8000538:	2303      	movs	r3, #3
 800053a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<=3; i++){
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2b03      	cmp	r3, #3
 8000546:	dde3      	ble.n	8000510 <wypelnienie+0x10>
		}
	}



}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	200004d8 	.word	0x200004d8

08000558 <okres>:
int okres(){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	int okres = (64000/czest)-1;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <okres+0x28>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000566:	fb92 f3f3 	sdiv	r3, r2, r3
 800056a:	3b01      	subs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
	fsend("%d",okres);
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <okres+0x2c>)
 8000572:	f7ff ff35 	bl	80003e0 <fsend>

	return okres;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	08006bb0 	.word	0x08006bb0

08000588 <start>:
void start(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
			period=okres();
 800058c:	f7ff ffe4 	bl	8000558 <okres>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <start+0x58>)
 8000596:	601a      	str	r2, [r3, #0]
			wypelnienie(wart,period);
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <start+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <start+0x58>)
 800059e:	6812      	ldr	r2, [r2, #0]
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ffac 	bl	8000500 <wypelnienie>
			htim1.Init.Period = period;
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <start+0x58>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <start+0x60>)
 80005ae:	60d3      	str	r3, [r2, #12]
			HAL_TIM_Base_Start_IT(&htim3);
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <start+0x64>)
 80005b2:	f002 fcbd 	bl	8002f30 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 2);
 80005b6:	2302      	movs	r3, #2
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <start+0x68>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <start+0x60>)
 80005be:	f002 fe81 	bl	80032c4 <HAL_TIM_PWM_Start_DMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,riseData,numval);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <start+0x6c>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <start+0x70>)
 80005ca:	f003 f92b 	bl	8003824 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,fallData,numval);
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <start+0x74>)
 80005d2:	2104      	movs	r1, #4
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <start+0x70>)
 80005d6:	f003 f925 	bl	8003824 <HAL_TIM_IC_Start_DMA>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c0 	.word	0x200000c0
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000f90 	.word	0x20000f90
 80005ec:	20000f48 	.word	0x20000f48
 80005f0:	200004d8 	.word	0x200004d8
 80005f4:	200007e8 	.word	0x200007e8
 80005f8:	20000fd8 	.word	0x20000fd8
 80005fc:	20000a80 	.word	0x20000a80

08000600 <doner>:
void doner(char *ord){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	4856      	ldr	r0, [pc, #344]	; (8000764 <doner+0x164>)
 800060c:	f7ff fd9e 	bl	800014c <strcmp>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <doner+0x24>

		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi %d;",Difference);
 8000616:	4b54      	ldr	r3, [pc, #336]	; (8000768 <doner+0x168>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	4853      	ldr	r0, [pc, #332]	; (800076c <doner+0x16c>)
 800061e:	f7ff fedf 	bl	80003e0 <fsend>
	}
	else{
		fsend("WRCMD;");
	}

}
 8000622:	e09a      	b.n	800075a <doner+0x15a>
	else if(strcmp("FCHKH;", ord) == 0){
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4852      	ldr	r0, [pc, #328]	; (8000770 <doner+0x170>)
 8000628:	f7ff fd90 	bl	800014c <strcmp>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d106      	bne.n	8000640 <doner+0x40>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi %d;",PWM_pulses_count);
 8000632:	4b50      	ldr	r3, [pc, #320]	; (8000774 <doner+0x174>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	484f      	ldr	r0, [pc, #316]	; (8000778 <doner+0x178>)
 800063a:	f7ff fed1 	bl	80003e0 <fsend>
}
 800063e:	e08c      	b.n	800075a <doner+0x15a>
	else if(strcmp("FSTART;", ord) == 0){
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	484e      	ldr	r0, [pc, #312]	; (800077c <doner+0x17c>)
 8000644:	f7ff fd82 	bl	800014c <strcmp>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10e      	bne.n	800066c <doner+0x6c>
		fsend("Rozpoczeto wysylanie impulsow;");
 800064e:	484c      	ldr	r0, [pc, #304]	; (8000780 <doner+0x180>)
 8000650:	f7ff fec6 	bl	80003e0 <fsend>
		seconds_passed=0;
 8000654:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <doner+0x184>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
		Difference = 0;
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <doner+0x168>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
		PWM_pulses_count = 0;
 8000660:	4b44      	ldr	r3, [pc, #272]	; (8000774 <doner+0x174>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
		start();
 8000666:	f7ff ff8f 	bl	8000588 <start>
}
 800066a:	e076      	b.n	800075a <doner+0x15a>
	else if(strcmp("FSTAT;", ord) == 0){
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4846      	ldr	r0, [pc, #280]	; (8000788 <doner+0x188>)
 8000670:	f7ff fd6c 	bl	800014c <strcmp>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d109      	bne.n	800068e <doner+0x8e>
		fsend("Wypelnienie %d Czas %d Czestotliwosc %d;",wart,czas,czest);
 800067a:	4b44      	ldr	r3, [pc, #272]	; (800078c <doner+0x18c>)
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	4b44      	ldr	r3, [pc, #272]	; (8000790 <doner+0x190>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b44      	ldr	r3, [pc, #272]	; (8000794 <doner+0x194>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4844      	ldr	r0, [pc, #272]	; (8000798 <doner+0x198>)
 8000688:	f7ff feaa 	bl	80003e0 <fsend>
}
 800068c:	e065      	b.n	800075a <doner+0x15a>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 800068e:	4a40      	ldr	r2, [pc, #256]	; (8000790 <doner+0x190>)
 8000690:	4942      	ldr	r1, [pc, #264]	; (800079c <doner+0x19c>)
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f005 f996 	bl	80059c4 <siscanf>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d006      	beq.n	80006ac <doner+0xac>
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	483f      	ldr	r0, [pc, #252]	; (80007a0 <doner+0x1a0>)
 80006a2:	f7ff fd53 	bl	800014c <strcmp>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d112      	bne.n	80006d2 <doner+0xd2>
		if(czas>=0 && czas<=20){
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <doner+0x190>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <doner+0xca>
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <doner+0x190>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b14      	cmp	r3, #20
 80006ba:	dc06      	bgt.n	80006ca <doner+0xca>
			fsend("„Ustawiono czas na %d sekund;",czas);
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <doner+0x190>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4838      	ldr	r0, [pc, #224]	; (80007a4 <doner+0x1a4>)
 80006c4:	f7ff fe8c 	bl	80003e0 <fsend>
		if(czas>=0 && czas<=20){
 80006c8:	e047      	b.n	800075a <doner+0x15a>
			fsend("WRNUM;");
 80006ca:	4837      	ldr	r0, [pc, #220]	; (80007a8 <doner+0x1a8>)
 80006cc:	f7ff fe88 	bl	80003e0 <fsend>
		if(czas>=0 && czas<=20){
 80006d0:	e043      	b.n	800075a <doner+0x15a>
	else if(sscanf(ord, "FFILL%d;", &wart) == 1 || strcmp("FFIL;", ord) == 0){
 80006d2:	4a2e      	ldr	r2, [pc, #184]	; (800078c <doner+0x18c>)
 80006d4:	4935      	ldr	r1, [pc, #212]	; (80007ac <doner+0x1ac>)
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f005 f974 	bl	80059c4 <siscanf>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d006      	beq.n	80006f0 <doner+0xf0>
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	4832      	ldr	r0, [pc, #200]	; (80007b0 <doner+0x1b0>)
 80006e6:	f7ff fd31 	bl	800014c <strcmp>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10e      	bne.n	800070e <doner+0x10e>
		if(wart>=0 && wart<= 4294967295){
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <doner+0x18c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db06      	blt.n	8000706 <doner+0x106>
			fsend("„Ustawiono wypelnienie na %d;",wart);
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <doner+0x18c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	482d      	ldr	r0, [pc, #180]	; (80007b4 <doner+0x1b4>)
 8000700:	f7ff fe6e 	bl	80003e0 <fsend>
		if(wart>=0 && wart<= 4294967295){
 8000704:	e029      	b.n	800075a <doner+0x15a>
			fsend("WRNUM;");
 8000706:	4828      	ldr	r0, [pc, #160]	; (80007a8 <doner+0x1a8>)
 8000708:	f7ff fe6a 	bl	80003e0 <fsend>
		if(wart>=0 && wart<= 4294967295){
 800070c:	e025      	b.n	800075a <doner+0x15a>
	else if(sscanf(ord, "FSET%d;", &czest) == 1 || strcmp("FSET;", ord) == 0){
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <doner+0x194>)
 8000710:	4929      	ldr	r1, [pc, #164]	; (80007b8 <doner+0x1b8>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f005 f956 	bl	80059c4 <siscanf>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d006      	beq.n	800072c <doner+0x12c>
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4826      	ldr	r0, [pc, #152]	; (80007bc <doner+0x1bc>)
 8000722:	f7ff fd13 	bl	800014c <strcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d112      	bne.n	8000752 <doner+0x152>
		if(czest>=1 && czest<=250){
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <doner+0x194>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dd0a      	ble.n	800074a <doner+0x14a>
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <doner+0x194>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2bfa      	cmp	r3, #250	; 0xfa
 800073a:	dc06      	bgt.n	800074a <doner+0x14a>
					fsend("„Ustawiono czestotliwosc na %d kHz;",czest);
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <doner+0x194>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	481f      	ldr	r0, [pc, #124]	; (80007c0 <doner+0x1c0>)
 8000744:	f7ff fe4c 	bl	80003e0 <fsend>
		if(czest>=1 && czest<=250){
 8000748:	e007      	b.n	800075a <doner+0x15a>
					fsend("WRNUM;");
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <doner+0x1a8>)
 800074c:	f7ff fe48 	bl	80003e0 <fsend>
		if(czest>=1 && czest<=250){
 8000750:	e003      	b.n	800075a <doner+0x15a>
		fsend("WRCMD;");
 8000752:	481c      	ldr	r0, [pc, #112]	; (80007c4 <doner+0x1c4>)
 8000754:	f7ff fe44 	bl	80003e0 <fsend>
}
 8000758:	e7ff      	b.n	800075a <doner+0x15a>
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08006bb4 	.word	0x08006bb4
 8000768:	200000b4 	.word	0x200000b4
 800076c:	08006bbc 	.word	0x08006bbc
 8000770:	08006c00 	.word	0x08006c00
 8000774:	200000b8 	.word	0x200000b8
 8000778:	08006c08 	.word	0x08006c08
 800077c:	08006c40 	.word	0x08006c40
 8000780:	08006c48 	.word	0x08006c48
 8000784:	200000bc 	.word	0x200000bc
 8000788:	08006c68 	.word	0x08006c68
 800078c:	20000004 	.word	0x20000004
 8000790:	20000000 	.word	0x20000000
 8000794:	20000008 	.word	0x20000008
 8000798:	08006c70 	.word	0x08006c70
 800079c:	08006c9c 	.word	0x08006c9c
 80007a0:	08006ca8 	.word	0x08006ca8
 80007a4:	08006cb0 	.word	0x08006cb0
 80007a8:	08006cd0 	.word	0x08006cd0
 80007ac:	08006cd8 	.word	0x08006cd8
 80007b0:	08006ce4 	.word	0x08006ce4
 80007b4:	08006cec 	.word	0x08006cec
 80007b8:	08006d0c 	.word	0x08006d0c
 80007bc:	08006d14 	.word	0x08006d14
 80007c0:	08006d1c 	.word	0x08006d1c
 80007c4:	08006d44 	.word	0x08006d44

080007c8 <hexVal>:

int hexVal(char *buffer){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	int suma = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
	int dlugosc = strlen(buffer);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fcc3 	bl	8000160 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	60bb      	str	r3, [r7, #8]
	int i;
	int miejsca = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(i = dlugosc-1; i>=0; i--){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e034      	b.n	8000854 <hexVal+0x8c>
		if(buffer[i]>='0' && buffer[i]<='9'){
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b2f      	cmp	r3, #47	; 0x2f
 80007f4:	d911      	bls.n	800081a <hexVal+0x52>
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b39      	cmp	r3, #57	; 0x39
 8000800:	d80b      	bhi.n	800081a <hexVal+0x52>
			suma = suma +(buffer[i] - 48)*miejsca;
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3b30      	subs	r3, #48	; 0x30
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	4413      	add	r3, r2
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e016      	b.n	8000848 <hexVal+0x80>
		}else if(buffer[i]>='A' && buffer[i]<='F'){
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b40      	cmp	r3, #64	; 0x40
 8000824:	d910      	bls.n	8000848 <hexVal+0x80>
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b46      	cmp	r3, #70	; 0x46
 8000830:	d80a      	bhi.n	8000848 <hexVal+0x80>
			suma = suma +(buffer[i] - 55)*miejsca;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3b37      	subs	r3, #55	; 0x37
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4413      	add	r3, r2
 8000846:	617b      	str	r3, [r7, #20]
		}
		miejsca = miejsca*16;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	60fb      	str	r3, [r7, #12]
	for(i = dlugosc-1; i>=0; i--){
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	3b01      	subs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	2b00      	cmp	r3, #0
 8000858:	dac7      	bge.n	80007ea <hexVal+0x22>
	}
	return suma;
 800085a:	697b      	ldr	r3, [r7, #20]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <get_line>:

void get_line(){
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
	char temp = get_char();//Pobranie znaku do zmiennej
 800086a:	f7ff fd47 	bl	80002fc <get_char>
 800086e:	4603      	mov	r3, r0
 8000870:	74fb      	strb	r3, [r7, #19]

	if(temp==0x05){
 8000872:	7cfb      	ldrb	r3, [r7, #19]
 8000874:	2b05      	cmp	r3, #5
 8000876:	d11a      	bne.n	80008ae <get_line+0x4a>
		fstate=listen;
 8000878:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <get_line+0x1a8>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
		fid = 0;
 800087e:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <get_line+0x1ac>)
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
		memset(&bfr[0],0, sizeof(bfr));
 8000884:	f240 1205 	movw	r2, #261	; 0x105
 8000888:	2100      	movs	r1, #0
 800088a:	4862      	ldr	r0, [pc, #392]	; (8000a14 <get_line+0x1b0>)
 800088c:	f005 f872 	bl	8005974 <memset>
		bfr[fid] = temp;
 8000890:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <get_line+0x1ac>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4619      	mov	r1, r3
 8000898:	4a5e      	ldr	r2, [pc, #376]	; (8000a14 <get_line+0x1b0>)
 800089a:	7cfb      	ldrb	r3, [r7, #19]
 800089c:	5453      	strb	r3, [r2, r1]
		fid = fid+1;
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <get_line+0x1ac>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <get_line+0x1ac>)
 80008aa:	801a      	strh	r2, [r3, #0]
				fstate = notlisten;
			}
		}
	}

}
 80008ac:	e0aa      	b.n	8000a04 <get_line+0x1a0>
	else if(temp == 0x04 && fstate == listen){
 80008ae:	7cfb      	ldrb	r3, [r7, #19]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d17e      	bne.n	80009b2 <get_line+0x14e>
 80008b4:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <get_line+0x1a8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d17a      	bne.n	80009b2 <get_line+0x14e>
		fstate = notlisten;
 80008bc:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <get_line+0x1a8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
		bfr[fid]= temp;
 80008c2:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <get_line+0x1ac>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	4a52      	ldr	r2, [pc, #328]	; (8000a14 <get_line+0x1b0>)
 80008cc:	7cfb      	ldrb	r3, [r7, #19]
 80008ce:	5453      	strb	r3, [r2, r1]
		fid++;
 80008d0:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <get_line+0x1ac>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	3301      	adds	r3, #1
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <get_line+0x1ac>)
 80008dc:	801a      	strh	r2, [r3, #0]
		char ctrlSumFrame[3]={bfr[fid-3],
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <get_line+0x1ac>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	3b03      	subs	r3, #3
 80008e6:	4a4b      	ldr	r2, [pc, #300]	; (8000a14 <get_line+0x1b0>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	713b      	strb	r3, [r7, #4]
				bfr[fid-2], '\0'};
 80008ec:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <get_line+0x1ac>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3b02      	subs	r3, #2
 80008f4:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <get_line+0x1b0>)
 80008f6:	5cd3      	ldrb	r3, [r2, r3]
		char ctrlSumFrame[3]={bfr[fid-3],
 80008f8:	717b      	strb	r3, [r7, #5]
 80008fa:	2300      	movs	r3, #0
 80008fc:	71bb      	strb	r3, [r7, #6]
		int ctrlSumUser = hexVal(ctrlSumFrame);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff61 	bl	80007c8 <hexVal>
 8000906:	60f8      	str	r0, [r7, #12]
		bfr[fid-3]='\0';
 8000908:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <get_line+0x1ac>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	3b03      	subs	r3, #3
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <get_line+0x1b0>)
 8000912:	2100      	movs	r1, #0
 8000914:	54d1      	strb	r1, [r2, r3]
		memmove(&bfr[0],&bfr[1],strlen(bfr));
 8000916:	483f      	ldr	r0, [pc, #252]	; (8000a14 <get_line+0x1b0>)
 8000918:	f7ff fc22 	bl	8000160 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	493d      	ldr	r1, [pc, #244]	; (8000a18 <get_line+0x1b4>)
 8000922:	483c      	ldr	r0, [pc, #240]	; (8000a14 <get_line+0x1b0>)
 8000924:	f005 f80c 	bl	8005940 <memmove>
		int ctrlSumProgram = checkSum(bfr);
 8000928:	483a      	ldr	r0, [pc, #232]	; (8000a14 <get_line+0x1b0>)
 800092a:	f7ff fd11 	bl	8000350 <checkSum>
 800092e:	60b8      	str	r0, [r7, #8]
		if(ctrlSumProgram == ctrlSumUser){
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d137      	bne.n	80009a8 <get_line+0x144>
			int frm_id = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
			for(i = 0; i< fid; i++){
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e02a      	b.n	8000998 <get_line+0x134>
				if(bfr[i]==';'){
 8000942:	4a34      	ldr	r2, [pc, #208]	; (8000a14 <get_line+0x1b0>)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	4413      	add	r3, r2
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b3b      	cmp	r3, #59	; 0x3b
 800094c:	d121      	bne.n	8000992 <get_line+0x12e>
					memset(&order[0],0,sizeof(order));
 800094e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000952:	2100      	movs	r1, #0
 8000954:	4831      	ldr	r0, [pc, #196]	; (8000a1c <get_line+0x1b8>)
 8000956:	f005 f80d 	bl	8005974 <memset>
					ord_id = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
					while(frm_id <= i){
 800095e:	e00e      	b.n	800097e <get_line+0x11a>
						order[ord_id] = bfr[frm_id];
 8000960:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <get_line+0x1b0>)
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	4413      	add	r3, r2
 8000966:	7819      	ldrb	r1, [r3, #0]
 8000968:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <get_line+0x1b8>)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4413      	add	r3, r2
 800096e:	460a      	mov	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
						frm_id++;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3301      	adds	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
						ord_id++;
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	3301      	adds	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
					while(frm_id <= i){
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	429a      	cmp	r2, r3
 8000984:	ddec      	ble.n	8000960 <get_line+0xfc>
					frm_id = i + 1;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
					doner(order);
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <get_line+0x1b8>)
 800098e:	f7ff fe37 	bl	8000600 <doner>
			for(i = 0; i< fid; i++){
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <get_line+0x1ac>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	dbcd      	blt.n	8000942 <get_line+0xde>
	else if(temp == 0x04 && fstate == listen){
 80009a6:	e02d      	b.n	8000a04 <get_line+0x1a0>
			fsend("WRCHS%02X;",ctrlSumProgram);
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	481d      	ldr	r0, [pc, #116]	; (8000a20 <get_line+0x1bc>)
 80009ac:	f7ff fd18 	bl	80003e0 <fsend>
	else if(temp == 0x04 && fstate == listen){
 80009b0:	e028      	b.n	8000a04 <get_line+0x1a0>
	}else if(fstate == listen){
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <get_line+0x1a8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d124      	bne.n	8000a04 <get_line+0x1a0>
		if(!(temp > 0x21 && temp < 0x7E)){
 80009ba:	7cfb      	ldrb	r3, [r7, #19]
 80009bc:	2b21      	cmp	r3, #33	; 0x21
 80009be:	d902      	bls.n	80009c6 <get_line+0x162>
 80009c0:	7cfb      	ldrb	r3, [r7, #19]
 80009c2:	2b7d      	cmp	r3, #125	; 0x7d
 80009c4:	d903      	bls.n	80009ce <get_line+0x16a>
			fsend("WRCHA;");
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <get_line+0x1c0>)
 80009c8:	f7ff fd0a 	bl	80003e0 <fsend>
 80009cc:	e01a      	b.n	8000a04 <get_line+0x1a0>
			bfr[fid] = temp;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <get_line+0x1ac>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <get_line+0x1b0>)
 80009d8:	7cfb      	ldrb	r3, [r7, #19]
 80009da:	5453      	strb	r3, [r2, r1]
			fid = fid + 1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <get_line+0x1ac>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	3301      	adds	r3, #1
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <get_line+0x1ac>)
 80009e8:	801a      	strh	r2, [r3, #0]
			if(fid > 256 ){
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <get_line+0x1ac>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f4:	d906      	bls.n	8000a04 <get_line+0x1a0>
				fsend("WRFRM;");
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <get_line+0x1c4>)
 80009f8:	f7ff fcf2 	bl	80003e0 <fsend>
				fstate = notlisten;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <get_line+0x1a8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	e7ff      	b.n	8000a04 <get_line+0x1a0>
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000b0 	.word	0x200000b0
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	20000978 	.word	0x20000978
 8000a18:	20000979 	.word	0x20000979
 8000a1c:	200006e8 	.word	0x200006e8
 8000a20:	08006d4c 	.word	0x08006d4c
 8000a24:	08006d58 	.word	0x08006d58
 8000a28:	08006d60 	.word	0x08006d60

08000a2c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_UART_TxCpltCallback+0x58>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d11e      	bne.n	8000a7a <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_UART_TxCpltCallback+0x5c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_UART_TxCpltCallback+0x60>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d018      	beq.n	8000a7a <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_UART_TxCpltCallback+0x60>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_UART_TxCpltCallback+0x64>)
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_TxCpltCallback+0x60>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <HAL_UART_TxCpltCallback+0x60>)
 8000a5a:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_UART_TxCpltCallback+0x60>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a64:	db02      	blt.n	8000a6c <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_UART_TxCpltCallback+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000a6c:	f107 030f 	add.w	r3, r7, #15
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <HAL_UART_TxCpltCallback+0x58>)
 8000a76:	f004 faef 	bl	8005058 <HAL_UART_Transmit_IT>
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20001020 	.word	0x20001020
 8000a88:	2000009c 	.word	0x2000009c
 8000a8c:	200000a0 	.word	0x200000a0
 8000a90:	200000d8 	.word	0x200000d8

08000a94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_UART_RxCpltCallback+0x44>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d115      	bne.n	8000ad0 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000aac:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab6:	db02      	blt.n	8000abe <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_UART_RxCpltCallback+0x4c>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <HAL_UART_RxCpltCallback+0x44>)
 8000acc:	f004 fb08 	bl	80050e0 <HAL_UART_Receive_IT>
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20001020 	.word	0x20001020
 8000adc:	200000a4 	.word	0x200000a4
 8000ae0:	200004e8 	.word	0x200004e8

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f000 ffec 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f876 	bl	8000bdc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 8000af0:	2108      	movs	r1, #8
 8000af2:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <main+0xc4>)
 8000af4:	f000 f95c 	bl	8000db0 <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 8000af8:	2104      	movs	r1, #4
 8000afa:	482b      	ldr	r0, [pc, #172]	; (8000ba8 <main+0xc4>)
 8000afc:	f000 f96c 	bl	8000dd8 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 8000b00:	2102      	movs	r1, #2
 8000b02:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <main+0xc4>)
 8000b04:	f000 f97c 	bl	8000e00 <LCD_setDC>
      LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4827      	ldr	r0, [pc, #156]	; (8000ba8 <main+0xc4>)
 8000b0c:	f000 f98c 	bl	8000e28 <LCD_setDIN>
      LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 8000b10:	2110      	movs	r1, #16
 8000b12:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <main+0xc4>)
 8000b14:	f000 f99c 	bl	8000e50 <LCD_setCLK>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff fb58 	bl	80001cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b1c:	f000 ff3c 	bl	8001998 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b20:	f000 fbda 	bl	80012d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b24:	f000 fc7a 	bl	800141c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b28:	f000 fd6a 	bl	8001600 <MX_TIM4_Init>
  MX_DMA_Init();
 8000b2c:	f7ff fb20 	bl	8000170 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b30:	f000 fcf2 	bl	8001518 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000b34:	f000 fa24 	bl	8000f80 <LCD_init>
  fsend("Hello user;");
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <main+0xc8>)
 8000b3a:	f7ff fc51 	bl	80003e0 <fsend>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //PWM dla ekranu
 8000b3e:	2100      	movs	r1, #0
 8000b40:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <main+0xcc>)
 8000b42:	f002 fb1d 	bl	8003180 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 100);
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <main+0xcc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2264      	movs	r2, #100	; 0x64
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34

  	  LCD_print("Miernik", 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <main+0xd0>)
 8000b54:	f000 fa8c 	bl	8001070 <LCD_print>
  	  LCD_print("Czestotliwosci", 0, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <main+0xd4>)
 8000b5e:	f000 fa87 	bl	8001070 <LCD_print>
  	  LCD_print("Autor", 0, 2);
 8000b62:	2202      	movs	r2, #2
 8000b64:	2100      	movs	r1, #0
 8000b66:	4815      	ldr	r0, [pc, #84]	; (8000bbc <main+0xd8>)
 8000b68:	f000 fa82 	bl	8001070 <LCD_print>
  	  LCD_print("Krzysztof", 0, 3);
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <main+0xdc>)
 8000b72:	f000 fa7d 	bl	8001070 <LCD_print>
  	  LCD_print("Olejniczak", 0, 4);
 8000b76:	2204      	movs	r2, #4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <main+0xe0>)
 8000b7c:	f000 fa78 	bl	8001070 <LCD_print>
  	  LCD_print("", 0, 5);
 8000b80:	2205      	movs	r2, #5
 8000b82:	2100      	movs	r1, #0
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <main+0xe4>)
 8000b86:	f000 fa73 	bl	8001070 <LCD_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	490f      	ldr	r1, [pc, #60]	; (8000bcc <main+0xe8>)
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <main+0xec>)
 8000b90:	f004 faa6 	bl	80050e0 <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <main+0xf0>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <main+0xf4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d0f9      	beq.n	8000b94 <main+0xb0>
		  get_line();
 8000ba0:	f7ff fe60 	bl	8000864 <get_line>
	  if(busyRX!=emptyRX){
 8000ba4:	e7f6      	b.n	8000b94 <main+0xb0>
 8000ba6:	bf00      	nop
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	08006d68 	.word	0x08006d68
 8000bb0:	20000ebc 	.word	0x20000ebc
 8000bb4:	08006d74 	.word	0x08006d74
 8000bb8:	08006d7c 	.word	0x08006d7c
 8000bbc:	08006d8c 	.word	0x08006d8c
 8000bc0:	08006d94 	.word	0x08006d94
 8000bc4:	08006da0 	.word	0x08006da0
 8000bc8:	08006dac 	.word	0x08006dac
 8000bcc:	200004e8 	.word	0x200004e8
 8000bd0:	20001020 	.word	0x20001020
 8000bd4:	200000a8 	.word	0x200000a8
 8000bd8:	200000a4 	.word	0x200000a4

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fec2 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c02:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fd19 	bl	800265c <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c30:	f000 f8ba 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 ff84 	bl	8002b5c <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f8a5 	bl	8000da8 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3740      	adds	r7, #64	; 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c78:	d10b      	bne.n	8000c92 <HAL_TIM_IC_CaptureCallback+0x2a>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7f1b      	ldrb	r3, [r3, #28]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d107      	bne.n	8000c92 <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			PWM_pulses_count++;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000c8a:	6013      	str	r3, [r2, #0]
			riseCaptured=1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_TIM_IC_CaptureCallback+0x84>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
		}

	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9a:	d106      	bne.n	8000caa <HAL_TIM_IC_CaptureCallback+0x42>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7f1b      	ldrb	r3, [r3, #28]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d102      	bne.n	8000caa <HAL_TIM_IC_CaptureCallback+0x42>
		{
			fallCaptured=1;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
		}
	if ((riseCaptured) && (fallCaptured))
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_TIM_IC_CaptureCallback+0x84>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d015      	beq.n	8000cde <HAL_TIM_IC_CaptureCallback+0x76>
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d011      	beq.n	8000cde <HAL_TIM_IC_CaptureCallback+0x76>
	{




		riseCaptured=0;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_TIM_IC_CaptureCallback+0x84>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
		fallCaptured=0;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
		HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,riseData,numval);
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000cce:	f002 fda9 	bl	8003824 <HAL_TIM_IC_Start_DMA>
		HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,fallData,numval);
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000cda:	f002 fda3 	bl	8003824 <HAL_TIM_IC_Start_DMA>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000b8 	.word	0x200000b8
 8000cec:	200000c4 	.word	0x200000c4
 8000cf0:	200000c8 	.word	0x200000c8
 8000cf4:	200007e8 	.word	0x200007e8
 8000cf8:	20000fd8 	.word	0x20000fd8
 8000cfc:	20000a80 	.word	0x20000a80

08000d00 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d131      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x76>
		seconds_passed += 1;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d1a:	6013      	str	r3, [r2, #0]
		if(seconds_passed>=czas)
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d326      	bcc.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x76>
		{
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4818      	ldr	r0, [pc, #96]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d2c:	f002 fc64 	bl	80035f8 <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	4817      	ldr	r0, [pc, #92]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d34:	f002 ff00 	bl	8003b38 <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4815      	ldr	r0, [pc, #84]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d3c:	f002 fefc 	bl	8003b38 <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000d40:	4814      	ldr	r0, [pc, #80]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d42:	f002 f947 	bl	8002fd4 <HAL_TIM_Base_Stop_IT>
			if(fallData[0]>riseData[0]){
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d907      	bls.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x62>
			Difference = fallData[0]-riseData[0];
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e006      	b.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x70>
			}else{
			Difference = riseData[0]-fallData[0];
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d6e:	6013      	str	r3, [r2, #0]
			}
			fsend("Przesylanie zakonczone;");
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d72:	f7ff fb35 	bl	80003e0 <fsend>
		}
	}

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40000400 	.word	0x40000400
 8000d84:	200000bc 	.word	0x200000bc
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000f90 	.word	0x20000f90
 8000d90:	20000fd8 	.word	0x20000fd8
 8000d94:	20000f48 	.word	0x20000f48
 8000d98:	20000a80 	.word	0x20000a80
 8000d9c:	200007e8 	.word	0x200007e8
 8000da0:	200000b4 	.word	0x200000b4
 8000da4:	08006db0 	.word	0x08006db0

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x4>
	...

08000db0 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <LCD_setRST+0x24>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <LCD_setRST+0x24>)
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	8093      	strh	r3, [r2, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000c10 	.word	0x20000c10

08000dd8 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000de4:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <LCD_setCE+0x24>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <LCD_setCE+0x24>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8193      	strh	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000c10 	.word	0x20000c10

08000e00 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <LCD_setDC+0x24>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <LCD_setDC+0x24>)
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	8293      	strh	r3, [r2, #20]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000c10 	.word	0x20000c10

08000e28 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <LCD_setDIN+0x24>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <LCD_setDIN+0x24>)
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	8393      	strh	r3, [r2, #28]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000c10 	.word	0x20000c10

08000e50 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <LCD_setCLK+0x24>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <LCD_setCLK+0x24>)
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000c10 	.word	0x20000c10

08000e78 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e026      	b.n	8000ed6 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <LCD_send+0x70>)
 8000e8a:	6998      	ldr	r0, [r3, #24]
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <LCD_send+0x70>)
 8000e8e:	8b99      	ldrh	r1, [r3, #28]
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f1c3 0307 	rsb	r3, r3, #7
 8000e98:	fa42 f303 	asr.w	r3, r2, r3
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f001 fb9c 	bl	80025e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <LCD_send+0x70>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <LCD_send+0x70>)
 8000eb6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fb94 	bl	80025e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <LCD_send+0x70>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <LCD_send+0x70>)
 8000ec6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 fb8c 	bl	80025e8 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	2b07      	cmp	r3, #7
 8000eda:	d9d5      	bls.n	8000e88 <LCD_send+0x10>
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000c10 	.word	0x20000c10

08000eec <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d11c      	bne.n	8000f3c <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <LCD_write+0x90>)
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <LCD_write+0x90>)
 8000f08:	8a91      	ldrh	r1, [r2, #20]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fb6b 	bl	80025e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <LCD_write+0x90>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <LCD_write+0x90>)
 8000f18:	8991      	ldrh	r1, [r2, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fb63 	bl	80025e8 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ffa7 	bl	8000e78 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <LCD_write+0x90>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <LCD_write+0x90>)
 8000f30:	8991      	ldrh	r1, [r2, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fb57 	bl	80025e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000f3a:	e01b      	b.n	8000f74 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <LCD_write+0x90>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LCD_write+0x90>)
 8000f42:	8a91      	ldrh	r1, [r2, #20]
 8000f44:	2201      	movs	r2, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fb4e 	bl	80025e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <LCD_write+0x90>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LCD_write+0x90>)
 8000f52:	8991      	ldrh	r1, [r2, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fb46 	bl	80025e8 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff8a 	bl	8000e78 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <LCD_write+0x90>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <LCD_write+0x90>)
 8000f6a:	8991      	ldrh	r1, [r2, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fb3a 	bl	80025e8 <HAL_GPIO_WritePin>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000c10 	.word	0x20000c10

08000f80 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <LCD_init+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <LCD_init+0x64>)
 8000f8a:	8891      	ldrh	r1, [r2, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fb2a 	bl	80025e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <LCD_init+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <LCD_init+0x64>)
 8000f9a:	8891      	ldrh	r1, [r2, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fb22 	bl	80025e8 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2021      	movs	r0, #33	; 0x21
 8000fa8:	f7ff ffa0 	bl	8000eec <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000fac:	2100      	movs	r1, #0
 8000fae:	20b8      	movs	r0, #184	; 0xb8
 8000fb0:	f7ff ff9c 	bl	8000eec <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f7ff ff98 	bl	8000eec <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2014      	movs	r0, #20
 8000fc0:	f7ff ff94 	bl	8000eec <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2020      	movs	r0, #32
 8000fc8:	f7ff ff90 	bl	8000eec <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200c      	movs	r0, #12
 8000fd0:	f7ff ff8c 	bl	8000eec <LCD_write>
  LCD_clrScr();
 8000fd4:	f000 f86c 	bl	80010b0 <LCD_clrScr>
  lcd.inverttext = false;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <LCD_init+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000c10 	.word	0x20000c10
 8000fe8:	20000c38 	.word	0x20000c38

08000fec <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e02d      	b.n	8001058 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <LCD_putChar+0x7c>)
 8000ffe:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d010      	beq.n	800102e <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f1a3 0220 	sub.w	r2, r3, #32
 8001012:	4916      	ldr	r1, [pc, #88]	; (800106c <LCD_putChar+0x80>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	18ca      	adds	r2, r1, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff60 	bl	8000eec <LCD_write>
 800102c:	e011      	b.n	8001052 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f1a3 0220 	sub.w	r2, r3, #32
 8001034:	490d      	ldr	r1, [pc, #52]	; (800106c <LCD_putChar+0x80>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	18ca      	adds	r2, r1, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	43db      	mvns	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff4d 	bl	8000eec <LCD_write>
  for(int i = 0; i < 6; i++){
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b05      	cmp	r3, #5
 800105c:	ddce      	ble.n	8000ffc <LCD_putChar+0x10>
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000c38 	.word	0x20000c38
 800106c:	08006de4 	.word	0x08006de4

08001070 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
 800107c:	4613      	mov	r3, r2
 800107e:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8001080:	78ba      	ldrb	r2, [r7, #2]
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f830 	bl	80010ec <LCD_goXY>
  while(*str){
 800108c:	e006      	b.n	800109c <LCD_print+0x2c>
    LCD_putChar(*str++);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa8 	bl	8000fec <LCD_putChar>
  while(*str){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f4      	bne.n	800108e <LCD_print+0x1e>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	e00b      	b.n	80010d4 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 80010bc:	2101      	movs	r1, #1
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff14 	bl	8000eec <LCD_write>
    lcd.buffer[i] = 0;
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <LCD_clrScr+0x38>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80010da:	dbef      	blt.n	80010bc <LCD_clrScr+0xc>
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000c38 	.word	0x20000c38

080010ec <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fef0 	bl	8000eec <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fee8 	bl	8000eec <LCD_write>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_MspInit+0x5c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x5c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_MspInit+0x60>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_MspInit+0x60>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 fcbf 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA1_Channel2_IRQHandler+0x10>)
 80011de:	f000 ff4b 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000e34 	.word	0x20000e34

080011ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA1_Channel5_IRQHandler+0x10>)
 80011f2:	f000 ff41 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000e78 	.word	0x20000e78

08001200 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <DMA1_Channel7_IRQHandler+0x10>)
 8001206:	f000 ff37 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000f04 	.word	0x20000f04

08001214 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <TIM2_IRQHandler+0x10>)
 800121a:	f002 fd47 	bl	8003cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000fd8 	.word	0x20000fd8

08001228 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <TIM3_IRQHandler+0x10>)
 800122e:	f002 fd3d 	bl	8003cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000f48 	.word	0x20000f48

0800123c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <USART2_IRQHandler+0x10>)
 8001242:	f003 ff7d 	bl	8005140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20001020 	.word	0x20001020

08001250 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001254:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001258:	f001 f9de 	bl	8002618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f004 fb2c 	bl	80058ec <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20005000 	.word	0x20005000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200000cc 	.word	0x200000cc
 80012c8:	20001078 	.word	0x20001078

080012cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	; 0x58
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f004 fb2f 	bl	8005974 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001318:	4a3f      	ldr	r2, [pc, #252]	; (8001418 <MX_TIM1_Init+0x140>)
 800131a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800131c:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <MX_TIM1_Init+0x13c>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <MX_TIM1_Init+0x13c>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001336:	4b37      	ldr	r3, [pc, #220]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <MX_TIM1_Init+0x13c>)
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001342:	4834      	ldr	r0, [pc, #208]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001344:	f001 fda4 	bl	8002e90 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800134e:	f7ff fd2b 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800135c:	4619      	mov	r1, r3
 800135e:	482d      	ldr	r0, [pc, #180]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001360:	f002 ff56 	bl	8004210 <HAL_TIM_ConfigClockSource>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800136a:	f7ff fd1d 	bl	8000da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800136e:	4829      	ldr	r0, [pc, #164]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001370:	f001 feb6 	bl	80030e0 <HAL_TIM_PWM_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800137a:	f7ff fd15 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800138a:	4619      	mov	r1, r3
 800138c:	4821      	ldr	r0, [pc, #132]	; (8001414 <MX_TIM1_Init+0x13c>)
 800138e:	f003 fd55 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001398:	f7ff fd06 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139c:	2360      	movs	r3, #96	; 0x60
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 80013a0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4814      	ldr	r0, [pc, #80]	; (8001414 <MX_TIM1_Init+0x13c>)
 80013c4:	f002 fe66 	bl	8004094 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013ce:	f7ff fceb 	bl	8000da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM1_Init+0x13c>)
 80013f6:	f003 fd7f 	bl	8004ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001400:	f7ff fcd2 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM1_Init+0x13c>)
 8001406:	f000 fa71 	bl	80018ec <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3758      	adds	r7, #88	; 0x58
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000f90 	.word	0x20000f90
 8001418:	40012c00 	.word	0x40012c00

0800141c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001446:	4b33      	ldr	r3, [pc, #204]	; (8001514 <MX_TIM2_Init+0xf8>)
 8001448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <MX_TIM2_Init+0xf8>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <MX_TIM2_Init+0xf8>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_TIM2_Init+0xf8>)
 800145c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <MX_TIM2_Init+0xf8>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_TIM2_Init+0xf8>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146e:	4829      	ldr	r0, [pc, #164]	; (8001514 <MX_TIM2_Init+0xf8>)
 8001470:	f001 fd0e 	bl	8002e90 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800147a:	f7ff fc95 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4619      	mov	r1, r3
 800148a:	4822      	ldr	r0, [pc, #136]	; (8001514 <MX_TIM2_Init+0xf8>)
 800148c:	f002 fec0 	bl	8004210 <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001496:	f7ff fc87 	bl	8000da8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800149a:	481e      	ldr	r0, [pc, #120]	; (8001514 <MX_TIM2_Init+0xf8>)
 800149c:	f002 f96a 	bl	8003774 <HAL_TIM_IC_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014a6:	f7ff fc7f 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4619      	mov	r1, r3
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <MX_TIM2_Init+0xf8>)
 80014ba:	f003 fcbf 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014c4:	f7ff fc70 	bl	8000da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_TIM2_Init+0xf8>)
 80014e0:	f002 fd44 	bl	8003f6c <HAL_TIM_IC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014ea:	f7ff fc5d 	bl	8000da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014ee:	2302      	movs	r3, #2
 80014f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014f2:	2302      	movs	r3, #2
 80014f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2204      	movs	r2, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM2_Init+0xf8>)
 80014fe:	f002 fd35 	bl	8003f6c <HAL_TIM_IC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001508:	f7ff fc4e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000fd8 	.word	0x20000fd8

08001518 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	; 0x38
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_TIM3_Init+0xe0>)
 800154a:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <MX_TIM3_Init+0xe4>)
 800154c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_TIM3_Init+0xe0>)
 8001550:	f242 720f 	movw	r2, #9999	; 0x270f
 8001554:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_TIM3_Init+0xe0>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <MX_TIM3_Init+0xe0>)
 800155e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001562:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_TIM3_Init+0xe0>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_TIM3_Init+0xe0>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <MX_TIM3_Init+0xe0>)
 8001572:	f001 fc8d 	bl	8002e90 <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800157c:	f7ff fc14 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158a:	4619      	mov	r1, r3
 800158c:	481a      	ldr	r0, [pc, #104]	; (80015f8 <MX_TIM3_Init+0xe0>)
 800158e:	f002 fe3f 	bl	8004210 <HAL_TIM_ConfigClockSource>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001598:	f7ff fc06 	bl	8000da8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800159c:	4816      	ldr	r0, [pc, #88]	; (80015f8 <MX_TIM3_Init+0xe0>)
 800159e:	f001 fd47 	bl	8003030 <HAL_TIM_OC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015a8:	f7ff fbfe 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4619      	mov	r1, r3
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <MX_TIM3_Init+0xe0>)
 80015bc:	f003 fc3e 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015c6:	f7ff fbef 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_TIM3_Init+0xe0>)
 80015e2:	f002 fc6b 	bl	8003ebc <HAL_TIM_OC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015ec:	f7ff fbdc 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3738      	adds	r7, #56	; 0x38
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000f48 	.word	0x20000f48
 80015fc:	40000400 	.word	0x40000400

08001600 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_TIM4_Init+0xac>)
 8001626:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM4_Init+0xa8>)
 800162a:	2247      	movs	r2, #71	; 0x47
 800162c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001636:	2263      	movs	r2, #99	; 0x63
 8001638:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_TIM4_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001648:	f001 fd4a 	bl	80030e0 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001652:	f7ff fba9 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001666:	f003 fbe9 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001670:	f7ff fb9a 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM4_Init+0xa8>)
 800168c:	f002 fd02 	bl	8004094 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001696:	f7ff fb87 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM4_Init+0xa8>)
 800169c:	f000 f926 	bl	80018ec <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000ebc 	.word	0x20000ebc
 80016ac:	40000800 	.word	0x40000800

080016b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6f      	ldr	r2, [pc, #444]	; (8001888 <HAL_TIM_Base_MspInit+0x1d8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d134      	bne.n	800173a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d0:	4b6e      	ldr	r3, [pc, #440]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a6d      	ldr	r2, [pc, #436]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 80016d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b6b      	ldr	r3, [pc, #428]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80016e8:	4b69      	ldr	r3, [pc, #420]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 80016ea:	4a6a      	ldr	r2, [pc, #424]	; (8001894 <HAL_TIM_Base_MspInit+0x1e4>)
 80016ec:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ee:	4b68      	ldr	r3, [pc, #416]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b66      	ldr	r3, [pc, #408]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b65      	ldr	r3, [pc, #404]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001700:	4b63      	ldr	r3, [pc, #396]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 8001702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001706:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001708:	4b61      	ldr	r3, [pc, #388]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 800170a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800170e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001710:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001716:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800171c:	485c      	ldr	r0, [pc, #368]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 800171e:	f000 fb41 	bl	8001da4 <HAL_DMA_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8001728:	f7ff fb3e 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a58      	ldr	r2, [pc, #352]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
 8001732:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_TIM_Base_MspInit+0x1e0>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001738:	e0a1      	b.n	800187e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001742:	f040 8083 	bne.w	800184c <HAL_TIM_Base_MspInit+0x19c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a50      	ldr	r2, [pc, #320]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b4b      	ldr	r3, [pc, #300]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	4a4a      	ldr	r2, [pc, #296]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6193      	str	r3, [r2, #24]
 800176a:	4b48      	ldr	r3, [pc, #288]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4619      	mov	r1, r3
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <HAL_TIM_Base_MspInit+0x1e8>)
 800178a:	f000 fda9 	bl	80022e0 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 8001790:	4a43      	ldr	r2, [pc, #268]	; (80018a0 <HAL_TIM_Base_MspInit+0x1f0>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b40      	ldr	r3, [pc, #256]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80017c2:	4836      	ldr	r0, [pc, #216]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017c4:	f000 faee 	bl	8001da4 <HAL_DMA_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_TIM_Base_MspInit+0x122>
      Error_Handler();
 80017ce:	f7ff faeb 	bl	8000da8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_TIM_Base_MspInit+0x1ec>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 80017e0:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <HAL_TIM_Base_MspInit+0x1f8>)
 80017e2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017f0:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 80017f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 8001800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001804:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001812:	4824      	ldr	r0, [pc, #144]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 8001814:	f000 fac6 	bl	8001da4 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_TIM_Base_MspInit+0x172>
      Error_Handler();
 800181e:	f7ff fac3 	bl	8000da8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <HAL_TIM_Base_MspInit+0x1f4>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	201c      	movs	r0, #28
 8001840:	f000 fa79 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001844:	201c      	movs	r0, #28
 8001846:	f000 fa92 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 800184a:	e018      	b.n	800187e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_TIM_Base_MspInit+0x1fc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d113      	bne.n	800187e <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_TIM_Base_MspInit+0x1dc>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	201d      	movs	r0, #29
 8001874:	f000 fa5f 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001878:	201d      	movs	r0, #29
 800187a:	f000 fa78 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40012c00 	.word	0x40012c00
 800188c:	40021000 	.word	0x40021000
 8001890:	20000e34 	.word	0x20000e34
 8001894:	4002001c 	.word	0x4002001c
 8001898:	40010800 	.word	0x40010800
 800189c:	20000e78 	.word	0x20000e78
 80018a0:	40020058 	.word	0x40020058
 80018a4:	20000f04 	.word	0x20000f04
 80018a8:	40020080 	.word	0x40020080
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_TIM_PWM_MspInit+0x34>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10b      	bne.n	80018da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_TIM_PWM_MspInit+0x38>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_TIM_PWM_MspInit+0x38>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_TIM_PWM_MspInit+0x38>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40000800 	.word	0x40000800
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_TIM_MspPostInit+0x98>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d119      	bne.n	8001940 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_TIM_MspPostInit+0x9c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_TIM_MspPostInit+0x9c>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_TIM_MspPostInit+0x9c>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2302      	movs	r3, #2
 8001930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	4619      	mov	r1, r3
 8001938:	4814      	ldr	r0, [pc, #80]	; (800198c <HAL_TIM_MspPostInit+0xa0>)
 800193a:	f000 fcd1 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800193e:	e01c      	b.n	800197a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_TIM_MspPostInit+0xa4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d117      	bne.n	800197a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_TIM_MspPostInit+0x9c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_TIM_MspPostInit+0x9c>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_TIM_MspPostInit+0x9c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001962:	2340      	movs	r3, #64	; 0x40
 8001964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2302      	movs	r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <HAL_TIM_MspPostInit+0xa8>)
 8001976:	f000 fcb3 	bl	80022e0 <HAL_GPIO_Init>
}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40010800 	.word	0x40010800
 8001990:	40000800 	.word	0x40000800
 8001994:	40010c00 	.word	0x40010c00

08001998 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_USART2_UART_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019d0:	f003 faf5 	bl	8004fbe <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019da:	f7ff f9e5 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20001020 	.word	0x20001020
 80019e8:	40004400 	.word	0x40004400

080019ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_UART_MspInit+0x80>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d12b      	bne.n	8001a64 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0x84>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x84>)
 8001a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a16:	61d3      	str	r3, [r2, #28]
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0x84>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_UART_MspInit+0x84>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x84>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_UART_MspInit+0x84>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <HAL_UART_MspInit+0x88>)
 8001a50:	f000 fc46 	bl	80022e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2026      	movs	r0, #38	; 0x26
 8001a5a:	f000 f96c 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a5e:	2026      	movs	r0, #38	; 0x26
 8001a60:	f000 f985 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800

08001a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9e:	f7ff fc15 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f003 ff29 	bl	80058f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7ff f81d 	bl	8000ae4 <main>
  bx lr
 8001aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ab4:	080071f4 	.word	0x080071f4
  ldr r2, =_sbss
 8001ab8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001abc:	20001078 	.word	0x20001078

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x28>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f923 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fb20 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f93b 	bl	8001d8a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f903 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000010 	.word	0x20000010
 8001b48:	20000018 	.word	0x20000018
 8001b4c:	20000014 	.word	0x20000014

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000018 	.word	0x20000018
 8001b70:	20001064 	.word	0x20001064

08001b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20001064 	.word	0x20001064

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <__NVIC_EnableIRQ+0x34>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff2d 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff42 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff35 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e043      	b.n	8001e42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_DMA_Init+0xa8>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_DMA_Init+0xac>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	009a      	lsls	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_DMA_Init+0xb0>)
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	bffdfff8 	.word	0xbffdfff8
 8001e50:	cccccccd 	.word	0xcccccccd
 8001e54:	40020000 	.word	0x40020000

08001e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_DMA_Start_IT+0x20>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e04a      	b.n	8001f0e <HAL_DMA_Start_IT+0xb6>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d13a      	bne.n	8001f00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f9e8 	bl	8002284 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 020e 	orr.w	r2, r2, #14
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e00f      	b.n	8001eee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0204 	bic.w	r2, r2, #4
 8001edc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 020a 	orr.w	r2, r2, #10
 8001eec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e005      	b.n	8001f0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b085      	sub	sp, #20
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e020      	b.n	8001f80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020e 	bic.w	r2, r2, #14
 8001f4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d005      	beq.n	8001fae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e051      	b.n	8002052 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020e 	bic.w	r2, r2, #14
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a22      	ldr	r2, [pc, #136]	; (800205c <HAL_DMA_Abort_IT+0xd0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d029      	beq.n	800202c <HAL_DMA_Abort_IT+0xa0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	; (8002060 <HAL_DMA_Abort_IT+0xd4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d022      	beq.n	8002028 <HAL_DMA_Abort_IT+0x9c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_DMA_Abort_IT+0xd8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d01a      	beq.n	8002022 <HAL_DMA_Abort_IT+0x96>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_DMA_Abort_IT+0xdc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_Abort_IT+0x90>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_DMA_Abort_IT+0xe0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00a      	beq.n	8002016 <HAL_DMA_Abort_IT+0x8a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_DMA_Abort_IT+0xe4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d102      	bne.n	8002010 <HAL_DMA_Abort_IT+0x84>
 800200a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800200e:	e00e      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002014:	e00b      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201a:	e008      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 800201c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002020:	e005      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002026:	e002      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002028:	2310      	movs	r3, #16
 800202a:	e000      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 800202c:	2301      	movs	r3, #1
 800202e:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_DMA_Abort_IT+0xe8>)
 8002030:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
    } 
  }
  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40020008 	.word	0x40020008
 8002060:	4002001c 	.word	0x4002001c
 8002064:	40020030 	.word	0x40020030
 8002068:	40020044 	.word	0x40020044
 800206c:	40020058 	.word	0x40020058
 8002070:	4002006c 	.word	0x4002006c
 8002074:	40020000 	.word	0x40020000

08002078 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2204      	movs	r2, #4
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d04f      	beq.n	8002140 <HAL_DMA_IRQHandler+0xc8>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d04a      	beq.n	8002140 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0204 	bic.w	r2, r2, #4
 80020c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a66      	ldr	r2, [pc, #408]	; (8002268 <HAL_DMA_IRQHandler+0x1f0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d029      	beq.n	8002126 <HAL_DMA_IRQHandler+0xae>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_DMA_IRQHandler+0x1f4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d022      	beq.n	8002122 <HAL_DMA_IRQHandler+0xaa>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_DMA_IRQHandler+0x1f8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01a      	beq.n	800211c <HAL_DMA_IRQHandler+0xa4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a62      	ldr	r2, [pc, #392]	; (8002274 <HAL_DMA_IRQHandler+0x1fc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d012      	beq.n	8002116 <HAL_DMA_IRQHandler+0x9e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a60      	ldr	r2, [pc, #384]	; (8002278 <HAL_DMA_IRQHandler+0x200>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00a      	beq.n	8002110 <HAL_DMA_IRQHandler+0x98>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a5f      	ldr	r2, [pc, #380]	; (800227c <HAL_DMA_IRQHandler+0x204>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d102      	bne.n	800210a <HAL_DMA_IRQHandler+0x92>
 8002104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002108:	e00e      	b.n	8002128 <HAL_DMA_IRQHandler+0xb0>
 800210a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800210e:	e00b      	b.n	8002128 <HAL_DMA_IRQHandler+0xb0>
 8002110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002114:	e008      	b.n	8002128 <HAL_DMA_IRQHandler+0xb0>
 8002116:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211a:	e005      	b.n	8002128 <HAL_DMA_IRQHandler+0xb0>
 800211c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002120:	e002      	b.n	8002128 <HAL_DMA_IRQHandler+0xb0>
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	e000      	b.n	8002128 <HAL_DMA_IRQHandler+0xb0>
 8002126:	2304      	movs	r3, #4
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_DMA_IRQHandler+0x208>)
 800212a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8094 	beq.w	800225e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800213e:	e08e      	b.n	800225e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2202      	movs	r2, #2
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d056      	beq.n	80021fe <HAL_DMA_IRQHandler+0x186>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d051      	beq.n	80021fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 020a 	bic.w	r2, r2, #10
 8002176:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a38      	ldr	r2, [pc, #224]	; (8002268 <HAL_DMA_IRQHandler+0x1f0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d029      	beq.n	80021de <HAL_DMA_IRQHandler+0x166>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a37      	ldr	r2, [pc, #220]	; (800226c <HAL_DMA_IRQHandler+0x1f4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_IRQHandler+0x162>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a35      	ldr	r2, [pc, #212]	; (8002270 <HAL_DMA_IRQHandler+0x1f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x15c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <HAL_DMA_IRQHandler+0x1fc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0x156>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a32      	ldr	r2, [pc, #200]	; (8002278 <HAL_DMA_IRQHandler+0x200>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x150>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a31      	ldr	r2, [pc, #196]	; (800227c <HAL_DMA_IRQHandler+0x204>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d102      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x14a>
 80021bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021c0:	e00e      	b.n	80021e0 <HAL_DMA_IRQHandler+0x168>
 80021c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c6:	e00b      	b.n	80021e0 <HAL_DMA_IRQHandler+0x168>
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	e008      	b.n	80021e0 <HAL_DMA_IRQHandler+0x168>
 80021ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d2:	e005      	b.n	80021e0 <HAL_DMA_IRQHandler+0x168>
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	e002      	b.n	80021e0 <HAL_DMA_IRQHandler+0x168>
 80021da:	2320      	movs	r3, #32
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0x168>
 80021de:	2302      	movs	r3, #2
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_DMA_IRQHandler+0x208>)
 80021e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d034      	beq.n	800225e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021fc:	e02f      	b.n	800225e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2208      	movs	r2, #8
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d028      	beq.n	8002260 <HAL_DMA_IRQHandler+0x1e8>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020e 	bic.w	r2, r2, #14
 8002226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
    }
  }
  return;
 800225e:	bf00      	nop
 8002260:	bf00      	nop
}
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40020008 	.word	0x40020008
 800226c:	4002001c 	.word	0x4002001c
 8002270:	40020030 	.word	0x40020030
 8002274:	40020044 	.word	0x40020044
 8002278:	40020058 	.word	0x40020058
 800227c:	4002006c 	.word	0x4002006c
 8002280:	40020000 	.word	0x40020000

08002284 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f202 	lsl.w	r2, r1, r2
 80022a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d108      	bne.n	80022c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022c2:	e007      	b.n	80022d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b08b      	sub	sp, #44	; 0x2c
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e169      	b.n	80025c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f4:	2201      	movs	r2, #1
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8158 	bne.w	80025c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a9a      	ldr	r2, [pc, #616]	; (8002580 <HAL_GPIO_Init+0x2a0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d05e      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 800231c:	4a98      	ldr	r2, [pc, #608]	; (8002580 <HAL_GPIO_Init+0x2a0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d875      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 8002322:	4a98      	ldr	r2, [pc, #608]	; (8002584 <HAL_GPIO_Init+0x2a4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d058      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 8002328:	4a96      	ldr	r2, [pc, #600]	; (8002584 <HAL_GPIO_Init+0x2a4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d86f      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 800232e:	4a96      	ldr	r2, [pc, #600]	; (8002588 <HAL_GPIO_Init+0x2a8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d052      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 8002334:	4a94      	ldr	r2, [pc, #592]	; (8002588 <HAL_GPIO_Init+0x2a8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d869      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 800233a:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_GPIO_Init+0x2ac>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d04c      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 8002340:	4a92      	ldr	r2, [pc, #584]	; (800258c <HAL_GPIO_Init+0x2ac>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d863      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 8002346:	4a92      	ldr	r2, [pc, #584]	; (8002590 <HAL_GPIO_Init+0x2b0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d046      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 800234c:	4a90      	ldr	r2, [pc, #576]	; (8002590 <HAL_GPIO_Init+0x2b0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d85d      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 8002352:	2b12      	cmp	r3, #18
 8002354:	d82a      	bhi.n	80023ac <HAL_GPIO_Init+0xcc>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d859      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 800235a:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <HAL_GPIO_Init+0x80>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	080023db 	.word	0x080023db
 8002364:	080023b5 	.word	0x080023b5
 8002368:	080023c7 	.word	0x080023c7
 800236c:	08002409 	.word	0x08002409
 8002370:	0800240f 	.word	0x0800240f
 8002374:	0800240f 	.word	0x0800240f
 8002378:	0800240f 	.word	0x0800240f
 800237c:	0800240f 	.word	0x0800240f
 8002380:	0800240f 	.word	0x0800240f
 8002384:	0800240f 	.word	0x0800240f
 8002388:	0800240f 	.word	0x0800240f
 800238c:	0800240f 	.word	0x0800240f
 8002390:	0800240f 	.word	0x0800240f
 8002394:	0800240f 	.word	0x0800240f
 8002398:	0800240f 	.word	0x0800240f
 800239c:	0800240f 	.word	0x0800240f
 80023a0:	0800240f 	.word	0x0800240f
 80023a4:	080023bd 	.word	0x080023bd
 80023a8:	080023d1 	.word	0x080023d1
 80023ac:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_GPIO_Init+0x2b4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b2:	e02c      	b.n	800240e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	623b      	str	r3, [r7, #32]
          break;
 80023ba:	e029      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	3304      	adds	r3, #4
 80023c2:	623b      	str	r3, [r7, #32]
          break;
 80023c4:	e024      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	3308      	adds	r3, #8
 80023cc:	623b      	str	r3, [r7, #32]
          break;
 80023ce:	e01f      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	330c      	adds	r3, #12
 80023d6:	623b      	str	r3, [r7, #32]
          break;
 80023d8:	e01a      	b.n	8002410 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e2:	2304      	movs	r3, #4
 80023e4:	623b      	str	r3, [r7, #32]
          break;
 80023e6:	e013      	b.n	8002410 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f0:	2308      	movs	r3, #8
 80023f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	611a      	str	r2, [r3, #16]
          break;
 80023fa:	e009      	b.n	8002410 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023fc:	2308      	movs	r3, #8
 80023fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	615a      	str	r2, [r3, #20]
          break;
 8002406:	e003      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x130>
          break;
 800240e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d801      	bhi.n	800241a <HAL_GPIO_Init+0x13a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	e001      	b.n	800241e <HAL_GPIO_Init+0x13e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d802      	bhi.n	800242c <HAL_GPIO_Init+0x14c>
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	e002      	b.n	8002432 <HAL_GPIO_Init+0x152>
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3b08      	subs	r3, #8
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	210f      	movs	r1, #15
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	431a      	orrs	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80b1 	beq.w	80025c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002478:	4a48      	ldr	r2, [pc, #288]	; (800259c <HAL_GPIO_Init+0x2bc>)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <HAL_GPIO_Init+0x2c0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_GPIO_Init+0x1ec>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3f      	ldr	r2, [pc, #252]	; (80025a4 <HAL_GPIO_Init+0x2c4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00d      	beq.n	80024c8 <HAL_GPIO_Init+0x1e8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3e      	ldr	r2, [pc, #248]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <HAL_GPIO_Init+0x1e4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3d      	ldr	r2, [pc, #244]	; (80025ac <HAL_GPIO_Init+0x2cc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_GPIO_Init+0x1e0>
 80024bc:	2303      	movs	r3, #3
 80024be:	e006      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e004      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024cc:	2300      	movs	r3, #0
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	f002 0203 	and.w	r2, r2, #3
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	4093      	lsls	r3, r2
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024de:	492f      	ldr	r1, [pc, #188]	; (800259c <HAL_GPIO_Init+0x2bc>)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	492c      	ldr	r1, [pc, #176]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	4928      	ldr	r1, [pc, #160]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002510:	4013      	ands	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4922      	ldr	r1, [pc, #136]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	43db      	mvns	r3, r3
 8002536:	491e      	ldr	r1, [pc, #120]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002538:	4013      	ands	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	4918      	ldr	r1, [pc, #96]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	43db      	mvns	r3, r3
 800255e:	4914      	ldr	r1, [pc, #80]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002560:	4013      	ands	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d021      	beq.n	80025b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
 800257c:	e021      	b.n	80025c2 <HAL_GPIO_Init+0x2e2>
 800257e:	bf00      	nop
 8002580:	10320000 	.word	0x10320000
 8002584:	10310000 	.word	0x10310000
 8002588:	10220000 	.word	0x10220000
 800258c:	10210000 	.word	0x10210000
 8002590:	10120000 	.word	0x10120000
 8002594:	10110000 	.word	0x10110000
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40011400 	.word	0x40011400
 80025b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	4909      	ldr	r1, [pc, #36]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025be:	4013      	ands	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	3301      	adds	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f ae8e 	bne.w	80022f4 <HAL_GPIO_Init+0x14>
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	372c      	adds	r7, #44	; 0x2c
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f806 	bl	8002648 <HAL_GPIO_EXTI_Callback>
  }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40010400 	.word	0x40010400

08002648 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e26c      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8087 	beq.w	800278a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b04      	cmp	r3, #4
 8002686:	d00c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002688:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d112      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d10b      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06c      	beq.n	8002788 <HAL_RCC_OscConfig+0x12c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d168      	bne.n	8002788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e246      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x76>
 80026c4:	4b80      	ldr	r3, [pc, #512]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a7f      	ldr	r2, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0xbc>
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a71      	ldr	r2, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 8002718:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fa1c 	bl	8001b74 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fa18 	bl	8001b74 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1fa      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xe4>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fa08 	bl	8001b74 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fa04 	bl	8001b74 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1e6      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x10c>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1ba      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4939      	ldr	r1, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff f9bd 	bl	8001b74 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f9b9 	bl	8001b74 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e19b      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff f99c 	bl	8001b74 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f998 	bl	8001b74 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e17a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03a      	beq.n	80028e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff f97c 	bl	8001b74 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f978 	bl	8001b74 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e15a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 fad8 	bl	8002e54 <RCC_Delay>
 80028a4:	e01c      	b.n	80028e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff f962 	bl	8001b74 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff f95e 	bl	8001b74 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d908      	bls.n	80028d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e140      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	42420000 	.word	0x42420000
 80028d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b9e      	ldr	r3, [pc, #632]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e9      	bne.n	80028b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a6 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b94      	ldr	r3, [pc, #592]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a93      	ldr	r2, [pc, #588]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b91      	ldr	r3, [pc, #580]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a8a      	ldr	r2, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff f91f 	bl	8001b74 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff f91b 	bl	8001b74 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0fd      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x312>
 8002960:	4b7b      	ldr	r3, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a7a      	ldr	r2, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x334>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x356>
 8002998:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	4a6c      	ldr	r2, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6213      	str	r3, [r2, #32]
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a66      	ldr	r2, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a63      	ldr	r2, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7ff f8cf 	bl	8001b74 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff f8cb 	bl	8001b74 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0ab      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x37e>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7ff f8b9 	bl	8001b74 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff f8b5 	bl	8001b74 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e095      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8081 	beq.w	8002b46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d061      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d146      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff f889 	bl	8001b74 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7ff f885 	bl	8001b74 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e067      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a19      	ldr	r1, [r3, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	4927      	ldr	r1, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7ff f859 	bl	8001b74 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7ff f855 	bl	8001b74 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e037      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x46a>
 8002ae4:	e02f      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f842 	bl	8001b74 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff f83e 	bl	8001b74 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e020      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x498>
 8002b12:	e018      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42420060 	.word	0x42420060

08002b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d0      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d040      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e073      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe ff92 	bl	8001b74 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7fe ff8e 	bl	8001b74 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e053      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d210      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fef0 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08007024 	.word	0x08007024
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	20000014 	.word	0x20000014

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b490      	push	{r4, r7}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d38:	1d3c      	adds	r4, r7, #4
 8002d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d40:	f240 2301 	movw	r3, #513	; 0x201
 8002d44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x46>
 8002d6e:	e02d      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d72:	623b      	str	r3, [r7, #32]
      break;
 8002d74:	e02d      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d82:	4413      	add	r3, r2
 8002d84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c5b      	lsrs	r3, r3, #17
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002da2:	4413      	add	r3, r2
 8002da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002da8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dae:	fb02 f203 	mul.w	r2, r2, r3
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e004      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	623b      	str	r3, [r7, #32]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dce:	623b      	str	r3, [r7, #32]
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc90      	pop	{r4, r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	08006dc8 	.word	0x08006dc8
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	003d0900 	.word	0x003d0900

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000010 	.word	0x20000010

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff2 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08007034 	.word	0x08007034

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	0adb      	lsrs	r3, r3, #11
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08007034 	.word	0x08007034

08002e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <RCC_Delay+0x34>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <RCC_Delay+0x38>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a5b      	lsrs	r3, r3, #9
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e70:	bf00      	nop
  }
  while (Delay --);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	60fa      	str	r2, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f9      	bne.n	8002e70 <RCC_Delay+0x1c>
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20000010 	.word	0x20000010
 8002e8c:	10624dd3 	.word	0x10624dd3

08002e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe fbfa 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f001 fc02 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e03a      	b.n	8002fbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_TIM_Base_Start_IT+0x98>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x58>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x58>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_TIM_Base_Start_IT+0x9c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x58>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d010      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	e007      	b.n	8002fbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <HAL_TIM_Base_Stop_IT+0x48>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	f240 4344 	movw	r3, #1092	; 0x444
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_TIM_Base_Stop_IT+0x48>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f839 	bl	80030ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f001 fb32 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e041      	b.n	8003176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fbd2 	bl	80018b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f001 fada 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_TIM_PWM_Start+0x24>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e022      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d109      	bne.n	80031be <HAL_TIM_PWM_Start+0x3e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e015      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d109      	bne.n	80031d8 <HAL_TIM_PWM_Start+0x58>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e008      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e05e      	b.n	80032b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0x82>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	e013      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Start+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	e00b      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_PWM_Start+0xa2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	e003      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fddd 	bl	8004df2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_TIM_PWM_Start+0x138>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d107      	bne.n	8003252 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_TIM_PWM_Start+0x138>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_TIM_PWM_Start+0xfa>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d009      	beq.n	800327a <HAL_TIM_PWM_Start+0xfa>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIM_PWM_Start+0x13c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_TIM_PWM_Start+0xfa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIM_PWM_Start+0x140>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d111      	bne.n	800329e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d010      	beq.n	80032ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329c:	e007      	b.n	80032ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800

080032c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_TIM_PWM_Start_DMA+0x28>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e022      	b.n	8003332 <HAL_TIM_PWM_Start_DMA+0x6e>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d109      	bne.n	8003306 <HAL_TIM_PWM_Start_DMA+0x42>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	bf0c      	ite	eq
 80032fe:	2301      	moveq	r3, #1
 8003300:	2300      	movne	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e015      	b.n	8003332 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d109      	bne.n	8003320 <HAL_TIM_PWM_Start_DMA+0x5c>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e008      	b.n	8003332 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	e14e      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_TIM_PWM_Start_DMA+0x90>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e022      	b.n	800339a <HAL_TIM_PWM_Start_DMA+0xd6>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d109      	bne.n	800336e <HAL_TIM_PWM_Start_DMA+0xaa>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e015      	b.n	800339a <HAL_TIM_PWM_Start_DMA+0xd6>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d109      	bne.n	8003388 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e008      	b.n	800339a <HAL_TIM_PWM_Start_DMA+0xd6>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d024      	beq.n	80033e8 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Start_DMA+0xea>
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e114      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <HAL_TIM_PWM_Start_DMA+0xfa>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	e016      	b.n	80033ec <HAL_TIM_PWM_Start_DMA+0x128>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_PWM_Start_DMA+0x10a>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033cc:	e00e      	b.n	80033ec <HAL_TIM_PWM_Start_DMA+0x128>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d104      	bne.n	80033de <HAL_TIM_PWM_Start_DMA+0x11a>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	e006      	b.n	80033ec <HAL_TIM_PWM_Start_DMA+0x128>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033e6:	e001      	b.n	80033ec <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0f5      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	f200 80ae 	bhi.w	8003550 <HAL_TIM_PWM_Start_DMA+0x28c>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <HAL_TIM_PWM_Start_DMA+0x138>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003431 	.word	0x08003431
 8003400:	08003551 	.word	0x08003551
 8003404:	08003551 	.word	0x08003551
 8003408:	08003551 	.word	0x08003551
 800340c:	08003479 	.word	0x08003479
 8003410:	08003551 	.word	0x08003551
 8003414:	08003551 	.word	0x08003551
 8003418:	08003551 	.word	0x08003551
 800341c:	080034c1 	.word	0x080034c1
 8003420:	08003551 	.word	0x08003551
 8003424:	08003551 	.word	0x08003551
 8003428:	08003551 	.word	0x08003551
 800342c:	08003509 	.word	0x08003509
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	4a6a      	ldr	r2, [pc, #424]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	4a69      	ldr	r2, [pc, #420]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003446:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3334      	adds	r3, #52	; 0x34
 8003454:	461a      	mov	r2, r3
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	f7fe fcfe 	bl	8001e58 <HAL_DMA_Start_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0b8      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003474:	60da      	str	r2, [r3, #12]
      break;
 8003476:	e06c      	b.n	8003552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	4a57      	ldr	r2, [pc, #348]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800348e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3338      	adds	r3, #56	; 0x38
 800349c:	461a      	mov	r2, r3
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	f7fe fcda 	bl	8001e58 <HAL_DMA_Start_IT>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e094      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034bc:	60da      	str	r2, [r3, #12]
      break;
 80034be:	e048      	b.n	8003552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4a46      	ldr	r2, [pc, #280]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a45      	ldr	r2, [pc, #276]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	4a44      	ldr	r2, [pc, #272]	; (80035e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	333c      	adds	r3, #60	; 0x3c
 80034e4:	461a      	mov	r2, r3
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	f7fe fcb6 	bl	8001e58 <HAL_DMA_Start_IT>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e070      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003504:	60da      	str	r2, [r3, #12]
      break;
 8003506:	e024      	b.n	8003552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	4a34      	ldr	r2, [pc, #208]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800351e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3340      	adds	r3, #64	; 0x40
 800352c:	461a      	mov	r2, r3
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	f7fe fc92 	bl	8001e58 <HAL_DMA_Start_IT>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e04c      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800354c:	60da      	str	r2, [r3, #12]
      break;
 800354e:	e000      	b.n	8003552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003550:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fc49 	bl	8004df2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a21      	ldr	r2, [pc, #132]	; (80035ec <HAL_TIM_PWM_Start_DMA+0x328>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d107      	bne.n	800357a <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <HAL_TIM_PWM_Start_DMA+0x328>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d009      	beq.n	80035a2 <HAL_TIM_PWM_Start_DMA+0x2de>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d010      	beq.n	80035d6 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	e007      	b.n	80035d6 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	08004497 	.word	0x08004497
 80035e4:	0800453f 	.word	0x0800453f
 80035e8:	08004405 	.word	0x08004405
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800

080035f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d855      	bhi.n	80036b4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003645 	.word	0x08003645
 8003614:	080036b5 	.word	0x080036b5
 8003618:	080036b5 	.word	0x080036b5
 800361c:	080036b5 	.word	0x080036b5
 8003620:	08003661 	.word	0x08003661
 8003624:	080036b5 	.word	0x080036b5
 8003628:	080036b5 	.word	0x080036b5
 800362c:	080036b5 	.word	0x080036b5
 8003630:	0800367d 	.word	0x0800367d
 8003634:	080036b5 	.word	0x080036b5
 8003638:	080036b5 	.word	0x080036b5
 800363c:	080036b5 	.word	0x080036b5
 8003640:	08003699 	.word	0x08003699
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003652:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fc97 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 800365e:	e02a      	b.n	80036b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fc89 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 800367a:	e01c      	b.n	80036b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe fc7b 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 8003696:	e00e      	b.n	80036b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fc6d 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80036b4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fb97 	bl	8004df2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a29      	ldr	r2, [pc, #164]	; (8003770 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d117      	bne.n	80036fe <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_TIM_PWM_Stop_DMA+0x106>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	f240 4344 	movw	r3, #1092	; 0x444
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_PWM_Stop_DMA+0x106>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	f241 1311 	movw	r3, #4369	; 0x1111
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_TIM_PWM_Stop_DMA+0x136>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	f240 4344 	movw	r3, #1092	; 0x444
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d107      	bne.n	800372e <HAL_TIM_PWM_Stop_DMA+0x136>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_TIM_PWM_Stop_DMA+0x146>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373c:	e013      	b.n	8003766 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Stop_DMA+0x156>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	e00b      	b.n	8003766 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d104      	bne.n	800375e <HAL_TIM_PWM_Stop_DMA+0x166>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375c:	e003      	b.n	8003766 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40012c00 	.word	0x40012c00

08003774 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e041      	b.n	800380a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f839 	bl	8003812 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 ff90 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_DMA+0x1e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e013      	b.n	800386a <HAL_TIM_IC_Start_DMA+0x46>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Start_DMA+0x2e>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800384e:	b2db      	uxtb	r3, r3
 8003850:	e00b      	b.n	800386a <HAL_TIM_IC_Start_DMA+0x46>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Start_DMA+0x3e>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e003      	b.n	800386a <HAL_TIM_IC_Start_DMA+0x46>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_TIM_IC_Start_DMA+0x58>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e013      	b.n	80038a4 <HAL_TIM_IC_Start_DMA+0x80>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d104      	bne.n	800388c <HAL_TIM_IC_Start_DMA+0x68>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e00b      	b.n	80038a4 <HAL_TIM_IC_Start_DMA+0x80>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d104      	bne.n	800389c <HAL_TIM_IC_Start_DMA+0x78>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e003      	b.n	80038a4 <HAL_TIM_IC_Start_DMA+0x80>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d002      	beq.n	80038b2 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80038ac:	7dbb      	ldrb	r3, [r7, #22]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	e130      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d143      	bne.n	8003944 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80038bc:	7dbb      	ldrb	r3, [r7, #22]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d140      	bne.n	8003944 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_IC_Start_DMA+0xae>
 80038c8:	887b      	ldrh	r3, [r7, #2]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e122      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_IC_Start_DMA+0xbe>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	e013      	b.n	800390a <HAL_TIM_IC_Start_DMA+0xe6>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_IC_Start_DMA+0xce>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	e00b      	b.n	800390a <HAL_TIM_IC_Start_DMA+0xe6>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_IC_Start_DMA+0xde>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	e003      	b.n	800390a <HAL_TIM_IC_Start_DMA+0xe6>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_TIM_IC_Start_DMA+0xf6>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003918:	e016      	b.n	8003948 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d104      	bne.n	800392a <HAL_TIM_IC_Start_DMA+0x106>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8003928:	e00e      	b.n	8003948 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d104      	bne.n	800393a <HAL_TIM_IC_Start_DMA+0x116>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003938:	e006      	b.n	8003948 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8003942:	e001      	b.n	8003948 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0e7      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fa4e 	bl	8004df2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a71      	ldr	r2, [pc, #452]	; (8003b20 <HAL_TIM_IC_Start_DMA+0x2fc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIM_IC_Start_DMA+0x15a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d009      	beq.n	800397e <HAL_TIM_IC_Start_DMA+0x15a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6d      	ldr	r2, [pc, #436]	; (8003b24 <HAL_TIM_IC_Start_DMA+0x300>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIM_IC_Start_DMA+0x15a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6b      	ldr	r2, [pc, #428]	; (8003b28 <HAL_TIM_IC_Start_DMA+0x304>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d111      	bne.n	80039a2 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d010      	beq.n	80039b2 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	e007      	b.n	80039b2 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f200 80ad 	bhi.w	8003b14 <HAL_TIM_IC_Start_DMA+0x2f0>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_IC_Start_DMA+0x19c>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003b15 	.word	0x08003b15
 80039c8:	08003b15 	.word	0x08003b15
 80039cc:	08003b15 	.word	0x08003b15
 80039d0:	08003a3d 	.word	0x08003a3d
 80039d4:	08003b15 	.word	0x08003b15
 80039d8:	08003b15 	.word	0x08003b15
 80039dc:	08003b15 	.word	0x08003b15
 80039e0:	08003a85 	.word	0x08003a85
 80039e4:	08003b15 	.word	0x08003b15
 80039e8:	08003b15 	.word	0x08003b15
 80039ec:	08003b15 	.word	0x08003b15
 80039f0:	08003acd 	.word	0x08003acd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	4a4c      	ldr	r2, [pc, #304]	; (8003b2c <HAL_TIM_IC_Start_DMA+0x308>)
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	4a4b      	ldr	r2, [pc, #300]	; (8003b30 <HAL_TIM_IC_Start_DMA+0x30c>)
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <HAL_TIM_IC_Start_DMA+0x310>)
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3334      	adds	r3, #52	; 0x34
 8003a16:	4619      	mov	r1, r3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	f7fe fa1c 	bl	8001e58 <HAL_DMA_Start_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e076      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	60da      	str	r2, [r3, #12]
      break;
 8003a3a:	e06c      	b.n	8003b16 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <HAL_TIM_IC_Start_DMA+0x308>)
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <HAL_TIM_IC_Start_DMA+0x30c>)
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_TIM_IC_Start_DMA+0x310>)
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3338      	adds	r3, #56	; 0x38
 8003a5e:	4619      	mov	r1, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	f7fe f9f8 	bl	8001e58 <HAL_DMA_Start_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e052      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a80:	60da      	str	r2, [r3, #12]
      break;
 8003a82:	e048      	b.n	8003b16 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_TIM_IC_Start_DMA+0x308>)
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <HAL_TIM_IC_Start_DMA+0x30c>)
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	4a26      	ldr	r2, [pc, #152]	; (8003b34 <HAL_TIM_IC_Start_DMA+0x310>)
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	333c      	adds	r3, #60	; 0x3c
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	f7fe f9d4 	bl	8001e58 <HAL_DMA_Start_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e02e      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac8:	60da      	str	r2, [r3, #12]
      break;
 8003aca:	e024      	b.n	8003b16 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIM_IC_Start_DMA+0x308>)
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_TIM_IC_Start_DMA+0x30c>)
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <HAL_TIM_IC_Start_DMA+0x310>)
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3340      	adds	r3, #64	; 0x40
 8003aee:	4619      	mov	r1, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	f7fe f9b0 	bl	8001e58 <HAL_DMA_Start_IT>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00a      	b.n	8003b18 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b10:	60da      	str	r2, [r3, #12]
      break;
 8003b12:	e000      	b.n	8003b16 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 8003b14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	080045a7 	.word	0x080045a7
 8003b30:	0800466f 	.word	0x0800466f
 8003b34:	08004405 	.word	0x08004405

08003b38 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	6839      	ldr	r1, [r7, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f951 	bl	8004df2 <TIM_CCxChannelCmd>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d854      	bhi.n	8003c00 <HAL_TIM_IC_Stop_DMA+0xc8>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_TIM_IC_Stop_DMA+0x24>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003c01 	.word	0x08003c01
 8003b64:	08003c01 	.word	0x08003c01
 8003b68:	08003c01 	.word	0x08003c01
 8003b6c:	08003bad 	.word	0x08003bad
 8003b70:	08003c01 	.word	0x08003c01
 8003b74:	08003c01 	.word	0x08003c01
 8003b78:	08003c01 	.word	0x08003c01
 8003b7c:	08003bc9 	.word	0x08003bc9
 8003b80:	08003c01 	.word	0x08003c01
 8003b84:	08003c01 	.word	0x08003c01
 8003b88:	08003c01 	.word	0x08003c01
 8003b8c:	08003be5 	.word	0x08003be5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe f9f1 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 8003baa:	e02a      	b.n	8003c02 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe f9e3 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 8003bc6:	e01c      	b.n	8003c02 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe f9d5 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 8003be2:	e00e      	b.n	8003c02 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe f9c7 	bl	8001f8c <HAL_DMA_Abort_IT>
      break;
 8003bfe:	e000      	b.n	8003c02 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 8003c00:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_TIM_IC_Stop_DMA+0xfa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	f240 4344 	movw	r3, #1092	; 0x444
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IC_Stop_DMA+0xfa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_IC_Stop_DMA+0x10a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c40:	e013      	b.n	8003c6a <HAL_TIM_IC_Stop_DMA+0x132>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Stop_DMA+0x11a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	e00b      	b.n	8003c6a <HAL_TIM_IC_Stop_DMA+0x132>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Stop_DMA+0x12a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c60:	e003      	b.n	8003c6a <HAL_TIM_IC_Stop_DMA+0x132>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Stop_DMA+0x142>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c78:	e013      	b.n	8003ca2 <HAL_TIM_IC_Stop_DMA+0x16a>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_IC_Stop_DMA+0x152>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c88:	e00b      	b.n	8003ca2 <HAL_TIM_IC_Stop_DMA+0x16a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_IC_Stop_DMA+0x162>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	e003      	b.n	8003ca2 <HAL_TIM_IC_Stop_DMA+0x16a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d122      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d11b      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0202 	mvn.w	r2, #2
 8003cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ffba 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fb4e 	bl	8004398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fb5d 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d122      	bne.n	8003d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0204 	mvn.w	r2, #4
 8003d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fc ff90 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fb24 	bl	8004398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fb33 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0208 	mvn.w	r2, #8
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2204      	movs	r2, #4
 8003d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fc ff66 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fafa 	bl	8004398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb09 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0210 	mvn.w	r2, #16
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fc ff3c 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fad0 	bl	8004398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fadf 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10e      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0201 	mvn.w	r2, #1
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc ff68 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f001 f8a8 	bl	8004fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 faac 	bl	80043e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0220 	mvn.w	r2, #32
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 f873 	bl	8004f9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e046      	b.n	8003f64 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d839      	bhi.n	8003f58 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_TIM_OC_ConfigChannel+0x30>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003f59 	.word	0x08003f59
 8003ef8:	08003f59 	.word	0x08003f59
 8003efc:	08003f2f 	.word	0x08003f2f
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f3d 	.word	0x08003f3d
 8003f10:	08003f59 	.word	0x08003f59
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003f59 	.word	0x08003f59
 8003f1c:	08003f4b 	.word	0x08003f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fc38 	bl	800479c <TIM_OC1_SetConfig>
      break;
 8003f2c:	e015      	b.n	8003f5a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fc97 	bl	8004868 <TIM_OC2_SetConfig>
      break;
 8003f3a:	e00e      	b.n	8003f5a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fcfa 	bl	800493c <TIM_OC3_SetConfig>
      break;
 8003f48:	e007      	b.n	8003f5a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fd5d 	bl	8004a10 <TIM_OC4_SetConfig>
      break;
 8003f56:	e000      	b.n	8003f5a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e082      	b.n	800408c <HAL_TIM_IC_ConfigChannel+0x120>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f000 fd82 	bl	8004aac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 020c 	bic.w	r2, r2, #12
 8003fb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6999      	ldr	r1, [r3, #24]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
 8003fca:	e05a      	b.n	8004082 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d11c      	bne.n	800400c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f000 fdeb 	bl	8004bbc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ff4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6999      	ldr	r1, [r3, #24]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	021a      	lsls	r2, r3, #8
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	619a      	str	r2, [r3, #24]
 800400a:	e03a      	b.n	8004082 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b08      	cmp	r3, #8
 8004010:	d11b      	bne.n	800404a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f000 fe36 	bl	8004c92 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 020c 	bic.w	r2, r2, #12
 8004034:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69d9      	ldr	r1, [r3, #28]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	61da      	str	r2, [r3, #28]
 8004048:	e01b      	b.n	8004082 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f000 fe55 	bl	8004d08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800406c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69d9      	ldr	r1, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	021a      	lsls	r2, r3, #8
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0ac      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x174>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	f200 809f 	bhi.w	80041fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080041fd 	.word	0x080041fd
 80040cc:	080041fd 	.word	0x080041fd
 80040d0:	080041fd 	.word	0x080041fd
 80040d4:	08004139 	.word	0x08004139
 80040d8:	080041fd 	.word	0x080041fd
 80040dc:	080041fd 	.word	0x080041fd
 80040e0:	080041fd 	.word	0x080041fd
 80040e4:	0800417b 	.word	0x0800417b
 80040e8:	080041fd 	.word	0x080041fd
 80040ec:	080041fd 	.word	0x080041fd
 80040f0:	080041fd 	.word	0x080041fd
 80040f4:	080041bb 	.word	0x080041bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fb4c 	bl	800479c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0204 	bic.w	r2, r2, #4
 8004122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6999      	ldr	r1, [r3, #24]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	619a      	str	r2, [r3, #24]
      break;
 8004136:	e062      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb92 	bl	8004868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6999      	ldr	r1, [r3, #24]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	619a      	str	r2, [r3, #24]
      break;
 8004178:	e041      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fbdb 	bl	800493c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0208 	orr.w	r2, r2, #8
 8004194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0204 	bic.w	r2, r2, #4
 80041a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	61da      	str	r2, [r3, #28]
      break;
 80041b8:	e021      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fc25 	bl	8004a10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69d9      	ldr	r1, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	021a      	lsls	r2, r3, #8
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x18>
 8004224:	2302      	movs	r3, #2
 8004226:	e0b3      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x180>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d03e      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xd0>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	f200 8087 	bhi.w	8004378 <HAL_TIM_ConfigClockSource+0x168>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	f000 8085 	beq.w	800437c <HAL_TIM_ConfigClockSource+0x16c>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d87f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d01a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xa2>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d87b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d050      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x116>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d877      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d03c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xf6>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d873      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d058      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x136>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d86f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d064      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d867      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d05a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042b0:	e062      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 fd77 	bl	8004db4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	609a      	str	r2, [r3, #8]
      break;
 80042de:	e04e      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 fd60 	bl	8004db4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 fc24 	bl	8004b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fd2e 	bl	8004d80 <TIM_ITRx_SetConfig>
      break;
 8004324:	e02b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fc7e 	bl	8004c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fd1e 	bl	8004d80 <TIM_ITRx_SetConfig>
      break;
 8004344:	e01b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fc04 	bl	8004b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fd0e 	bl	8004d80 <TIM_ITRx_SetConfig>
      break;
 8004364:	e00b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 fd05 	bl	8004d80 <TIM_ITRx_SetConfig>
        break;
 8004376:	e002      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800437c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442a:	e02a      	b.n	8004482 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d107      	bne.n	8004446 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2202      	movs	r2, #2
 800443a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004444:	e01d      	b.n	8004482 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2204      	movs	r2, #4
 8004454:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445e:	e010      	b.n	8004482 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d107      	bne.n	800447a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2208      	movs	r2, #8
 800446e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004478:	e003      	b.n	8004482 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff ffb5 	bl	80043f2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	771a      	strb	r2, [r3, #28]
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d10b      	bne.n	80044c6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d136      	bne.n	800452a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c4:	e031      	b.n	800452a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d10b      	bne.n	80044e8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2202      	movs	r2, #2
 80044d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d125      	bne.n	800452a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e6:	e020      	b.n	800452a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d10b      	bne.n	800450a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2204      	movs	r2, #4
 80044f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d114      	bne.n	800452a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004508:	e00f      	b.n	800452a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d10a      	bne.n	800452a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2208      	movs	r2, #8
 8004518:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff46 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	771a      	strb	r2, [r3, #28]
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d103      	bne.n	800455e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	771a      	strb	r2, [r3, #28]
 800455c:	e019      	b.n	8004592 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d103      	bne.n	8004570 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2202      	movs	r2, #2
 800456c:	771a      	strb	r2, [r3, #28]
 800456e:	e010      	b.n	8004592 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d103      	bne.n	8004582 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2204      	movs	r2, #4
 800457e:	771a      	strb	r2, [r3, #28]
 8004580:	e007      	b.n	8004592 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d102      	bne.n	8004592 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2208      	movs	r2, #8
 8004590:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff ff1b 	bl	80043ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d10f      	bne.n	80045de <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d146      	bne.n	800465a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045dc:	e03d      	b.n	800465a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d10f      	bne.n	8004608 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2202      	movs	r2, #2
 80045ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d131      	bne.n	800465a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004606:	e028      	b.n	800465a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d10f      	bne.n	8004632 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2204      	movs	r2, #4
 8004616:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11c      	bne.n	800465a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	e013      	b.n	800465a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d10e      	bne.n	800465a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2208      	movs	r2, #8
 8004640:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7fc fb04 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d103      	bne.n	800468e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	771a      	strb	r2, [r3, #28]
 800468c:	e019      	b.n	80046c2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d103      	bne.n	80046a0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2202      	movs	r2, #2
 800469c:	771a      	strb	r2, [r3, #28]
 800469e:	e010      	b.n	80046c2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d103      	bne.n	80046b2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2204      	movs	r2, #4
 80046ae:	771a      	strb	r2, [r3, #28]
 80046b0:	e007      	b.n	80046c2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d102      	bne.n	80046c2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2208      	movs	r2, #8
 80046c0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fe71 	bl	80043aa <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	771a      	strb	r2, [r3, #28]
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a29      	ldr	r2, [pc, #164]	; (8004790 <TIM_Base_SetConfig+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x30>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <TIM_Base_SetConfig+0xbc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x30>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a25      	ldr	r2, [pc, #148]	; (8004798 <TIM_Base_SetConfig+0xc0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <TIM_Base_SetConfig+0xb8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d007      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <TIM_Base_SetConfig+0xbc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <TIM_Base_SetConfig+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a07      	ldr	r2, [pc, #28]	; (8004790 <TIM_Base_SetConfig+0xb8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800

0800479c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 0302 	bic.w	r3, r3, #2
 80047e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1c      	ldr	r2, [pc, #112]	; (8004864 <TIM_OC1_SetConfig+0xc8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10c      	bne.n	8004812 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0308 	bic.w	r3, r3, #8
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <TIM_OC1_SetConfig+0xc8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d111      	bne.n	800483e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	621a      	str	r2, [r3, #32]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00

08004868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0320 	bic.w	r3, r3, #32
 80048b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <TIM_OC2_SetConfig+0xd0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d10d      	bne.n	80048e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a14      	ldr	r2, [pc, #80]	; (8004938 <TIM_OC2_SetConfig+0xd0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d113      	bne.n	8004914 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00

0800493c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <TIM_OC3_SetConfig+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10d      	bne.n	80049b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <TIM_OC3_SetConfig+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40012c00 	.word	0x40012c00

08004a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <TIM_OC4_SetConfig+0x98>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <TIM_TI1_SetConfig+0xa8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_TI1_SetConfig+0x46>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d007      	beq.n	8004af2 <TIM_TI1_SetConfig+0x46>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <TIM_TI1_SetConfig+0xac>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_TI1_SetConfig+0x46>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <TIM_TI1_SetConfig+0xb0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <TIM_TI1_SetConfig+0x4a>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <TIM_TI1_SetConfig+0x4c>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e003      	b.n	8004b16 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f023 030a 	bic.w	r3, r3, #10
 8004b30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f003 030a 	and.w	r3, r3, #10
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800

08004b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 030a 	bic.w	r3, r3, #10
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0210 	bic.w	r2, r3, #16
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	031b      	lsls	r3, r3, #12
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f023 0210 	bic.w	r2, r3, #16
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	031b      	lsls	r3, r3, #12
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b087      	sub	sp, #28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	031b      	lsls	r3, r3, #12
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	031b      	lsls	r3, r3, #12
 8004d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f043 0307 	orr.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	609a      	str	r2, [r3, #8]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b087      	sub	sp, #28
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	401a      	ands	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]
}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e046      	b.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a16      	ldr	r2, [pc, #88]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea0:	d009      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a12      	ldr	r2, [pc, #72]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800

08004ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e03d      	b.n	8004f90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e03f      	b.n	8005050 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fc fd01 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2224      	movs	r2, #36	; 0x24
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005000:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fbe4 	bl	80057d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005016:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005026:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005036:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b20      	cmp	r3, #32
 8005070:	d130      	bne.n	80050d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_Transmit_IT+0x26>
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e029      	b.n	80050d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_UART_Transmit_IT+0x38>
 800508c:	2302      	movs	r3, #2
 800508e:	e022      	b.n	80050d6 <HAL_UART_Transmit_IT+0x7e>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	; 0x21
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d11d      	bne.n	8005136 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_UART_Receive_IT+0x26>
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e016      	b.n	8005138 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_UART_Receive_IT+0x38>
 8005114:	2302      	movs	r3, #2
 8005116:	e00f      	b.n	8005138 <HAL_UART_Receive_IT+0x58>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	461a      	mov	r2, r3
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f9c5 	bl	80054bc <UART_Start_Receive_IT>
 8005132:	4603      	mov	r3, r0
 8005134:	e000      	b.n	8005138 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005160:	2300      	movs	r3, #0
 8005162:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10d      	bne.n	8005192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x52>
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fa76 	bl	800567c <UART_Receive_IT>
      return;
 8005190:	e17b      	b.n	800548a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80b1 	beq.w	80052fc <HAL_UART_IRQHandler+0x1bc>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <HAL_UART_IRQHandler+0x70>
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80a6 	beq.w	80052fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_UART_IRQHandler+0x90>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f043 0201 	orr.w	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_UART_IRQHandler+0xb0>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_UART_IRQHandler+0xd0>
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f043 0204 	orr.w	r2, r3, #4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00f      	beq.n	800523a <HAL_UART_IRQHandler+0xfa>
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <HAL_UART_IRQHandler+0xee>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0208 	orr.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 811e 	beq.w	8005480 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_UART_IRQHandler+0x11e>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa0f 	bl	800567c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <HAL_UART_IRQHandler+0x146>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d031      	beq.n	80052ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f951 	bl	800552e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d023      	beq.n	80052e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d013      	beq.n	80052da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	4a76      	ldr	r2, [pc, #472]	; (8005490 <HAL_UART_IRQHandler+0x350>)
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fc fe64 	bl	8001f8c <HAL_DMA_Abort_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d8:	e00e      	b.n	80052f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8da 	bl	8005494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e0:	e00a      	b.n	80052f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8d6 	bl	8005494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	e006      	b.n	80052f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8d2 	bl	8005494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052f6:	e0c3      	b.n	8005480 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	bf00      	nop
    return;
 80052fa:	e0c1      	b.n	8005480 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	f040 80a1 	bne.w	8005448 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 809b 	beq.w	8005448 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8095 	beq.w	8005448 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04e      	beq.n	80053e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800534c:	8a3b      	ldrh	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8098 	beq.w	8005484 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005358:	8a3a      	ldrh	r2, [r7, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	f080 8092 	bcs.w	8005484 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8a3a      	ldrh	r2, [r7, #16]
 8005364:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	2b20      	cmp	r3, #32
 800536e:	d02b      	beq.n	80053c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800537e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0210 	bic.w	r2, r2, #16
 80053bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fc fda7 	bl	8001f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f864 	bl	80054a6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053de:	e051      	b.n	8005484 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d047      	beq.n	8005488 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80053f8:	8a7b      	ldrh	r3, [r7, #18]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d044      	beq.n	8005488 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800540c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0210 	bic.w	r2, r2, #16
 800543a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800543c:	8a7b      	ldrh	r3, [r7, #18]
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f830 	bl	80054a6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005446:	e01f      	b.n	8005488 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_UART_IRQHandler+0x324>
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f8a6 	bl	80055ae <UART_Transmit_IT>
    return;
 8005462:	e012      	b.n	800548a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00d      	beq.n	800548a <HAL_UART_IRQHandler+0x34a>
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f8e7 	bl	800564c <UART_EndTransmit_IT>
    return;
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x34a>
    return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x34a>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x34a>
      return;
 8005488:	bf00      	nop
  }
}
 800548a:	3728      	adds	r7, #40	; 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	08005587 	.word	0x08005587

08005494 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2222      	movs	r2, #34	; 0x22
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005500:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0220 	orr.w	r2, r2, #32
 8005520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005544:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0210 	bic.w	r2, r2, #16
 800556c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff ff77 	bl	8005494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b21      	cmp	r3, #33	; 0x21
 80055c0:	d13e      	bne.n	8005640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d114      	bne.n	80055f6 <UART_Transmit_IT+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d110      	bne.n	80055f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	1c9a      	adds	r2, r3, #2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]
 80055f4:	e008      	b.n	8005608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6211      	str	r1, [r2, #32]
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29b      	uxth	r3, r3
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4619      	mov	r1, r3
 8005616:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10f      	bne.n	800563c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005662:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fb f9dd 	bl	8000a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b22      	cmp	r3, #34	; 0x22
 800568e:	f040 8099 	bne.w	80057c4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d117      	bne.n	80056cc <UART_Receive_IT+0x50>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d113      	bne.n	80056cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28
 80056ca:	e026      	b.n	800571a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d007      	beq.n	80056f0 <UART_Receive_IT+0x74>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <UART_Receive_IT+0x82>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e008      	b.n	8005710 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570a:	b2da      	uxtb	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4619      	mov	r1, r3
 8005728:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800572a:	2b00      	cmp	r3, #0
 800572c:	d148      	bne.n	80057c0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0220 	bic.w	r2, r2, #32
 800573c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800574c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	2b01      	cmp	r3, #1
 800576c:	d123      	bne.n	80057b6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0210 	bic.w	r2, r2, #16
 8005782:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d10a      	bne.n	80057a8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fe79 	bl	80054a6 <HAL_UARTEx_RxEventCallback>
 80057b4:	e002      	b.n	80057bc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fb f96c 	bl	8000a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e002      	b.n	80057c6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800580a:	f023 030c 	bic.w	r3, r3, #12
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	430b      	orrs	r3, r1
 8005816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2c      	ldr	r2, [pc, #176]	; (80058e4 <UART_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d103      	bne.n	8005840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fd faf8 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	e002      	b.n	8005846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005840:	f7fd fae0 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8005844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009a      	lsls	r2, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <UART_SetConfig+0x118>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	0119      	lsls	r1, r3, #4
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009a      	lsls	r2, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	fbb2 f2f3 	udiv	r2, r2, r3
 800587c:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <UART_SetConfig+0x118>)
 800587e:	fba3 0302 	umull	r0, r3, r3, r2
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2064      	movs	r0, #100	; 0x64
 8005886:	fb00 f303 	mul.w	r3, r0, r3
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	3332      	adds	r3, #50	; 0x32
 8005890:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <UART_SetConfig+0x118>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800589c:	4419      	add	r1, r3
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009a      	lsls	r2, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <UART_SetConfig+0x118>)
 80058b6:	fba3 0302 	umull	r0, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	2064      	movs	r0, #100	; 0x64
 80058be:	fb00 f303 	mul.w	r3, r0, r3
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	3332      	adds	r3, #50	; 0x32
 80058c8:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <UART_SetConfig+0x118>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	440a      	add	r2, r1
 80058da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40013800 	.word	0x40013800
 80058e8:	51eb851f 	.word	0x51eb851f

080058ec <__errno>:
 80058ec:	4b01      	ldr	r3, [pc, #4]	; (80058f4 <__errno+0x8>)
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	2000001c 	.word	0x2000001c

080058f8 <__libc_init_array>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	2600      	movs	r6, #0
 80058fc:	4d0c      	ldr	r5, [pc, #48]	; (8005930 <__libc_init_array+0x38>)
 80058fe:	4c0d      	ldr	r4, [pc, #52]	; (8005934 <__libc_init_array+0x3c>)
 8005900:	1b64      	subs	r4, r4, r5
 8005902:	10a4      	asrs	r4, r4, #2
 8005904:	42a6      	cmp	r6, r4
 8005906:	d109      	bne.n	800591c <__libc_init_array+0x24>
 8005908:	f001 f93e 	bl	8006b88 <_init>
 800590c:	2600      	movs	r6, #0
 800590e:	4d0a      	ldr	r5, [pc, #40]	; (8005938 <__libc_init_array+0x40>)
 8005910:	4c0a      	ldr	r4, [pc, #40]	; (800593c <__libc_init_array+0x44>)
 8005912:	1b64      	subs	r4, r4, r5
 8005914:	10a4      	asrs	r4, r4, #2
 8005916:	42a6      	cmp	r6, r4
 8005918:	d105      	bne.n	8005926 <__libc_init_array+0x2e>
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005920:	4798      	blx	r3
 8005922:	3601      	adds	r6, #1
 8005924:	e7ee      	b.n	8005904 <__libc_init_array+0xc>
 8005926:	f855 3b04 	ldr.w	r3, [r5], #4
 800592a:	4798      	blx	r3
 800592c:	3601      	adds	r6, #1
 800592e:	e7f2      	b.n	8005916 <__libc_init_array+0x1e>
 8005930:	080071ec 	.word	0x080071ec
 8005934:	080071ec 	.word	0x080071ec
 8005938:	080071ec 	.word	0x080071ec
 800593c:	080071f0 	.word	0x080071f0

08005940 <memmove>:
 8005940:	4288      	cmp	r0, r1
 8005942:	b510      	push	{r4, lr}
 8005944:	eb01 0402 	add.w	r4, r1, r2
 8005948:	d902      	bls.n	8005950 <memmove+0x10>
 800594a:	4284      	cmp	r4, r0
 800594c:	4623      	mov	r3, r4
 800594e:	d807      	bhi.n	8005960 <memmove+0x20>
 8005950:	1e43      	subs	r3, r0, #1
 8005952:	42a1      	cmp	r1, r4
 8005954:	d008      	beq.n	8005968 <memmove+0x28>
 8005956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800595a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800595e:	e7f8      	b.n	8005952 <memmove+0x12>
 8005960:	4601      	mov	r1, r0
 8005962:	4402      	add	r2, r0
 8005964:	428a      	cmp	r2, r1
 8005966:	d100      	bne.n	800596a <memmove+0x2a>
 8005968:	bd10      	pop	{r4, pc}
 800596a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800596e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005972:	e7f7      	b.n	8005964 <memmove+0x24>

08005974 <memset>:
 8005974:	4603      	mov	r3, r0
 8005976:	4402      	add	r2, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <siprintf>:
 8005984:	b40e      	push	{r1, r2, r3}
 8005986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800598a:	b500      	push	{lr}
 800598c:	b09c      	sub	sp, #112	; 0x70
 800598e:	ab1d      	add	r3, sp, #116	; 0x74
 8005990:	9002      	str	r0, [sp, #8]
 8005992:	9006      	str	r0, [sp, #24]
 8005994:	9107      	str	r1, [sp, #28]
 8005996:	9104      	str	r1, [sp, #16]
 8005998:	4808      	ldr	r0, [pc, #32]	; (80059bc <siprintf+0x38>)
 800599a:	4909      	ldr	r1, [pc, #36]	; (80059c0 <siprintf+0x3c>)
 800599c:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a0:	9105      	str	r1, [sp, #20]
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	a902      	add	r1, sp, #8
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f000 f8b4 	bl	8005b14 <_svfiprintf_r>
 80059ac:	2200      	movs	r2, #0
 80059ae:	9b02      	ldr	r3, [sp, #8]
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	b01c      	add	sp, #112	; 0x70
 80059b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b8:	b003      	add	sp, #12
 80059ba:	4770      	bx	lr
 80059bc:	2000001c 	.word	0x2000001c
 80059c0:	ffff0208 	.word	0xffff0208

080059c4 <siscanf>:
 80059c4:	b40e      	push	{r1, r2, r3}
 80059c6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80059ca:	b530      	push	{r4, r5, lr}
 80059cc:	b09c      	sub	sp, #112	; 0x70
 80059ce:	ac1f      	add	r4, sp, #124	; 0x7c
 80059d0:	f854 5b04 	ldr.w	r5, [r4], #4
 80059d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80059d8:	9002      	str	r0, [sp, #8]
 80059da:	9006      	str	r0, [sp, #24]
 80059dc:	f7fa fbc0 	bl	8000160 <strlen>
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <siscanf+0x4c>)
 80059e2:	9003      	str	r0, [sp, #12]
 80059e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e6:	2300      	movs	r3, #0
 80059e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80059ea:	9314      	str	r3, [sp, #80]	; 0x50
 80059ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059f0:	9007      	str	r0, [sp, #28]
 80059f2:	4808      	ldr	r0, [pc, #32]	; (8005a14 <siscanf+0x50>)
 80059f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059f8:	462a      	mov	r2, r5
 80059fa:	4623      	mov	r3, r4
 80059fc:	a902      	add	r1, sp, #8
 80059fe:	6800      	ldr	r0, [r0, #0]
 8005a00:	9401      	str	r4, [sp, #4]
 8005a02:	f000 f9e1 	bl	8005dc8 <__ssvfiscanf_r>
 8005a06:	b01c      	add	sp, #112	; 0x70
 8005a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	08005a19 	.word	0x08005a19
 8005a14:	2000001c 	.word	0x2000001c

08005a18 <__seofread>:
 8005a18:	2000      	movs	r0, #0
 8005a1a:	4770      	bx	lr

08005a1c <_vsiprintf_r>:
 8005a1c:	b500      	push	{lr}
 8005a1e:	b09b      	sub	sp, #108	; 0x6c
 8005a20:	9100      	str	r1, [sp, #0]
 8005a22:	9104      	str	r1, [sp, #16]
 8005a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a28:	9105      	str	r1, [sp, #20]
 8005a2a:	9102      	str	r1, [sp, #8]
 8005a2c:	4905      	ldr	r1, [pc, #20]	; (8005a44 <_vsiprintf_r+0x28>)
 8005a2e:	9103      	str	r1, [sp, #12]
 8005a30:	4669      	mov	r1, sp
 8005a32:	f000 f86f 	bl	8005b14 <_svfiprintf_r>
 8005a36:	2200      	movs	r2, #0
 8005a38:	9b00      	ldr	r3, [sp, #0]
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	b01b      	add	sp, #108	; 0x6c
 8005a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a42:	bf00      	nop
 8005a44:	ffff0208 	.word	0xffff0208

08005a48 <vsiprintf>:
 8005a48:	4613      	mov	r3, r2
 8005a4a:	460a      	mov	r2, r1
 8005a4c:	4601      	mov	r1, r0
 8005a4e:	4802      	ldr	r0, [pc, #8]	; (8005a58 <vsiprintf+0x10>)
 8005a50:	6800      	ldr	r0, [r0, #0]
 8005a52:	f7ff bfe3 	b.w	8005a1c <_vsiprintf_r>
 8005a56:	bf00      	nop
 8005a58:	2000001c 	.word	0x2000001c

08005a5c <__ssputs_r>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	688e      	ldr	r6, [r1, #8]
 8005a62:	4682      	mov	sl, r0
 8005a64:	429e      	cmp	r6, r3
 8005a66:	460c      	mov	r4, r1
 8005a68:	4690      	mov	r8, r2
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	d838      	bhi.n	8005ae0 <__ssputs_r+0x84>
 8005a6e:	898a      	ldrh	r2, [r1, #12]
 8005a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a74:	d032      	beq.n	8005adc <__ssputs_r+0x80>
 8005a76:	6825      	ldr	r5, [r4, #0]
 8005a78:	6909      	ldr	r1, [r1, #16]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	eba5 0901 	sub.w	r9, r5, r1
 8005a80:	6965      	ldr	r5, [r4, #20]
 8005a82:	444b      	add	r3, r9
 8005a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a8c:	106d      	asrs	r5, r5, #1
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	bf38      	it	cc
 8005a92:	461d      	movcc	r5, r3
 8005a94:	0553      	lsls	r3, r2, #21
 8005a96:	d531      	bpl.n	8005afc <__ssputs_r+0xa0>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f000 ffd1 	bl	8006a40 <_malloc_r>
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	b950      	cbnz	r0, 8005ab8 <__ssputs_r+0x5c>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	f8ca 3000 	str.w	r3, [sl]
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	464a      	mov	r2, r9
 8005aba:	6921      	ldr	r1, [r4, #16]
 8005abc:	f000 ff66 	bl	800698c <memcpy>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	6126      	str	r6, [r4, #16]
 8005ace:	444e      	add	r6, r9
 8005ad0:	6026      	str	r6, [r4, #0]
 8005ad2:	463e      	mov	r6, r7
 8005ad4:	6165      	str	r5, [r4, #20]
 8005ad6:	eba5 0509 	sub.w	r5, r5, r9
 8005ada:	60a5      	str	r5, [r4, #8]
 8005adc:	42be      	cmp	r6, r7
 8005ade:	d900      	bls.n	8005ae2 <__ssputs_r+0x86>
 8005ae0:	463e      	mov	r6, r7
 8005ae2:	4632      	mov	r2, r6
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	f7ff ff2a 	bl	8005940 <memmove>
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	1b9b      	subs	r3, r3, r6
 8005af2:	4432      	add	r2, r6
 8005af4:	2000      	movs	r0, #0
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	6022      	str	r2, [r4, #0]
 8005afa:	e7db      	b.n	8005ab4 <__ssputs_r+0x58>
 8005afc:	462a      	mov	r2, r5
 8005afe:	f000 fff9 	bl	8006af4 <_realloc_r>
 8005b02:	4606      	mov	r6, r0
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d1e1      	bne.n	8005acc <__ssputs_r+0x70>
 8005b08:	4650      	mov	r0, sl
 8005b0a:	6921      	ldr	r1, [r4, #16]
 8005b0c:	f000 ff4c 	bl	80069a8 <_free_r>
 8005b10:	e7c7      	b.n	8005aa2 <__ssputs_r+0x46>
	...

08005b14 <_svfiprintf_r>:
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	4698      	mov	r8, r3
 8005b1a:	898b      	ldrh	r3, [r1, #12]
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	061b      	lsls	r3, r3, #24
 8005b20:	460d      	mov	r5, r1
 8005b22:	4614      	mov	r4, r2
 8005b24:	b09d      	sub	sp, #116	; 0x74
 8005b26:	d50e      	bpl.n	8005b46 <_svfiprintf_r+0x32>
 8005b28:	690b      	ldr	r3, [r1, #16]
 8005b2a:	b963      	cbnz	r3, 8005b46 <_svfiprintf_r+0x32>
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	f000 ff87 	bl	8006a40 <_malloc_r>
 8005b32:	6028      	str	r0, [r5, #0]
 8005b34:	6128      	str	r0, [r5, #16]
 8005b36:	b920      	cbnz	r0, 8005b42 <_svfiprintf_r+0x2e>
 8005b38:	230c      	movs	r3, #12
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	e0d1      	b.n	8005ce6 <_svfiprintf_r+0x1d2>
 8005b42:	2340      	movs	r3, #64	; 0x40
 8005b44:	616b      	str	r3, [r5, #20]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b50:	2330      	movs	r3, #48	; 0x30
 8005b52:	f04f 0901 	mov.w	r9, #1
 8005b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d00 <_svfiprintf_r+0x1ec>
 8005b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b62:	4623      	mov	r3, r4
 8005b64:	469a      	mov	sl, r3
 8005b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b6a:	b10a      	cbz	r2, 8005b70 <_svfiprintf_r+0x5c>
 8005b6c:	2a25      	cmp	r2, #37	; 0x25
 8005b6e:	d1f9      	bne.n	8005b64 <_svfiprintf_r+0x50>
 8005b70:	ebba 0b04 	subs.w	fp, sl, r4
 8005b74:	d00b      	beq.n	8005b8e <_svfiprintf_r+0x7a>
 8005b76:	465b      	mov	r3, fp
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ff6d 	bl	8005a5c <__ssputs_r>
 8005b82:	3001      	adds	r0, #1
 8005b84:	f000 80aa 	beq.w	8005cdc <_svfiprintf_r+0x1c8>
 8005b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b8a:	445a      	add	r2, fp
 8005b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80a2 	beq.w	8005cdc <_svfiprintf_r+0x1c8>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba2:	f10a 0a01 	add.w	sl, sl, #1
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	9307      	str	r3, [sp, #28]
 8005baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bae:	931a      	str	r3, [sp, #104]	; 0x68
 8005bb0:	4654      	mov	r4, sl
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	4851      	ldr	r0, [pc, #324]	; (8005d00 <_svfiprintf_r+0x1ec>)
 8005bba:	f000 fed9 	bl	8006970 <memchr>
 8005bbe:	9a04      	ldr	r2, [sp, #16]
 8005bc0:	b9d8      	cbnz	r0, 8005bfa <_svfiprintf_r+0xe6>
 8005bc2:	06d0      	lsls	r0, r2, #27
 8005bc4:	bf44      	itt	mi
 8005bc6:	2320      	movmi	r3, #32
 8005bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bcc:	0711      	lsls	r1, r2, #28
 8005bce:	bf44      	itt	mi
 8005bd0:	232b      	movmi	r3, #43	; 0x2b
 8005bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bda:	2b2a      	cmp	r3, #42	; 0x2a
 8005bdc:	d015      	beq.n	8005c0a <_svfiprintf_r+0xf6>
 8005bde:	4654      	mov	r4, sl
 8005be0:	2000      	movs	r0, #0
 8005be2:	f04f 0c0a 	mov.w	ip, #10
 8005be6:	9a07      	ldr	r2, [sp, #28]
 8005be8:	4621      	mov	r1, r4
 8005bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bee:	3b30      	subs	r3, #48	; 0x30
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d94e      	bls.n	8005c92 <_svfiprintf_r+0x17e>
 8005bf4:	b1b0      	cbz	r0, 8005c24 <_svfiprintf_r+0x110>
 8005bf6:	9207      	str	r2, [sp, #28]
 8005bf8:	e014      	b.n	8005c24 <_svfiprintf_r+0x110>
 8005bfa:	eba0 0308 	sub.w	r3, r0, r8
 8005bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8005c02:	4313      	orrs	r3, r2
 8005c04:	46a2      	mov	sl, r4
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	e7d2      	b.n	8005bb0 <_svfiprintf_r+0x9c>
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	1d19      	adds	r1, r3, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	9103      	str	r1, [sp, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bfbb      	ittet	lt
 8005c16:	425b      	neglt	r3, r3
 8005c18:	f042 0202 	orrlt.w	r2, r2, #2
 8005c1c:	9307      	strge	r3, [sp, #28]
 8005c1e:	9307      	strlt	r3, [sp, #28]
 8005c20:	bfb8      	it	lt
 8005c22:	9204      	strlt	r2, [sp, #16]
 8005c24:	7823      	ldrb	r3, [r4, #0]
 8005c26:	2b2e      	cmp	r3, #46	; 0x2e
 8005c28:	d10c      	bne.n	8005c44 <_svfiprintf_r+0x130>
 8005c2a:	7863      	ldrb	r3, [r4, #1]
 8005c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2e:	d135      	bne.n	8005c9c <_svfiprintf_r+0x188>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	3402      	adds	r4, #2
 8005c34:	1d1a      	adds	r2, r3, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	9203      	str	r2, [sp, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bfb8      	it	lt
 8005c3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d10 <_svfiprintf_r+0x1fc>
 8005c48:	2203      	movs	r2, #3
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	7821      	ldrb	r1, [r4, #0]
 8005c4e:	f000 fe8f 	bl	8006970 <memchr>
 8005c52:	b140      	cbz	r0, 8005c66 <_svfiprintf_r+0x152>
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	eba0 000a 	sub.w	r0, r0, sl
 8005c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	3401      	adds	r4, #1
 8005c62:	4303      	orrs	r3, r0
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6a:	2206      	movs	r2, #6
 8005c6c:	4825      	ldr	r0, [pc, #148]	; (8005d04 <_svfiprintf_r+0x1f0>)
 8005c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c72:	f000 fe7d 	bl	8006970 <memchr>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d038      	beq.n	8005cec <_svfiprintf_r+0x1d8>
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <_svfiprintf_r+0x1f4>)
 8005c7c:	bb1b      	cbnz	r3, 8005cc6 <_svfiprintf_r+0x1b2>
 8005c7e:	9b03      	ldr	r3, [sp, #12]
 8005c80:	3307      	adds	r3, #7
 8005c82:	f023 0307 	bic.w	r3, r3, #7
 8005c86:	3308      	adds	r3, #8
 8005c88:	9303      	str	r3, [sp, #12]
 8005c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8c:	4433      	add	r3, r6
 8005c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c90:	e767      	b.n	8005b62 <_svfiprintf_r+0x4e>
 8005c92:	460c      	mov	r4, r1
 8005c94:	2001      	movs	r0, #1
 8005c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c9a:	e7a5      	b.n	8005be8 <_svfiprintf_r+0xd4>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f04f 0c0a 	mov.w	ip, #10
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	3401      	adds	r4, #1
 8005ca6:	9305      	str	r3, [sp, #20]
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cae:	3a30      	subs	r2, #48	; 0x30
 8005cb0:	2a09      	cmp	r2, #9
 8005cb2:	d903      	bls.n	8005cbc <_svfiprintf_r+0x1a8>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0c5      	beq.n	8005c44 <_svfiprintf_r+0x130>
 8005cb8:	9105      	str	r1, [sp, #20]
 8005cba:	e7c3      	b.n	8005c44 <_svfiprintf_r+0x130>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc4:	e7f0      	b.n	8005ca8 <_svfiprintf_r+0x194>
 8005cc6:	ab03      	add	r3, sp, #12
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	462a      	mov	r2, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <_svfiprintf_r+0x1f8>)
 8005cd0:	a904      	add	r1, sp, #16
 8005cd2:	f3af 8000 	nop.w
 8005cd6:	1c42      	adds	r2, r0, #1
 8005cd8:	4606      	mov	r6, r0
 8005cda:	d1d6      	bne.n	8005c8a <_svfiprintf_r+0x176>
 8005cdc:	89ab      	ldrh	r3, [r5, #12]
 8005cde:	065b      	lsls	r3, r3, #25
 8005ce0:	f53f af2c 	bmi.w	8005b3c <_svfiprintf_r+0x28>
 8005ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ce6:	b01d      	add	sp, #116	; 0x74
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	ab03      	add	r3, sp, #12
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <_svfiprintf_r+0x1f8>)
 8005cf6:	a904      	add	r1, sp, #16
 8005cf8:	f000 fa50 	bl	800619c <_printf_i>
 8005cfc:	e7eb      	b.n	8005cd6 <_svfiprintf_r+0x1c2>
 8005cfe:	bf00      	nop
 8005d00:	0800703c 	.word	0x0800703c
 8005d04:	08007046 	.word	0x08007046
 8005d08:	00000000 	.word	0x00000000
 8005d0c:	08005a5d 	.word	0x08005a5d
 8005d10:	08007042 	.word	0x08007042

08005d14 <_sungetc_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	1c4b      	adds	r3, r1, #1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	d103      	bne.n	8005d24 <_sungetc_r+0x10>
 8005d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005d20:	4628      	mov	r0, r5
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	8993      	ldrh	r3, [r2, #12]
 8005d26:	b2cd      	uxtb	r5, r1
 8005d28:	f023 0320 	bic.w	r3, r3, #32
 8005d2c:	8193      	strh	r3, [r2, #12]
 8005d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	b18b      	cbz	r3, 8005d58 <_sungetc_r+0x44>
 8005d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d36:	4293      	cmp	r3, r2
 8005d38:	dd08      	ble.n	8005d4c <_sungetc_r+0x38>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	1e5a      	subs	r2, r3, #1
 8005d3e:	6022      	str	r2, [r4, #0]
 8005d40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	3301      	adds	r3, #1
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	e7e9      	b.n	8005d20 <_sungetc_r+0xc>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f000 fdd5 	bl	80068fc <__submore>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d0f1      	beq.n	8005d3a <_sungetc_r+0x26>
 8005d56:	e7e1      	b.n	8005d1c <_sungetc_r+0x8>
 8005d58:	6921      	ldr	r1, [r4, #16]
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	b151      	cbz	r1, 8005d74 <_sungetc_r+0x60>
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	d208      	bcs.n	8005d74 <_sungetc_r+0x60>
 8005d62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005d66:	42a9      	cmp	r1, r5
 8005d68:	d104      	bne.n	8005d74 <_sungetc_r+0x60>
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	3201      	adds	r2, #1
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	6062      	str	r2, [r4, #4]
 8005d72:	e7d5      	b.n	8005d20 <_sungetc_r+0xc>
 8005d74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d7e:	2303      	movs	r3, #3
 8005d80:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d82:	4623      	mov	r3, r4
 8005d84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e7dc      	b.n	8005d48 <_sungetc_r+0x34>

08005d8e <__ssrefill_r>:
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	460c      	mov	r4, r1
 8005d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d94:	b169      	cbz	r1, 8005db2 <__ssrefill_r+0x24>
 8005d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d001      	beq.n	8005da2 <__ssrefill_r+0x14>
 8005d9e:	f000 fe03 	bl	80069a8 <_free_r>
 8005da2:	2000      	movs	r0, #0
 8005da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005da6:	6360      	str	r0, [r4, #52]	; 0x34
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	b113      	cbz	r3, 8005db2 <__ssrefill_r+0x24>
 8005dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6063      	str	r3, [r4, #4]
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	f043 0320 	orr.w	r3, r3, #32
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	e7f3      	b.n	8005db0 <__ssrefill_r+0x22>

08005dc8 <__ssvfiscanf_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	460c      	mov	r4, r1
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005dd6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005dda:	49b3      	ldr	r1, [pc, #716]	; (80060a8 <__ssvfiscanf_r+0x2e0>)
 8005ddc:	f10d 0804 	add.w	r8, sp, #4
 8005de0:	91a0      	str	r1, [sp, #640]	; 0x280
 8005de2:	49b2      	ldr	r1, [pc, #712]	; (80060ac <__ssvfiscanf_r+0x2e4>)
 8005de4:	4fb2      	ldr	r7, [pc, #712]	; (80060b0 <__ssvfiscanf_r+0x2e8>)
 8005de6:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80060b4 <__ssvfiscanf_r+0x2ec>
 8005dea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005dee:	91a1      	str	r1, [sp, #644]	; 0x284
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	f892 a000 	ldrb.w	sl, [r2]
 8005df6:	f1ba 0f00 	cmp.w	sl, #0
 8005dfa:	f000 8153 	beq.w	80060a4 <__ssvfiscanf_r+0x2dc>
 8005dfe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005e02:	1c55      	adds	r5, r2, #1
 8005e04:	f013 0308 	ands.w	r3, r3, #8
 8005e08:	d019      	beq.n	8005e3e <__ssvfiscanf_r+0x76>
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd0f      	ble.n	8005e30 <__ssvfiscanf_r+0x68>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	5cba      	ldrb	r2, [r7, r2]
 8005e16:	0712      	lsls	r2, r2, #28
 8005e18:	d401      	bmi.n	8005e1e <__ssvfiscanf_r+0x56>
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	e7e9      	b.n	8005df2 <__ssvfiscanf_r+0x2a>
 8005e1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005e20:	3301      	adds	r3, #1
 8005e22:	3201      	adds	r2, #1
 8005e24:	9245      	str	r2, [sp, #276]	; 0x114
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	3a01      	subs	r2, #1
 8005e2c:	6062      	str	r2, [r4, #4]
 8005e2e:	e7ec      	b.n	8005e0a <__ssvfiscanf_r+0x42>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4630      	mov	r0, r6
 8005e34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e36:	4798      	blx	r3
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d0e9      	beq.n	8005e10 <__ssvfiscanf_r+0x48>
 8005e3c:	e7ed      	b.n	8005e1a <__ssvfiscanf_r+0x52>
 8005e3e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005e42:	f040 8086 	bne.w	8005f52 <__ssvfiscanf_r+0x18a>
 8005e46:	9341      	str	r3, [sp, #260]	; 0x104
 8005e48:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e4a:	7853      	ldrb	r3, [r2, #1]
 8005e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4e:	bf04      	itt	eq
 8005e50:	2310      	moveq	r3, #16
 8005e52:	1c95      	addeq	r5, r2, #2
 8005e54:	f04f 020a 	mov.w	r2, #10
 8005e58:	bf08      	it	eq
 8005e5a:	9341      	streq	r3, [sp, #260]	; 0x104
 8005e5c:	46ab      	mov	fp, r5
 8005e5e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005e62:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d91d      	bls.n	8005ea6 <__ssvfiscanf_r+0xde>
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	4891      	ldr	r0, [pc, #580]	; (80060b4 <__ssvfiscanf_r+0x2ec>)
 8005e6e:	f000 fd7f 	bl	8006970 <memchr>
 8005e72:	b140      	cbz	r0, 8005e86 <__ssvfiscanf_r+0xbe>
 8005e74:	2301      	movs	r3, #1
 8005e76:	465d      	mov	r5, fp
 8005e78:	eba0 0009 	sub.w	r0, r0, r9
 8005e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005e80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e82:	4318      	orrs	r0, r3
 8005e84:	9041      	str	r0, [sp, #260]	; 0x104
 8005e86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e8a:	2b78      	cmp	r3, #120	; 0x78
 8005e8c:	d806      	bhi.n	8005e9c <__ssvfiscanf_r+0xd4>
 8005e8e:	2b57      	cmp	r3, #87	; 0x57
 8005e90:	d810      	bhi.n	8005eb4 <__ssvfiscanf_r+0xec>
 8005e92:	2b25      	cmp	r3, #37	; 0x25
 8005e94:	d05d      	beq.n	8005f52 <__ssvfiscanf_r+0x18a>
 8005e96:	d857      	bhi.n	8005f48 <__ssvfiscanf_r+0x180>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d075      	beq.n	8005f88 <__ssvfiscanf_r+0x1c0>
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ea0:	230a      	movs	r3, #10
 8005ea2:	9342      	str	r3, [sp, #264]	; 0x108
 8005ea4:	e082      	b.n	8005fac <__ssvfiscanf_r+0x1e4>
 8005ea6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ea8:	465d      	mov	r5, fp
 8005eaa:	fb02 1303 	mla	r3, r2, r3, r1
 8005eae:	3b30      	subs	r3, #48	; 0x30
 8005eb0:	9343      	str	r3, [sp, #268]	; 0x10c
 8005eb2:	e7d3      	b.n	8005e5c <__ssvfiscanf_r+0x94>
 8005eb4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005eb8:	2a20      	cmp	r2, #32
 8005eba:	d8ef      	bhi.n	8005e9c <__ssvfiscanf_r+0xd4>
 8005ebc:	a101      	add	r1, pc, #4	; (adr r1, 8005ec4 <__ssvfiscanf_r+0xfc>)
 8005ebe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005f97 	.word	0x08005f97
 8005ec8:	08005e9d 	.word	0x08005e9d
 8005ecc:	08005e9d 	.word	0x08005e9d
 8005ed0:	08005ff5 	.word	0x08005ff5
 8005ed4:	08005e9d 	.word	0x08005e9d
 8005ed8:	08005e9d 	.word	0x08005e9d
 8005edc:	08005e9d 	.word	0x08005e9d
 8005ee0:	08005e9d 	.word	0x08005e9d
 8005ee4:	08005e9d 	.word	0x08005e9d
 8005ee8:	08005e9d 	.word	0x08005e9d
 8005eec:	08005e9d 	.word	0x08005e9d
 8005ef0:	0800600b 	.word	0x0800600b
 8005ef4:	08005fe1 	.word	0x08005fe1
 8005ef8:	08005f4f 	.word	0x08005f4f
 8005efc:	08005f4f 	.word	0x08005f4f
 8005f00:	08005f4f 	.word	0x08005f4f
 8005f04:	08005e9d 	.word	0x08005e9d
 8005f08:	08005fe5 	.word	0x08005fe5
 8005f0c:	08005e9d 	.word	0x08005e9d
 8005f10:	08005e9d 	.word	0x08005e9d
 8005f14:	08005e9d 	.word	0x08005e9d
 8005f18:	08005e9d 	.word	0x08005e9d
 8005f1c:	0800601b 	.word	0x0800601b
 8005f20:	08005fed 	.word	0x08005fed
 8005f24:	08005f8f 	.word	0x08005f8f
 8005f28:	08005e9d 	.word	0x08005e9d
 8005f2c:	08005e9d 	.word	0x08005e9d
 8005f30:	08006017 	.word	0x08006017
 8005f34:	08005e9d 	.word	0x08005e9d
 8005f38:	08005fe1 	.word	0x08005fe1
 8005f3c:	08005e9d 	.word	0x08005e9d
 8005f40:	08005e9d 	.word	0x08005e9d
 8005f44:	08005f97 	.word	0x08005f97
 8005f48:	3b45      	subs	r3, #69	; 0x45
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d8a6      	bhi.n	8005e9c <__ssvfiscanf_r+0xd4>
 8005f4e:	2305      	movs	r3, #5
 8005f50:	e02b      	b.n	8005faa <__ssvfiscanf_r+0x1e2>
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dd0d      	ble.n	8005f74 <__ssvfiscanf_r+0x1ac>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	4552      	cmp	r2, sl
 8005f5e:	f040 80a1 	bne.w	80060a4 <__ssvfiscanf_r+0x2dc>
 8005f62:	3301      	adds	r3, #1
 8005f64:	6862      	ldr	r2, [r4, #4]
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	6062      	str	r2, [r4, #4]
 8005f70:	9345      	str	r3, [sp, #276]	; 0x114
 8005f72:	e752      	b.n	8005e1a <__ssvfiscanf_r+0x52>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4630      	mov	r0, r6
 8005f78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f7a:	4798      	blx	r3
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0eb      	beq.n	8005f58 <__ssvfiscanf_r+0x190>
 8005f80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f040 8084 	bne.w	8006090 <__ssvfiscanf_r+0x2c8>
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	e086      	b.n	800609c <__ssvfiscanf_r+0x2d4>
 8005f8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f90:	f042 0220 	orr.w	r2, r2, #32
 8005f94:	9241      	str	r2, [sp, #260]	; 0x104
 8005f96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9c:	9241      	str	r2, [sp, #260]	; 0x104
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	2b6f      	cmp	r3, #111	; 0x6f
 8005fa2:	bf34      	ite	cc
 8005fa4:	2303      	movcc	r3, #3
 8005fa6:	2304      	movcs	r3, #4
 8005fa8:	9242      	str	r2, [sp, #264]	; 0x108
 8005faa:	9347      	str	r3, [sp, #284]	; 0x11c
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dd41      	ble.n	8006036 <__ssvfiscanf_r+0x26e>
 8005fb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005fb4:	0659      	lsls	r1, r3, #25
 8005fb6:	d404      	bmi.n	8005fc2 <__ssvfiscanf_r+0x1fa>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	5cba      	ldrb	r2, [r7, r2]
 8005fbe:	0712      	lsls	r2, r2, #28
 8005fc0:	d440      	bmi.n	8006044 <__ssvfiscanf_r+0x27c>
 8005fc2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	dc4f      	bgt.n	8006068 <__ssvfiscanf_r+0x2a0>
 8005fc8:	466b      	mov	r3, sp
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4630      	mov	r0, r6
 8005fce:	a941      	add	r1, sp, #260	; 0x104
 8005fd0:	f000 fa0a 	bl	80063e8 <_scanf_chars>
 8005fd4:	2801      	cmp	r0, #1
 8005fd6:	d065      	beq.n	80060a4 <__ssvfiscanf_r+0x2dc>
 8005fd8:	2802      	cmp	r0, #2
 8005fda:	f47f af1e 	bne.w	8005e1a <__ssvfiscanf_r+0x52>
 8005fde:	e7cf      	b.n	8005f80 <__ssvfiscanf_r+0x1b8>
 8005fe0:	220a      	movs	r2, #10
 8005fe2:	e7dd      	b.n	8005fa0 <__ssvfiscanf_r+0x1d8>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9342      	str	r3, [sp, #264]	; 0x108
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e7de      	b.n	8005faa <__ssvfiscanf_r+0x1e2>
 8005fec:	2308      	movs	r3, #8
 8005fee:	9342      	str	r3, [sp, #264]	; 0x108
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	e7da      	b.n	8005faa <__ssvfiscanf_r+0x1e2>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f000 fb40 	bl	800667c <__sccl>
 8005ffc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ffe:	4605      	mov	r5, r0
 8006000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006004:	9341      	str	r3, [sp, #260]	; 0x104
 8006006:	2301      	movs	r3, #1
 8006008:	e7cf      	b.n	8005faa <__ssvfiscanf_r+0x1e2>
 800600a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800600c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006010:	9341      	str	r3, [sp, #260]	; 0x104
 8006012:	2300      	movs	r3, #0
 8006014:	e7c9      	b.n	8005faa <__ssvfiscanf_r+0x1e2>
 8006016:	2302      	movs	r3, #2
 8006018:	e7c7      	b.n	8005faa <__ssvfiscanf_r+0x1e2>
 800601a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800601c:	06c3      	lsls	r3, r0, #27
 800601e:	f53f aefc 	bmi.w	8005e1a <__ssvfiscanf_r+0x52>
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006026:	1d19      	adds	r1, r3, #4
 8006028:	9100      	str	r1, [sp, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	07c0      	lsls	r0, r0, #31
 800602e:	bf4c      	ite	mi
 8006030:	801a      	strhmi	r2, [r3, #0]
 8006032:	601a      	strpl	r2, [r3, #0]
 8006034:	e6f1      	b.n	8005e1a <__ssvfiscanf_r+0x52>
 8006036:	4621      	mov	r1, r4
 8006038:	4630      	mov	r0, r6
 800603a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800603c:	4798      	blx	r3
 800603e:	2800      	cmp	r0, #0
 8006040:	d0b7      	beq.n	8005fb2 <__ssvfiscanf_r+0x1ea>
 8006042:	e79d      	b.n	8005f80 <__ssvfiscanf_r+0x1b8>
 8006044:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006046:	3201      	adds	r2, #1
 8006048:	9245      	str	r2, [sp, #276]	; 0x114
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	3a01      	subs	r2, #1
 800604e:	2a00      	cmp	r2, #0
 8006050:	6062      	str	r2, [r4, #4]
 8006052:	dd02      	ble.n	800605a <__ssvfiscanf_r+0x292>
 8006054:	3301      	adds	r3, #1
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	e7ae      	b.n	8005fb8 <__ssvfiscanf_r+0x1f0>
 800605a:	4621      	mov	r1, r4
 800605c:	4630      	mov	r0, r6
 800605e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006060:	4798      	blx	r3
 8006062:	2800      	cmp	r0, #0
 8006064:	d0a8      	beq.n	8005fb8 <__ssvfiscanf_r+0x1f0>
 8006066:	e78b      	b.n	8005f80 <__ssvfiscanf_r+0x1b8>
 8006068:	2b04      	cmp	r3, #4
 800606a:	dc06      	bgt.n	800607a <__ssvfiscanf_r+0x2b2>
 800606c:	466b      	mov	r3, sp
 800606e:	4622      	mov	r2, r4
 8006070:	4630      	mov	r0, r6
 8006072:	a941      	add	r1, sp, #260	; 0x104
 8006074:	f000 fa10 	bl	8006498 <_scanf_i>
 8006078:	e7ac      	b.n	8005fd4 <__ssvfiscanf_r+0x20c>
 800607a:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <__ssvfiscanf_r+0x2f0>)
 800607c:	2b00      	cmp	r3, #0
 800607e:	f43f aecc 	beq.w	8005e1a <__ssvfiscanf_r+0x52>
 8006082:	466b      	mov	r3, sp
 8006084:	4622      	mov	r2, r4
 8006086:	4630      	mov	r0, r6
 8006088:	a941      	add	r1, sp, #260	; 0x104
 800608a:	f3af 8000 	nop.w
 800608e:	e7a1      	b.n	8005fd4 <__ssvfiscanf_r+0x20c>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006096:	bf18      	it	ne
 8006098:	f04f 30ff 	movne.w	r0, #4294967295
 800609c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80060a6:	e7f9      	b.n	800609c <__ssvfiscanf_r+0x2d4>
 80060a8:	08005d15 	.word	0x08005d15
 80060ac:	08005d8f 	.word	0x08005d8f
 80060b0:	0800708b 	.word	0x0800708b
 80060b4:	08007042 	.word	0x08007042
 80060b8:	00000000 	.word	0x00000000

080060bc <_printf_common>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	4616      	mov	r6, r2
 80060c2:	4699      	mov	r9, r3
 80060c4:	688a      	ldr	r2, [r1, #8]
 80060c6:	690b      	ldr	r3, [r1, #16]
 80060c8:	4607      	mov	r7, r0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bfb8      	it	lt
 80060ce:	4613      	movlt	r3, r2
 80060d0:	6033      	str	r3, [r6, #0]
 80060d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060d6:	460c      	mov	r4, r1
 80060d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060dc:	b10a      	cbz	r2, 80060e2 <_printf_common+0x26>
 80060de:	3301      	adds	r3, #1
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	0699      	lsls	r1, r3, #26
 80060e6:	bf42      	ittt	mi
 80060e8:	6833      	ldrmi	r3, [r6, #0]
 80060ea:	3302      	addmi	r3, #2
 80060ec:	6033      	strmi	r3, [r6, #0]
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	f015 0506 	ands.w	r5, r5, #6
 80060f4:	d106      	bne.n	8006104 <_printf_common+0x48>
 80060f6:	f104 0a19 	add.w	sl, r4, #25
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	6832      	ldr	r2, [r6, #0]
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	42ab      	cmp	r3, r5
 8006102:	dc28      	bgt.n	8006156 <_printf_common+0x9a>
 8006104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006108:	1e13      	subs	r3, r2, #0
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	bf18      	it	ne
 800610e:	2301      	movne	r3, #1
 8006110:	0692      	lsls	r2, r2, #26
 8006112:	d42d      	bmi.n	8006170 <_printf_common+0xb4>
 8006114:	4649      	mov	r1, r9
 8006116:	4638      	mov	r0, r7
 8006118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800611c:	47c0      	blx	r8
 800611e:	3001      	adds	r0, #1
 8006120:	d020      	beq.n	8006164 <_printf_common+0xa8>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	68e5      	ldr	r5, [r4, #12]
 8006126:	f003 0306 	and.w	r3, r3, #6
 800612a:	2b04      	cmp	r3, #4
 800612c:	bf18      	it	ne
 800612e:	2500      	movne	r5, #0
 8006130:	6832      	ldr	r2, [r6, #0]
 8006132:	f04f 0600 	mov.w	r6, #0
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	bf08      	it	eq
 800613a:	1aad      	subeq	r5, r5, r2
 800613c:	6922      	ldr	r2, [r4, #16]
 800613e:	bf08      	it	eq
 8006140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006144:	4293      	cmp	r3, r2
 8006146:	bfc4      	itt	gt
 8006148:	1a9b      	subgt	r3, r3, r2
 800614a:	18ed      	addgt	r5, r5, r3
 800614c:	341a      	adds	r4, #26
 800614e:	42b5      	cmp	r5, r6
 8006150:	d11a      	bne.n	8006188 <_printf_common+0xcc>
 8006152:	2000      	movs	r0, #0
 8006154:	e008      	b.n	8006168 <_printf_common+0xac>
 8006156:	2301      	movs	r3, #1
 8006158:	4652      	mov	r2, sl
 800615a:	4649      	mov	r1, r9
 800615c:	4638      	mov	r0, r7
 800615e:	47c0      	blx	r8
 8006160:	3001      	adds	r0, #1
 8006162:	d103      	bne.n	800616c <_printf_common+0xb0>
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	3501      	adds	r5, #1
 800616e:	e7c4      	b.n	80060fa <_printf_common+0x3e>
 8006170:	2030      	movs	r0, #48	; 0x30
 8006172:	18e1      	adds	r1, r4, r3
 8006174:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800617e:	4422      	add	r2, r4
 8006180:	3302      	adds	r3, #2
 8006182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006186:	e7c5      	b.n	8006114 <_printf_common+0x58>
 8006188:	2301      	movs	r3, #1
 800618a:	4622      	mov	r2, r4
 800618c:	4649      	mov	r1, r9
 800618e:	4638      	mov	r0, r7
 8006190:	47c0      	blx	r8
 8006192:	3001      	adds	r0, #1
 8006194:	d0e6      	beq.n	8006164 <_printf_common+0xa8>
 8006196:	3601      	adds	r6, #1
 8006198:	e7d9      	b.n	800614e <_printf_common+0x92>
	...

0800619c <_printf_i>:
 800619c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	7e27      	ldrb	r7, [r4, #24]
 80061a4:	4691      	mov	r9, r2
 80061a6:	2f78      	cmp	r7, #120	; 0x78
 80061a8:	4680      	mov	r8, r0
 80061aa:	469a      	mov	sl, r3
 80061ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b2:	d807      	bhi.n	80061c4 <_printf_i+0x28>
 80061b4:	2f62      	cmp	r7, #98	; 0x62
 80061b6:	d80a      	bhi.n	80061ce <_printf_i+0x32>
 80061b8:	2f00      	cmp	r7, #0
 80061ba:	f000 80d9 	beq.w	8006370 <_printf_i+0x1d4>
 80061be:	2f58      	cmp	r7, #88	; 0x58
 80061c0:	f000 80a4 	beq.w	800630c <_printf_i+0x170>
 80061c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061cc:	e03a      	b.n	8006244 <_printf_i+0xa8>
 80061ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061d2:	2b15      	cmp	r3, #21
 80061d4:	d8f6      	bhi.n	80061c4 <_printf_i+0x28>
 80061d6:	a001      	add	r0, pc, #4	; (adr r0, 80061dc <_printf_i+0x40>)
 80061d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061dc:	08006235 	.word	0x08006235
 80061e0:	08006249 	.word	0x08006249
 80061e4:	080061c5 	.word	0x080061c5
 80061e8:	080061c5 	.word	0x080061c5
 80061ec:	080061c5 	.word	0x080061c5
 80061f0:	080061c5 	.word	0x080061c5
 80061f4:	08006249 	.word	0x08006249
 80061f8:	080061c5 	.word	0x080061c5
 80061fc:	080061c5 	.word	0x080061c5
 8006200:	080061c5 	.word	0x080061c5
 8006204:	080061c5 	.word	0x080061c5
 8006208:	08006357 	.word	0x08006357
 800620c:	08006279 	.word	0x08006279
 8006210:	08006339 	.word	0x08006339
 8006214:	080061c5 	.word	0x080061c5
 8006218:	080061c5 	.word	0x080061c5
 800621c:	08006379 	.word	0x08006379
 8006220:	080061c5 	.word	0x080061c5
 8006224:	08006279 	.word	0x08006279
 8006228:	080061c5 	.word	0x080061c5
 800622c:	080061c5 	.word	0x080061c5
 8006230:	08006341 	.word	0x08006341
 8006234:	680b      	ldr	r3, [r1, #0]
 8006236:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	600a      	str	r2, [r1, #0]
 8006240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006244:	2301      	movs	r3, #1
 8006246:	e0a4      	b.n	8006392 <_printf_i+0x1f6>
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	6808      	ldr	r0, [r1, #0]
 800624c:	062e      	lsls	r6, r5, #24
 800624e:	f100 0304 	add.w	r3, r0, #4
 8006252:	d50a      	bpl.n	800626a <_printf_i+0xce>
 8006254:	6805      	ldr	r5, [r0, #0]
 8006256:	600b      	str	r3, [r1, #0]
 8006258:	2d00      	cmp	r5, #0
 800625a:	da03      	bge.n	8006264 <_printf_i+0xc8>
 800625c:	232d      	movs	r3, #45	; 0x2d
 800625e:	426d      	negs	r5, r5
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	230a      	movs	r3, #10
 8006266:	485e      	ldr	r0, [pc, #376]	; (80063e0 <_printf_i+0x244>)
 8006268:	e019      	b.n	800629e <_printf_i+0x102>
 800626a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800626e:	6805      	ldr	r5, [r0, #0]
 8006270:	600b      	str	r3, [r1, #0]
 8006272:	bf18      	it	ne
 8006274:	b22d      	sxthne	r5, r5
 8006276:	e7ef      	b.n	8006258 <_printf_i+0xbc>
 8006278:	680b      	ldr	r3, [r1, #0]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	1d18      	adds	r0, r3, #4
 800627e:	6008      	str	r0, [r1, #0]
 8006280:	0628      	lsls	r0, r5, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0xec>
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0xf2>
 8006288:	0669      	lsls	r1, r5, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0xe8>
 800628c:	881d      	ldrh	r5, [r3, #0]
 800628e:	2f6f      	cmp	r7, #111	; 0x6f
 8006290:	bf0c      	ite	eq
 8006292:	2308      	moveq	r3, #8
 8006294:	230a      	movne	r3, #10
 8006296:	4852      	ldr	r0, [pc, #328]	; (80063e0 <_printf_i+0x244>)
 8006298:	2100      	movs	r1, #0
 800629a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800629e:	6866      	ldr	r6, [r4, #4]
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	bfa8      	it	ge
 80062a4:	6821      	ldrge	r1, [r4, #0]
 80062a6:	60a6      	str	r6, [r4, #8]
 80062a8:	bfa4      	itt	ge
 80062aa:	f021 0104 	bicge.w	r1, r1, #4
 80062ae:	6021      	strge	r1, [r4, #0]
 80062b0:	b90d      	cbnz	r5, 80062b6 <_printf_i+0x11a>
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d04d      	beq.n	8006352 <_printf_i+0x1b6>
 80062b6:	4616      	mov	r6, r2
 80062b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80062bc:	fb03 5711 	mls	r7, r3, r1, r5
 80062c0:	5dc7      	ldrb	r7, [r0, r7]
 80062c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062c6:	462f      	mov	r7, r5
 80062c8:	42bb      	cmp	r3, r7
 80062ca:	460d      	mov	r5, r1
 80062cc:	d9f4      	bls.n	80062b8 <_printf_i+0x11c>
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d10b      	bne.n	80062ea <_printf_i+0x14e>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	07df      	lsls	r7, r3, #31
 80062d6:	d508      	bpl.n	80062ea <_printf_i+0x14e>
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	6861      	ldr	r1, [r4, #4]
 80062dc:	4299      	cmp	r1, r3
 80062de:	bfde      	ittt	le
 80062e0:	2330      	movle	r3, #48	; 0x30
 80062e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062ea:	1b92      	subs	r2, r2, r6
 80062ec:	6122      	str	r2, [r4, #16]
 80062ee:	464b      	mov	r3, r9
 80062f0:	4621      	mov	r1, r4
 80062f2:	4640      	mov	r0, r8
 80062f4:	f8cd a000 	str.w	sl, [sp]
 80062f8:	aa03      	add	r2, sp, #12
 80062fa:	f7ff fedf 	bl	80060bc <_printf_common>
 80062fe:	3001      	adds	r0, #1
 8006300:	d14c      	bne.n	800639c <_printf_i+0x200>
 8006302:	f04f 30ff 	mov.w	r0, #4294967295
 8006306:	b004      	add	sp, #16
 8006308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630c:	4834      	ldr	r0, [pc, #208]	; (80063e0 <_printf_i+0x244>)
 800630e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006312:	680e      	ldr	r6, [r1, #0]
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	f856 5b04 	ldr.w	r5, [r6], #4
 800631a:	061f      	lsls	r7, r3, #24
 800631c:	600e      	str	r6, [r1, #0]
 800631e:	d514      	bpl.n	800634a <_printf_i+0x1ae>
 8006320:	07d9      	lsls	r1, r3, #31
 8006322:	bf44      	itt	mi
 8006324:	f043 0320 	orrmi.w	r3, r3, #32
 8006328:	6023      	strmi	r3, [r4, #0]
 800632a:	b91d      	cbnz	r5, 8006334 <_printf_i+0x198>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	f023 0320 	bic.w	r3, r3, #32
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	2310      	movs	r3, #16
 8006336:	e7af      	b.n	8006298 <_printf_i+0xfc>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	f043 0320 	orr.w	r3, r3, #32
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	2378      	movs	r3, #120	; 0x78
 8006342:	4828      	ldr	r0, [pc, #160]	; (80063e4 <_printf_i+0x248>)
 8006344:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006348:	e7e3      	b.n	8006312 <_printf_i+0x176>
 800634a:	065e      	lsls	r6, r3, #25
 800634c:	bf48      	it	mi
 800634e:	b2ad      	uxthmi	r5, r5
 8006350:	e7e6      	b.n	8006320 <_printf_i+0x184>
 8006352:	4616      	mov	r6, r2
 8006354:	e7bb      	b.n	80062ce <_printf_i+0x132>
 8006356:	680b      	ldr	r3, [r1, #0]
 8006358:	6826      	ldr	r6, [r4, #0]
 800635a:	1d1d      	adds	r5, r3, #4
 800635c:	6960      	ldr	r0, [r4, #20]
 800635e:	600d      	str	r5, [r1, #0]
 8006360:	0635      	lsls	r5, r6, #24
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	d501      	bpl.n	800636a <_printf_i+0x1ce>
 8006366:	6018      	str	r0, [r3, #0]
 8006368:	e002      	b.n	8006370 <_printf_i+0x1d4>
 800636a:	0671      	lsls	r1, r6, #25
 800636c:	d5fb      	bpl.n	8006366 <_printf_i+0x1ca>
 800636e:	8018      	strh	r0, [r3, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	4616      	mov	r6, r2
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	e7ba      	b.n	80062ee <_printf_i+0x152>
 8006378:	680b      	ldr	r3, [r1, #0]
 800637a:	1d1a      	adds	r2, r3, #4
 800637c:	600a      	str	r2, [r1, #0]
 800637e:	681e      	ldr	r6, [r3, #0]
 8006380:	2100      	movs	r1, #0
 8006382:	4630      	mov	r0, r6
 8006384:	6862      	ldr	r2, [r4, #4]
 8006386:	f000 faf3 	bl	8006970 <memchr>
 800638a:	b108      	cbz	r0, 8006390 <_printf_i+0x1f4>
 800638c:	1b80      	subs	r0, r0, r6
 800638e:	6060      	str	r0, [r4, #4]
 8006390:	6863      	ldr	r3, [r4, #4]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	2300      	movs	r3, #0
 8006396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800639a:	e7a8      	b.n	80062ee <_printf_i+0x152>
 800639c:	4632      	mov	r2, r6
 800639e:	4649      	mov	r1, r9
 80063a0:	4640      	mov	r0, r8
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	47d0      	blx	sl
 80063a6:	3001      	adds	r0, #1
 80063a8:	d0ab      	beq.n	8006302 <_printf_i+0x166>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	079b      	lsls	r3, r3, #30
 80063ae:	d413      	bmi.n	80063d8 <_printf_i+0x23c>
 80063b0:	68e0      	ldr	r0, [r4, #12]
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	4298      	cmp	r0, r3
 80063b6:	bfb8      	it	lt
 80063b8:	4618      	movlt	r0, r3
 80063ba:	e7a4      	b.n	8006306 <_printf_i+0x16a>
 80063bc:	2301      	movs	r3, #1
 80063be:	4632      	mov	r2, r6
 80063c0:	4649      	mov	r1, r9
 80063c2:	4640      	mov	r0, r8
 80063c4:	47d0      	blx	sl
 80063c6:	3001      	adds	r0, #1
 80063c8:	d09b      	beq.n	8006302 <_printf_i+0x166>
 80063ca:	3501      	adds	r5, #1
 80063cc:	68e3      	ldr	r3, [r4, #12]
 80063ce:	9903      	ldr	r1, [sp, #12]
 80063d0:	1a5b      	subs	r3, r3, r1
 80063d2:	42ab      	cmp	r3, r5
 80063d4:	dcf2      	bgt.n	80063bc <_printf_i+0x220>
 80063d6:	e7eb      	b.n	80063b0 <_printf_i+0x214>
 80063d8:	2500      	movs	r5, #0
 80063da:	f104 0619 	add.w	r6, r4, #25
 80063de:	e7f5      	b.n	80063cc <_printf_i+0x230>
 80063e0:	0800704d 	.word	0x0800704d
 80063e4:	0800705e 	.word	0x0800705e

080063e8 <_scanf_chars>:
 80063e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ec:	4615      	mov	r5, r2
 80063ee:	688a      	ldr	r2, [r1, #8]
 80063f0:	4680      	mov	r8, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	b932      	cbnz	r2, 8006404 <_scanf_chars+0x1c>
 80063f6:	698a      	ldr	r2, [r1, #24]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	bf0c      	ite	eq
 80063fc:	2201      	moveq	r2, #1
 80063fe:	f04f 32ff 	movne.w	r2, #4294967295
 8006402:	608a      	str	r2, [r1, #8]
 8006404:	2700      	movs	r7, #0
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8006494 <_scanf_chars+0xac>
 800640c:	06d1      	lsls	r1, r2, #27
 800640e:	bf5f      	itttt	pl
 8006410:	681a      	ldrpl	r2, [r3, #0]
 8006412:	1d11      	addpl	r1, r2, #4
 8006414:	6019      	strpl	r1, [r3, #0]
 8006416:	6816      	ldrpl	r6, [r2, #0]
 8006418:	69a0      	ldr	r0, [r4, #24]
 800641a:	b188      	cbz	r0, 8006440 <_scanf_chars+0x58>
 800641c:	2801      	cmp	r0, #1
 800641e:	d107      	bne.n	8006430 <_scanf_chars+0x48>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	6963      	ldr	r3, [r4, #20]
 8006426:	5c9b      	ldrb	r3, [r3, r2]
 8006428:	b953      	cbnz	r3, 8006440 <_scanf_chars+0x58>
 800642a:	bb27      	cbnz	r7, 8006476 <_scanf_chars+0x8e>
 800642c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006430:	2802      	cmp	r0, #2
 8006432:	d120      	bne.n	8006476 <_scanf_chars+0x8e>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f813 3009 	ldrb.w	r3, [r3, r9]
 800643c:	071b      	lsls	r3, r3, #28
 800643e:	d41a      	bmi.n	8006476 <_scanf_chars+0x8e>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	3701      	adds	r7, #1
 8006444:	06da      	lsls	r2, r3, #27
 8006446:	bf5e      	ittt	pl
 8006448:	682b      	ldrpl	r3, [r5, #0]
 800644a:	781b      	ldrbpl	r3, [r3, #0]
 800644c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006450:	682a      	ldr	r2, [r5, #0]
 8006452:	686b      	ldr	r3, [r5, #4]
 8006454:	3201      	adds	r2, #1
 8006456:	602a      	str	r2, [r5, #0]
 8006458:	68a2      	ldr	r2, [r4, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	3a01      	subs	r2, #1
 800645e:	606b      	str	r3, [r5, #4]
 8006460:	60a2      	str	r2, [r4, #8]
 8006462:	b142      	cbz	r2, 8006476 <_scanf_chars+0x8e>
 8006464:	2b00      	cmp	r3, #0
 8006466:	dcd7      	bgt.n	8006418 <_scanf_chars+0x30>
 8006468:	4629      	mov	r1, r5
 800646a:	4640      	mov	r0, r8
 800646c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006470:	4798      	blx	r3
 8006472:	2800      	cmp	r0, #0
 8006474:	d0d0      	beq.n	8006418 <_scanf_chars+0x30>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f013 0310 	ands.w	r3, r3, #16
 800647c:	d105      	bne.n	800648a <_scanf_chars+0xa2>
 800647e:	68e2      	ldr	r2, [r4, #12]
 8006480:	3201      	adds	r2, #1
 8006482:	60e2      	str	r2, [r4, #12]
 8006484:	69a2      	ldr	r2, [r4, #24]
 8006486:	b102      	cbz	r2, 800648a <_scanf_chars+0xa2>
 8006488:	7033      	strb	r3, [r6, #0]
 800648a:	6923      	ldr	r3, [r4, #16]
 800648c:	2000      	movs	r0, #0
 800648e:	441f      	add	r7, r3
 8006490:	6127      	str	r7, [r4, #16]
 8006492:	e7cb      	b.n	800642c <_scanf_chars+0x44>
 8006494:	0800708b 	.word	0x0800708b

08006498 <_scanf_i>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	4698      	mov	r8, r3
 80064a0:	4b72      	ldr	r3, [pc, #456]	; (800666c <_scanf_i+0x1d4>)
 80064a2:	b087      	sub	sp, #28
 80064a4:	4682      	mov	sl, r0
 80064a6:	4616      	mov	r6, r2
 80064a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064ac:	ab03      	add	r3, sp, #12
 80064ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064b2:	4b6f      	ldr	r3, [pc, #444]	; (8006670 <_scanf_i+0x1d8>)
 80064b4:	69a1      	ldr	r1, [r4, #24]
 80064b6:	4a6f      	ldr	r2, [pc, #444]	; (8006674 <_scanf_i+0x1dc>)
 80064b8:	4627      	mov	r7, r4
 80064ba:	2903      	cmp	r1, #3
 80064bc:	bf18      	it	ne
 80064be:	461a      	movne	r2, r3
 80064c0:	68a3      	ldr	r3, [r4, #8]
 80064c2:	9201      	str	r2, [sp, #4]
 80064c4:	1e5a      	subs	r2, r3, #1
 80064c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80064ca:	bf81      	itttt	hi
 80064cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80064d0:	eb03 0905 	addhi.w	r9, r3, r5
 80064d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064d8:	60a3      	strhi	r3, [r4, #8]
 80064da:	f857 3b1c 	ldr.w	r3, [r7], #28
 80064de:	bf98      	it	ls
 80064e0:	f04f 0900 	movls.w	r9, #0
 80064e4:	463d      	mov	r5, r7
 80064e6:	f04f 0b00 	mov.w	fp, #0
 80064ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	6831      	ldr	r1, [r6, #0]
 80064f2:	ab03      	add	r3, sp, #12
 80064f4:	2202      	movs	r2, #2
 80064f6:	7809      	ldrb	r1, [r1, #0]
 80064f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80064fc:	f000 fa38 	bl	8006970 <memchr>
 8006500:	b328      	cbz	r0, 800654e <_scanf_i+0xb6>
 8006502:	f1bb 0f01 	cmp.w	fp, #1
 8006506:	d159      	bne.n	80065bc <_scanf_i+0x124>
 8006508:	6862      	ldr	r2, [r4, #4]
 800650a:	b92a      	cbnz	r2, 8006518 <_scanf_i+0x80>
 800650c:	2308      	movs	r3, #8
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	6063      	str	r3, [r4, #4]
 8006512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	68a2      	ldr	r2, [r4, #8]
 8006522:	1e51      	subs	r1, r2, #1
 8006524:	60a1      	str	r1, [r4, #8]
 8006526:	b192      	cbz	r2, 800654e <_scanf_i+0xb6>
 8006528:	6832      	ldr	r2, [r6, #0]
 800652a:	1c51      	adds	r1, r2, #1
 800652c:	6031      	str	r1, [r6, #0]
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	f805 2b01 	strb.w	r2, [r5], #1
 8006534:	6872      	ldr	r2, [r6, #4]
 8006536:	3a01      	subs	r2, #1
 8006538:	2a00      	cmp	r2, #0
 800653a:	6072      	str	r2, [r6, #4]
 800653c:	dc07      	bgt.n	800654e <_scanf_i+0xb6>
 800653e:	4631      	mov	r1, r6
 8006540:	4650      	mov	r0, sl
 8006542:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006546:	4790      	blx	r2
 8006548:	2800      	cmp	r0, #0
 800654a:	f040 8085 	bne.w	8006658 <_scanf_i+0x1c0>
 800654e:	f10b 0b01 	add.w	fp, fp, #1
 8006552:	f1bb 0f03 	cmp.w	fp, #3
 8006556:	d1cb      	bne.n	80064f0 <_scanf_i+0x58>
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	b90b      	cbnz	r3, 8006560 <_scanf_i+0xc8>
 800655c:	230a      	movs	r3, #10
 800655e:	6063      	str	r3, [r4, #4]
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	4945      	ldr	r1, [pc, #276]	; (8006678 <_scanf_i+0x1e0>)
 8006564:	6960      	ldr	r0, [r4, #20]
 8006566:	1ac9      	subs	r1, r1, r3
 8006568:	f000 f888 	bl	800667c <__sccl>
 800656c:	f04f 0b00 	mov.w	fp, #0
 8006570:	68a3      	ldr	r3, [r4, #8]
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d03d      	beq.n	80065f4 <_scanf_i+0x15c>
 8006578:	6831      	ldr	r1, [r6, #0]
 800657a:	6960      	ldr	r0, [r4, #20]
 800657c:	f891 c000 	ldrb.w	ip, [r1]
 8006580:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006584:	2800      	cmp	r0, #0
 8006586:	d035      	beq.n	80065f4 <_scanf_i+0x15c>
 8006588:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800658c:	d124      	bne.n	80065d8 <_scanf_i+0x140>
 800658e:	0510      	lsls	r0, r2, #20
 8006590:	d522      	bpl.n	80065d8 <_scanf_i+0x140>
 8006592:	f10b 0b01 	add.w	fp, fp, #1
 8006596:	f1b9 0f00 	cmp.w	r9, #0
 800659a:	d003      	beq.n	80065a4 <_scanf_i+0x10c>
 800659c:	3301      	adds	r3, #1
 800659e:	f109 39ff 	add.w	r9, r9, #4294967295
 80065a2:	60a3      	str	r3, [r4, #8]
 80065a4:	6873      	ldr	r3, [r6, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	6073      	str	r3, [r6, #4]
 80065ac:	dd1b      	ble.n	80065e6 <_scanf_i+0x14e>
 80065ae:	6833      	ldr	r3, [r6, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	e7d9      	b.n	8006570 <_scanf_i+0xd8>
 80065bc:	f1bb 0f02 	cmp.w	fp, #2
 80065c0:	d1ae      	bne.n	8006520 <_scanf_i+0x88>
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80065c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80065cc:	d1bf      	bne.n	800654e <_scanf_i+0xb6>
 80065ce:	2310      	movs	r3, #16
 80065d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	e7a2      	b.n	800651e <_scanf_i+0x86>
 80065d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80065dc:	6022      	str	r2, [r4, #0]
 80065de:	780b      	ldrb	r3, [r1, #0]
 80065e0:	f805 3b01 	strb.w	r3, [r5], #1
 80065e4:	e7de      	b.n	80065a4 <_scanf_i+0x10c>
 80065e6:	4631      	mov	r1, r6
 80065e8:	4650      	mov	r0, sl
 80065ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065ee:	4798      	blx	r3
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d0df      	beq.n	80065b4 <_scanf_i+0x11c>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	05d9      	lsls	r1, r3, #23
 80065f8:	d50d      	bpl.n	8006616 <_scanf_i+0x17e>
 80065fa:	42bd      	cmp	r5, r7
 80065fc:	d909      	bls.n	8006612 <_scanf_i+0x17a>
 80065fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006602:	4632      	mov	r2, r6
 8006604:	4650      	mov	r0, sl
 8006606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800660a:	f105 39ff 	add.w	r9, r5, #4294967295
 800660e:	4798      	blx	r3
 8006610:	464d      	mov	r5, r9
 8006612:	42bd      	cmp	r5, r7
 8006614:	d028      	beq.n	8006668 <_scanf_i+0x1d0>
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	f012 0210 	ands.w	r2, r2, #16
 800661c:	d113      	bne.n	8006646 <_scanf_i+0x1ae>
 800661e:	702a      	strb	r2, [r5, #0]
 8006620:	4639      	mov	r1, r7
 8006622:	6863      	ldr	r3, [r4, #4]
 8006624:	4650      	mov	r0, sl
 8006626:	9e01      	ldr	r6, [sp, #4]
 8006628:	47b0      	blx	r6
 800662a:	f8d8 3000 	ldr.w	r3, [r8]
 800662e:	6821      	ldr	r1, [r4, #0]
 8006630:	1d1a      	adds	r2, r3, #4
 8006632:	f8c8 2000 	str.w	r2, [r8]
 8006636:	f011 0f20 	tst.w	r1, #32
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	d00f      	beq.n	800665e <_scanf_i+0x1c6>
 800663e:	6018      	str	r0, [r3, #0]
 8006640:	68e3      	ldr	r3, [r4, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60e3      	str	r3, [r4, #12]
 8006646:	2000      	movs	r0, #0
 8006648:	1bed      	subs	r5, r5, r7
 800664a:	44ab      	add	fp, r5
 800664c:	6925      	ldr	r5, [r4, #16]
 800664e:	445d      	add	r5, fp
 8006650:	6125      	str	r5, [r4, #16]
 8006652:	b007      	add	sp, #28
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	f04f 0b00 	mov.w	fp, #0
 800665c:	e7ca      	b.n	80065f4 <_scanf_i+0x15c>
 800665e:	07ca      	lsls	r2, r1, #31
 8006660:	bf4c      	ite	mi
 8006662:	8018      	strhmi	r0, [r3, #0]
 8006664:	6018      	strpl	r0, [r3, #0]
 8006666:	e7eb      	b.n	8006640 <_scanf_i+0x1a8>
 8006668:	2001      	movs	r0, #1
 800666a:	e7f2      	b.n	8006652 <_scanf_i+0x1ba>
 800666c:	08006dd8 	.word	0x08006dd8
 8006670:	080068f9 	.word	0x080068f9
 8006674:	080067fd 	.word	0x080067fd
 8006678:	08007088 	.word	0x08007088

0800667c <__sccl>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	780b      	ldrb	r3, [r1, #0]
 8006680:	4604      	mov	r4, r0
 8006682:	2b5e      	cmp	r3, #94	; 0x5e
 8006684:	bf13      	iteet	ne
 8006686:	2200      	movne	r2, #0
 8006688:	2201      	moveq	r2, #1
 800668a:	784b      	ldrbeq	r3, [r1, #1]
 800668c:	1c48      	addne	r0, r1, #1
 800668e:	bf08      	it	eq
 8006690:	1c88      	addeq	r0, r1, #2
 8006692:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006696:	1e61      	subs	r1, r4, #1
 8006698:	f801 2f01 	strb.w	r2, [r1, #1]!
 800669c:	42a9      	cmp	r1, r5
 800669e:	d1fb      	bne.n	8006698 <__sccl+0x1c>
 80066a0:	b90b      	cbnz	r3, 80066a6 <__sccl+0x2a>
 80066a2:	3801      	subs	r0, #1
 80066a4:	bd70      	pop	{r4, r5, r6, pc}
 80066a6:	f082 0101 	eor.w	r1, r2, #1
 80066aa:	54e1      	strb	r1, [r4, r3]
 80066ac:	1c42      	adds	r2, r0, #1
 80066ae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80066b2:	4610      	mov	r0, r2
 80066b4:	2d2d      	cmp	r5, #45	; 0x2d
 80066b6:	f102 36ff 	add.w	r6, r2, #4294967295
 80066ba:	d006      	beq.n	80066ca <__sccl+0x4e>
 80066bc:	2d5d      	cmp	r5, #93	; 0x5d
 80066be:	d0f1      	beq.n	80066a4 <__sccl+0x28>
 80066c0:	b90d      	cbnz	r5, 80066c6 <__sccl+0x4a>
 80066c2:	4630      	mov	r0, r6
 80066c4:	e7ee      	b.n	80066a4 <__sccl+0x28>
 80066c6:	462b      	mov	r3, r5
 80066c8:	e7ef      	b.n	80066aa <__sccl+0x2e>
 80066ca:	7816      	ldrb	r6, [r2, #0]
 80066cc:	2e5d      	cmp	r6, #93	; 0x5d
 80066ce:	d0fa      	beq.n	80066c6 <__sccl+0x4a>
 80066d0:	42b3      	cmp	r3, r6
 80066d2:	dcf8      	bgt.n	80066c6 <__sccl+0x4a>
 80066d4:	4618      	mov	r0, r3
 80066d6:	3001      	adds	r0, #1
 80066d8:	4286      	cmp	r6, r0
 80066da:	5421      	strb	r1, [r4, r0]
 80066dc:	dcfb      	bgt.n	80066d6 <__sccl+0x5a>
 80066de:	43d8      	mvns	r0, r3
 80066e0:	4430      	add	r0, r6
 80066e2:	42b3      	cmp	r3, r6
 80066e4:	bfa8      	it	ge
 80066e6:	2000      	movge	r0, #0
 80066e8:	1c5d      	adds	r5, r3, #1
 80066ea:	182b      	adds	r3, r5, r0
 80066ec:	3202      	adds	r2, #2
 80066ee:	e7de      	b.n	80066ae <__sccl+0x32>

080066f0 <_strtol_l.isra.0>:
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f6:	4686      	mov	lr, r0
 80066f8:	d001      	beq.n	80066fe <_strtol_l.isra.0+0xe>
 80066fa:	2b24      	cmp	r3, #36	; 0x24
 80066fc:	d906      	bls.n	800670c <_strtol_l.isra.0+0x1c>
 80066fe:	f7ff f8f5 	bl	80058ec <__errno>
 8006702:	2316      	movs	r3, #22
 8006704:	6003      	str	r3, [r0, #0]
 8006706:	2000      	movs	r0, #0
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	468c      	mov	ip, r1
 800670e:	4e3a      	ldr	r6, [pc, #232]	; (80067f8 <_strtol_l.isra.0+0x108>)
 8006710:	4660      	mov	r0, ip
 8006712:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006716:	5da5      	ldrb	r5, [r4, r6]
 8006718:	f015 0508 	ands.w	r5, r5, #8
 800671c:	d1f8      	bne.n	8006710 <_strtol_l.isra.0+0x20>
 800671e:	2c2d      	cmp	r4, #45	; 0x2d
 8006720:	d133      	bne.n	800678a <_strtol_l.isra.0+0x9a>
 8006722:	f04f 0801 	mov.w	r8, #1
 8006726:	f89c 4000 	ldrb.w	r4, [ip]
 800672a:	f100 0c02 	add.w	ip, r0, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d05d      	beq.n	80067ee <_strtol_l.isra.0+0xfe>
 8006732:	2b10      	cmp	r3, #16
 8006734:	d10c      	bne.n	8006750 <_strtol_l.isra.0+0x60>
 8006736:	2c30      	cmp	r4, #48	; 0x30
 8006738:	d10a      	bne.n	8006750 <_strtol_l.isra.0+0x60>
 800673a:	f89c 0000 	ldrb.w	r0, [ip]
 800673e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006742:	2858      	cmp	r0, #88	; 0x58
 8006744:	d14e      	bne.n	80067e4 <_strtol_l.isra.0+0xf4>
 8006746:	2310      	movs	r3, #16
 8006748:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800674c:	f10c 0c02 	add.w	ip, ip, #2
 8006750:	2500      	movs	r5, #0
 8006752:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006756:	3f01      	subs	r7, #1
 8006758:	fbb7 f9f3 	udiv	r9, r7, r3
 800675c:	4628      	mov	r0, r5
 800675e:	fb03 7a19 	mls	sl, r3, r9, r7
 8006762:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006766:	2e09      	cmp	r6, #9
 8006768:	d818      	bhi.n	800679c <_strtol_l.isra.0+0xac>
 800676a:	4634      	mov	r4, r6
 800676c:	42a3      	cmp	r3, r4
 800676e:	dd24      	ble.n	80067ba <_strtol_l.isra.0+0xca>
 8006770:	2d00      	cmp	r5, #0
 8006772:	db1f      	blt.n	80067b4 <_strtol_l.isra.0+0xc4>
 8006774:	4581      	cmp	r9, r0
 8006776:	d31d      	bcc.n	80067b4 <_strtol_l.isra.0+0xc4>
 8006778:	d101      	bne.n	800677e <_strtol_l.isra.0+0x8e>
 800677a:	45a2      	cmp	sl, r4
 800677c:	db1a      	blt.n	80067b4 <_strtol_l.isra.0+0xc4>
 800677e:	2501      	movs	r5, #1
 8006780:	fb00 4003 	mla	r0, r0, r3, r4
 8006784:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006788:	e7eb      	b.n	8006762 <_strtol_l.isra.0+0x72>
 800678a:	2c2b      	cmp	r4, #43	; 0x2b
 800678c:	bf08      	it	eq
 800678e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006792:	46a8      	mov	r8, r5
 8006794:	bf08      	it	eq
 8006796:	f100 0c02 	addeq.w	ip, r0, #2
 800679a:	e7c8      	b.n	800672e <_strtol_l.isra.0+0x3e>
 800679c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80067a0:	2e19      	cmp	r6, #25
 80067a2:	d801      	bhi.n	80067a8 <_strtol_l.isra.0+0xb8>
 80067a4:	3c37      	subs	r4, #55	; 0x37
 80067a6:	e7e1      	b.n	800676c <_strtol_l.isra.0+0x7c>
 80067a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80067ac:	2e19      	cmp	r6, #25
 80067ae:	d804      	bhi.n	80067ba <_strtol_l.isra.0+0xca>
 80067b0:	3c57      	subs	r4, #87	; 0x57
 80067b2:	e7db      	b.n	800676c <_strtol_l.isra.0+0x7c>
 80067b4:	f04f 35ff 	mov.w	r5, #4294967295
 80067b8:	e7e4      	b.n	8006784 <_strtol_l.isra.0+0x94>
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	da08      	bge.n	80067d0 <_strtol_l.isra.0+0xe0>
 80067be:	2322      	movs	r3, #34	; 0x22
 80067c0:	4638      	mov	r0, r7
 80067c2:	f8ce 3000 	str.w	r3, [lr]
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	d09e      	beq.n	8006708 <_strtol_l.isra.0+0x18>
 80067ca:	f10c 31ff 	add.w	r1, ip, #4294967295
 80067ce:	e007      	b.n	80067e0 <_strtol_l.isra.0+0xf0>
 80067d0:	f1b8 0f00 	cmp.w	r8, #0
 80067d4:	d000      	beq.n	80067d8 <_strtol_l.isra.0+0xe8>
 80067d6:	4240      	negs	r0, r0
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d095      	beq.n	8006708 <_strtol_l.isra.0+0x18>
 80067dc:	2d00      	cmp	r5, #0
 80067de:	d1f4      	bne.n	80067ca <_strtol_l.isra.0+0xda>
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	e791      	b.n	8006708 <_strtol_l.isra.0+0x18>
 80067e4:	2430      	movs	r4, #48	; 0x30
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1b2      	bne.n	8006750 <_strtol_l.isra.0+0x60>
 80067ea:	2308      	movs	r3, #8
 80067ec:	e7b0      	b.n	8006750 <_strtol_l.isra.0+0x60>
 80067ee:	2c30      	cmp	r4, #48	; 0x30
 80067f0:	d0a3      	beq.n	800673a <_strtol_l.isra.0+0x4a>
 80067f2:	230a      	movs	r3, #10
 80067f4:	e7ac      	b.n	8006750 <_strtol_l.isra.0+0x60>
 80067f6:	bf00      	nop
 80067f8:	0800708b 	.word	0x0800708b

080067fc <_strtol_r>:
 80067fc:	f7ff bf78 	b.w	80066f0 <_strtol_l.isra.0>

08006800 <_strtoul_l.isra.0>:
 8006800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006804:	468c      	mov	ip, r1
 8006806:	4686      	mov	lr, r0
 8006808:	4e3a      	ldr	r6, [pc, #232]	; (80068f4 <_strtoul_l.isra.0+0xf4>)
 800680a:	4660      	mov	r0, ip
 800680c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006810:	5da5      	ldrb	r5, [r4, r6]
 8006812:	f015 0508 	ands.w	r5, r5, #8
 8006816:	d1f8      	bne.n	800680a <_strtoul_l.isra.0+0xa>
 8006818:	2c2d      	cmp	r4, #45	; 0x2d
 800681a:	d134      	bne.n	8006886 <_strtoul_l.isra.0+0x86>
 800681c:	f04f 0801 	mov.w	r8, #1
 8006820:	f89c 4000 	ldrb.w	r4, [ip]
 8006824:	f100 0c02 	add.w	ip, r0, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d05e      	beq.n	80068ea <_strtoul_l.isra.0+0xea>
 800682c:	2b10      	cmp	r3, #16
 800682e:	d10c      	bne.n	800684a <_strtoul_l.isra.0+0x4a>
 8006830:	2c30      	cmp	r4, #48	; 0x30
 8006832:	d10a      	bne.n	800684a <_strtoul_l.isra.0+0x4a>
 8006834:	f89c 0000 	ldrb.w	r0, [ip]
 8006838:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800683c:	2858      	cmp	r0, #88	; 0x58
 800683e:	d14f      	bne.n	80068e0 <_strtoul_l.isra.0+0xe0>
 8006840:	2310      	movs	r3, #16
 8006842:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006846:	f10c 0c02 	add.w	ip, ip, #2
 800684a:	f04f 37ff 	mov.w	r7, #4294967295
 800684e:	fbb7 f7f3 	udiv	r7, r7, r3
 8006852:	2500      	movs	r5, #0
 8006854:	fb03 f907 	mul.w	r9, r3, r7
 8006858:	4628      	mov	r0, r5
 800685a:	ea6f 0909 	mvn.w	r9, r9
 800685e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006862:	2e09      	cmp	r6, #9
 8006864:	d818      	bhi.n	8006898 <_strtoul_l.isra.0+0x98>
 8006866:	4634      	mov	r4, r6
 8006868:	42a3      	cmp	r3, r4
 800686a:	dd24      	ble.n	80068b6 <_strtoul_l.isra.0+0xb6>
 800686c:	2d00      	cmp	r5, #0
 800686e:	db1f      	blt.n	80068b0 <_strtoul_l.isra.0+0xb0>
 8006870:	4287      	cmp	r7, r0
 8006872:	d31d      	bcc.n	80068b0 <_strtoul_l.isra.0+0xb0>
 8006874:	d101      	bne.n	800687a <_strtoul_l.isra.0+0x7a>
 8006876:	45a1      	cmp	r9, r4
 8006878:	db1a      	blt.n	80068b0 <_strtoul_l.isra.0+0xb0>
 800687a:	2501      	movs	r5, #1
 800687c:	fb00 4003 	mla	r0, r0, r3, r4
 8006880:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006884:	e7eb      	b.n	800685e <_strtoul_l.isra.0+0x5e>
 8006886:	2c2b      	cmp	r4, #43	; 0x2b
 8006888:	bf08      	it	eq
 800688a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800688e:	46a8      	mov	r8, r5
 8006890:	bf08      	it	eq
 8006892:	f100 0c02 	addeq.w	ip, r0, #2
 8006896:	e7c7      	b.n	8006828 <_strtoul_l.isra.0+0x28>
 8006898:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800689c:	2e19      	cmp	r6, #25
 800689e:	d801      	bhi.n	80068a4 <_strtoul_l.isra.0+0xa4>
 80068a0:	3c37      	subs	r4, #55	; 0x37
 80068a2:	e7e1      	b.n	8006868 <_strtoul_l.isra.0+0x68>
 80068a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80068a8:	2e19      	cmp	r6, #25
 80068aa:	d804      	bhi.n	80068b6 <_strtoul_l.isra.0+0xb6>
 80068ac:	3c57      	subs	r4, #87	; 0x57
 80068ae:	e7db      	b.n	8006868 <_strtoul_l.isra.0+0x68>
 80068b0:	f04f 35ff 	mov.w	r5, #4294967295
 80068b4:	e7e4      	b.n	8006880 <_strtoul_l.isra.0+0x80>
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	da07      	bge.n	80068ca <_strtoul_l.isra.0+0xca>
 80068ba:	2322      	movs	r3, #34	; 0x22
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	f8ce 3000 	str.w	r3, [lr]
 80068c4:	b942      	cbnz	r2, 80068d8 <_strtoul_l.isra.0+0xd8>
 80068c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ca:	f1b8 0f00 	cmp.w	r8, #0
 80068ce:	d000      	beq.n	80068d2 <_strtoul_l.isra.0+0xd2>
 80068d0:	4240      	negs	r0, r0
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d0f7      	beq.n	80068c6 <_strtoul_l.isra.0+0xc6>
 80068d6:	b10d      	cbz	r5, 80068dc <_strtoul_l.isra.0+0xdc>
 80068d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80068dc:	6011      	str	r1, [r2, #0]
 80068de:	e7f2      	b.n	80068c6 <_strtoul_l.isra.0+0xc6>
 80068e0:	2430      	movs	r4, #48	; 0x30
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1b1      	bne.n	800684a <_strtoul_l.isra.0+0x4a>
 80068e6:	2308      	movs	r3, #8
 80068e8:	e7af      	b.n	800684a <_strtoul_l.isra.0+0x4a>
 80068ea:	2c30      	cmp	r4, #48	; 0x30
 80068ec:	d0a2      	beq.n	8006834 <_strtoul_l.isra.0+0x34>
 80068ee:	230a      	movs	r3, #10
 80068f0:	e7ab      	b.n	800684a <_strtoul_l.isra.0+0x4a>
 80068f2:	bf00      	nop
 80068f4:	0800708b 	.word	0x0800708b

080068f8 <_strtoul_r>:
 80068f8:	f7ff bf82 	b.w	8006800 <_strtoul_l.isra.0>

080068fc <__submore>:
 80068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	460c      	mov	r4, r1
 8006902:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006908:	4299      	cmp	r1, r3
 800690a:	d11b      	bne.n	8006944 <__submore+0x48>
 800690c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006910:	f000 f896 	bl	8006a40 <_malloc_r>
 8006914:	b918      	cbnz	r0, 800691e <__submore+0x22>
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006922:	63a3      	str	r3, [r4, #56]	; 0x38
 8006924:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006928:	6360      	str	r0, [r4, #52]	; 0x34
 800692a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800692e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006932:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006936:	7043      	strb	r3, [r0, #1]
 8006938:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800693c:	7003      	strb	r3, [r0, #0]
 800693e:	6020      	str	r0, [r4, #0]
 8006940:	2000      	movs	r0, #0
 8006942:	e7ea      	b.n	800691a <__submore+0x1e>
 8006944:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006946:	0077      	lsls	r7, r6, #1
 8006948:	463a      	mov	r2, r7
 800694a:	f000 f8d3 	bl	8006af4 <_realloc_r>
 800694e:	4605      	mov	r5, r0
 8006950:	2800      	cmp	r0, #0
 8006952:	d0e0      	beq.n	8006916 <__submore+0x1a>
 8006954:	eb00 0806 	add.w	r8, r0, r6
 8006958:	4601      	mov	r1, r0
 800695a:	4632      	mov	r2, r6
 800695c:	4640      	mov	r0, r8
 800695e:	f000 f815 	bl	800698c <memcpy>
 8006962:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006966:	f8c4 8000 	str.w	r8, [r4]
 800696a:	e7e9      	b.n	8006940 <__submore+0x44>

0800696c <__retarget_lock_acquire_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_release_recursive>:
 800696e:	4770      	bx	lr

08006970 <memchr>:
 8006970:	4603      	mov	r3, r0
 8006972:	b510      	push	{r4, lr}
 8006974:	b2c9      	uxtb	r1, r1
 8006976:	4402      	add	r2, r0
 8006978:	4293      	cmp	r3, r2
 800697a:	4618      	mov	r0, r3
 800697c:	d101      	bne.n	8006982 <memchr+0x12>
 800697e:	2000      	movs	r0, #0
 8006980:	e003      	b.n	800698a <memchr+0x1a>
 8006982:	7804      	ldrb	r4, [r0, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	428c      	cmp	r4, r1
 8006988:	d1f6      	bne.n	8006978 <memchr+0x8>
 800698a:	bd10      	pop	{r4, pc}

0800698c <memcpy>:
 800698c:	440a      	add	r2, r1
 800698e:	4291      	cmp	r1, r2
 8006990:	f100 33ff 	add.w	r3, r0, #4294967295
 8006994:	d100      	bne.n	8006998 <memcpy+0xc>
 8006996:	4770      	bx	lr
 8006998:	b510      	push	{r4, lr}
 800699a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699e:	4291      	cmp	r1, r2
 80069a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a4:	d1f9      	bne.n	800699a <memcpy+0xe>
 80069a6:	bd10      	pop	{r4, pc}

080069a8 <_free_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4605      	mov	r5, r0
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d043      	beq.n	8006a38 <_free_r+0x90>
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f0c      	subs	r4, r1, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfb8      	it	lt
 80069ba:	18e4      	addlt	r4, r4, r3
 80069bc:	f000 f8d0 	bl	8006b60 <__malloc_lock>
 80069c0:	4a1e      	ldr	r2, [pc, #120]	; (8006a3c <_free_r+0x94>)
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	4610      	mov	r0, r2
 80069c6:	b933      	cbnz	r3, 80069d6 <_free_r+0x2e>
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	6014      	str	r4, [r2, #0]
 80069cc:	4628      	mov	r0, r5
 80069ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d2:	f000 b8cb 	b.w	8006b6c <__malloc_unlock>
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	d90a      	bls.n	80069f0 <_free_r+0x48>
 80069da:	6821      	ldr	r1, [r4, #0]
 80069dc:	1862      	adds	r2, r4, r1
 80069de:	4293      	cmp	r3, r2
 80069e0:	bf01      	itttt	eq
 80069e2:	681a      	ldreq	r2, [r3, #0]
 80069e4:	685b      	ldreq	r3, [r3, #4]
 80069e6:	1852      	addeq	r2, r2, r1
 80069e8:	6022      	streq	r2, [r4, #0]
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	6004      	str	r4, [r0, #0]
 80069ee:	e7ed      	b.n	80069cc <_free_r+0x24>
 80069f0:	461a      	mov	r2, r3
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	b10b      	cbz	r3, 80069fa <_free_r+0x52>
 80069f6:	42a3      	cmp	r3, r4
 80069f8:	d9fa      	bls.n	80069f0 <_free_r+0x48>
 80069fa:	6811      	ldr	r1, [r2, #0]
 80069fc:	1850      	adds	r0, r2, r1
 80069fe:	42a0      	cmp	r0, r4
 8006a00:	d10b      	bne.n	8006a1a <_free_r+0x72>
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	4401      	add	r1, r0
 8006a06:	1850      	adds	r0, r2, r1
 8006a08:	4283      	cmp	r3, r0
 8006a0a:	6011      	str	r1, [r2, #0]
 8006a0c:	d1de      	bne.n	80069cc <_free_r+0x24>
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4401      	add	r1, r0
 8006a14:	6011      	str	r1, [r2, #0]
 8006a16:	6053      	str	r3, [r2, #4]
 8006a18:	e7d8      	b.n	80069cc <_free_r+0x24>
 8006a1a:	d902      	bls.n	8006a22 <_free_r+0x7a>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	602b      	str	r3, [r5, #0]
 8006a20:	e7d4      	b.n	80069cc <_free_r+0x24>
 8006a22:	6820      	ldr	r0, [r4, #0]
 8006a24:	1821      	adds	r1, r4, r0
 8006a26:	428b      	cmp	r3, r1
 8006a28:	bf01      	itttt	eq
 8006a2a:	6819      	ldreq	r1, [r3, #0]
 8006a2c:	685b      	ldreq	r3, [r3, #4]
 8006a2e:	1809      	addeq	r1, r1, r0
 8006a30:	6021      	streq	r1, [r4, #0]
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	6054      	str	r4, [r2, #4]
 8006a36:	e7c9      	b.n	80069cc <_free_r+0x24>
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200000d0 	.word	0x200000d0

08006a40 <_malloc_r>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	1ccd      	adds	r5, r1, #3
 8006a44:	f025 0503 	bic.w	r5, r5, #3
 8006a48:	3508      	adds	r5, #8
 8006a4a:	2d0c      	cmp	r5, #12
 8006a4c:	bf38      	it	cc
 8006a4e:	250c      	movcc	r5, #12
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	4606      	mov	r6, r0
 8006a54:	db01      	blt.n	8006a5a <_malloc_r+0x1a>
 8006a56:	42a9      	cmp	r1, r5
 8006a58:	d903      	bls.n	8006a62 <_malloc_r+0x22>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	6033      	str	r3, [r6, #0]
 8006a5e:	2000      	movs	r0, #0
 8006a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a62:	f000 f87d 	bl	8006b60 <__malloc_lock>
 8006a66:	4921      	ldr	r1, [pc, #132]	; (8006aec <_malloc_r+0xac>)
 8006a68:	680a      	ldr	r2, [r1, #0]
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	b99c      	cbnz	r4, 8006a96 <_malloc_r+0x56>
 8006a6e:	4f20      	ldr	r7, [pc, #128]	; (8006af0 <_malloc_r+0xb0>)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	b923      	cbnz	r3, 8006a7e <_malloc_r+0x3e>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4630      	mov	r0, r6
 8006a78:	f000 f862 	bl	8006b40 <_sbrk_r>
 8006a7c:	6038      	str	r0, [r7, #0]
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4630      	mov	r0, r6
 8006a82:	f000 f85d 	bl	8006b40 <_sbrk_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d123      	bne.n	8006ad2 <_malloc_r+0x92>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	6033      	str	r3, [r6, #0]
 8006a90:	f000 f86c 	bl	8006b6c <__malloc_unlock>
 8006a94:	e7e3      	b.n	8006a5e <_malloc_r+0x1e>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	1b5b      	subs	r3, r3, r5
 8006a9a:	d417      	bmi.n	8006acc <_malloc_r+0x8c>
 8006a9c:	2b0b      	cmp	r3, #11
 8006a9e:	d903      	bls.n	8006aa8 <_malloc_r+0x68>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	441c      	add	r4, r3
 8006aa4:	6025      	str	r5, [r4, #0]
 8006aa6:	e004      	b.n	8006ab2 <_malloc_r+0x72>
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	42a2      	cmp	r2, r4
 8006aac:	bf0c      	ite	eq
 8006aae:	600b      	streq	r3, [r1, #0]
 8006ab0:	6053      	strne	r3, [r2, #4]
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f000 f85a 	bl	8006b6c <__malloc_unlock>
 8006ab8:	f104 000b 	add.w	r0, r4, #11
 8006abc:	1d23      	adds	r3, r4, #4
 8006abe:	f020 0007 	bic.w	r0, r0, #7
 8006ac2:	1ac2      	subs	r2, r0, r3
 8006ac4:	d0cc      	beq.n	8006a60 <_malloc_r+0x20>
 8006ac6:	1a1b      	subs	r3, r3, r0
 8006ac8:	50a3      	str	r3, [r4, r2]
 8006aca:	e7c9      	b.n	8006a60 <_malloc_r+0x20>
 8006acc:	4622      	mov	r2, r4
 8006ace:	6864      	ldr	r4, [r4, #4]
 8006ad0:	e7cc      	b.n	8006a6c <_malloc_r+0x2c>
 8006ad2:	1cc4      	adds	r4, r0, #3
 8006ad4:	f024 0403 	bic.w	r4, r4, #3
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d0e3      	beq.n	8006aa4 <_malloc_r+0x64>
 8006adc:	1a21      	subs	r1, r4, r0
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 f82e 	bl	8006b40 <_sbrk_r>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d1dd      	bne.n	8006aa4 <_malloc_r+0x64>
 8006ae8:	e7cf      	b.n	8006a8a <_malloc_r+0x4a>
 8006aea:	bf00      	nop
 8006aec:	200000d0 	.word	0x200000d0
 8006af0:	200000d4 	.word	0x200000d4

08006af4 <_realloc_r>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	4607      	mov	r7, r0
 8006af8:	4614      	mov	r4, r2
 8006afa:	460e      	mov	r6, r1
 8006afc:	b921      	cbnz	r1, 8006b08 <_realloc_r+0x14>
 8006afe:	4611      	mov	r1, r2
 8006b00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b04:	f7ff bf9c 	b.w	8006a40 <_malloc_r>
 8006b08:	b922      	cbnz	r2, 8006b14 <_realloc_r+0x20>
 8006b0a:	f7ff ff4d 	bl	80069a8 <_free_r>
 8006b0e:	4625      	mov	r5, r4
 8006b10:	4628      	mov	r0, r5
 8006b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b14:	f000 f830 	bl	8006b78 <_malloc_usable_size_r>
 8006b18:	42a0      	cmp	r0, r4
 8006b1a:	d20f      	bcs.n	8006b3c <_realloc_r+0x48>
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f7ff ff8e 	bl	8006a40 <_malloc_r>
 8006b24:	4605      	mov	r5, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0f2      	beq.n	8006b10 <_realloc_r+0x1c>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	f7ff ff2d 	bl	800698c <memcpy>
 8006b32:	4631      	mov	r1, r6
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ff37 	bl	80069a8 <_free_r>
 8006b3a:	e7e9      	b.n	8006b10 <_realloc_r+0x1c>
 8006b3c:	4635      	mov	r5, r6
 8006b3e:	e7e7      	b.n	8006b10 <_realloc_r+0x1c>

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	2300      	movs	r3, #0
 8006b44:	4d05      	ldr	r5, [pc, #20]	; (8006b5c <_sbrk_r+0x1c>)
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa fb88 	bl	8001260 <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20001068 	.word	0x20001068

08006b60 <__malloc_lock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_lock+0x8>)
 8006b62:	f7ff bf03 	b.w	800696c <__retarget_lock_acquire_recursive>
 8006b66:	bf00      	nop
 8006b68:	20001070 	.word	0x20001070

08006b6c <__malloc_unlock>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__malloc_unlock+0x8>)
 8006b6e:	f7ff befe 	b.w	800696e <__retarget_lock_release_recursive>
 8006b72:	bf00      	nop
 8006b74:	20001070 	.word	0x20001070

08006b78 <_malloc_usable_size_r>:
 8006b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7c:	1f18      	subs	r0, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfbc      	itt	lt
 8006b82:	580b      	ldrlt	r3, [r1, r0]
 8006b84:	18c0      	addlt	r0, r0, r3
 8006b86:	4770      	bx	lr

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
