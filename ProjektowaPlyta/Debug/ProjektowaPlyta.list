
ProjektowaPlyta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004660  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae4  08004ae4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae4  08004ae4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae4  08004ae4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae4  08004ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000078  08004b64  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  08004b64  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8e1  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a6  00000000  00000000  0002c982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002f698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018291  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d976  00000000  00000000  000484c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5f7  00000000  00000000  00055e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e142e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000e1484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004754 	.word	0x08004754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004754 	.word	0x08004754

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b2d      	ldr	r3, [pc, #180]	; (800023c <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a2c      	ldr	r2, [pc, #176]	; (800023c <MX_GPIO_Init+0xcc>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b2a      	ldr	r3, [pc, #168]	; (800023c <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b27      	ldr	r3, [pc, #156]	; (800023c <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a26      	ldr	r2, [pc, #152]	; (800023c <MX_GPIO_Init+0xcc>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b24      	ldr	r3, [pc, #144]	; (800023c <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b21      	ldr	r3, [pc, #132]	; (800023c <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a20      	ldr	r2, [pc, #128]	; (800023c <MX_GPIO_Init+0xcc>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b1e      	ldr	r3, [pc, #120]	; (800023c <MX_GPIO_Init+0xcc>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b1b      	ldr	r3, [pc, #108]	; (800023c <MX_GPIO_Init+0xcc>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a1a      	ldr	r2, [pc, #104]	; (800023c <MX_GPIO_Init+0xcc>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_GPIO_Init+0xcc>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2120      	movs	r1, #32
 80001e8:	4815      	ldr	r0, [pc, #84]	; (8000240 <MX_GPIO_Init+0xd0>)
 80001ea:	f001 f947 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <MX_GPIO_Init+0xd4>)
 80001f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	4811      	ldr	r0, [pc, #68]	; (8000248 <MX_GPIO_Init+0xd8>)
 8000204:	f000 ffb6 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000208:	2320      	movs	r3, #32
 800020a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	2301      	movs	r3, #1
 800020e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000214:	2302      	movs	r3, #2
 8000216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000218:	f107 0310 	add.w	r3, r7, #16
 800021c:	4619      	mov	r1, r3
 800021e:	4808      	ldr	r0, [pc, #32]	; (8000240 <MX_GPIO_Init+0xd0>)
 8000220:	f000 ffa8 	bl	8001174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	2028      	movs	r0, #40	; 0x28
 800022a:	f000 febc 	bl	8000fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f000 fed5 	bl	8000fde <HAL_NVIC_EnableIRQ>

}
 8000234:	bf00      	nop
 8000236:	3720      	adds	r7, #32
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800
 8000244:	10110000 	.word	0x10110000
 8000248:	40011000 	.word	0x40011000

0800024c <get_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t get_char(){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(emptyRX != busyRX){
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <get_char+0x48>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b10      	ldr	r3, [pc, #64]	; (8000298 <get_char+0x4c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d013      	beq.n	8000286 <get_char+0x3a>
		tmp = Buf_RX[busyRX];
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <get_char+0x4c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0e      	ldr	r2, [pc, #56]	; (800029c <get_char+0x50>)
 8000264:	5cd3      	ldrb	r3, [r2, r3]
 8000266:	71fb      	strb	r3, [r7, #7]
		busyRX++;
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <get_char+0x4c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <get_char+0x4c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(busyRX >= BUF_RX_LEN){
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <get_char+0x4c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800027a:	db02      	blt.n	8000282 <get_char+0x36>
			busyRX=0;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <get_char+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		}

		return tmp;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	e000      	b.n	8000288 <get_char+0x3c>
	}
	else{
		return 0;
 8000286:	2300      	movs	r3, #0
	}
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	2000009c 	.word	0x2000009c
 8000298:	200000a0 	.word	0x200000a0
 800029c:	200004b4 	.word	0x200004b4

080002a0 <fsend>:
void fsend(char* format, ...){
 80002a0:	b40f      	push	{r0, r1, r2, r3}
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b0a4      	sub	sp, #144	; 0x90
 80002a6:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int pid;
	va_list arglist;
	va_start(arglist, format);
 80002a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002ac:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs, format, arglist);
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 f991 	bl	80035e0 <vsiprintf>
	va_end(arglist);
	pid = emptyTX;
 80002be:	4b2f      	ldr	r3, [pc, #188]	; (800037c <fsend+0xdc>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80002ca:	e016      	b.n	80002fa <fsend+0x5a>
		Buf_TX[pid] = tmp_rs[i];
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80002d6:	440a      	add	r2, r1
 80002d8:	7811      	ldrb	r1, [r2, #0]
 80002da:	4a29      	ldr	r2, [pc, #164]	; (8000380 <fsend+0xe0>)
 80002dc:	54d1      	strb	r1, [r2, r3]
		pid++;
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	3301      	adds	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
		if(pid >= BUF_TX_LEN){
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002ea:	db01      	blt.n	80002f0 <fsend+0x50>
			pid = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < strlen(tmp_rs); i++){
 80002f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80002f4:	3301      	adds	r3, #1
 80002f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff2e 	bl	8000160 <strlen>
 8000304:	4602      	mov	r2, r0
 8000306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800030a:	429a      	cmp	r2, r3
 800030c:	d8de      	bhi.n	80002cc <fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030e:	b672      	cpsid	i
}
 8000310:	bf00      	nop
		}
	}
	__disable_irq();
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <fsend+0xdc>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <fsend+0xe4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	429a      	cmp	r2, r3
 800031c:	d122      	bne.n	8000364 <fsend+0xc4>
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <fsend+0xe8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000328:	2b80      	cmp	r3, #128	; 0x80
 800032a:	d11b      	bne.n	8000364 <fsend+0xc4>
		emptyTX = pid;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <fsend+0xdc>)
 8000330:	6013      	str	r3, [r2, #0]
		uint8_t tmp = Buf_TX[busyTX];
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <fsend+0xe4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <fsend+0xe0>)
 8000338:	5cd3      	ldrb	r3, [r2, r3]
 800033a:	70fb      	strb	r3, [r7, #3]
		busyTX++;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <fsend+0xe4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	4a10      	ldr	r2, [pc, #64]	; (8000384 <fsend+0xe4>)
 8000344:	6013      	str	r3, [r2, #0]
		if(busyTX >= BUF_TX_LEN)
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <fsend+0xe4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800034e:	db02      	blt.n	8000356 <fsend+0xb6>
			busyTX = 0;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <fsend+0xe4>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000356:	1cfb      	adds	r3, r7, #3
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <fsend+0xe8>)
 800035e:	f002 fc81 	bl	8002c64 <HAL_UART_Transmit_IT>
	if((emptyTX == busyTX) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8000362:	e002      	b.n	800036a <fsend+0xca>
	}
	else{
		emptyTX = pid;
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <fsend+0xdc>)
 8000368:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800036a:	b662      	cpsie	i
}
 800036c:	bf00      	nop
	}
	__enable_irq();
}
 800036e:	bf00      	nop
 8000370:	3790      	adds	r7, #144	; 0x90
 8000372:	46bd      	mov	sp, r7
 8000374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000378:	b004      	add	sp, #16
 800037a:	4770      	bx	lr
 800037c:	20000094 	.word	0x20000094
 8000380:	200000b4 	.word	0x200000b4
 8000384:	20000098 	.word	0x20000098
 8000388:	2000094c 	.word	0x2000094c

0800038c <doner>:

void doner(char *ord){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

	if (strcmp("FCHKL;", ord) == 0){
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	483b      	ldr	r0, [pc, #236]	; (8000484 <doner+0xf8>)
 8000398:	f7ff fed8 	bl	800014c <strcmp>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d103      	bne.n	80003aa <doner+0x1e>
		fsend("Ilosc impulsow od zbocza narastajacego do opadajacego wynosi (liczba).\r\n");
 80003a2:	4839      	ldr	r0, [pc, #228]	; (8000488 <doner+0xfc>)
 80003a4:	f7ff ff7c 	bl	80002a0 <fsend>
	}
	else{
		fsend("WRCMD\r\n");
	}

}
 80003a8:	e068      	b.n	800047c <doner+0xf0>
	else if(strcmp("FCHKH;", ord) == 0){
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4837      	ldr	r0, [pc, #220]	; (800048c <doner+0x100>)
 80003ae:	f7ff fecd 	bl	800014c <strcmp>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d103      	bne.n	80003c0 <doner+0x34>
		fsend("Ilosc impulsow wyslanych w zadanym czasie wynosi (liczba).\r\n");
 80003b8:	4835      	ldr	r0, [pc, #212]	; (8000490 <doner+0x104>)
 80003ba:	f7ff ff71 	bl	80002a0 <fsend>
}
 80003be:	e05d      	b.n	800047c <doner+0xf0>
	else if(strcmp("FSTART;", ord) == 0){
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	4834      	ldr	r0, [pc, #208]	; (8000494 <doner+0x108>)
 80003c4:	f7ff fec2 	bl	800014c <strcmp>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d103      	bne.n	80003d6 <doner+0x4a>
		fsend("Rozpoczeto wysylanie impulsow \r\n");
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <doner+0x10c>)
 80003d0:	f7ff ff66 	bl	80002a0 <fsend>
}
 80003d4:	e052      	b.n	800047c <doner+0xf0>
	else if(strcmp("FSTAT;", ord) == 0){
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	4830      	ldr	r0, [pc, #192]	; (800049c <doner+0x110>)
 80003da:	f7ff feb7 	bl	800014c <strcmp>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d103      	bne.n	80003ec <doner+0x60>
		fsend("Wypelnienie (wartosc FSET) Czas (wartosc FTIME)\r\n");
 80003e4:	482e      	ldr	r0, [pc, #184]	; (80004a0 <doner+0x114>)
 80003e6:	f7ff ff5b 	bl	80002a0 <fsend>
}
 80003ea:	e047      	b.n	800047c <doner+0xf0>
	else if(sscanf(ord, "FTIME%d;", &czas) == 1 || strcmp("FTIME;", ord) == 0){
 80003ec:	4a2d      	ldr	r2, [pc, #180]	; (80004a4 <doner+0x118>)
 80003ee:	492e      	ldr	r1, [pc, #184]	; (80004a8 <doner+0x11c>)
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f003 f8b3 	bl	800355c <siscanf>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d006      	beq.n	800040a <doner+0x7e>
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	482b      	ldr	r0, [pc, #172]	; (80004ac <doner+0x120>)
 8000400:	f7ff fea4 	bl	800014c <strcmp>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d112      	bne.n	8000430 <doner+0xa4>
		if(czas>=0 && czas<=120){
 800040a:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <doner+0x118>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	db0a      	blt.n	8000428 <doner+0x9c>
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <doner+0x118>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b78      	cmp	r3, #120	; 0x78
 8000418:	dc06      	bgt.n	8000428 <doner+0x9c>
			fsend("„Ustawiono czas na %d sekund.\r\n",czas);
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <doner+0x118>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4619      	mov	r1, r3
 8000420:	4823      	ldr	r0, [pc, #140]	; (80004b0 <doner+0x124>)
 8000422:	f7ff ff3d 	bl	80002a0 <fsend>
		if(czas>=0 && czas<=120){
 8000426:	e029      	b.n	800047c <doner+0xf0>
			fsend("WRNUM\r\n");
 8000428:	4822      	ldr	r0, [pc, #136]	; (80004b4 <doner+0x128>)
 800042a:	f7ff ff39 	bl	80002a0 <fsend>
		if(czas>=0 && czas<=120){
 800042e:	e025      	b.n	800047c <doner+0xf0>
	else if(sscanf(ord, "FSET%d;", &wart) == 1 || strcmp("FSET;", ord) == 0){
 8000430:	4a21      	ldr	r2, [pc, #132]	; (80004b8 <doner+0x12c>)
 8000432:	4922      	ldr	r1, [pc, #136]	; (80004bc <doner+0x130>)
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f003 f891 	bl	800355c <siscanf>
 800043a:	4603      	mov	r3, r0
 800043c:	2b01      	cmp	r3, #1
 800043e:	d006      	beq.n	800044e <doner+0xc2>
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	481f      	ldr	r0, [pc, #124]	; (80004c0 <doner+0x134>)
 8000444:	f7ff fe82 	bl	800014c <strcmp>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d112      	bne.n	8000474 <doner+0xe8>
		if(wart>=0 && wart<=100){
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <doner+0x12c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	db0a      	blt.n	800046c <doner+0xe0>
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <doner+0x12c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b64      	cmp	r3, #100	; 0x64
 800045c:	dc06      	bgt.n	800046c <doner+0xe0>
			fsend("„Ustawiono wypelnienie na %d %.\r\n",wart);
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <doner+0x12c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <doner+0x138>)
 8000466:	f7ff ff1b 	bl	80002a0 <fsend>
		if(wart>=0 && wart<=100){
 800046a:	e007      	b.n	800047c <doner+0xf0>
			fsend("WRNUM\r\n");
 800046c:	4811      	ldr	r0, [pc, #68]	; (80004b4 <doner+0x128>)
 800046e:	f7ff ff17 	bl	80002a0 <fsend>
		if(wart>=0 && wart<=100){
 8000472:	e003      	b.n	800047c <doner+0xf0>
		fsend("WRCMD\r\n");
 8000474:	4814      	ldr	r0, [pc, #80]	; (80004c8 <doner+0x13c>)
 8000476:	f7ff ff13 	bl	80002a0 <fsend>
}
 800047a:	e7ff      	b.n	800047c <doner+0xf0>
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	0800476c 	.word	0x0800476c
 8000488:	08004774 	.word	0x08004774
 800048c:	080047c0 	.word	0x080047c0
 8000490:	080047c8 	.word	0x080047c8
 8000494:	08004808 	.word	0x08004808
 8000498:	08004810 	.word	0x08004810
 800049c:	08004834 	.word	0x08004834
 80004a0:	0800483c 	.word	0x0800483c
 80004a4:	20000000 	.word	0x20000000
 80004a8:	08004870 	.word	0x08004870
 80004ac:	0800487c 	.word	0x0800487c
 80004b0:	08004884 	.word	0x08004884
 80004b4:	080048a8 	.word	0x080048a8
 80004b8:	20000004 	.word	0x20000004
 80004bc:	080048b0 	.word	0x080048b0
 80004c0:	080048b8 	.word	0x080048b8
 80004c4:	080048c0 	.word	0x080048c0
 80004c8:	080048e4 	.word	0x080048e4

080004cc <get_line>:

void get_line(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

	if(statframe==0)
 80004d2:	4b45      	ldr	r3, [pc, #276]	; (80005e8 <get_line+0x11c>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d111      	bne.n	8000500 <get_line+0x34>
	{
		char temp = get_char();
 80004dc:	f7ff feb6 	bl	800024c <get_char>
 80004e0:	4603      	mov	r3, r0
 80004e2:	70bb      	strb	r3, [r7, #2]
		bfr[pidx]=temp;
 80004e4:	4b41      	ldr	r3, [pc, #260]	; (80005ec <get_line+0x120>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	4a40      	ldr	r2, [pc, #256]	; (80005f0 <get_line+0x124>)
 80004ee:	78bb      	ldrb	r3, [r7, #2]
 80004f0:	5453      	strb	r3, [r2, r1]

		if(temp == 0x05)
 80004f2:	78bb      	ldrb	r3, [r7, #2]
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	d172      	bne.n	80005de <get_line+0x112>
		{
			statframe=1;
 80004f8:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <get_line+0x11c>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
			statframe=0;


		}
	}
}
 80004fe:	e06e      	b.n	80005de <get_line+0x112>
	else if(statframe==1){
 8000500:	4b39      	ldr	r3, [pc, #228]	; (80005e8 <get_line+0x11c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b01      	cmp	r3, #1
 8000508:	d169      	bne.n	80005de <get_line+0x112>
		pidx++;
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <get_line+0x120>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b29b      	uxth	r3, r3
 8000510:	3301      	adds	r3, #1
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b35      	ldr	r3, [pc, #212]	; (80005ec <get_line+0x120>)
 8000516:	801a      	strh	r2, [r3, #0]
		if(pidx > 261){
 8000518:	4b34      	ldr	r3, [pc, #208]	; (80005ec <get_line+0x120>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000522:	d305      	bcc.n	8000530 <get_line+0x64>
			pidx=0;
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <get_line+0x120>)
 8000526:	2200      	movs	r2, #0
 8000528:	801a      	strh	r2, [r3, #0]
			statframe=0;
 800052a:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <get_line+0x11c>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
		char temp = get_char();
 8000530:	f7ff fe8c 	bl	800024c <get_char>
 8000534:	4603      	mov	r3, r0
 8000536:	70fb      	strb	r3, [r7, #3]
		bfr[pidx]=temp;
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <get_line+0x120>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <get_line+0x124>)
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	5453      	strb	r3, [r2, r1]
		if(temp == 0x05){
 8000546:	78fb      	ldrb	r3, [r7, #3]
 8000548:	2b05      	cmp	r3, #5
 800054a:	d102      	bne.n	8000552 <get_line+0x86>
			pidx=0;
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <get_line+0x120>)
 800054e:	2200      	movs	r2, #0
 8000550:	801a      	strh	r2, [r3, #0]
		if(temp == 0x04){
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d142      	bne.n	80005de <get_line+0x112>
			fsend(bfr);
 8000558:	4825      	ldr	r0, [pc, #148]	; (80005f0 <get_line+0x124>)
 800055a:	f7ff fea1 	bl	80002a0 <fsend>
			fsend("\r\n");
 800055e:	4825      	ldr	r0, [pc, #148]	; (80005f4 <get_line+0x128>)
 8000560:	f7ff fe9e 	bl	80002a0 <fsend>
			int poi=1;
 8000564:	2301      	movs	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
			for(int i=1;i<=pidx;i++){
 8000568:	2301      	movs	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	e02a      	b.n	80005c4 <get_line+0xf8>
				if(bfr[i] == ';'){
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <get_line+0x124>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b3b      	cmp	r3, #59	; 0x3b
 8000578:	d121      	bne.n	80005be <get_line+0xf2>
					memset(&order[0],0,sizeof(order));
 800057a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057e:	2100      	movs	r1, #0
 8000580:	481d      	ldr	r0, [pc, #116]	; (80005f8 <get_line+0x12c>)
 8000582:	f002 ffe3 	bl	800354c <memset>
					ordpidx=0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
					while(poi<=i){
 800058a:	e00e      	b.n	80005aa <get_line+0xde>
						order[ordpidx]=bfr[poi];
 800058c:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <get_line+0x124>)
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4413      	add	r3, r2
 8000592:	7819      	ldrb	r1, [r3, #0]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <get_line+0x12c>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	460a      	mov	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
						ordpidx++;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
						poi++;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
					while(poi<=i){
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	ddec      	ble.n	800058c <get_line+0xc0>
					ordpidx=i+1;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
					doner(order);
 80005b8:	480f      	ldr	r0, [pc, #60]	; (80005f8 <get_line+0x12c>)
 80005ba:	f7ff fee7 	bl	800038c <doner>
			for(int i=1;i<=pidx;i++){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3301      	adds	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <get_line+0x120>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4293      	cmp	r3, r2
 80005d0:	ddcd      	ble.n	800056e <get_line+0xa2>
			pidx=0;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <get_line+0x120>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	801a      	strh	r2, [r3, #0]
			statframe=0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <get_line+0x11c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000a6 	.word	0x200000a6
 80005ec:	200000a4 	.word	0x200000a4
 80005f0:	200007b4 	.word	0x200007b4
 80005f4:	080048ec 	.word	0x080048ec
 80005f8:	200006b4 	.word	0x200006b4

080005fc <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <HAL_UART_TxCpltCallback+0x58>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d11e      	bne.n	800064a <HAL_UART_TxCpltCallback+0x4e>
		if(emptyTX != busyTX){
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_UART_TxCpltCallback+0x5c>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_UART_TxCpltCallback+0x60>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d018      	beq.n	800064a <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp = Buf_TX[busyTX];
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_UART_TxCpltCallback+0x60>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_UART_TxCpltCallback+0x64>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	73fb      	strb	r3, [r7, #15]
			busyTX++;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_UART_TxCpltCallback+0x60>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <HAL_UART_TxCpltCallback+0x60>)
 800062a:	6013      	str	r3, [r2, #0]
			if(busyTX >= BUF_TX_LEN){
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_UART_TxCpltCallback+0x60>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000634:	db02      	blt.n	800063c <HAL_UART_TxCpltCallback+0x40>
				busyTX = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_UART_TxCpltCallback+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
			}
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800063c:	f107 030f 	add.w	r3, r7, #15
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <HAL_UART_TxCpltCallback+0x58>)
 8000646:	f002 fb0d 	bl	8002c64 <HAL_UART_Transmit_IT>
		}
	}
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000094c 	.word	0x2000094c
 8000658:	20000094 	.word	0x20000094
 800065c:	20000098 	.word	0x20000098
 8000660:	200000b4 	.word	0x200000b4

08000664 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	if (huart == &huart2){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_UART_RxCpltCallback+0x44>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d115      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0x3c>
		emptyRX++;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_UART_RxCpltCallback+0x48>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_UART_RxCpltCallback+0x48>)
 800067c:	6013      	str	r3, [r2, #0]
		if(emptyRX >= BUF_RX_LEN){
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_UART_RxCpltCallback+0x48>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000686:	db02      	blt.n	800068e <HAL_UART_RxCpltCallback+0x2a>
			emptyRX = 0;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_UART_RxCpltCallback+0x48>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,&Buf_RX[emptyRX], 1);
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HAL_UART_RxCpltCallback+0x48>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_UART_RxCpltCallback+0x4c>)
 8000694:	4413      	add	r3, r2
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <HAL_UART_RxCpltCallback+0x44>)
 800069c:	f002 fb26 	bl	8002cec <HAL_UART_Receive_IT>
	}
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000094c 	.word	0x2000094c
 80006ac:	2000009c 	.word	0x2000009c
 80006b0:	200004b4 	.word	0x200004b4

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fb3c 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f824 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff fd56 	bl	8000170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 faa0 	bl	8000c08 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006c8:	f000 f90a 	bl	80008e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006cc:	f000 f9a8 	bl	8000a20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  fsend("Hello user\r\n");
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <main+0x40>)
 80006d2:	f7ff fde5 	bl	80002a0 <fsend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&Buf_RX[0], 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <main+0x44>)
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <main+0x48>)
 80006dc:	f002 fb06 	bl	8002cec <HAL_UART_Receive_IT>

  while (1) {

	  if(busyRX!=emptyRX){
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <main+0x4c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <main+0x50>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d0f9      	beq.n	80006e0 <main+0x2c>
		  get_line();
 80006ec:	f7ff feee 	bl	80004cc <get_line>
	  if(busyRX!=emptyRX){
 80006f0:	e7f6      	b.n	80006e0 <main+0x2c>
 80006f2:	bf00      	nop
 80006f4:	080048f0 	.word	0x080048f0
 80006f8:	200004b4 	.word	0x200004b4
 80006fc:	2000094c 	.word	0x2000094c
 8000700:	200000a0 	.word	0x200000a0
 8000704:	2000009c 	.word	0x2000009c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 ff18 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000732:	2310      	movs	r3, #16
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800073a:	2300      	movs	r3, #0
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800073e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0318 	add.w	r3, r7, #24
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fed1 	bl	80014f0 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000754:	f000 f819 	bl	800078a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f93c 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800077e:	f000 f804 	bl	800078a <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3740      	adds	r7, #64	; 0x40
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 800078e:	e7fe      	b.n	800078e <Error_Handler+0x4>

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_MspInit+0x5c>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_MspInit+0x5c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_MspInit+0x5c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x5c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x5c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x5c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_MspInit+0x60>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_MspInit+0x60>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010000 	.word	0x40010000

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 fac1 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <USART2_IRQHandler+0x10>)
 800084a:	f002 fa7f 	bl	8002d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000094c 	.word	0x2000094c

08000858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800085c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000860:	f000 fe24 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f002 fe2e 	bl	80034f8 <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20005000 	.word	0x20005000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	200000a8 	.word	0x200000a8
 80008d0:	200009a8 	.word	0x200009a8

080008d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2220      	movs	r2, #32
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fe17 	bl	800354c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000920:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <MX_TIM1_Init+0x13c>)
 8000922:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000924:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000926:	22b3      	movs	r2, #179	; 0xb3
 8000928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <MX_TIM1_Init+0x138>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000930:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000936:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <MX_TIM1_Init+0x138>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <MX_TIM1_Init+0x138>)
 800094c:	f001 f9ea 	bl	8001d24 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000956:	f7ff ff18 	bl	800078a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000964:	4619      	mov	r1, r3
 8000966:	482c      	ldr	r0, [pc, #176]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000968:	f001 fc2e 	bl	80021c8 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000972:	f7ff ff0a 	bl	800078a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000976:	4828      	ldr	r0, [pc, #160]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000978:	f001 fa23 	bl	8001dc2 <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000982:	f7ff ff02 	bl	800078a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000992:	4619      	mov	r1, r3
 8000994:	4820      	ldr	r0, [pc, #128]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000996:	f002 f869 	bl	8002a6c <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009a0:	f7ff fef3 	bl	800078a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_TIM1_Init+0x138>)
 80009ca:	f001 fb3f 	bl	800204c <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80009d4:	f7ff fed9 	bl	800078a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_TIM1_Init+0x138>)
 80009fc:	f002 f894 	bl	8002b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a06:	f7ff fec0 	bl	800078a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <MX_TIM1_Init+0x138>)
 8000a0c:	f000 f8c8 	bl	8000ba0 <HAL_TIM_MspPostInit>

}
 8000a10:	bf00      	nop
 8000a12:	3758      	adds	r7, #88	; 0x58
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200008bc 	.word	0x200008bc
 8000a1c:	40012c00 	.word	0x40012c00

08000a20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a54:	2259      	movs	r2, #89	; 0x59
 8000a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a72:	4822      	ldr	r0, [pc, #136]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a74:	f001 f956 	bl	8001d24 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000a7e:	f7ff fe84 	bl	800078a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481b      	ldr	r0, [pc, #108]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000a90:	f001 fb9a 	bl	80021c8 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a9a:	f7ff fe76 	bl	800078a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a9e:	4817      	ldr	r0, [pc, #92]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000aa0:	f001 f9e7 	bl	8001e72 <HAL_TIM_IC_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000aaa:	f7ff fe6e 	bl	800078a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	480f      	ldr	r0, [pc, #60]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000abe:	f001 ffd5 	bl	8002a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000ac8:	f7ff fe5f 	bl	800078a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_TIM2_Init+0xdc>)
 8000ae4:	f001 fa1d 	bl	8001f22 <HAL_TIM_IC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000aee:	f7ff fe4c 	bl	800078a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000904 	.word	0x20000904

08000b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_TIM_Base_MspInit+0x94>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d10c      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b38:	e028      	b.n	8000b8c <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b42:	d123      	bne.n	8000b8c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	61d3      	str	r3, [r2, #28]
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_TIM_Base_MspInit+0x98>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_TIM_Base_MspInit+0x9c>)
 8000b88:	f000 faf4 	bl	8001174 <HAL_GPIO_Init>
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40012c00 	.word	0x40012c00
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800

08000ba0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_TIM_MspPostInit+0x5c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d118      	bne.n	8000bf2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_TIM_MspPostInit+0x60>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_TIM_MspPostInit+0x60>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_TIM_MspPostInit+0x60>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_TIM_MspPostInit+0x64>)
 8000bee:	f000 fac1 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40012c00 	.word	0x40012c00
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010800 	.word	0x40010800

08000c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f001 ffc3 	bl	8002bca <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f7ff fd9e 	bl	800078a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000094c 	.word	0x2000094c
 8000c58:	40004400 	.word	0x40004400

08000c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x80>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d12b      	bne.n	8000cd4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	61d3      	str	r3, [r2, #28]
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cac:	230c      	movs	r3, #12
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cc0:	f000 fa58 	bl	8001174 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2026      	movs	r0, #38	; 0x26
 8000cca:	f000 f96c 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cce:	2026      	movs	r0, #38	; 0x26
 8000cd0:	f000 f985 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0e:	f7ff fde1 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f002 fbf7 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d16:	f7ff fccd 	bl	80006b4 <main>
  bx lr
 8000d1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d24:	08004aec 	.word	0x08004aec
  ldr r2, =_sbss
 8000d28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d2c:	200009a4 	.word	0x200009a4

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f923 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fd1e 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f93b 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f903 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000010 	.word	0x20000010
 8000dbc:	2000000c 	.word	0x2000000c

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000990 	.word	0x20000990

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000990 	.word	0x20000990

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <__NVIC_EnableIRQ+0x34>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff2d 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff42 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff90 	bl	8000ee8 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5f 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff35 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001024:	2b02      	cmp	r3, #2
 8001026:	d008      	beq.n	800103a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2204      	movs	r2, #4
 800102c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e020      	b.n	800107c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 020e 	bic.w	r2, r2, #14
 8001048:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800109a:	2b02      	cmp	r3, #2
 800109c:	d005      	beq.n	80010aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e051      	b.n	800114e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020e 	bic.w	r2, r2, #14
 80010b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_DMA_Abort_IT+0xd0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d029      	beq.n	8001128 <HAL_DMA_Abort_IT+0xa0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <HAL_DMA_Abort_IT+0xd4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d022      	beq.n	8001124 <HAL_DMA_Abort_IT+0x9c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <HAL_DMA_Abort_IT+0xd8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d01a      	beq.n	800111e <HAL_DMA_Abort_IT+0x96>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_DMA_Abort_IT+0xdc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d012      	beq.n	8001118 <HAL_DMA_Abort_IT+0x90>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_DMA_Abort_IT+0xe0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00a      	beq.n	8001112 <HAL_DMA_Abort_IT+0x8a>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_DMA_Abort_IT+0xe4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d102      	bne.n	800110c <HAL_DMA_Abort_IT+0x84>
 8001106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800110a:	e00e      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 800110c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001110:	e00b      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001116:	e008      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	e005      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 800111e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001122:	e002      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001124:	2310      	movs	r3, #16
 8001126:	e000      	b.n	800112a <HAL_DMA_Abort_IT+0xa2>
 8001128:	2301      	movs	r3, #1
 800112a:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_DMA_Abort_IT+0xe8>)
 800112c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    } 
  }
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020008 	.word	0x40020008
 800115c:	4002001c 	.word	0x4002001c
 8001160:	40020030 	.word	0x40020030
 8001164:	40020044 	.word	0x40020044
 8001168:	40020058 	.word	0x40020058
 800116c:	4002006c 	.word	0x4002006c
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b08b      	sub	sp, #44	; 0x2c
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	e169      	b.n	800145c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001188:	2201      	movs	r2, #1
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8158 	bne.w	8001456 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a9a      	ldr	r2, [pc, #616]	; (8001414 <HAL_GPIO_Init+0x2a0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d05e      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011b0:	4a98      	ldr	r2, [pc, #608]	; (8001414 <HAL_GPIO_Init+0x2a0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d875      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011b6:	4a98      	ldr	r2, [pc, #608]	; (8001418 <HAL_GPIO_Init+0x2a4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d058      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011bc:	4a96      	ldr	r2, [pc, #600]	; (8001418 <HAL_GPIO_Init+0x2a4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d86f      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011c2:	4a96      	ldr	r2, [pc, #600]	; (800141c <HAL_GPIO_Init+0x2a8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d052      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011c8:	4a94      	ldr	r2, [pc, #592]	; (800141c <HAL_GPIO_Init+0x2a8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d869      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011ce:	4a94      	ldr	r2, [pc, #592]	; (8001420 <HAL_GPIO_Init+0x2ac>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d04c      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011d4:	4a92      	ldr	r2, [pc, #584]	; (8001420 <HAL_GPIO_Init+0x2ac>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d863      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011da:	4a92      	ldr	r2, [pc, #584]	; (8001424 <HAL_GPIO_Init+0x2b0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d046      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011e0:	4a90      	ldr	r2, [pc, #576]	; (8001424 <HAL_GPIO_Init+0x2b0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d85d      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d82a      	bhi.n	8001240 <HAL_GPIO_Init+0xcc>
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d859      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <HAL_GPIO_Init+0x80>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	0800126f 	.word	0x0800126f
 80011f8:	08001249 	.word	0x08001249
 80011fc:	0800125b 	.word	0x0800125b
 8001200:	0800129d 	.word	0x0800129d
 8001204:	080012a3 	.word	0x080012a3
 8001208:	080012a3 	.word	0x080012a3
 800120c:	080012a3 	.word	0x080012a3
 8001210:	080012a3 	.word	0x080012a3
 8001214:	080012a3 	.word	0x080012a3
 8001218:	080012a3 	.word	0x080012a3
 800121c:	080012a3 	.word	0x080012a3
 8001220:	080012a3 	.word	0x080012a3
 8001224:	080012a3 	.word	0x080012a3
 8001228:	080012a3 	.word	0x080012a3
 800122c:	080012a3 	.word	0x080012a3
 8001230:	080012a3 	.word	0x080012a3
 8001234:	080012a3 	.word	0x080012a3
 8001238:	08001251 	.word	0x08001251
 800123c:	08001265 	.word	0x08001265
 8001240:	4a79      	ldr	r2, [pc, #484]	; (8001428 <HAL_GPIO_Init+0x2b4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001246:	e02c      	b.n	80012a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e029      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	3304      	adds	r3, #4
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e024      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	3308      	adds	r3, #8
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e01f      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	330c      	adds	r3, #12
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e01a      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001276:	2304      	movs	r3, #4
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e013      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d105      	bne.n	8001290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001284:	2308      	movs	r3, #8
 8001286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	611a      	str	r2, [r3, #16]
          break;
 800128e:	e009      	b.n	80012a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	615a      	str	r2, [r3, #20]
          break;
 800129a:	e003      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          break;
 80012a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2bff      	cmp	r3, #255	; 0xff
 80012a8:	d801      	bhi.n	80012ae <HAL_GPIO_Init+0x13a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_Init+0x13e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3304      	adds	r3, #4
 80012b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d802      	bhi.n	80012c0 <HAL_GPIO_Init+0x14c>
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x152>
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	3b08      	subs	r3, #8
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	210f      	movs	r1, #15
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	6a39      	ldr	r1, [r7, #32]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80b1 	beq.w	8001456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f4:	4b4d      	ldr	r3, [pc, #308]	; (800142c <HAL_GPIO_Init+0x2b8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x2b8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b4a      	ldr	r3, [pc, #296]	; (800142c <HAL_GPIO_Init+0x2b8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800130c:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2bc>)
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a40      	ldr	r2, [pc, #256]	; (8001434 <HAL_GPIO_Init+0x2c0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d013      	beq.n	8001360 <HAL_GPIO_Init+0x1ec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3f      	ldr	r2, [pc, #252]	; (8001438 <HAL_GPIO_Init+0x2c4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1e8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3e      	ldr	r2, [pc, #248]	; (800143c <HAL_GPIO_Init+0x2c8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1e4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <HAL_GPIO_Init+0x2cc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1e0>
 8001350:	2303      	movs	r3, #3
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001354:	2304      	movs	r3, #4
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001360:	2300      	movs	r3, #0
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001372:	492f      	ldr	r1, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2bc>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	492c      	ldr	r1, [pc, #176]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4928      	ldr	r1, [pc, #160]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4922      	ldr	r1, [pc, #136]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	491e      	ldr	r1, [pc, #120]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	4918      	ldr	r1, [pc, #96]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4914      	ldr	r1, [pc, #80]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d021      	beq.n	8001448 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	490e      	ldr	r1, [pc, #56]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
 8001410:	e021      	b.n	8001456 <HAL_GPIO_Init+0x2e2>
 8001412:	bf00      	nop
 8001414:	10320000 	.word	0x10320000
 8001418:	10310000 	.word	0x10310000
 800141c:	10220000 	.word	0x10220000
 8001420:	10210000 	.word	0x10210000
 8001424:	10120000 	.word	0x10120000
 8001428:	10110000 	.word	0x10110000
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40011000 	.word	0x40011000
 8001440:	40011400 	.word	0x40011400
 8001444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_GPIO_Init+0x304>)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	43db      	mvns	r3, r3
 8001450:	4909      	ldr	r1, [pc, #36]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001452:	4013      	ands	r3, r2
 8001454:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	f47f ae8e 	bne.w	8001188 <HAL_GPIO_Init+0x14>
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	372c      	adds	r7, #44	; 0x2c
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f806 	bl	80014dc <HAL_GPIO_EXTI_Callback>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e26c      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001510:	4b92      	ldr	r3, [pc, #584]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	d00c      	beq.n	8001536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
 8001528:	4b8c      	ldr	r3, [pc, #560]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06c      	beq.n	800161c <HAL_RCC_OscConfig+0x12c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d168      	bne.n	800161c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e246      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x76>
 8001558:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a7f      	ldr	r2, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e02e      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x98>
 800156e:	4b7b      	ldr	r3, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7a      	ldr	r2, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b78      	ldr	r3, [pc, #480]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0xbc>
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 80015ac:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a67      	ldr	r2, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc0a 	bl	8000de4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fc06 	bl	8000de4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1fa      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe4>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbf6 	bl	8000de4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fbf2 	bl	8000de4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1e6      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x10c>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1ba      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4939      	ldr	r1, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x270>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fbab 	bl	8000de4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fba7 	bl	8000de4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e19b      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4927      	ldr	r1, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_RCC_OscConfig+0x270>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb8a 	bl	8000de4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb86 	bl	8000de4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e17a      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d03a      	beq.n	8001774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d019      	beq.n	800173a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_RCC_OscConfig+0x274>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fb6a 	bl	8000de4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fb66 	bl	8000de4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e15a      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fad8 	bl	8001ce8 <RCC_Delay>
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_RCC_OscConfig+0x274>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fb50 	bl	8000de4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001746:	e00f      	b.n	8001768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fb4c 	bl	8000de4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d908      	bls.n	8001768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e140      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	42420000 	.word	0x42420000
 8001764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b9e      	ldr	r3, [pc, #632]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e9      	bne.n	8001748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a6 	beq.w	80018ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b97      	ldr	r3, [pc, #604]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b94      	ldr	r3, [pc, #592]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a93      	ldr	r2, [pc, #588]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b91      	ldr	r3, [pc, #580]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a8a      	ldr	r2, [pc, #552]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb0d 	bl	8000de4 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fb09 	bl	8000de4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0fd      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x312>
 80017f4:	4b7b      	ldr	r3, [pc, #492]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a7a      	ldr	r2, [pc, #488]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x334>
 800180a:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b73      	ldr	r3, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a72      	ldr	r2, [pc, #456]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x356>
 800182c:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a6c      	ldr	r2, [pc, #432]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fabd 	bl	8000de4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fab9 	bl	8000de4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0ab      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x37e>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff faa7 	bl	8000de4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff faa3 	bl	8000de4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e095      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8081 	beq.w	80019da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d061      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d146      	bne.n	800197a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_OscConfig+0x4fc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa77 	bl	8000de4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fa73 	bl	8000de4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e067      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d108      	bne.n	8001934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	492d      	ldr	r1, [pc, #180]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a19      	ldr	r1, [r3, #32]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	430b      	orrs	r3, r1
 8001946:	4927      	ldr	r1, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x4fc>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fa47 	bl	8000de4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fa43 	bl	8000de4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e037      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x46a>
 8001978:	e02f      	b.n	80019da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_RCC_OscConfig+0x4fc>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fa30 	bl	8000de4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff fa2c 	bl	8000de4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e020      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x498>
 80019a6:	e018      	b.n	80019da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e013      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	42420060 	.word	0x42420060

080019f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0d0      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d910      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4965      	ldr	r1, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d040      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d115      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e073      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e06b      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4936      	ldr	r1, [pc, #216]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f980 	bl	8000de4 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f97c 	bl	8000de4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e053      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d210      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4922      	ldr	r1, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1cc>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8de 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	0800491c 	.word	0x0800491c
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b490      	push	{r4, r7}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bcc:	1d3c      	adds	r4, r7, #4
 8001bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bd4:	f240 2301 	movw	r3, #513	; 0x201
 8001bd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x40>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x46>
 8001c02:	e02d      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c06:	623b      	str	r3, [r7, #32]
      break;
 8001c08:	e02d      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c16:	4413      	add	r3, r2
 8001c18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c5b      	lsrs	r3, r3, #17
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c36:	4413      	add	r3, r2
 8001c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	fb02 f203 	mul.w	r2, r2, r3
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	e004      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	623b      	str	r3, [r7, #32]
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c62:	623b      	str	r3, [r7, #32]
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	6a3b      	ldr	r3, [r7, #32]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc90      	pop	{r4, r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	08004900 	.word	0x08004900
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	007a1200 	.word	0x007a1200
 8001c80:	003d0900 	.word	0x003d0900

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff2 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	0800492c 	.word	0x0800492c

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0adb      	lsrs	r3, r3, #11
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	0800492c 	.word	0x0800492c

08001ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <RCC_Delay+0x34>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <RCC_Delay+0x38>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a5b      	lsrs	r3, r3, #9
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d04:	bf00      	nop
  }
  while (Delay --);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <RCC_Delay+0x1c>
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e041      	b.n	8001dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fed8 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f000 faf4 	bl	8002350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e041      	b.n	8001e58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f839 	bl	8001e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4610      	mov	r0, r2
 8001e02:	f000 faa5 	bl	8002350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e041      	b.n	8001f08 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f839 	bl	8001f10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f000 fa4d 	bl	8002350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_TIM_IC_ConfigChannel+0x1a>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e082      	b.n	8002042 <HAL_TIM_IC_ConfigChannel+0x120>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f000 fbe3 	bl	8002724 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020c 	bic.w	r2, r2, #12
 8001f6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6999      	ldr	r1, [r3, #24]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	619a      	str	r2, [r3, #24]
 8001f80:	e05a      	b.n	8002038 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11c      	bne.n	8001fc2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f000 fc4c 	bl	8002834 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001faa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6999      	ldr	r1, [r3, #24]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	021a      	lsls	r2, r3, #8
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	619a      	str	r2, [r3, #24]
 8001fc0:	e03a      	b.n	8002038 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f000 fc97 	bl	800290a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020c 	bic.w	r2, r2, #12
 8001fea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69d9      	ldr	r1, [r3, #28]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	61da      	str	r2, [r3, #28]
 8001ffe:	e01b      	b.n	8002038 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f000 fcb6 	bl	8002980 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002022:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69d9      	ldr	r1, [r3, #28]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	021a      	lsls	r2, r3, #8
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002062:	2302      	movs	r3, #2
 8002064:	e0ac      	b.n	80021c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	f200 809f 	bhi.w	80021b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	080020b1 	.word	0x080020b1
 8002080:	080021b5 	.word	0x080021b5
 8002084:	080021b5 	.word	0x080021b5
 8002088:	080021b5 	.word	0x080021b5
 800208c:	080020f1 	.word	0x080020f1
 8002090:	080021b5 	.word	0x080021b5
 8002094:	080021b5 	.word	0x080021b5
 8002098:	080021b5 	.word	0x080021b5
 800209c:	08002133 	.word	0x08002133
 80020a0:	080021b5 	.word	0x080021b5
 80020a4:	080021b5 	.word	0x080021b5
 80020a8:	080021b5 	.word	0x080021b5
 80020ac:	08002173 	.word	0x08002173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f9ac 	bl	8002414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0208 	orr.w	r2, r2, #8
 80020ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0204 	bic.w	r2, r2, #4
 80020da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6999      	ldr	r1, [r3, #24]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	619a      	str	r2, [r3, #24]
      break;
 80020ee:	e062      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f9f2 	bl	80024e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6999      	ldr	r1, [r3, #24]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	021a      	lsls	r2, r3, #8
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	619a      	str	r2, [r3, #24]
      break;
 8002130:	e041      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fa3b 	bl	80025b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0208 	orr.w	r2, r2, #8
 800214c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0204 	bic.w	r2, r2, #4
 800215c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69d9      	ldr	r1, [r3, #28]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	61da      	str	r2, [r3, #28]
      break;
 8002170:	e021      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fa85 	bl	8002688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69d9      	ldr	r1, [r3, #28]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	021a      	lsls	r2, r3, #8
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	61da      	str	r2, [r3, #28]
      break;
 80021b2:	e000      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80021b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_TIM_ConfigClockSource+0x18>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0b3      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x180>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002206:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002218:	d03e      	beq.n	8002298 <HAL_TIM_ConfigClockSource+0xd0>
 800221a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221e:	f200 8087 	bhi.w	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002226:	f000 8085 	beq.w	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d87f      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002230:	2b70      	cmp	r3, #112	; 0x70
 8002232:	d01a      	beq.n	800226a <HAL_TIM_ConfigClockSource+0xa2>
 8002234:	2b70      	cmp	r3, #112	; 0x70
 8002236:	d87b      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002238:	2b60      	cmp	r3, #96	; 0x60
 800223a:	d050      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x116>
 800223c:	2b60      	cmp	r3, #96	; 0x60
 800223e:	d877      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002240:	2b50      	cmp	r3, #80	; 0x50
 8002242:	d03c      	beq.n	80022be <HAL_TIM_ConfigClockSource+0xf6>
 8002244:	2b50      	cmp	r3, #80	; 0x50
 8002246:	d873      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d058      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x136>
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d86f      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002250:	2b30      	cmp	r3, #48	; 0x30
 8002252:	d064      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x156>
 8002254:	2b30      	cmp	r3, #48	; 0x30
 8002256:	d86b      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002258:	2b20      	cmp	r3, #32
 800225a:	d060      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x156>
 800225c:	2b20      	cmp	r3, #32
 800225e:	d867      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d05c      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x156>
 8002264:	2b10      	cmp	r3, #16
 8002266:	d05a      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002268:	e062      	b.n	8002330 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6899      	ldr	r1, [r3, #8]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f000 fbd7 	bl	8002a2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800228c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	609a      	str	r2, [r3, #8]
      break;
 8002296:	e04e      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f000 fbc0 	bl	8002a2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ba:	609a      	str	r2, [r3, #8]
      break;
 80022bc:	e03b      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f000 fa84 	bl	80027d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2150      	movs	r1, #80	; 0x50
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fb8e 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 80022dc:	e02b      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f000 fade 	bl	80028ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2160      	movs	r1, #96	; 0x60
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fb7e 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 80022fc:	e01b      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	f000 fa64 	bl	80027d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2140      	movs	r1, #64	; 0x40
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fb6e 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 800231c:	e00b      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f000 fb65 	bl	80029f8 <TIM_ITRx_SetConfig>
        break;
 800232e:	e002      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002330:	bf00      	nop
 8002332:	e000      	b.n	8002336 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002334:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a29      	ldr	r2, [pc, #164]	; (8002408 <TIM_Base_SetConfig+0xb8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00b      	beq.n	8002380 <TIM_Base_SetConfig+0x30>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236e:	d007      	beq.n	8002380 <TIM_Base_SetConfig+0x30>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <TIM_Base_SetConfig+0xbc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_Base_SetConfig+0x30>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <TIM_Base_SetConfig+0xc0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d108      	bne.n	8002392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <TIM_Base_SetConfig+0xb8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00b      	beq.n	80023b2 <TIM_Base_SetConfig+0x62>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d007      	beq.n	80023b2 <TIM_Base_SetConfig+0x62>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <TIM_Base_SetConfig+0xbc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <TIM_Base_SetConfig+0x62>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <TIM_Base_SetConfig+0xc0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <TIM_Base_SetConfig+0xb8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d103      	bne.n	80023f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	615a      	str	r2, [r3, #20]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800

08002414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f023 0201 	bic.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 0302 	bic.w	r3, r3, #2
 800245c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <TIM_OC1_SetConfig+0xc8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d10c      	bne.n	800248a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f023 0308 	bic.w	r3, r3, #8
 8002476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <TIM_OC1_SetConfig+0xc8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d111      	bne.n	80024b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0210 	bic.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f023 0320 	bic.w	r3, r3, #32
 800252a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <TIM_OC2_SetConfig+0xd0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10d      	bne.n	800255c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <TIM_OC2_SetConfig+0xd0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d113      	bne.n	800258c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800256a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	621a      	str	r2, [r3, #32]
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00

080025b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <TIM_OC3_SetConfig+0xd0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10d      	bne.n	800262e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800262c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <TIM_OC3_SetConfig+0xd0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d113      	bne.n	800265e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40012c00 	.word	0x40012c00

08002688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	031b      	lsls	r3, r3, #12
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <TIM_OC4_SetConfig+0x98>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d109      	bne.n	80026fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40012c00 	.word	0x40012c00

08002724 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <TIM_TI1_SetConfig+0xa8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_TI1_SetConfig+0x46>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d007      	beq.n	800276a <TIM_TI1_SetConfig+0x46>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <TIM_TI1_SetConfig+0xac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_TI1_SetConfig+0x46>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <TIM_TI1_SetConfig+0xb0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <TIM_TI1_SetConfig+0x4a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <TIM_TI1_SetConfig+0x4c>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e003      	b.n	800278e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	b2db      	uxtb	r3, r3
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f023 030a 	bic.w	r3, r3, #10
 80027a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 030a 	and.w	r3, r3, #10
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800

080027d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f023 0201 	bic.w	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f023 030a 	bic.w	r3, r3, #10
 8002814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0210 	bic.w	r2, r3, #16
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	031b      	lsls	r3, r3, #12
 8002878:	b29b      	uxth	r3, r3
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002886:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f023 0210 	bic.w	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	031b      	lsls	r3, r3, #12
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800290a:	b480      	push	{r7}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002946:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	b2db      	uxtb	r3, r3
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800295a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	621a      	str	r2, [r3, #32]
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	031b      	lsls	r3, r3, #12
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f043 0307 	orr.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e046      	b.n	8002b12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d009      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10c      	bne.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800

08002b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e03d      	b.n	8002bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e03f      	b.n	8002c5c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe f833 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fbe4 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d130      	bne.n	8002ce0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_UART_Transmit_IT+0x26>
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e029      	b.n	8002ce2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Transmit_IT+0x38>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e022      	b.n	8002ce2 <HAL_UART_Transmit_IT+0x7e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2221      	movs	r2, #33	; 0x21
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cda:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d11d      	bne.n	8002d42 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_UART_Receive_IT+0x26>
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e016      	b.n	8002d44 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_UART_Receive_IT+0x38>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e00f      	b.n	8002d44 <HAL_UART_Receive_IT+0x58>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f9c5 	bl	80030c8 <UART_Start_Receive_IT>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e000      	b.n	8002d44 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_UART_IRQHandler+0x52>
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa76 	bl	8003288 <UART_Receive_IT>
      return;
 8002d9c:	e17b      	b.n	8003096 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80b1 	beq.w	8002f08 <HAL_UART_IRQHandler+0x1bc>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_UART_IRQHandler+0x70>
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80a6 	beq.w	8002f08 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_UART_IRQHandler+0x90>
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_UART_IRQHandler+0xb0>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f043 0202 	orr.w	r2, r3, #2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_UART_IRQHandler+0xd0>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00f      	beq.n	8002e46 <HAL_UART_IRQHandler+0xfa>
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_UART_IRQHandler+0xee>
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f043 0208 	orr.w	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 811e 	beq.w	800308c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <HAL_UART_IRQHandler+0x11e>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fa0f 	bl	8003288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_UART_IRQHandler+0x146>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d031      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f951 	bl	800313a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d023      	beq.n	8002eee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d013      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_UART_IRQHandler+0x350>)
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f8dc 	bl	8001088 <HAL_DMA_Abort_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	e00e      	b.n	8002f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8da 	bl	80030a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	e00a      	b.n	8002f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8d6 	bl	80030a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	e006      	b.n	8002f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8d2 	bl	80030a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f02:	e0c3      	b.n	800308c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	bf00      	nop
    return;
 8002f06:	e0c1      	b.n	800308c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	f040 80a1 	bne.w	8003054 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 809b 	beq.w	8003054 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8095 	beq.w	8003054 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04e      	beq.n	8002fec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f58:	8a3b      	ldrh	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8098 	beq.w	8003090 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f64:	8a3a      	ldrh	r2, [r7, #16]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f080 8092 	bcs.w	8003090 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8a3a      	ldrh	r2, [r7, #16]
 8002f70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d02b      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002faa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0210 	bic.w	r2, r2, #16
 8002fc8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f81f 	bl	8001012 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f864 	bl	80030b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fea:	e051      	b.n	8003090 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d047      	beq.n	8003094 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003004:	8a7b      	ldrh	r3, [r7, #18]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d044      	beq.n	8003094 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003018:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0210 	bic.w	r2, r2, #16
 8003046:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003048:	8a7b      	ldrh	r3, [r7, #18]
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f830 	bl	80030b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003052:	e01f      	b.n	8003094 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_UART_IRQHandler+0x324>
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8a6 	bl	80031ba <UART_Transmit_IT>
    return;
 800306e:	e012      	b.n	8003096 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <HAL_UART_IRQHandler+0x34a>
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8e7 	bl	8003258 <UART_EndTransmit_IT>
    return;
 800308a:	e004      	b.n	8003096 <HAL_UART_IRQHandler+0x34a>
    return;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <HAL_UART_IRQHandler+0x34a>
      return;
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <HAL_UART_IRQHandler+0x34a>
      return;
 8003094:	bf00      	nop
  }
}
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	08003193 	.word	0x08003193

080030a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2222      	movs	r2, #34	; 0x22
 80030f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003150:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0210 	bic.w	r2, r2, #16
 8003178:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ff77 	bl	80030a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b21      	cmp	r3, #33	; 0x21
 80031cc:	d13e      	bne.n	800324c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	d114      	bne.n	8003202 <UART_Transmit_IT+0x48>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d110      	bne.n	8003202 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	1c9a      	adds	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	e008      	b.n	8003214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6211      	str	r1, [r2, #32]
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4619      	mov	r1, r3
 8003222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10f      	bne.n	8003248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fd f9bf 	bl	80005fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b22      	cmp	r3, #34	; 0x22
 800329a:	f040 8099 	bne.w	80033d0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d117      	bne.n	80032d8 <UART_Receive_IT+0x50>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
 80032d6:	e026      	b.n	8003326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ea:	d007      	beq.n	80032fc <UART_Receive_IT+0x74>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <UART_Receive_IT+0x82>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e008      	b.n	800331c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003316:	b2da      	uxtb	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4619      	mov	r1, r3
 8003334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003336:	2b00      	cmp	r3, #0
 8003338:	d148      	bne.n	80033cc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0220 	bic.w	r2, r2, #32
 8003348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	2b01      	cmp	r3, #1
 8003378:	d123      	bne.n	80033c2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d10a      	bne.n	80033b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fe79 	bl	80030b2 <HAL_UARTEx_RxEventCallback>
 80033c0:	e002      	b.n	80033c8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd f94e 	bl	8000664 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e002      	b.n	80033d2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003416:	f023 030c 	bic.w	r3, r3, #12
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	430b      	orrs	r3, r1
 8003422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <UART_SetConfig+0x114>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003444:	f7fe fc3c 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	e002      	b.n	8003452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7fe fc24 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009a      	lsls	r2, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <UART_SetConfig+0x118>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	0119      	lsls	r1, r3, #4
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009a      	lsls	r2, r3, #2
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fbb2 f2f3 	udiv	r2, r2, r3
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <UART_SetConfig+0x118>)
 800348a:	fba3 0302 	umull	r0, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2064      	movs	r0, #100	; 0x64
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	3332      	adds	r3, #50	; 0x32
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <UART_SetConfig+0x118>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a8:	4419      	add	r1, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <UART_SetConfig+0x118>)
 80034c2:	fba3 0302 	umull	r0, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2064      	movs	r0, #100	; 0x64
 80034ca:	fb00 f303 	mul.w	r3, r0, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	3332      	adds	r3, #50	; 0x32
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <UART_SetConfig+0x118>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	440a      	add	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013800 	.word	0x40013800
 80034f4:	51eb851f 	.word	0x51eb851f

080034f8 <__errno>:
 80034f8:	4b01      	ldr	r3, [pc, #4]	; (8003500 <__errno+0x8>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000014 	.word	0x20000014

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	2600      	movs	r6, #0
 8003508:	4d0c      	ldr	r5, [pc, #48]	; (800353c <__libc_init_array+0x38>)
 800350a:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350c:	1b64      	subs	r4, r4, r5
 800350e:	10a4      	asrs	r4, r4, #2
 8003510:	42a6      	cmp	r6, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	f001 f91e 	bl	8004754 <_init>
 8003518:	2600      	movs	r6, #0
 800351a:	4d0a      	ldr	r5, [pc, #40]	; (8003544 <__libc_init_array+0x40>)
 800351c:	4c0a      	ldr	r4, [pc, #40]	; (8003548 <__libc_init_array+0x44>)
 800351e:	1b64      	subs	r4, r4, r5
 8003520:	10a4      	asrs	r4, r4, #2
 8003522:	42a6      	cmp	r6, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f855 3b04 	ldr.w	r3, [r5], #4
 800352c:	4798      	blx	r3
 800352e:	3601      	adds	r6, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f855 3b04 	ldr.w	r3, [r5], #4
 8003536:	4798      	blx	r3
 8003538:	3601      	adds	r6, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	08004ae4 	.word	0x08004ae4
 8003540:	08004ae4 	.word	0x08004ae4
 8003544:	08004ae4 	.word	0x08004ae4
 8003548:	08004ae8 	.word	0x08004ae8

0800354c <memset>:
 800354c:	4603      	mov	r3, r0
 800354e:	4402      	add	r2, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <siscanf>:
 800355c:	b40e      	push	{r1, r2, r3}
 800355e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003562:	b530      	push	{r4, r5, lr}
 8003564:	b09c      	sub	sp, #112	; 0x70
 8003566:	ac1f      	add	r4, sp, #124	; 0x7c
 8003568:	f854 5b04 	ldr.w	r5, [r4], #4
 800356c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003570:	9002      	str	r0, [sp, #8]
 8003572:	9006      	str	r0, [sp, #24]
 8003574:	f7fc fdf4 	bl	8000160 <strlen>
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <siscanf+0x4c>)
 800357a:	9003      	str	r0, [sp, #12]
 800357c:	930b      	str	r3, [sp, #44]	; 0x2c
 800357e:	2300      	movs	r3, #0
 8003580:	930f      	str	r3, [sp, #60]	; 0x3c
 8003582:	9314      	str	r3, [sp, #80]	; 0x50
 8003584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003588:	9007      	str	r0, [sp, #28]
 800358a:	4808      	ldr	r0, [pc, #32]	; (80035ac <siscanf+0x50>)
 800358c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003590:	462a      	mov	r2, r5
 8003592:	4623      	mov	r3, r4
 8003594:	a902      	add	r1, sp, #8
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	9401      	str	r4, [sp, #4]
 800359a:	f000 f9e1 	bl	8003960 <__ssvfiscanf_r>
 800359e:	b01c      	add	sp, #112	; 0x70
 80035a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035a4:	b003      	add	sp, #12
 80035a6:	4770      	bx	lr
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	20000014 	.word	0x20000014

080035b0 <__seofread>:
 80035b0:	2000      	movs	r0, #0
 80035b2:	4770      	bx	lr

080035b4 <_vsiprintf_r>:
 80035b4:	b500      	push	{lr}
 80035b6:	b09b      	sub	sp, #108	; 0x6c
 80035b8:	9100      	str	r1, [sp, #0]
 80035ba:	9104      	str	r1, [sp, #16]
 80035bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035c0:	9105      	str	r1, [sp, #20]
 80035c2:	9102      	str	r1, [sp, #8]
 80035c4:	4905      	ldr	r1, [pc, #20]	; (80035dc <_vsiprintf_r+0x28>)
 80035c6:	9103      	str	r1, [sp, #12]
 80035c8:	4669      	mov	r1, sp
 80035ca:	f000 f86f 	bl	80036ac <_svfiprintf_r>
 80035ce:	2200      	movs	r2, #0
 80035d0:	9b00      	ldr	r3, [sp, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	b01b      	add	sp, #108	; 0x6c
 80035d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035da:	bf00      	nop
 80035dc:	ffff0208 	.word	0xffff0208

080035e0 <vsiprintf>:
 80035e0:	4613      	mov	r3, r2
 80035e2:	460a      	mov	r2, r1
 80035e4:	4601      	mov	r1, r0
 80035e6:	4802      	ldr	r0, [pc, #8]	; (80035f0 <vsiprintf+0x10>)
 80035e8:	6800      	ldr	r0, [r0, #0]
 80035ea:	f7ff bfe3 	b.w	80035b4 <_vsiprintf_r>
 80035ee:	bf00      	nop
 80035f0:	20000014 	.word	0x20000014

080035f4 <__ssputs_r>:
 80035f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	688e      	ldr	r6, [r1, #8]
 80035fa:	4682      	mov	sl, r0
 80035fc:	429e      	cmp	r6, r3
 80035fe:	460c      	mov	r4, r1
 8003600:	4690      	mov	r8, r2
 8003602:	461f      	mov	r7, r3
 8003604:	d838      	bhi.n	8003678 <__ssputs_r+0x84>
 8003606:	898a      	ldrh	r2, [r1, #12]
 8003608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800360c:	d032      	beq.n	8003674 <__ssputs_r+0x80>
 800360e:	6825      	ldr	r5, [r4, #0]
 8003610:	6909      	ldr	r1, [r1, #16]
 8003612:	3301      	adds	r3, #1
 8003614:	eba5 0901 	sub.w	r9, r5, r1
 8003618:	6965      	ldr	r5, [r4, #20]
 800361a:	444b      	add	r3, r9
 800361c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003624:	106d      	asrs	r5, r5, #1
 8003626:	429d      	cmp	r5, r3
 8003628:	bf38      	it	cc
 800362a:	461d      	movcc	r5, r3
 800362c:	0553      	lsls	r3, r2, #21
 800362e:	d531      	bpl.n	8003694 <__ssputs_r+0xa0>
 8003630:	4629      	mov	r1, r5
 8003632:	f000 ffeb 	bl	800460c <_malloc_r>
 8003636:	4606      	mov	r6, r0
 8003638:	b950      	cbnz	r0, 8003650 <__ssputs_r+0x5c>
 800363a:	230c      	movs	r3, #12
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f8ca 3000 	str.w	r3, [sl]
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364a:	81a3      	strh	r3, [r4, #12]
 800364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003650:	464a      	mov	r2, r9
 8003652:	6921      	ldr	r1, [r4, #16]
 8003654:	f000 ff66 	bl	8004524 <memcpy>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800365e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003662:	81a3      	strh	r3, [r4, #12]
 8003664:	6126      	str	r6, [r4, #16]
 8003666:	444e      	add	r6, r9
 8003668:	6026      	str	r6, [r4, #0]
 800366a:	463e      	mov	r6, r7
 800366c:	6165      	str	r5, [r4, #20]
 800366e:	eba5 0509 	sub.w	r5, r5, r9
 8003672:	60a5      	str	r5, [r4, #8]
 8003674:	42be      	cmp	r6, r7
 8003676:	d900      	bls.n	800367a <__ssputs_r+0x86>
 8003678:	463e      	mov	r6, r7
 800367a:	4632      	mov	r2, r6
 800367c:	4641      	mov	r1, r8
 800367e:	6820      	ldr	r0, [r4, #0]
 8003680:	f000 ff5e 	bl	8004540 <memmove>
 8003684:	68a3      	ldr	r3, [r4, #8]
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	1b9b      	subs	r3, r3, r6
 800368a:	4432      	add	r2, r6
 800368c:	2000      	movs	r0, #0
 800368e:	60a3      	str	r3, [r4, #8]
 8003690:	6022      	str	r2, [r4, #0]
 8003692:	e7db      	b.n	800364c <__ssputs_r+0x58>
 8003694:	462a      	mov	r2, r5
 8003696:	f001 f813 	bl	80046c0 <_realloc_r>
 800369a:	4606      	mov	r6, r0
 800369c:	2800      	cmp	r0, #0
 800369e:	d1e1      	bne.n	8003664 <__ssputs_r+0x70>
 80036a0:	4650      	mov	r0, sl
 80036a2:	6921      	ldr	r1, [r4, #16]
 80036a4:	f000 ff66 	bl	8004574 <_free_r>
 80036a8:	e7c7      	b.n	800363a <__ssputs_r+0x46>
	...

080036ac <_svfiprintf_r>:
 80036ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	4698      	mov	r8, r3
 80036b2:	898b      	ldrh	r3, [r1, #12]
 80036b4:	4607      	mov	r7, r0
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	460d      	mov	r5, r1
 80036ba:	4614      	mov	r4, r2
 80036bc:	b09d      	sub	sp, #116	; 0x74
 80036be:	d50e      	bpl.n	80036de <_svfiprintf_r+0x32>
 80036c0:	690b      	ldr	r3, [r1, #16]
 80036c2:	b963      	cbnz	r3, 80036de <_svfiprintf_r+0x32>
 80036c4:	2140      	movs	r1, #64	; 0x40
 80036c6:	f000 ffa1 	bl	800460c <_malloc_r>
 80036ca:	6028      	str	r0, [r5, #0]
 80036cc:	6128      	str	r0, [r5, #16]
 80036ce:	b920      	cbnz	r0, 80036da <_svfiprintf_r+0x2e>
 80036d0:	230c      	movs	r3, #12
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	e0d1      	b.n	800387e <_svfiprintf_r+0x1d2>
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	616b      	str	r3, [r5, #20]
 80036de:	2300      	movs	r3, #0
 80036e0:	9309      	str	r3, [sp, #36]	; 0x24
 80036e2:	2320      	movs	r3, #32
 80036e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036e8:	2330      	movs	r3, #48	; 0x30
 80036ea:	f04f 0901 	mov.w	r9, #1
 80036ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80036f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003898 <_svfiprintf_r+0x1ec>
 80036f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036fa:	4623      	mov	r3, r4
 80036fc:	469a      	mov	sl, r3
 80036fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003702:	b10a      	cbz	r2, 8003708 <_svfiprintf_r+0x5c>
 8003704:	2a25      	cmp	r2, #37	; 0x25
 8003706:	d1f9      	bne.n	80036fc <_svfiprintf_r+0x50>
 8003708:	ebba 0b04 	subs.w	fp, sl, r4
 800370c:	d00b      	beq.n	8003726 <_svfiprintf_r+0x7a>
 800370e:	465b      	mov	r3, fp
 8003710:	4622      	mov	r2, r4
 8003712:	4629      	mov	r1, r5
 8003714:	4638      	mov	r0, r7
 8003716:	f7ff ff6d 	bl	80035f4 <__ssputs_r>
 800371a:	3001      	adds	r0, #1
 800371c:	f000 80aa 	beq.w	8003874 <_svfiprintf_r+0x1c8>
 8003720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003722:	445a      	add	r2, fp
 8003724:	9209      	str	r2, [sp, #36]	; 0x24
 8003726:	f89a 3000 	ldrb.w	r3, [sl]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a2 	beq.w	8003874 <_svfiprintf_r+0x1c8>
 8003730:	2300      	movs	r3, #0
 8003732:	f04f 32ff 	mov.w	r2, #4294967295
 8003736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800373a:	f10a 0a01 	add.w	sl, sl, #1
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	9307      	str	r3, [sp, #28]
 8003742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003746:	931a      	str	r3, [sp, #104]	; 0x68
 8003748:	4654      	mov	r4, sl
 800374a:	2205      	movs	r2, #5
 800374c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003750:	4851      	ldr	r0, [pc, #324]	; (8003898 <_svfiprintf_r+0x1ec>)
 8003752:	f000 fed9 	bl	8004508 <memchr>
 8003756:	9a04      	ldr	r2, [sp, #16]
 8003758:	b9d8      	cbnz	r0, 8003792 <_svfiprintf_r+0xe6>
 800375a:	06d0      	lsls	r0, r2, #27
 800375c:	bf44      	itt	mi
 800375e:	2320      	movmi	r3, #32
 8003760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003764:	0711      	lsls	r1, r2, #28
 8003766:	bf44      	itt	mi
 8003768:	232b      	movmi	r3, #43	; 0x2b
 800376a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800376e:	f89a 3000 	ldrb.w	r3, [sl]
 8003772:	2b2a      	cmp	r3, #42	; 0x2a
 8003774:	d015      	beq.n	80037a2 <_svfiprintf_r+0xf6>
 8003776:	4654      	mov	r4, sl
 8003778:	2000      	movs	r0, #0
 800377a:	f04f 0c0a 	mov.w	ip, #10
 800377e:	9a07      	ldr	r2, [sp, #28]
 8003780:	4621      	mov	r1, r4
 8003782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003786:	3b30      	subs	r3, #48	; 0x30
 8003788:	2b09      	cmp	r3, #9
 800378a:	d94e      	bls.n	800382a <_svfiprintf_r+0x17e>
 800378c:	b1b0      	cbz	r0, 80037bc <_svfiprintf_r+0x110>
 800378e:	9207      	str	r2, [sp, #28]
 8003790:	e014      	b.n	80037bc <_svfiprintf_r+0x110>
 8003792:	eba0 0308 	sub.w	r3, r0, r8
 8003796:	fa09 f303 	lsl.w	r3, r9, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	46a2      	mov	sl, r4
 800379e:	9304      	str	r3, [sp, #16]
 80037a0:	e7d2      	b.n	8003748 <_svfiprintf_r+0x9c>
 80037a2:	9b03      	ldr	r3, [sp, #12]
 80037a4:	1d19      	adds	r1, r3, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	9103      	str	r1, [sp, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfbb      	ittet	lt
 80037ae:	425b      	neglt	r3, r3
 80037b0:	f042 0202 	orrlt.w	r2, r2, #2
 80037b4:	9307      	strge	r3, [sp, #28]
 80037b6:	9307      	strlt	r3, [sp, #28]
 80037b8:	bfb8      	it	lt
 80037ba:	9204      	strlt	r2, [sp, #16]
 80037bc:	7823      	ldrb	r3, [r4, #0]
 80037be:	2b2e      	cmp	r3, #46	; 0x2e
 80037c0:	d10c      	bne.n	80037dc <_svfiprintf_r+0x130>
 80037c2:	7863      	ldrb	r3, [r4, #1]
 80037c4:	2b2a      	cmp	r3, #42	; 0x2a
 80037c6:	d135      	bne.n	8003834 <_svfiprintf_r+0x188>
 80037c8:	9b03      	ldr	r3, [sp, #12]
 80037ca:	3402      	adds	r4, #2
 80037cc:	1d1a      	adds	r2, r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	9203      	str	r2, [sp, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bfb8      	it	lt
 80037d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80037da:	9305      	str	r3, [sp, #20]
 80037dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038a8 <_svfiprintf_r+0x1fc>
 80037e0:	2203      	movs	r2, #3
 80037e2:	4650      	mov	r0, sl
 80037e4:	7821      	ldrb	r1, [r4, #0]
 80037e6:	f000 fe8f 	bl	8004508 <memchr>
 80037ea:	b140      	cbz	r0, 80037fe <_svfiprintf_r+0x152>
 80037ec:	2340      	movs	r3, #64	; 0x40
 80037ee:	eba0 000a 	sub.w	r0, r0, sl
 80037f2:	fa03 f000 	lsl.w	r0, r3, r0
 80037f6:	9b04      	ldr	r3, [sp, #16]
 80037f8:	3401      	adds	r4, #1
 80037fa:	4303      	orrs	r3, r0
 80037fc:	9304      	str	r3, [sp, #16]
 80037fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003802:	2206      	movs	r2, #6
 8003804:	4825      	ldr	r0, [pc, #148]	; (800389c <_svfiprintf_r+0x1f0>)
 8003806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800380a:	f000 fe7d 	bl	8004508 <memchr>
 800380e:	2800      	cmp	r0, #0
 8003810:	d038      	beq.n	8003884 <_svfiprintf_r+0x1d8>
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <_svfiprintf_r+0x1f4>)
 8003814:	bb1b      	cbnz	r3, 800385e <_svfiprintf_r+0x1b2>
 8003816:	9b03      	ldr	r3, [sp, #12]
 8003818:	3307      	adds	r3, #7
 800381a:	f023 0307 	bic.w	r3, r3, #7
 800381e:	3308      	adds	r3, #8
 8003820:	9303      	str	r3, [sp, #12]
 8003822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003824:	4433      	add	r3, r6
 8003826:	9309      	str	r3, [sp, #36]	; 0x24
 8003828:	e767      	b.n	80036fa <_svfiprintf_r+0x4e>
 800382a:	460c      	mov	r4, r1
 800382c:	2001      	movs	r0, #1
 800382e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003832:	e7a5      	b.n	8003780 <_svfiprintf_r+0xd4>
 8003834:	2300      	movs	r3, #0
 8003836:	f04f 0c0a 	mov.w	ip, #10
 800383a:	4619      	mov	r1, r3
 800383c:	3401      	adds	r4, #1
 800383e:	9305      	str	r3, [sp, #20]
 8003840:	4620      	mov	r0, r4
 8003842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003846:	3a30      	subs	r2, #48	; 0x30
 8003848:	2a09      	cmp	r2, #9
 800384a:	d903      	bls.n	8003854 <_svfiprintf_r+0x1a8>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0c5      	beq.n	80037dc <_svfiprintf_r+0x130>
 8003850:	9105      	str	r1, [sp, #20]
 8003852:	e7c3      	b.n	80037dc <_svfiprintf_r+0x130>
 8003854:	4604      	mov	r4, r0
 8003856:	2301      	movs	r3, #1
 8003858:	fb0c 2101 	mla	r1, ip, r1, r2
 800385c:	e7f0      	b.n	8003840 <_svfiprintf_r+0x194>
 800385e:	ab03      	add	r3, sp, #12
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	462a      	mov	r2, r5
 8003864:	4638      	mov	r0, r7
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <_svfiprintf_r+0x1f8>)
 8003868:	a904      	add	r1, sp, #16
 800386a:	f3af 8000 	nop.w
 800386e:	1c42      	adds	r2, r0, #1
 8003870:	4606      	mov	r6, r0
 8003872:	d1d6      	bne.n	8003822 <_svfiprintf_r+0x176>
 8003874:	89ab      	ldrh	r3, [r5, #12]
 8003876:	065b      	lsls	r3, r3, #25
 8003878:	f53f af2c 	bmi.w	80036d4 <_svfiprintf_r+0x28>
 800387c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800387e:	b01d      	add	sp, #116	; 0x74
 8003880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003884:	ab03      	add	r3, sp, #12
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	462a      	mov	r2, r5
 800388a:	4638      	mov	r0, r7
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <_svfiprintf_r+0x1f8>)
 800388e:	a904      	add	r1, sp, #16
 8003890:	f000 fa50 	bl	8003d34 <_printf_i>
 8003894:	e7eb      	b.n	800386e <_svfiprintf_r+0x1c2>
 8003896:	bf00      	nop
 8003898:	08004934 	.word	0x08004934
 800389c:	0800493e 	.word	0x0800493e
 80038a0:	00000000 	.word	0x00000000
 80038a4:	080035f5 	.word	0x080035f5
 80038a8:	0800493a 	.word	0x0800493a

080038ac <_sungetc_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	1c4b      	adds	r3, r1, #1
 80038b0:	4614      	mov	r4, r2
 80038b2:	d103      	bne.n	80038bc <_sungetc_r+0x10>
 80038b4:	f04f 35ff 	mov.w	r5, #4294967295
 80038b8:	4628      	mov	r0, r5
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	8993      	ldrh	r3, [r2, #12]
 80038be:	b2cd      	uxtb	r5, r1
 80038c0:	f023 0320 	bic.w	r3, r3, #32
 80038c4:	8193      	strh	r3, [r2, #12]
 80038c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038c8:	6852      	ldr	r2, [r2, #4]
 80038ca:	b18b      	cbz	r3, 80038f0 <_sungetc_r+0x44>
 80038cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038ce:	4293      	cmp	r3, r2
 80038d0:	dd08      	ble.n	80038e4 <_sungetc_r+0x38>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	6022      	str	r2, [r4, #0]
 80038d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	e7e9      	b.n	80038b8 <_sungetc_r+0xc>
 80038e4:	4621      	mov	r1, r4
 80038e6:	f000 fdd5 	bl	8004494 <__submore>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d0f1      	beq.n	80038d2 <_sungetc_r+0x26>
 80038ee:	e7e1      	b.n	80038b4 <_sungetc_r+0x8>
 80038f0:	6921      	ldr	r1, [r4, #16]
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	b151      	cbz	r1, 800390c <_sungetc_r+0x60>
 80038f6:	4299      	cmp	r1, r3
 80038f8:	d208      	bcs.n	800390c <_sungetc_r+0x60>
 80038fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80038fe:	42a9      	cmp	r1, r5
 8003900:	d104      	bne.n	800390c <_sungetc_r+0x60>
 8003902:	3b01      	subs	r3, #1
 8003904:	3201      	adds	r2, #1
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	6062      	str	r2, [r4, #4]
 800390a:	e7d5      	b.n	80038b8 <_sungetc_r+0xc>
 800390c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003914:	6363      	str	r3, [r4, #52]	; 0x34
 8003916:	2303      	movs	r3, #3
 8003918:	63a3      	str	r3, [r4, #56]	; 0x38
 800391a:	4623      	mov	r3, r4
 800391c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	2301      	movs	r3, #1
 8003924:	e7dc      	b.n	80038e0 <_sungetc_r+0x34>

08003926 <__ssrefill_r>:
 8003926:	b510      	push	{r4, lr}
 8003928:	460c      	mov	r4, r1
 800392a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800392c:	b169      	cbz	r1, 800394a <__ssrefill_r+0x24>
 800392e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003932:	4299      	cmp	r1, r3
 8003934:	d001      	beq.n	800393a <__ssrefill_r+0x14>
 8003936:	f000 fe1d 	bl	8004574 <_free_r>
 800393a:	2000      	movs	r0, #0
 800393c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800393e:	6360      	str	r0, [r4, #52]	; 0x34
 8003940:	6063      	str	r3, [r4, #4]
 8003942:	b113      	cbz	r3, 800394a <__ssrefill_r+0x24>
 8003944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	bd10      	pop	{r4, pc}
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f043 0320 	orr.w	r3, r3, #32
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	e7f3      	b.n	8003948 <__ssrefill_r+0x22>

08003960 <__ssvfiscanf_r>:
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	460c      	mov	r4, r1
 8003966:	2100      	movs	r1, #0
 8003968:	4606      	mov	r6, r0
 800396a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800396e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003972:	49b3      	ldr	r1, [pc, #716]	; (8003c40 <__ssvfiscanf_r+0x2e0>)
 8003974:	f10d 0804 	add.w	r8, sp, #4
 8003978:	91a0      	str	r1, [sp, #640]	; 0x280
 800397a:	49b2      	ldr	r1, [pc, #712]	; (8003c44 <__ssvfiscanf_r+0x2e4>)
 800397c:	4fb2      	ldr	r7, [pc, #712]	; (8003c48 <__ssvfiscanf_r+0x2e8>)
 800397e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8003c4c <__ssvfiscanf_r+0x2ec>
 8003982:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003986:	91a1      	str	r1, [sp, #644]	; 0x284
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f892 a000 	ldrb.w	sl, [r2]
 800398e:	f1ba 0f00 	cmp.w	sl, #0
 8003992:	f000 8153 	beq.w	8003c3c <__ssvfiscanf_r+0x2dc>
 8003996:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800399a:	1c55      	adds	r5, r2, #1
 800399c:	f013 0308 	ands.w	r3, r3, #8
 80039a0:	d019      	beq.n	80039d6 <__ssvfiscanf_r+0x76>
 80039a2:	6863      	ldr	r3, [r4, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	dd0f      	ble.n	80039c8 <__ssvfiscanf_r+0x68>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	781a      	ldrb	r2, [r3, #0]
 80039ac:	5cba      	ldrb	r2, [r7, r2]
 80039ae:	0712      	lsls	r2, r2, #28
 80039b0:	d401      	bmi.n	80039b6 <__ssvfiscanf_r+0x56>
 80039b2:	462a      	mov	r2, r5
 80039b4:	e7e9      	b.n	800398a <__ssvfiscanf_r+0x2a>
 80039b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80039b8:	3301      	adds	r3, #1
 80039ba:	3201      	adds	r2, #1
 80039bc:	9245      	str	r2, [sp, #276]	; 0x114
 80039be:	6862      	ldr	r2, [r4, #4]
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	3a01      	subs	r2, #1
 80039c4:	6062      	str	r2, [r4, #4]
 80039c6:	e7ec      	b.n	80039a2 <__ssvfiscanf_r+0x42>
 80039c8:	4621      	mov	r1, r4
 80039ca:	4630      	mov	r0, r6
 80039cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80039ce:	4798      	blx	r3
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d0e9      	beq.n	80039a8 <__ssvfiscanf_r+0x48>
 80039d4:	e7ed      	b.n	80039b2 <__ssvfiscanf_r+0x52>
 80039d6:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80039da:	f040 8086 	bne.w	8003aea <__ssvfiscanf_r+0x18a>
 80039de:	9341      	str	r3, [sp, #260]	; 0x104
 80039e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80039e2:	7853      	ldrb	r3, [r2, #1]
 80039e4:	2b2a      	cmp	r3, #42	; 0x2a
 80039e6:	bf04      	itt	eq
 80039e8:	2310      	moveq	r3, #16
 80039ea:	1c95      	addeq	r5, r2, #2
 80039ec:	f04f 020a 	mov.w	r2, #10
 80039f0:	bf08      	it	eq
 80039f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80039f4:	46ab      	mov	fp, r5
 80039f6:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80039fa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80039fe:	2b09      	cmp	r3, #9
 8003a00:	d91d      	bls.n	8003a3e <__ssvfiscanf_r+0xde>
 8003a02:	2203      	movs	r2, #3
 8003a04:	4891      	ldr	r0, [pc, #580]	; (8003c4c <__ssvfiscanf_r+0x2ec>)
 8003a06:	f000 fd7f 	bl	8004508 <memchr>
 8003a0a:	b140      	cbz	r0, 8003a1e <__ssvfiscanf_r+0xbe>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	465d      	mov	r5, fp
 8003a10:	eba0 0009 	sub.w	r0, r0, r9
 8003a14:	fa03 f000 	lsl.w	r0, r3, r0
 8003a18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a1a:	4318      	orrs	r0, r3
 8003a1c:	9041      	str	r0, [sp, #260]	; 0x104
 8003a1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a22:	2b78      	cmp	r3, #120	; 0x78
 8003a24:	d806      	bhi.n	8003a34 <__ssvfiscanf_r+0xd4>
 8003a26:	2b57      	cmp	r3, #87	; 0x57
 8003a28:	d810      	bhi.n	8003a4c <__ssvfiscanf_r+0xec>
 8003a2a:	2b25      	cmp	r3, #37	; 0x25
 8003a2c:	d05d      	beq.n	8003aea <__ssvfiscanf_r+0x18a>
 8003a2e:	d857      	bhi.n	8003ae0 <__ssvfiscanf_r+0x180>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d075      	beq.n	8003b20 <__ssvfiscanf_r+0x1c0>
 8003a34:	2303      	movs	r3, #3
 8003a36:	9347      	str	r3, [sp, #284]	; 0x11c
 8003a38:	230a      	movs	r3, #10
 8003a3a:	9342      	str	r3, [sp, #264]	; 0x108
 8003a3c:	e082      	b.n	8003b44 <__ssvfiscanf_r+0x1e4>
 8003a3e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003a40:	465d      	mov	r5, fp
 8003a42:	fb02 1303 	mla	r3, r2, r3, r1
 8003a46:	3b30      	subs	r3, #48	; 0x30
 8003a48:	9343      	str	r3, [sp, #268]	; 0x10c
 8003a4a:	e7d3      	b.n	80039f4 <__ssvfiscanf_r+0x94>
 8003a4c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003a50:	2a20      	cmp	r2, #32
 8003a52:	d8ef      	bhi.n	8003a34 <__ssvfiscanf_r+0xd4>
 8003a54:	a101      	add	r1, pc, #4	; (adr r1, 8003a5c <__ssvfiscanf_r+0xfc>)
 8003a56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003b2f 	.word	0x08003b2f
 8003a60:	08003a35 	.word	0x08003a35
 8003a64:	08003a35 	.word	0x08003a35
 8003a68:	08003b8d 	.word	0x08003b8d
 8003a6c:	08003a35 	.word	0x08003a35
 8003a70:	08003a35 	.word	0x08003a35
 8003a74:	08003a35 	.word	0x08003a35
 8003a78:	08003a35 	.word	0x08003a35
 8003a7c:	08003a35 	.word	0x08003a35
 8003a80:	08003a35 	.word	0x08003a35
 8003a84:	08003a35 	.word	0x08003a35
 8003a88:	08003ba3 	.word	0x08003ba3
 8003a8c:	08003b79 	.word	0x08003b79
 8003a90:	08003ae7 	.word	0x08003ae7
 8003a94:	08003ae7 	.word	0x08003ae7
 8003a98:	08003ae7 	.word	0x08003ae7
 8003a9c:	08003a35 	.word	0x08003a35
 8003aa0:	08003b7d 	.word	0x08003b7d
 8003aa4:	08003a35 	.word	0x08003a35
 8003aa8:	08003a35 	.word	0x08003a35
 8003aac:	08003a35 	.word	0x08003a35
 8003ab0:	08003a35 	.word	0x08003a35
 8003ab4:	08003bb3 	.word	0x08003bb3
 8003ab8:	08003b85 	.word	0x08003b85
 8003abc:	08003b27 	.word	0x08003b27
 8003ac0:	08003a35 	.word	0x08003a35
 8003ac4:	08003a35 	.word	0x08003a35
 8003ac8:	08003baf 	.word	0x08003baf
 8003acc:	08003a35 	.word	0x08003a35
 8003ad0:	08003b79 	.word	0x08003b79
 8003ad4:	08003a35 	.word	0x08003a35
 8003ad8:	08003a35 	.word	0x08003a35
 8003adc:	08003b2f 	.word	0x08003b2f
 8003ae0:	3b45      	subs	r3, #69	; 0x45
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d8a6      	bhi.n	8003a34 <__ssvfiscanf_r+0xd4>
 8003ae6:	2305      	movs	r3, #5
 8003ae8:	e02b      	b.n	8003b42 <__ssvfiscanf_r+0x1e2>
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	dd0d      	ble.n	8003b0c <__ssvfiscanf_r+0x1ac>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	4552      	cmp	r2, sl
 8003af6:	f040 80a1 	bne.w	8003c3c <__ssvfiscanf_r+0x2dc>
 8003afa:	3301      	adds	r3, #1
 8003afc:	6862      	ldr	r2, [r4, #4]
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003b02:	3a01      	subs	r2, #1
 8003b04:	3301      	adds	r3, #1
 8003b06:	6062      	str	r2, [r4, #4]
 8003b08:	9345      	str	r3, [sp, #276]	; 0x114
 8003b0a:	e752      	b.n	80039b2 <__ssvfiscanf_r+0x52>
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4630      	mov	r0, r6
 8003b10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b12:	4798      	blx	r3
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d0eb      	beq.n	8003af0 <__ssvfiscanf_r+0x190>
 8003b18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f040 8084 	bne.w	8003c28 <__ssvfiscanf_r+0x2c8>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	e086      	b.n	8003c34 <__ssvfiscanf_r+0x2d4>
 8003b26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b28:	f042 0220 	orr.w	r2, r2, #32
 8003b2c:	9241      	str	r2, [sp, #260]	; 0x104
 8003b2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b34:	9241      	str	r2, [sp, #260]	; 0x104
 8003b36:	2210      	movs	r2, #16
 8003b38:	2b6f      	cmp	r3, #111	; 0x6f
 8003b3a:	bf34      	ite	cc
 8003b3c:	2303      	movcc	r3, #3
 8003b3e:	2304      	movcs	r3, #4
 8003b40:	9242      	str	r2, [sp, #264]	; 0x108
 8003b42:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	dd41      	ble.n	8003bce <__ssvfiscanf_r+0x26e>
 8003b4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b4c:	0659      	lsls	r1, r3, #25
 8003b4e:	d404      	bmi.n	8003b5a <__ssvfiscanf_r+0x1fa>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	5cba      	ldrb	r2, [r7, r2]
 8003b56:	0712      	lsls	r2, r2, #28
 8003b58:	d440      	bmi.n	8003bdc <__ssvfiscanf_r+0x27c>
 8003b5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	dc4f      	bgt.n	8003c00 <__ssvfiscanf_r+0x2a0>
 8003b60:	466b      	mov	r3, sp
 8003b62:	4622      	mov	r2, r4
 8003b64:	4630      	mov	r0, r6
 8003b66:	a941      	add	r1, sp, #260	; 0x104
 8003b68:	f000 fa0a 	bl	8003f80 <_scanf_chars>
 8003b6c:	2801      	cmp	r0, #1
 8003b6e:	d065      	beq.n	8003c3c <__ssvfiscanf_r+0x2dc>
 8003b70:	2802      	cmp	r0, #2
 8003b72:	f47f af1e 	bne.w	80039b2 <__ssvfiscanf_r+0x52>
 8003b76:	e7cf      	b.n	8003b18 <__ssvfiscanf_r+0x1b8>
 8003b78:	220a      	movs	r2, #10
 8003b7a:	e7dd      	b.n	8003b38 <__ssvfiscanf_r+0x1d8>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9342      	str	r3, [sp, #264]	; 0x108
 8003b80:	2303      	movs	r3, #3
 8003b82:	e7de      	b.n	8003b42 <__ssvfiscanf_r+0x1e2>
 8003b84:	2308      	movs	r3, #8
 8003b86:	9342      	str	r3, [sp, #264]	; 0x108
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e7da      	b.n	8003b42 <__ssvfiscanf_r+0x1e2>
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	4640      	mov	r0, r8
 8003b90:	f000 fb40 	bl	8004214 <__sccl>
 8003b94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b96:	4605      	mov	r5, r0
 8003b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9c:	9341      	str	r3, [sp, #260]	; 0x104
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e7cf      	b.n	8003b42 <__ssvfiscanf_r+0x1e2>
 8003ba2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba8:	9341      	str	r3, [sp, #260]	; 0x104
 8003baa:	2300      	movs	r3, #0
 8003bac:	e7c9      	b.n	8003b42 <__ssvfiscanf_r+0x1e2>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e7c7      	b.n	8003b42 <__ssvfiscanf_r+0x1e2>
 8003bb2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003bb4:	06c3      	lsls	r3, r0, #27
 8003bb6:	f53f aefc 	bmi.w	80039b2 <__ssvfiscanf_r+0x52>
 8003bba:	9b00      	ldr	r3, [sp, #0]
 8003bbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	9100      	str	r1, [sp, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	07c0      	lsls	r0, r0, #31
 8003bc6:	bf4c      	ite	mi
 8003bc8:	801a      	strhmi	r2, [r3, #0]
 8003bca:	601a      	strpl	r2, [r3, #0]
 8003bcc:	e6f1      	b.n	80039b2 <__ssvfiscanf_r+0x52>
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003bd4:	4798      	blx	r3
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d0b7      	beq.n	8003b4a <__ssvfiscanf_r+0x1ea>
 8003bda:	e79d      	b.n	8003b18 <__ssvfiscanf_r+0x1b8>
 8003bdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bde:	3201      	adds	r2, #1
 8003be0:	9245      	str	r2, [sp, #276]	; 0x114
 8003be2:	6862      	ldr	r2, [r4, #4]
 8003be4:	3a01      	subs	r2, #1
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	6062      	str	r2, [r4, #4]
 8003bea:	dd02      	ble.n	8003bf2 <__ssvfiscanf_r+0x292>
 8003bec:	3301      	adds	r3, #1
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	e7ae      	b.n	8003b50 <__ssvfiscanf_r+0x1f0>
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003bf8:	4798      	blx	r3
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0a8      	beq.n	8003b50 <__ssvfiscanf_r+0x1f0>
 8003bfe:	e78b      	b.n	8003b18 <__ssvfiscanf_r+0x1b8>
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	dc06      	bgt.n	8003c12 <__ssvfiscanf_r+0x2b2>
 8003c04:	466b      	mov	r3, sp
 8003c06:	4622      	mov	r2, r4
 8003c08:	4630      	mov	r0, r6
 8003c0a:	a941      	add	r1, sp, #260	; 0x104
 8003c0c:	f000 fa10 	bl	8004030 <_scanf_i>
 8003c10:	e7ac      	b.n	8003b6c <__ssvfiscanf_r+0x20c>
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <__ssvfiscanf_r+0x2f0>)
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f43f aecc 	beq.w	80039b2 <__ssvfiscanf_r+0x52>
 8003c1a:	466b      	mov	r3, sp
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4630      	mov	r0, r6
 8003c20:	a941      	add	r1, sp, #260	; 0x104
 8003c22:	f3af 8000 	nop.w
 8003c26:	e7a1      	b.n	8003b6c <__ssvfiscanf_r+0x20c>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c2e:	bf18      	it	ne
 8003c30:	f04f 30ff 	movne.w	r0, #4294967295
 8003c34:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c3e:	e7f9      	b.n	8003c34 <__ssvfiscanf_r+0x2d4>
 8003c40:	080038ad 	.word	0x080038ad
 8003c44:	08003927 	.word	0x08003927
 8003c48:	08004983 	.word	0x08004983
 8003c4c:	0800493a 	.word	0x0800493a
 8003c50:	00000000 	.word	0x00000000

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	4607      	mov	r7, r0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bfb8      	it	lt
 8003c66:	4613      	movlt	r3, r2
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c6e:	460c      	mov	r4, r1
 8003c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc28      	bgt.n	8003cee <_printf_common+0x9a>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42d      	bmi.n	8003d08 <_printf_common+0xb4>
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d020      	beq.n	8003cfc <_printf_common+0xa8>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	68e5      	ldr	r5, [r4, #12]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf18      	it	ne
 8003cc6:	2500      	movne	r5, #0
 8003cc8:	6832      	ldr	r2, [r6, #0]
 8003cca:	f04f 0600 	mov.w	r6, #0
 8003cce:	68a3      	ldr	r3, [r4, #8]
 8003cd0:	bf08      	it	eq
 8003cd2:	1aad      	subeq	r5, r5, r2
 8003cd4:	6922      	ldr	r2, [r4, #16]
 8003cd6:	bf08      	it	eq
 8003cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	bfc4      	itt	gt
 8003ce0:	1a9b      	subgt	r3, r3, r2
 8003ce2:	18ed      	addgt	r5, r5, r3
 8003ce4:	341a      	adds	r4, #26
 8003ce6:	42b5      	cmp	r5, r6
 8003ce8:	d11a      	bne.n	8003d20 <_printf_common+0xcc>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e008      	b.n	8003d00 <_printf_common+0xac>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4652      	mov	r2, sl
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	47c0      	blx	r8
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d103      	bne.n	8003d04 <_printf_common+0xb0>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d04:	3501      	adds	r5, #1
 8003d06:	e7c4      	b.n	8003c92 <_printf_common+0x3e>
 8003d08:	2030      	movs	r0, #48	; 0x30
 8003d0a:	18e1      	adds	r1, r4, r3
 8003d0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d16:	4422      	add	r2, r4
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d1e:	e7c5      	b.n	8003cac <_printf_common+0x58>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4622      	mov	r2, r4
 8003d24:	4649      	mov	r1, r9
 8003d26:	4638      	mov	r0, r7
 8003d28:	47c0      	blx	r8
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0e6      	beq.n	8003cfc <_printf_common+0xa8>
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7d9      	b.n	8003ce6 <_printf_common+0x92>
	...

08003d34 <_printf_i>:
 8003d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	7e27      	ldrb	r7, [r4, #24]
 8003d3c:	4691      	mov	r9, r2
 8003d3e:	2f78      	cmp	r7, #120	; 0x78
 8003d40:	4680      	mov	r8, r0
 8003d42:	469a      	mov	sl, r3
 8003d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d4a:	d807      	bhi.n	8003d5c <_printf_i+0x28>
 8003d4c:	2f62      	cmp	r7, #98	; 0x62
 8003d4e:	d80a      	bhi.n	8003d66 <_printf_i+0x32>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	f000 80d9 	beq.w	8003f08 <_printf_i+0x1d4>
 8003d56:	2f58      	cmp	r7, #88	; 0x58
 8003d58:	f000 80a4 	beq.w	8003ea4 <_printf_i+0x170>
 8003d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d64:	e03a      	b.n	8003ddc <_printf_i+0xa8>
 8003d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d6a:	2b15      	cmp	r3, #21
 8003d6c:	d8f6      	bhi.n	8003d5c <_printf_i+0x28>
 8003d6e:	a001      	add	r0, pc, #4	; (adr r0, 8003d74 <_printf_i+0x40>)
 8003d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003d5d 	.word	0x08003d5d
 8003d80:	08003d5d 	.word	0x08003d5d
 8003d84:	08003d5d 	.word	0x08003d5d
 8003d88:	08003d5d 	.word	0x08003d5d
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003d5d 	.word	0x08003d5d
 8003d94:	08003d5d 	.word	0x08003d5d
 8003d98:	08003d5d 	.word	0x08003d5d
 8003d9c:	08003d5d 	.word	0x08003d5d
 8003da0:	08003eef 	.word	0x08003eef
 8003da4:	08003e11 	.word	0x08003e11
 8003da8:	08003ed1 	.word	0x08003ed1
 8003dac:	08003d5d 	.word	0x08003d5d
 8003db0:	08003d5d 	.word	0x08003d5d
 8003db4:	08003f11 	.word	0x08003f11
 8003db8:	08003d5d 	.word	0x08003d5d
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003d5d 	.word	0x08003d5d
 8003dc4:	08003d5d 	.word	0x08003d5d
 8003dc8:	08003ed9 	.word	0x08003ed9
 8003dcc:	680b      	ldr	r3, [r1, #0]
 8003dce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	600a      	str	r2, [r1, #0]
 8003dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0a4      	b.n	8003f2a <_printf_i+0x1f6>
 8003de0:	6825      	ldr	r5, [r4, #0]
 8003de2:	6808      	ldr	r0, [r1, #0]
 8003de4:	062e      	lsls	r6, r5, #24
 8003de6:	f100 0304 	add.w	r3, r0, #4
 8003dea:	d50a      	bpl.n	8003e02 <_printf_i+0xce>
 8003dec:	6805      	ldr	r5, [r0, #0]
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xc8>
 8003df4:	232d      	movs	r3, #45	; 0x2d
 8003df6:	426d      	negs	r5, r5
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	485e      	ldr	r0, [pc, #376]	; (8003f78 <_printf_i+0x244>)
 8003e00:	e019      	b.n	8003e36 <_printf_i+0x102>
 8003e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e06:	6805      	ldr	r5, [r0, #0]
 8003e08:	600b      	str	r3, [r1, #0]
 8003e0a:	bf18      	it	ne
 8003e0c:	b22d      	sxthne	r5, r5
 8003e0e:	e7ef      	b.n	8003df0 <_printf_i+0xbc>
 8003e10:	680b      	ldr	r3, [r1, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	1d18      	adds	r0, r3, #4
 8003e16:	6008      	str	r0, [r1, #0]
 8003e18:	0628      	lsls	r0, r5, #24
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0xec>
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <_printf_i+0xf2>
 8003e20:	0669      	lsls	r1, r5, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0xe8>
 8003e24:	881d      	ldrh	r5, [r3, #0]
 8003e26:	2f6f      	cmp	r7, #111	; 0x6f
 8003e28:	bf0c      	ite	eq
 8003e2a:	2308      	moveq	r3, #8
 8003e2c:	230a      	movne	r3, #10
 8003e2e:	4852      	ldr	r0, [pc, #328]	; (8003f78 <_printf_i+0x244>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e36:	6866      	ldr	r6, [r4, #4]
 8003e38:	2e00      	cmp	r6, #0
 8003e3a:	bfa8      	it	ge
 8003e3c:	6821      	ldrge	r1, [r4, #0]
 8003e3e:	60a6      	str	r6, [r4, #8]
 8003e40:	bfa4      	itt	ge
 8003e42:	f021 0104 	bicge.w	r1, r1, #4
 8003e46:	6021      	strge	r1, [r4, #0]
 8003e48:	b90d      	cbnz	r5, 8003e4e <_printf_i+0x11a>
 8003e4a:	2e00      	cmp	r6, #0
 8003e4c:	d04d      	beq.n	8003eea <_printf_i+0x1b6>
 8003e4e:	4616      	mov	r6, r2
 8003e50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e54:	fb03 5711 	mls	r7, r3, r1, r5
 8003e58:	5dc7      	ldrb	r7, [r0, r7]
 8003e5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e5e:	462f      	mov	r7, r5
 8003e60:	42bb      	cmp	r3, r7
 8003e62:	460d      	mov	r5, r1
 8003e64:	d9f4      	bls.n	8003e50 <_printf_i+0x11c>
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d10b      	bne.n	8003e82 <_printf_i+0x14e>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	07df      	lsls	r7, r3, #31
 8003e6e:	d508      	bpl.n	8003e82 <_printf_i+0x14e>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	6861      	ldr	r1, [r4, #4]
 8003e74:	4299      	cmp	r1, r3
 8003e76:	bfde      	ittt	le
 8003e78:	2330      	movle	r3, #48	; 0x30
 8003e7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e82:	1b92      	subs	r2, r2, r6
 8003e84:	6122      	str	r2, [r4, #16]
 8003e86:	464b      	mov	r3, r9
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f8cd a000 	str.w	sl, [sp]
 8003e90:	aa03      	add	r2, sp, #12
 8003e92:	f7ff fedf 	bl	8003c54 <_printf_common>
 8003e96:	3001      	adds	r0, #1
 8003e98:	d14c      	bne.n	8003f34 <_printf_i+0x200>
 8003e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9e:	b004      	add	sp, #16
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	4834      	ldr	r0, [pc, #208]	; (8003f78 <_printf_i+0x244>)
 8003ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eaa:	680e      	ldr	r6, [r1, #0]
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8003eb2:	061f      	lsls	r7, r3, #24
 8003eb4:	600e      	str	r6, [r1, #0]
 8003eb6:	d514      	bpl.n	8003ee2 <_printf_i+0x1ae>
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	bf44      	itt	mi
 8003ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec0:	6023      	strmi	r3, [r4, #0]
 8003ec2:	b91d      	cbnz	r5, 8003ecc <_printf_i+0x198>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f023 0320 	bic.w	r3, r3, #32
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	2310      	movs	r3, #16
 8003ece:	e7af      	b.n	8003e30 <_printf_i+0xfc>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	f043 0320 	orr.w	r3, r3, #32
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	2378      	movs	r3, #120	; 0x78
 8003eda:	4828      	ldr	r0, [pc, #160]	; (8003f7c <_printf_i+0x248>)
 8003edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ee0:	e7e3      	b.n	8003eaa <_printf_i+0x176>
 8003ee2:	065e      	lsls	r6, r3, #25
 8003ee4:	bf48      	it	mi
 8003ee6:	b2ad      	uxthmi	r5, r5
 8003ee8:	e7e6      	b.n	8003eb8 <_printf_i+0x184>
 8003eea:	4616      	mov	r6, r2
 8003eec:	e7bb      	b.n	8003e66 <_printf_i+0x132>
 8003eee:	680b      	ldr	r3, [r1, #0]
 8003ef0:	6826      	ldr	r6, [r4, #0]
 8003ef2:	1d1d      	adds	r5, r3, #4
 8003ef4:	6960      	ldr	r0, [r4, #20]
 8003ef6:	600d      	str	r5, [r1, #0]
 8003ef8:	0635      	lsls	r5, r6, #24
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	d501      	bpl.n	8003f02 <_printf_i+0x1ce>
 8003efe:	6018      	str	r0, [r3, #0]
 8003f00:	e002      	b.n	8003f08 <_printf_i+0x1d4>
 8003f02:	0671      	lsls	r1, r6, #25
 8003f04:	d5fb      	bpl.n	8003efe <_printf_i+0x1ca>
 8003f06:	8018      	strh	r0, [r3, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4616      	mov	r6, r2
 8003f0c:	6123      	str	r3, [r4, #16]
 8003f0e:	e7ba      	b.n	8003e86 <_printf_i+0x152>
 8003f10:	680b      	ldr	r3, [r1, #0]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	600a      	str	r2, [r1, #0]
 8003f16:	681e      	ldr	r6, [r3, #0]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	6862      	ldr	r2, [r4, #4]
 8003f1e:	f000 faf3 	bl	8004508 <memchr>
 8003f22:	b108      	cbz	r0, 8003f28 <_printf_i+0x1f4>
 8003f24:	1b80      	subs	r0, r0, r6
 8003f26:	6060      	str	r0, [r4, #4]
 8003f28:	6863      	ldr	r3, [r4, #4]
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f32:	e7a8      	b.n	8003e86 <_printf_i+0x152>
 8003f34:	4632      	mov	r2, r6
 8003f36:	4649      	mov	r1, r9
 8003f38:	4640      	mov	r0, r8
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	47d0      	blx	sl
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d0ab      	beq.n	8003e9a <_printf_i+0x166>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	079b      	lsls	r3, r3, #30
 8003f46:	d413      	bmi.n	8003f70 <_printf_i+0x23c>
 8003f48:	68e0      	ldr	r0, [r4, #12]
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	4298      	cmp	r0, r3
 8003f4e:	bfb8      	it	lt
 8003f50:	4618      	movlt	r0, r3
 8003f52:	e7a4      	b.n	8003e9e <_printf_i+0x16a>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4632      	mov	r2, r6
 8003f58:	4649      	mov	r1, r9
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	47d0      	blx	sl
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d09b      	beq.n	8003e9a <_printf_i+0x166>
 8003f62:	3501      	adds	r5, #1
 8003f64:	68e3      	ldr	r3, [r4, #12]
 8003f66:	9903      	ldr	r1, [sp, #12]
 8003f68:	1a5b      	subs	r3, r3, r1
 8003f6a:	42ab      	cmp	r3, r5
 8003f6c:	dcf2      	bgt.n	8003f54 <_printf_i+0x220>
 8003f6e:	e7eb      	b.n	8003f48 <_printf_i+0x214>
 8003f70:	2500      	movs	r5, #0
 8003f72:	f104 0619 	add.w	r6, r4, #25
 8003f76:	e7f5      	b.n	8003f64 <_printf_i+0x230>
 8003f78:	08004945 	.word	0x08004945
 8003f7c:	08004956 	.word	0x08004956

08003f80 <_scanf_chars>:
 8003f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f84:	4615      	mov	r5, r2
 8003f86:	688a      	ldr	r2, [r1, #8]
 8003f88:	4680      	mov	r8, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b932      	cbnz	r2, 8003f9c <_scanf_chars+0x1c>
 8003f8e:	698a      	ldr	r2, [r1, #24]
 8003f90:	2a00      	cmp	r2, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2201      	moveq	r2, #1
 8003f96:	f04f 32ff 	movne.w	r2, #4294967295
 8003f9a:	608a      	str	r2, [r1, #8]
 8003f9c:	2700      	movs	r7, #0
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800402c <_scanf_chars+0xac>
 8003fa4:	06d1      	lsls	r1, r2, #27
 8003fa6:	bf5f      	itttt	pl
 8003fa8:	681a      	ldrpl	r2, [r3, #0]
 8003faa:	1d11      	addpl	r1, r2, #4
 8003fac:	6019      	strpl	r1, [r3, #0]
 8003fae:	6816      	ldrpl	r6, [r2, #0]
 8003fb0:	69a0      	ldr	r0, [r4, #24]
 8003fb2:	b188      	cbz	r0, 8003fd8 <_scanf_chars+0x58>
 8003fb4:	2801      	cmp	r0, #1
 8003fb6:	d107      	bne.n	8003fc8 <_scanf_chars+0x48>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	6963      	ldr	r3, [r4, #20]
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	b953      	cbnz	r3, 8003fd8 <_scanf_chars+0x58>
 8003fc2:	bb27      	cbnz	r7, 800400e <_scanf_chars+0x8e>
 8003fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc8:	2802      	cmp	r0, #2
 8003fca:	d120      	bne.n	800400e <_scanf_chars+0x8e>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	d41a      	bmi.n	800400e <_scanf_chars+0x8e>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	3701      	adds	r7, #1
 8003fdc:	06da      	lsls	r2, r3, #27
 8003fde:	bf5e      	ittt	pl
 8003fe0:	682b      	ldrpl	r3, [r5, #0]
 8003fe2:	781b      	ldrbpl	r3, [r3, #0]
 8003fe4:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003fe8:	682a      	ldr	r2, [r5, #0]
 8003fea:	686b      	ldr	r3, [r5, #4]
 8003fec:	3201      	adds	r2, #1
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	68a2      	ldr	r2, [r4, #8]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	606b      	str	r3, [r5, #4]
 8003ff8:	60a2      	str	r2, [r4, #8]
 8003ffa:	b142      	cbz	r2, 800400e <_scanf_chars+0x8e>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	dcd7      	bgt.n	8003fb0 <_scanf_chars+0x30>
 8004000:	4629      	mov	r1, r5
 8004002:	4640      	mov	r0, r8
 8004004:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004008:	4798      	blx	r3
 800400a:	2800      	cmp	r0, #0
 800400c:	d0d0      	beq.n	8003fb0 <_scanf_chars+0x30>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f013 0310 	ands.w	r3, r3, #16
 8004014:	d105      	bne.n	8004022 <_scanf_chars+0xa2>
 8004016:	68e2      	ldr	r2, [r4, #12]
 8004018:	3201      	adds	r2, #1
 800401a:	60e2      	str	r2, [r4, #12]
 800401c:	69a2      	ldr	r2, [r4, #24]
 800401e:	b102      	cbz	r2, 8004022 <_scanf_chars+0xa2>
 8004020:	7033      	strb	r3, [r6, #0]
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	2000      	movs	r0, #0
 8004026:	441f      	add	r7, r3
 8004028:	6127      	str	r7, [r4, #16]
 800402a:	e7cb      	b.n	8003fc4 <_scanf_chars+0x44>
 800402c:	08004983 	.word	0x08004983

08004030 <_scanf_i>:
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	460c      	mov	r4, r1
 8004036:	4698      	mov	r8, r3
 8004038:	4b72      	ldr	r3, [pc, #456]	; (8004204 <_scanf_i+0x1d4>)
 800403a:	b087      	sub	sp, #28
 800403c:	4682      	mov	sl, r0
 800403e:	4616      	mov	r6, r2
 8004040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004044:	ab03      	add	r3, sp, #12
 8004046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800404a:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <_scanf_i+0x1d8>)
 800404c:	69a1      	ldr	r1, [r4, #24]
 800404e:	4a6f      	ldr	r2, [pc, #444]	; (800420c <_scanf_i+0x1dc>)
 8004050:	4627      	mov	r7, r4
 8004052:	2903      	cmp	r1, #3
 8004054:	bf18      	it	ne
 8004056:	461a      	movne	r2, r3
 8004058:	68a3      	ldr	r3, [r4, #8]
 800405a:	9201      	str	r2, [sp, #4]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004062:	bf81      	itttt	hi
 8004064:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004068:	eb03 0905 	addhi.w	r9, r3, r5
 800406c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004070:	60a3      	strhi	r3, [r4, #8]
 8004072:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004076:	bf98      	it	ls
 8004078:	f04f 0900 	movls.w	r9, #0
 800407c:	463d      	mov	r5, r7
 800407e:	f04f 0b00 	mov.w	fp, #0
 8004082:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	6831      	ldr	r1, [r6, #0]
 800408a:	ab03      	add	r3, sp, #12
 800408c:	2202      	movs	r2, #2
 800408e:	7809      	ldrb	r1, [r1, #0]
 8004090:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004094:	f000 fa38 	bl	8004508 <memchr>
 8004098:	b328      	cbz	r0, 80040e6 <_scanf_i+0xb6>
 800409a:	f1bb 0f01 	cmp.w	fp, #1
 800409e:	d159      	bne.n	8004154 <_scanf_i+0x124>
 80040a0:	6862      	ldr	r2, [r4, #4]
 80040a2:	b92a      	cbnz	r2, 80040b0 <_scanf_i+0x80>
 80040a4:	2308      	movs	r3, #8
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	6022      	str	r2, [r4, #0]
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	68a2      	ldr	r2, [r4, #8]
 80040ba:	1e51      	subs	r1, r2, #1
 80040bc:	60a1      	str	r1, [r4, #8]
 80040be:	b192      	cbz	r2, 80040e6 <_scanf_i+0xb6>
 80040c0:	6832      	ldr	r2, [r6, #0]
 80040c2:	1c51      	adds	r1, r2, #1
 80040c4:	6031      	str	r1, [r6, #0]
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	f805 2b01 	strb.w	r2, [r5], #1
 80040cc:	6872      	ldr	r2, [r6, #4]
 80040ce:	3a01      	subs	r2, #1
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	6072      	str	r2, [r6, #4]
 80040d4:	dc07      	bgt.n	80040e6 <_scanf_i+0xb6>
 80040d6:	4631      	mov	r1, r6
 80040d8:	4650      	mov	r0, sl
 80040da:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80040de:	4790      	blx	r2
 80040e0:	2800      	cmp	r0, #0
 80040e2:	f040 8085 	bne.w	80041f0 <_scanf_i+0x1c0>
 80040e6:	f10b 0b01 	add.w	fp, fp, #1
 80040ea:	f1bb 0f03 	cmp.w	fp, #3
 80040ee:	d1cb      	bne.n	8004088 <_scanf_i+0x58>
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	b90b      	cbnz	r3, 80040f8 <_scanf_i+0xc8>
 80040f4:	230a      	movs	r3, #10
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6863      	ldr	r3, [r4, #4]
 80040fa:	4945      	ldr	r1, [pc, #276]	; (8004210 <_scanf_i+0x1e0>)
 80040fc:	6960      	ldr	r0, [r4, #20]
 80040fe:	1ac9      	subs	r1, r1, r3
 8004100:	f000 f888 	bl	8004214 <__sccl>
 8004104:	f04f 0b00 	mov.w	fp, #0
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d03d      	beq.n	800418c <_scanf_i+0x15c>
 8004110:	6831      	ldr	r1, [r6, #0]
 8004112:	6960      	ldr	r0, [r4, #20]
 8004114:	f891 c000 	ldrb.w	ip, [r1]
 8004118:	f810 000c 	ldrb.w	r0, [r0, ip]
 800411c:	2800      	cmp	r0, #0
 800411e:	d035      	beq.n	800418c <_scanf_i+0x15c>
 8004120:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004124:	d124      	bne.n	8004170 <_scanf_i+0x140>
 8004126:	0510      	lsls	r0, r2, #20
 8004128:	d522      	bpl.n	8004170 <_scanf_i+0x140>
 800412a:	f10b 0b01 	add.w	fp, fp, #1
 800412e:	f1b9 0f00 	cmp.w	r9, #0
 8004132:	d003      	beq.n	800413c <_scanf_i+0x10c>
 8004134:	3301      	adds	r3, #1
 8004136:	f109 39ff 	add.w	r9, r9, #4294967295
 800413a:	60a3      	str	r3, [r4, #8]
 800413c:	6873      	ldr	r3, [r6, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	6073      	str	r3, [r6, #4]
 8004144:	dd1b      	ble.n	800417e <_scanf_i+0x14e>
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	6033      	str	r3, [r6, #0]
 800414c:	68a3      	ldr	r3, [r4, #8]
 800414e:	3b01      	subs	r3, #1
 8004150:	60a3      	str	r3, [r4, #8]
 8004152:	e7d9      	b.n	8004108 <_scanf_i+0xd8>
 8004154:	f1bb 0f02 	cmp.w	fp, #2
 8004158:	d1ae      	bne.n	80040b8 <_scanf_i+0x88>
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004160:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004164:	d1bf      	bne.n	80040e6 <_scanf_i+0xb6>
 8004166:	2310      	movs	r3, #16
 8004168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416c:	6063      	str	r3, [r4, #4]
 800416e:	e7a2      	b.n	80040b6 <_scanf_i+0x86>
 8004170:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004174:	6022      	str	r2, [r4, #0]
 8004176:	780b      	ldrb	r3, [r1, #0]
 8004178:	f805 3b01 	strb.w	r3, [r5], #1
 800417c:	e7de      	b.n	800413c <_scanf_i+0x10c>
 800417e:	4631      	mov	r1, r6
 8004180:	4650      	mov	r0, sl
 8004182:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004186:	4798      	blx	r3
 8004188:	2800      	cmp	r0, #0
 800418a:	d0df      	beq.n	800414c <_scanf_i+0x11c>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	05d9      	lsls	r1, r3, #23
 8004190:	d50d      	bpl.n	80041ae <_scanf_i+0x17e>
 8004192:	42bd      	cmp	r5, r7
 8004194:	d909      	bls.n	80041aa <_scanf_i+0x17a>
 8004196:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800419a:	4632      	mov	r2, r6
 800419c:	4650      	mov	r0, sl
 800419e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80041a6:	4798      	blx	r3
 80041a8:	464d      	mov	r5, r9
 80041aa:	42bd      	cmp	r5, r7
 80041ac:	d028      	beq.n	8004200 <_scanf_i+0x1d0>
 80041ae:	6822      	ldr	r2, [r4, #0]
 80041b0:	f012 0210 	ands.w	r2, r2, #16
 80041b4:	d113      	bne.n	80041de <_scanf_i+0x1ae>
 80041b6:	702a      	strb	r2, [r5, #0]
 80041b8:	4639      	mov	r1, r7
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	4650      	mov	r0, sl
 80041be:	9e01      	ldr	r6, [sp, #4]
 80041c0:	47b0      	blx	r6
 80041c2:	f8d8 3000 	ldr.w	r3, [r8]
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	f8c8 2000 	str.w	r2, [r8]
 80041ce:	f011 0f20 	tst.w	r1, #32
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	d00f      	beq.n	80041f6 <_scanf_i+0x1c6>
 80041d6:	6018      	str	r0, [r3, #0]
 80041d8:	68e3      	ldr	r3, [r4, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60e3      	str	r3, [r4, #12]
 80041de:	2000      	movs	r0, #0
 80041e0:	1bed      	subs	r5, r5, r7
 80041e2:	44ab      	add	fp, r5
 80041e4:	6925      	ldr	r5, [r4, #16]
 80041e6:	445d      	add	r5, fp
 80041e8:	6125      	str	r5, [r4, #16]
 80041ea:	b007      	add	sp, #28
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f0:	f04f 0b00 	mov.w	fp, #0
 80041f4:	e7ca      	b.n	800418c <_scanf_i+0x15c>
 80041f6:	07ca      	lsls	r2, r1, #31
 80041f8:	bf4c      	ite	mi
 80041fa:	8018      	strhmi	r0, [r3, #0]
 80041fc:	6018      	strpl	r0, [r3, #0]
 80041fe:	e7eb      	b.n	80041d8 <_scanf_i+0x1a8>
 8004200:	2001      	movs	r0, #1
 8004202:	e7f2      	b.n	80041ea <_scanf_i+0x1ba>
 8004204:	08004910 	.word	0x08004910
 8004208:	08004491 	.word	0x08004491
 800420c:	08004395 	.word	0x08004395
 8004210:	08004980 	.word	0x08004980

08004214 <__sccl>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	780b      	ldrb	r3, [r1, #0]
 8004218:	4604      	mov	r4, r0
 800421a:	2b5e      	cmp	r3, #94	; 0x5e
 800421c:	bf13      	iteet	ne
 800421e:	2200      	movne	r2, #0
 8004220:	2201      	moveq	r2, #1
 8004222:	784b      	ldrbeq	r3, [r1, #1]
 8004224:	1c48      	addne	r0, r1, #1
 8004226:	bf08      	it	eq
 8004228:	1c88      	addeq	r0, r1, #2
 800422a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800422e:	1e61      	subs	r1, r4, #1
 8004230:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004234:	42a9      	cmp	r1, r5
 8004236:	d1fb      	bne.n	8004230 <__sccl+0x1c>
 8004238:	b90b      	cbnz	r3, 800423e <__sccl+0x2a>
 800423a:	3801      	subs	r0, #1
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	f082 0101 	eor.w	r1, r2, #1
 8004242:	54e1      	strb	r1, [r4, r3]
 8004244:	1c42      	adds	r2, r0, #1
 8004246:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800424a:	4610      	mov	r0, r2
 800424c:	2d2d      	cmp	r5, #45	; 0x2d
 800424e:	f102 36ff 	add.w	r6, r2, #4294967295
 8004252:	d006      	beq.n	8004262 <__sccl+0x4e>
 8004254:	2d5d      	cmp	r5, #93	; 0x5d
 8004256:	d0f1      	beq.n	800423c <__sccl+0x28>
 8004258:	b90d      	cbnz	r5, 800425e <__sccl+0x4a>
 800425a:	4630      	mov	r0, r6
 800425c:	e7ee      	b.n	800423c <__sccl+0x28>
 800425e:	462b      	mov	r3, r5
 8004260:	e7ef      	b.n	8004242 <__sccl+0x2e>
 8004262:	7816      	ldrb	r6, [r2, #0]
 8004264:	2e5d      	cmp	r6, #93	; 0x5d
 8004266:	d0fa      	beq.n	800425e <__sccl+0x4a>
 8004268:	42b3      	cmp	r3, r6
 800426a:	dcf8      	bgt.n	800425e <__sccl+0x4a>
 800426c:	4618      	mov	r0, r3
 800426e:	3001      	adds	r0, #1
 8004270:	4286      	cmp	r6, r0
 8004272:	5421      	strb	r1, [r4, r0]
 8004274:	dcfb      	bgt.n	800426e <__sccl+0x5a>
 8004276:	43d8      	mvns	r0, r3
 8004278:	4430      	add	r0, r6
 800427a:	42b3      	cmp	r3, r6
 800427c:	bfa8      	it	ge
 800427e:	2000      	movge	r0, #0
 8004280:	1c5d      	adds	r5, r3, #1
 8004282:	182b      	adds	r3, r5, r0
 8004284:	3202      	adds	r2, #2
 8004286:	e7de      	b.n	8004246 <__sccl+0x32>

08004288 <_strtol_l.isra.0>:
 8004288:	2b01      	cmp	r3, #1
 800428a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428e:	4686      	mov	lr, r0
 8004290:	d001      	beq.n	8004296 <_strtol_l.isra.0+0xe>
 8004292:	2b24      	cmp	r3, #36	; 0x24
 8004294:	d906      	bls.n	80042a4 <_strtol_l.isra.0+0x1c>
 8004296:	f7ff f92f 	bl	80034f8 <__errno>
 800429a:	2316      	movs	r3, #22
 800429c:	6003      	str	r3, [r0, #0]
 800429e:	2000      	movs	r0, #0
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a4:	468c      	mov	ip, r1
 80042a6:	4e3a      	ldr	r6, [pc, #232]	; (8004390 <_strtol_l.isra.0+0x108>)
 80042a8:	4660      	mov	r0, ip
 80042aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80042ae:	5da5      	ldrb	r5, [r4, r6]
 80042b0:	f015 0508 	ands.w	r5, r5, #8
 80042b4:	d1f8      	bne.n	80042a8 <_strtol_l.isra.0+0x20>
 80042b6:	2c2d      	cmp	r4, #45	; 0x2d
 80042b8:	d133      	bne.n	8004322 <_strtol_l.isra.0+0x9a>
 80042ba:	f04f 0801 	mov.w	r8, #1
 80042be:	f89c 4000 	ldrb.w	r4, [ip]
 80042c2:	f100 0c02 	add.w	ip, r0, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d05d      	beq.n	8004386 <_strtol_l.isra.0+0xfe>
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d10c      	bne.n	80042e8 <_strtol_l.isra.0+0x60>
 80042ce:	2c30      	cmp	r4, #48	; 0x30
 80042d0:	d10a      	bne.n	80042e8 <_strtol_l.isra.0+0x60>
 80042d2:	f89c 0000 	ldrb.w	r0, [ip]
 80042d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80042da:	2858      	cmp	r0, #88	; 0x58
 80042dc:	d14e      	bne.n	800437c <_strtol_l.isra.0+0xf4>
 80042de:	2310      	movs	r3, #16
 80042e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80042e4:	f10c 0c02 	add.w	ip, ip, #2
 80042e8:	2500      	movs	r5, #0
 80042ea:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80042ee:	3f01      	subs	r7, #1
 80042f0:	fbb7 f9f3 	udiv	r9, r7, r3
 80042f4:	4628      	mov	r0, r5
 80042f6:	fb03 7a19 	mls	sl, r3, r9, r7
 80042fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80042fe:	2e09      	cmp	r6, #9
 8004300:	d818      	bhi.n	8004334 <_strtol_l.isra.0+0xac>
 8004302:	4634      	mov	r4, r6
 8004304:	42a3      	cmp	r3, r4
 8004306:	dd24      	ble.n	8004352 <_strtol_l.isra.0+0xca>
 8004308:	2d00      	cmp	r5, #0
 800430a:	db1f      	blt.n	800434c <_strtol_l.isra.0+0xc4>
 800430c:	4581      	cmp	r9, r0
 800430e:	d31d      	bcc.n	800434c <_strtol_l.isra.0+0xc4>
 8004310:	d101      	bne.n	8004316 <_strtol_l.isra.0+0x8e>
 8004312:	45a2      	cmp	sl, r4
 8004314:	db1a      	blt.n	800434c <_strtol_l.isra.0+0xc4>
 8004316:	2501      	movs	r5, #1
 8004318:	fb00 4003 	mla	r0, r0, r3, r4
 800431c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004320:	e7eb      	b.n	80042fa <_strtol_l.isra.0+0x72>
 8004322:	2c2b      	cmp	r4, #43	; 0x2b
 8004324:	bf08      	it	eq
 8004326:	f89c 4000 	ldrbeq.w	r4, [ip]
 800432a:	46a8      	mov	r8, r5
 800432c:	bf08      	it	eq
 800432e:	f100 0c02 	addeq.w	ip, r0, #2
 8004332:	e7c8      	b.n	80042c6 <_strtol_l.isra.0+0x3e>
 8004334:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004338:	2e19      	cmp	r6, #25
 800433a:	d801      	bhi.n	8004340 <_strtol_l.isra.0+0xb8>
 800433c:	3c37      	subs	r4, #55	; 0x37
 800433e:	e7e1      	b.n	8004304 <_strtol_l.isra.0+0x7c>
 8004340:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004344:	2e19      	cmp	r6, #25
 8004346:	d804      	bhi.n	8004352 <_strtol_l.isra.0+0xca>
 8004348:	3c57      	subs	r4, #87	; 0x57
 800434a:	e7db      	b.n	8004304 <_strtol_l.isra.0+0x7c>
 800434c:	f04f 35ff 	mov.w	r5, #4294967295
 8004350:	e7e4      	b.n	800431c <_strtol_l.isra.0+0x94>
 8004352:	2d00      	cmp	r5, #0
 8004354:	da08      	bge.n	8004368 <_strtol_l.isra.0+0xe0>
 8004356:	2322      	movs	r3, #34	; 0x22
 8004358:	4638      	mov	r0, r7
 800435a:	f8ce 3000 	str.w	r3, [lr]
 800435e:	2a00      	cmp	r2, #0
 8004360:	d09e      	beq.n	80042a0 <_strtol_l.isra.0+0x18>
 8004362:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004366:	e007      	b.n	8004378 <_strtol_l.isra.0+0xf0>
 8004368:	f1b8 0f00 	cmp.w	r8, #0
 800436c:	d000      	beq.n	8004370 <_strtol_l.isra.0+0xe8>
 800436e:	4240      	negs	r0, r0
 8004370:	2a00      	cmp	r2, #0
 8004372:	d095      	beq.n	80042a0 <_strtol_l.isra.0+0x18>
 8004374:	2d00      	cmp	r5, #0
 8004376:	d1f4      	bne.n	8004362 <_strtol_l.isra.0+0xda>
 8004378:	6011      	str	r1, [r2, #0]
 800437a:	e791      	b.n	80042a0 <_strtol_l.isra.0+0x18>
 800437c:	2430      	movs	r4, #48	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1b2      	bne.n	80042e8 <_strtol_l.isra.0+0x60>
 8004382:	2308      	movs	r3, #8
 8004384:	e7b0      	b.n	80042e8 <_strtol_l.isra.0+0x60>
 8004386:	2c30      	cmp	r4, #48	; 0x30
 8004388:	d0a3      	beq.n	80042d2 <_strtol_l.isra.0+0x4a>
 800438a:	230a      	movs	r3, #10
 800438c:	e7ac      	b.n	80042e8 <_strtol_l.isra.0+0x60>
 800438e:	bf00      	nop
 8004390:	08004983 	.word	0x08004983

08004394 <_strtol_r>:
 8004394:	f7ff bf78 	b.w	8004288 <_strtol_l.isra.0>

08004398 <_strtoul_l.isra.0>:
 8004398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800439c:	468c      	mov	ip, r1
 800439e:	4686      	mov	lr, r0
 80043a0:	4e3a      	ldr	r6, [pc, #232]	; (800448c <_strtoul_l.isra.0+0xf4>)
 80043a2:	4660      	mov	r0, ip
 80043a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80043a8:	5da5      	ldrb	r5, [r4, r6]
 80043aa:	f015 0508 	ands.w	r5, r5, #8
 80043ae:	d1f8      	bne.n	80043a2 <_strtoul_l.isra.0+0xa>
 80043b0:	2c2d      	cmp	r4, #45	; 0x2d
 80043b2:	d134      	bne.n	800441e <_strtoul_l.isra.0+0x86>
 80043b4:	f04f 0801 	mov.w	r8, #1
 80043b8:	f89c 4000 	ldrb.w	r4, [ip]
 80043bc:	f100 0c02 	add.w	ip, r0, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05e      	beq.n	8004482 <_strtoul_l.isra.0+0xea>
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d10c      	bne.n	80043e2 <_strtoul_l.isra.0+0x4a>
 80043c8:	2c30      	cmp	r4, #48	; 0x30
 80043ca:	d10a      	bne.n	80043e2 <_strtoul_l.isra.0+0x4a>
 80043cc:	f89c 0000 	ldrb.w	r0, [ip]
 80043d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80043d4:	2858      	cmp	r0, #88	; 0x58
 80043d6:	d14f      	bne.n	8004478 <_strtoul_l.isra.0+0xe0>
 80043d8:	2310      	movs	r3, #16
 80043da:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80043de:	f10c 0c02 	add.w	ip, ip, #2
 80043e2:	f04f 37ff 	mov.w	r7, #4294967295
 80043e6:	fbb7 f7f3 	udiv	r7, r7, r3
 80043ea:	2500      	movs	r5, #0
 80043ec:	fb03 f907 	mul.w	r9, r3, r7
 80043f0:	4628      	mov	r0, r5
 80043f2:	ea6f 0909 	mvn.w	r9, r9
 80043f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80043fa:	2e09      	cmp	r6, #9
 80043fc:	d818      	bhi.n	8004430 <_strtoul_l.isra.0+0x98>
 80043fe:	4634      	mov	r4, r6
 8004400:	42a3      	cmp	r3, r4
 8004402:	dd24      	ble.n	800444e <_strtoul_l.isra.0+0xb6>
 8004404:	2d00      	cmp	r5, #0
 8004406:	db1f      	blt.n	8004448 <_strtoul_l.isra.0+0xb0>
 8004408:	4287      	cmp	r7, r0
 800440a:	d31d      	bcc.n	8004448 <_strtoul_l.isra.0+0xb0>
 800440c:	d101      	bne.n	8004412 <_strtoul_l.isra.0+0x7a>
 800440e:	45a1      	cmp	r9, r4
 8004410:	db1a      	blt.n	8004448 <_strtoul_l.isra.0+0xb0>
 8004412:	2501      	movs	r5, #1
 8004414:	fb00 4003 	mla	r0, r0, r3, r4
 8004418:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800441c:	e7eb      	b.n	80043f6 <_strtoul_l.isra.0+0x5e>
 800441e:	2c2b      	cmp	r4, #43	; 0x2b
 8004420:	bf08      	it	eq
 8004422:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004426:	46a8      	mov	r8, r5
 8004428:	bf08      	it	eq
 800442a:	f100 0c02 	addeq.w	ip, r0, #2
 800442e:	e7c7      	b.n	80043c0 <_strtoul_l.isra.0+0x28>
 8004430:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004434:	2e19      	cmp	r6, #25
 8004436:	d801      	bhi.n	800443c <_strtoul_l.isra.0+0xa4>
 8004438:	3c37      	subs	r4, #55	; 0x37
 800443a:	e7e1      	b.n	8004400 <_strtoul_l.isra.0+0x68>
 800443c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004440:	2e19      	cmp	r6, #25
 8004442:	d804      	bhi.n	800444e <_strtoul_l.isra.0+0xb6>
 8004444:	3c57      	subs	r4, #87	; 0x57
 8004446:	e7db      	b.n	8004400 <_strtoul_l.isra.0+0x68>
 8004448:	f04f 35ff 	mov.w	r5, #4294967295
 800444c:	e7e4      	b.n	8004418 <_strtoul_l.isra.0+0x80>
 800444e:	2d00      	cmp	r5, #0
 8004450:	da07      	bge.n	8004462 <_strtoul_l.isra.0+0xca>
 8004452:	2322      	movs	r3, #34	; 0x22
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	f8ce 3000 	str.w	r3, [lr]
 800445c:	b942      	cbnz	r2, 8004470 <_strtoul_l.isra.0+0xd8>
 800445e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004462:	f1b8 0f00 	cmp.w	r8, #0
 8004466:	d000      	beq.n	800446a <_strtoul_l.isra.0+0xd2>
 8004468:	4240      	negs	r0, r0
 800446a:	2a00      	cmp	r2, #0
 800446c:	d0f7      	beq.n	800445e <_strtoul_l.isra.0+0xc6>
 800446e:	b10d      	cbz	r5, 8004474 <_strtoul_l.isra.0+0xdc>
 8004470:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	e7f2      	b.n	800445e <_strtoul_l.isra.0+0xc6>
 8004478:	2430      	movs	r4, #48	; 0x30
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1b1      	bne.n	80043e2 <_strtoul_l.isra.0+0x4a>
 800447e:	2308      	movs	r3, #8
 8004480:	e7af      	b.n	80043e2 <_strtoul_l.isra.0+0x4a>
 8004482:	2c30      	cmp	r4, #48	; 0x30
 8004484:	d0a2      	beq.n	80043cc <_strtoul_l.isra.0+0x34>
 8004486:	230a      	movs	r3, #10
 8004488:	e7ab      	b.n	80043e2 <_strtoul_l.isra.0+0x4a>
 800448a:	bf00      	nop
 800448c:	08004983 	.word	0x08004983

08004490 <_strtoul_r>:
 8004490:	f7ff bf82 	b.w	8004398 <_strtoul_l.isra.0>

08004494 <__submore>:
 8004494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004498:	460c      	mov	r4, r1
 800449a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800449c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a0:	4299      	cmp	r1, r3
 80044a2:	d11b      	bne.n	80044dc <__submore+0x48>
 80044a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044a8:	f000 f8b0 	bl	800460c <_malloc_r>
 80044ac:	b918      	cbnz	r0, 80044b6 <__submore+0x22>
 80044ae:	f04f 30ff 	mov.w	r0, #4294967295
 80044b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80044bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80044c0:	6360      	str	r0, [r4, #52]	; 0x34
 80044c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80044c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80044ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80044ce:	7043      	strb	r3, [r0, #1]
 80044d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80044d4:	7003      	strb	r3, [r0, #0]
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	2000      	movs	r0, #0
 80044da:	e7ea      	b.n	80044b2 <__submore+0x1e>
 80044dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80044de:	0077      	lsls	r7, r6, #1
 80044e0:	463a      	mov	r2, r7
 80044e2:	f000 f8ed 	bl	80046c0 <_realloc_r>
 80044e6:	4605      	mov	r5, r0
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d0e0      	beq.n	80044ae <__submore+0x1a>
 80044ec:	eb00 0806 	add.w	r8, r0, r6
 80044f0:	4601      	mov	r1, r0
 80044f2:	4632      	mov	r2, r6
 80044f4:	4640      	mov	r0, r8
 80044f6:	f000 f815 	bl	8004524 <memcpy>
 80044fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80044fe:	f8c4 8000 	str.w	r8, [r4]
 8004502:	e7e9      	b.n	80044d8 <__submore+0x44>

08004504 <__retarget_lock_acquire_recursive>:
 8004504:	4770      	bx	lr

08004506 <__retarget_lock_release_recursive>:
 8004506:	4770      	bx	lr

08004508 <memchr>:
 8004508:	4603      	mov	r3, r0
 800450a:	b510      	push	{r4, lr}
 800450c:	b2c9      	uxtb	r1, r1
 800450e:	4402      	add	r2, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	4618      	mov	r0, r3
 8004514:	d101      	bne.n	800451a <memchr+0x12>
 8004516:	2000      	movs	r0, #0
 8004518:	e003      	b.n	8004522 <memchr+0x1a>
 800451a:	7804      	ldrb	r4, [r0, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	428c      	cmp	r4, r1
 8004520:	d1f6      	bne.n	8004510 <memchr+0x8>
 8004522:	bd10      	pop	{r4, pc}

08004524 <memcpy>:
 8004524:	440a      	add	r2, r1
 8004526:	4291      	cmp	r1, r2
 8004528:	f100 33ff 	add.w	r3, r0, #4294967295
 800452c:	d100      	bne.n	8004530 <memcpy+0xc>
 800452e:	4770      	bx	lr
 8004530:	b510      	push	{r4, lr}
 8004532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004536:	4291      	cmp	r1, r2
 8004538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800453c:	d1f9      	bne.n	8004532 <memcpy+0xe>
 800453e:	bd10      	pop	{r4, pc}

08004540 <memmove>:
 8004540:	4288      	cmp	r0, r1
 8004542:	b510      	push	{r4, lr}
 8004544:	eb01 0402 	add.w	r4, r1, r2
 8004548:	d902      	bls.n	8004550 <memmove+0x10>
 800454a:	4284      	cmp	r4, r0
 800454c:	4623      	mov	r3, r4
 800454e:	d807      	bhi.n	8004560 <memmove+0x20>
 8004550:	1e43      	subs	r3, r0, #1
 8004552:	42a1      	cmp	r1, r4
 8004554:	d008      	beq.n	8004568 <memmove+0x28>
 8004556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800455a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800455e:	e7f8      	b.n	8004552 <memmove+0x12>
 8004560:	4601      	mov	r1, r0
 8004562:	4402      	add	r2, r0
 8004564:	428a      	cmp	r2, r1
 8004566:	d100      	bne.n	800456a <memmove+0x2a>
 8004568:	bd10      	pop	{r4, pc}
 800456a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800456e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004572:	e7f7      	b.n	8004564 <memmove+0x24>

08004574 <_free_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4605      	mov	r5, r0
 8004578:	2900      	cmp	r1, #0
 800457a:	d043      	beq.n	8004604 <_free_r+0x90>
 800457c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004580:	1f0c      	subs	r4, r1, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfb8      	it	lt
 8004586:	18e4      	addlt	r4, r4, r3
 8004588:	f000 f8d0 	bl	800472c <__malloc_lock>
 800458c:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <_free_r+0x94>)
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	4610      	mov	r0, r2
 8004592:	b933      	cbnz	r3, 80045a2 <_free_r+0x2e>
 8004594:	6063      	str	r3, [r4, #4]
 8004596:	6014      	str	r4, [r2, #0]
 8004598:	4628      	mov	r0, r5
 800459a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800459e:	f000 b8cb 	b.w	8004738 <__malloc_unlock>
 80045a2:	42a3      	cmp	r3, r4
 80045a4:	d90a      	bls.n	80045bc <_free_r+0x48>
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	1862      	adds	r2, r4, r1
 80045aa:	4293      	cmp	r3, r2
 80045ac:	bf01      	itttt	eq
 80045ae:	681a      	ldreq	r2, [r3, #0]
 80045b0:	685b      	ldreq	r3, [r3, #4]
 80045b2:	1852      	addeq	r2, r2, r1
 80045b4:	6022      	streq	r2, [r4, #0]
 80045b6:	6063      	str	r3, [r4, #4]
 80045b8:	6004      	str	r4, [r0, #0]
 80045ba:	e7ed      	b.n	8004598 <_free_r+0x24>
 80045bc:	461a      	mov	r2, r3
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	b10b      	cbz	r3, 80045c6 <_free_r+0x52>
 80045c2:	42a3      	cmp	r3, r4
 80045c4:	d9fa      	bls.n	80045bc <_free_r+0x48>
 80045c6:	6811      	ldr	r1, [r2, #0]
 80045c8:	1850      	adds	r0, r2, r1
 80045ca:	42a0      	cmp	r0, r4
 80045cc:	d10b      	bne.n	80045e6 <_free_r+0x72>
 80045ce:	6820      	ldr	r0, [r4, #0]
 80045d0:	4401      	add	r1, r0
 80045d2:	1850      	adds	r0, r2, r1
 80045d4:	4283      	cmp	r3, r0
 80045d6:	6011      	str	r1, [r2, #0]
 80045d8:	d1de      	bne.n	8004598 <_free_r+0x24>
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4401      	add	r1, r0
 80045e0:	6011      	str	r1, [r2, #0]
 80045e2:	6053      	str	r3, [r2, #4]
 80045e4:	e7d8      	b.n	8004598 <_free_r+0x24>
 80045e6:	d902      	bls.n	80045ee <_free_r+0x7a>
 80045e8:	230c      	movs	r3, #12
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	e7d4      	b.n	8004598 <_free_r+0x24>
 80045ee:	6820      	ldr	r0, [r4, #0]
 80045f0:	1821      	adds	r1, r4, r0
 80045f2:	428b      	cmp	r3, r1
 80045f4:	bf01      	itttt	eq
 80045f6:	6819      	ldreq	r1, [r3, #0]
 80045f8:	685b      	ldreq	r3, [r3, #4]
 80045fa:	1809      	addeq	r1, r1, r0
 80045fc:	6021      	streq	r1, [r4, #0]
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	6054      	str	r4, [r2, #4]
 8004602:	e7c9      	b.n	8004598 <_free_r+0x24>
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	bf00      	nop
 8004608:	200000ac 	.word	0x200000ac

0800460c <_malloc_r>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	1ccd      	adds	r5, r1, #3
 8004610:	f025 0503 	bic.w	r5, r5, #3
 8004614:	3508      	adds	r5, #8
 8004616:	2d0c      	cmp	r5, #12
 8004618:	bf38      	it	cc
 800461a:	250c      	movcc	r5, #12
 800461c:	2d00      	cmp	r5, #0
 800461e:	4606      	mov	r6, r0
 8004620:	db01      	blt.n	8004626 <_malloc_r+0x1a>
 8004622:	42a9      	cmp	r1, r5
 8004624:	d903      	bls.n	800462e <_malloc_r+0x22>
 8004626:	230c      	movs	r3, #12
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	2000      	movs	r0, #0
 800462c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462e:	f000 f87d 	bl	800472c <__malloc_lock>
 8004632:	4921      	ldr	r1, [pc, #132]	; (80046b8 <_malloc_r+0xac>)
 8004634:	680a      	ldr	r2, [r1, #0]
 8004636:	4614      	mov	r4, r2
 8004638:	b99c      	cbnz	r4, 8004662 <_malloc_r+0x56>
 800463a:	4f20      	ldr	r7, [pc, #128]	; (80046bc <_malloc_r+0xb0>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	b923      	cbnz	r3, 800464a <_malloc_r+0x3e>
 8004640:	4621      	mov	r1, r4
 8004642:	4630      	mov	r0, r6
 8004644:	f000 f862 	bl	800470c <_sbrk_r>
 8004648:	6038      	str	r0, [r7, #0]
 800464a:	4629      	mov	r1, r5
 800464c:	4630      	mov	r0, r6
 800464e:	f000 f85d 	bl	800470c <_sbrk_r>
 8004652:	1c43      	adds	r3, r0, #1
 8004654:	d123      	bne.n	800469e <_malloc_r+0x92>
 8004656:	230c      	movs	r3, #12
 8004658:	4630      	mov	r0, r6
 800465a:	6033      	str	r3, [r6, #0]
 800465c:	f000 f86c 	bl	8004738 <__malloc_unlock>
 8004660:	e7e3      	b.n	800462a <_malloc_r+0x1e>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	1b5b      	subs	r3, r3, r5
 8004666:	d417      	bmi.n	8004698 <_malloc_r+0x8c>
 8004668:	2b0b      	cmp	r3, #11
 800466a:	d903      	bls.n	8004674 <_malloc_r+0x68>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	441c      	add	r4, r3
 8004670:	6025      	str	r5, [r4, #0]
 8004672:	e004      	b.n	800467e <_malloc_r+0x72>
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	42a2      	cmp	r2, r4
 8004678:	bf0c      	ite	eq
 800467a:	600b      	streq	r3, [r1, #0]
 800467c:	6053      	strne	r3, [r2, #4]
 800467e:	4630      	mov	r0, r6
 8004680:	f000 f85a 	bl	8004738 <__malloc_unlock>
 8004684:	f104 000b 	add.w	r0, r4, #11
 8004688:	1d23      	adds	r3, r4, #4
 800468a:	f020 0007 	bic.w	r0, r0, #7
 800468e:	1ac2      	subs	r2, r0, r3
 8004690:	d0cc      	beq.n	800462c <_malloc_r+0x20>
 8004692:	1a1b      	subs	r3, r3, r0
 8004694:	50a3      	str	r3, [r4, r2]
 8004696:	e7c9      	b.n	800462c <_malloc_r+0x20>
 8004698:	4622      	mov	r2, r4
 800469a:	6864      	ldr	r4, [r4, #4]
 800469c:	e7cc      	b.n	8004638 <_malloc_r+0x2c>
 800469e:	1cc4      	adds	r4, r0, #3
 80046a0:	f024 0403 	bic.w	r4, r4, #3
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d0e3      	beq.n	8004670 <_malloc_r+0x64>
 80046a8:	1a21      	subs	r1, r4, r0
 80046aa:	4630      	mov	r0, r6
 80046ac:	f000 f82e 	bl	800470c <_sbrk_r>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d1dd      	bne.n	8004670 <_malloc_r+0x64>
 80046b4:	e7cf      	b.n	8004656 <_malloc_r+0x4a>
 80046b6:	bf00      	nop
 80046b8:	200000ac 	.word	0x200000ac
 80046bc:	200000b0 	.word	0x200000b0

080046c0 <_realloc_r>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	4607      	mov	r7, r0
 80046c4:	4614      	mov	r4, r2
 80046c6:	460e      	mov	r6, r1
 80046c8:	b921      	cbnz	r1, 80046d4 <_realloc_r+0x14>
 80046ca:	4611      	mov	r1, r2
 80046cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046d0:	f7ff bf9c 	b.w	800460c <_malloc_r>
 80046d4:	b922      	cbnz	r2, 80046e0 <_realloc_r+0x20>
 80046d6:	f7ff ff4d 	bl	8004574 <_free_r>
 80046da:	4625      	mov	r5, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e0:	f000 f830 	bl	8004744 <_malloc_usable_size_r>
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d20f      	bcs.n	8004708 <_realloc_r+0x48>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4638      	mov	r0, r7
 80046ec:	f7ff ff8e 	bl	800460c <_malloc_r>
 80046f0:	4605      	mov	r5, r0
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d0f2      	beq.n	80046dc <_realloc_r+0x1c>
 80046f6:	4631      	mov	r1, r6
 80046f8:	4622      	mov	r2, r4
 80046fa:	f7ff ff13 	bl	8004524 <memcpy>
 80046fe:	4631      	mov	r1, r6
 8004700:	4638      	mov	r0, r7
 8004702:	f7ff ff37 	bl	8004574 <_free_r>
 8004706:	e7e9      	b.n	80046dc <_realloc_r+0x1c>
 8004708:	4635      	mov	r5, r6
 800470a:	e7e7      	b.n	80046dc <_realloc_r+0x1c>

0800470c <_sbrk_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	2300      	movs	r3, #0
 8004710:	4d05      	ldr	r5, [pc, #20]	; (8004728 <_sbrk_r+0x1c>)
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	f7fc f8a6 	bl	8000868 <_sbrk>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_sbrk_r+0x1a>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_sbrk_r+0x1a>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000994 	.word	0x20000994

0800472c <__malloc_lock>:
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__malloc_lock+0x8>)
 800472e:	f7ff bee9 	b.w	8004504 <__retarget_lock_acquire_recursive>
 8004732:	bf00      	nop
 8004734:	2000099c 	.word	0x2000099c

08004738 <__malloc_unlock>:
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <__malloc_unlock+0x8>)
 800473a:	f7ff bee4 	b.w	8004506 <__retarget_lock_release_recursive>
 800473e:	bf00      	nop
 8004740:	2000099c 	.word	0x2000099c

08004744 <_malloc_usable_size_r>:
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f18      	subs	r0, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfbc      	itt	lt
 800474e:	580b      	ldrlt	r3, [r1, r0]
 8004750:	18c0      	addlt	r0, r0, r3
 8004752:	4770      	bx	lr

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
